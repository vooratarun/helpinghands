<?php
 define('mPDF_VERSION','5.7'); define('_MPDFK', (72/25.4)); define('AUTOFONT_CJK',1); define('AUTOFONT_THAIVIET',2); define('AUTOFONT_RTL',4); define('AUTOFONT_INDIC',8); define('AUTOFONT_ALL',15); define('_BORDER_ALL',15); define('_BORDER_TOP',8); define('_BORDER_RIGHT',4); define('_BORDER_BOTTOM',2); define('_BORDER_LEFT',1); if (!defined('_MPDF_PATH')) define('_MPDF_PATH', dirname(preg_replace('/\\\\/','/',__FILE__)) . '/'); if (!defined('_MPDF_URI')) define('_MPDF_URI',_MPDF_PATH); require_once(_MPDF_PATH.'includes/functions.php'); require_once(_MPDF_PATH.'config_cp.php'); if (!defined('_JPGRAPH_PATH')) define("_JPGRAPH_PATH", _MPDF_PATH.'jpgraph/'); if (!defined('_MPDF_TEMP_PATH')) define("_MPDF_TEMP_PATH", _MPDF_PATH.'tmp/'); if (!defined('_MPDF_TTFONTPATH')) { define('_MPDF_TTFONTPATH',_MPDF_PATH.'ttfonts/'); } if (!defined('_MPDF_TTFONTDATAPATH')) { define('_MPDF_TTFONTDATAPATH',_MPDF_PATH.'ttfontdata/'); } $errorlevel=error_reporting(); $errorlevel=error_reporting($errorlevel & ~E_NOTICE); if(function_exists("date_default_timezone_set")) { if (ini_get("date.timezone")=="") { date_default_timezone_set("Europe/London"); } } if (!function_exists("mb_strlen")) { die("Error - mPDF requires mb_string functions. Ensure that PHP is compiled with php_mbstring.dll enabled."); } if (!defined('PHP_VERSION_ID')) { $version = explode('.', PHP_VERSION); define('PHP_VERSION_ID', ($version[0] * 10000 + $version[1] * 100 + $version[2])); } $test = pack("d", 134455.474557333333666); define("_DSIZE", strlen($test)); class mPDF { var $CJKforceend; var $h2bookmarks; var $h2toc; var $decimal_align; var $margBuffer; var $splitTableBorderWidth; var $cacheTables; var $bookmarkStyles; var $useActiveForms; var $repackageTTF; var $allowCJKorphans; var $allowCJKoverflow; var $useKerning; var $restrictColorSpace; var $bleedMargin; var $crossMarkMargin; var $cropMarkMargin; var $cropMarkLength; var $nonPrintMargin; var $PDFX; var $PDFXauto; var $PDFA; var $PDFAauto; var $ICCProfile; var $printers_info; var $iterationCounter; var $smCapsScale; var $smCapsStretch; var $backupSubsFont; var $backupSIPFont; var $debugfonts; var $useAdobeCJK; var $percentSubset; var $maxTTFFilesize; var $BMPonly; var $tableMinSizePriority; var $dpi; var $watermarkImgAlphaBlend; var $watermarkImgBehind; var $justifyB4br; var $packTableData; var $pgsIns; var $simpleTables; var $enableImports; var $debug; var $showStats; var $setAutoTopMargin; var $setAutoBottomMargin; var $autoMarginPadding; var $collapseBlockMargins; var $falseBoldWeight; var $normalLineheight; var $progressBar; var $incrementFPR1; var $incrementFPR2; var $incrementFPR3; var $incrementFPR4; var $SHYlang; var $SHYleftmin; var $SHYrightmin; var $SHYcharmin; var $SHYcharmax; var $SHYlanguages; var $pagenumPrefix; var $pagenumSuffix; var $nbpgPrefix; var $nbpgSuffix; var $showImageErrors; var $allow_output_buffering; var $autoPadding; var $useGraphs; var $autoFontGroupSize; var $tabSpaces; var $useLang; var $restoreBlockPagebreaks; var $watermarkTextAlpha; var $watermarkImageAlpha; var $watermark_size; var $watermark_pos; var $annotSize; var $annotMargin; var $annotOpacity; var $title2annots; var $keepColumns; var $keep_table_proportions; var $ignore_table_widths; var $ignore_table_percents; var $list_align_style; var $list_number_suffix; var $useSubstitutions; var $CSSselectMedia; var $forcePortraitHeaders; var $forcePortraitMargins; var $displayDefaultOrientation; var $ignore_invalid_utf8; var $allowedCSStags; var $onlyCoreFonts; var $allow_charset_conversion; var $jSWord; var $jSmaxChar; var $jSmaxCharLast; var $jSmaxWordLast; var $max_colH_correction; var $table_error_report; var $table_error_report_param; var $biDirectional; var $text_input_as_HTML; var $anchor2Bookmark; var $list_indent_first_level; var $shrink_tables_to_fit; var $allow_html_optional_endtags; var $img_dpi; var $defaultheaderfontsize; var $defaultheaderfontstyle; var $defaultheaderline; var $defaultfooterfontsize; var $defaultfooterfontstyle; var $defaultfooterline; var $header_line_spacing; var $footer_line_spacing; var $pregUHCchars; var $pregSJISchars; var $pregCJKchars; var $pregASCIIchars1; var $pregASCIIchars2; var $pregASCIIchars3; var $pregVIETchars; var $pregVIETPluschars; var $pregRTLchars; var $pregHEBchars; var $pregARABICchars; var $pregNonARABICchars; var $pregHIchars; var $pregBNchars; var $pregPAchars; var $pregGUchars; var $pregORchars; var $pregTAchars; var $pregTEchars; var $pregKNchars; var $pregMLchars; var $pregSHchars; var $pregINDextra; var $mirrorMargins; var $default_lineheight_correction; var $watermarkText; var $watermarkImage; var $showWatermarkText; var $showWatermarkImage; var $fontsizes; var $UnvalidatedText; var $TopicIsUnvalidated; var $useOddEven; var $useSubstitutionsMB; var $cssmgr; var $grad; var $bmp; var $wmf; var $tocontents; var $form; var $directw; var $writingToC; var $layers; var $current_layer; var $open_layer_pane; var $decimal_offset; var $inMeter; var $CJKleading; var $CJKfollowing; var $CJKoverflow; var $textshadow; var $colsums; var $spanborder; var $spanborddet; var $visibility; var $useRC128encryption; var $uniqid; var $kerning; var $fixedlSpacing; var $minwSpacing; var $lSpacingCSS; var $wSpacingCSS; var $listDir; var $spotColorIDs; var $SVGcolors; var $spotColors; var $defTextColor; var $defDrawColor; var $defFillColor; var $tableBackgrounds; var $inlineDisplayOff; var $kt_y00; var $kt_p00; var $upperCase; var $checkSIP; var $checkSMP; var $checkCJK; var $tableCJK; var $watermarkImgAlpha; var $PDFAXwarnings; var $MetadataRoot; var $OutputIntentRoot; var $InfoRoot; var $current_filename; var $parsers; var $current_parser; var $_obj_stack; var $_don_obj_stack; var $_current_obj_id; var $tpls; var $tpl; var $tplprefix; var $_res; var $pdf_version; var $noImageFile; var $lastblockbottommargin; var $baselineC; var $subPos; var $subArrMB; var $ReqFontStyle; var $tableClipPath ; var $forceExactLineheight; var $listOcc; var $fullImageHeight; var $inFixedPosBlock; var $fixedPosBlock; var $fixedPosBlockDepth; var $fixedPosBlockBBox; var $fixedPosBlockSave; var $maxPosL; var $maxPosR; var $loaded; var $extraFontSubsets; var $docTemplateStart; var $time0; var $indic; var $barcode; var $SHYpatterns; var $loadedSHYpatterns; var $loadedSHYdictionary; var $SHYdictionary; var $SHYdictionaryWords; var $spanbgcolorarray; var $default_font; var $list_lineheight; var $headerbuffer; var $lastblocklevelchange; var $nestedtablejustfinished; var $linebreakjustfinished; var $cell_border_dominance_L; var $cell_border_dominance_R; var $cell_border_dominance_T; var $cell_border_dominance_B; var $table_keep_together; var $plainCell_properties; var $inherit_lineheight; var $listitemtype; var $shrin_k1; var $outerfilled; var $blockContext; var $floatDivs; var $patterns; var $pageBackgrounds; var $bodyBackgroundGradient; var $bodyBackgroundImage; var $bodyBackgroundColor; var $writingHTMLheader; var $writingHTMLfooter; var $autoFontGroups; var $angle; var $gradients; var $kwt_Reference; var $kwt_BMoutlines; var $kwt_toc; var $tbrot_Reference; var $tbrot_BMoutlines; var $tbrot_toc; var $col_Reference; var $col_BMoutlines; var $col_toc; var $currentGraphId; var $graphs; var $floatbuffer; var $floatmargins; var $bullet; var $bulletarray; var $rtlAsArabicFarsi; var $currentLang; var $default_lang; var $default_available_fonts; var $pageTemplate; var $docTemplate; var $docTemplateContinue; var $arabGlyphs; var $arabHex; var $persianGlyphs; var $persianHex; var $arabVowels; var $arabPrevLink; var $arabNextLink; var $formobjects; var $InlineProperties; var $InlineAnnots; var $ktAnnots; var $tbrot_Annots; var $kwt_Annots; var $columnAnnots; var $columnForms; var $PageAnnots; var $pageDim; var $breakpoints; var $tableLevel; var $tbctr; var $innermostTableLevel; var $saveTableCounter; var $cellBorderBuffer; var $saveHTMLFooter_height; var $saveHTMLFooterE_height; var $firstPageBoxHeader; var $firstPageBoxHeaderEven; var $firstPageBoxFooter; var $firstPageBoxFooterEven; var $page_box; var $show_marks; var $basepathIsLocal; var $use_kwt; var $kwt; var $kwt_height; var $kwt_y0; var $kwt_x0; var $kwt_buffer; var $kwt_Links; var $kwt_moved; var $kwt_saved; var $PageNumSubstitutions; var $table_borders_separate; var $base_table_properties; var $borderstyles; var $listjustfinished; var $blockjustfinished; var $orig_bMargin; var $orig_tMargin; var $orig_lMargin; var $orig_rMargin; var $orig_hMargin; var $orig_fMargin; var $pageheaders; var $pagefooters; var $pageHTMLheaders; var $pageHTMLfooters; var $saveHTMLHeader; var $saveHTMLFooter; var $HTMLheaderPageLinks; var $HTMLheaderPageAnnots; var $HTMLheaderPageForms; var $available_unifonts; var $sans_fonts; var $serif_fonts; var $mono_fonts; var $defaultSubsFont; var $available_CJK_fonts; var $HTMLHeader; var $HTMLFooter; var $HTMLHeaderE; var $HTMLFooterE; var $bufferoutput; var $showdefaultpagenos; var $Big5_widths; var $GB_widths; var $SJIS_widths; var $UHC_widths; var $encrypted; var $Uvalue; var $Ovalue; var $Pvalue; var $enc_obj_id; var $last_rc4_key; var $last_rc4_key_c; var $encryption_key; var $padding; var $BMoutlines; var $OutlineRoot; var $ColActive; var $Reference; var $CurrCol; var $NbCol; var $y0; var $ColL; var $ColWidth; var $ColGap; var $ColR; var $ChangeColumn; var $columnbuffer; var $ColDetails; var $columnLinks; var $colvAlign; var $substitute; var $entsearch; var $entsubstitute; var $defaultCSS; var $linemaxfontsize; var $lineheight_correction; var $lastoptionaltag; var $pageoutput; var $charset_in; var $blk; var $blklvl; var $ColumnAdjust; var $ws; var $HREF; var $pgwidth; var $fontlist; var $oldx; var $oldy; var $B; var $U; var $S; var $I; var $tdbegin; var $table; var $cell; var $col; var $row; var $divbegin; var $divalign; var $divwidth; var $divheight; var $divrevert; var $spanbgcolor; var $spanlvl; var $listlvl; var $listnum; var $listtype; var $listoccur; var $listlist; var $listitem; var $pjustfinished; var $ignorefollowingspaces; var $SUP; var $SUB; var $SMALL; var $BIG; var $toupper; var $tolower; var $capitalize; var $dash_on; var $dotted_on; var $strike; var $textbuffer; var $currentfontstyle; var $currentfontfamily; var $currentfontsize; var $colorarray; var $bgcolorarray; var $internallink; var $enabledtags; var $lineheight; var $basepath; var $textparam; var $specialcontent; var $selectoption; var $objectbuffer; var $table_rotate; var $tbrot_maxw; var $tbrot_maxh; var $tablebuffer; var $tbrot_align; var $tbrot_Links; var $divbuffer; var $keep_block_together; var $ktLinks; var $ktBlock; var $ktForms; var $ktReference; var $ktBMoutlines; var $_kttoc; var $tbrot_y0; var $tbrot_x0; var $tbrot_w; var $tbrot_h; var $mb_enc; var $directionality; var $extgstates; var $mgl; var $mgt; var $mgr; var $mgb; var $tts; var $ttz; var $tta; var $headerDetails; var $footerDetails; var $page_break_after_avoid; var $margin_bottom_collapse; var $list_indent; var $list_align; var $list_margin_bottom; var $default_font_size; var $original_default_font_size; var $original_default_font; var $watermark_font; var $defaultAlign; var $defaultTableAlign; var $tablethead; var $thead_font_weight; var $thead_font_style; var $thead_font_smCaps; var $thead_valign_default; var $thead_textalign_default; var $tabletfoot; var $tfoot_font_weight; var $tfoot_font_style; var $tfoot_font_smCaps; var $tfoot_valign_default; var $tfoot_textalign_default; var $trow_text_rotate; var $cellPaddingL; var $cellPaddingR; var $cellPaddingT; var $cellPaddingB; var $table_lineheight; var $table_border_attr_set; var $table_border_css_set; var $shrin_k; var $shrink_this_table_to_fit; var $MarginCorrection; var $margin_footer; var $margin_header; var $tabletheadjustfinished; var $usingCoreFont; var $charspacing; var $DisplayPreferences; var $flowingBlockAttr; var $page; var $n; var $offsets; var $buffer; var $pages; var $state; var $compress; var $DefOrientation; var $CurOrientation; var $OrientationChanges; var $k; var $fwPt; var $fhPt; var $fw; var $fh; var $wPt; var $hPt; var $w; var $h; var $lMargin; var $tMargin; var $rMargin; var $bMargin; var $cMarginL; var $cMarginR; var $cMarginT; var $cMarginB; var $DeflMargin; var $DefrMargin; var $x; var $y; var $lasth; var $LineWidth; var $CoreFonts; var $fonts; var $FontFiles; var $images; var $PageLinks; var $links; var $FontFamily; var $FontStyle; var $CurrentFont; var $FontSizePt; var $FontSize; var $DrawColor; var $FillColor; var $TextColor; var $ColorFlag; var $autoPageBreak; var $PageBreakTrigger; var $InFooter; var $InHTMLFooter; var $processingFooter; var $processingHeader; var $ZoomMode; var $LayoutMode; var $title; var $subject; var $author; var $keywords; var $creator; var $aliasNbPg; var $aliasNbPgGp; var $aliasNbPgHex; var $aliasNbPgGpHex; var $ispre; var $outerblocktags; var $innerblocktags; function mPDF($mode='',$format='A4',$default_font_size=0,$default_font='',$mgl=15,$mgr=15,$mgt=16,$mgb=16,$mgh=9,$mgf=9, $orientation='P') { if (!class_exists('grad', false)) { include(_MPDF_PATH.'classes/grad.php'); } if (empty($this->grad)) { $this->grad = new grad($this); } if (!class_exists('form', false)) { include(_MPDF_PATH.'classes/form.php'); } if (empty($this->form)) { $this->form = new form($this); } $this->time0 = microtime(true); $this->_dochecks(); $this->UnvalidatedText =& $this->watermarkText; $this->TopicIsUnvalidated =& $this->showWatermarkText; $this->AliasNbPg =& $this->aliasNbPg; $this->AliasNbPgGp =& $this->aliasNbPgGp; $this->BiDirectional =& $this->biDirectional; $this->Anchor2Bookmark =& $this->anchor2Bookmark; $this->KeepColumns =& $this->keepColumns; $this->useOddEven =& $this->mirrorMargins; $this->useSubstitutionsMB =& $this->useSubstitutions; $this->writingToC = false; $this->layers = array(); $this->current_layer = 0; $this->open_layer_pane = false; $this->visibility='visible'; $this->spotColors=array(); $this->spotColorIDs = array(); $this->tableBackgrounds = array(); $this->kt_y00 = ''; $this->kt_p00 = ''; $this->iterationCounter = false; $this->BMPonly = array(); $this->page=0; $this->n=2; $this->buffer=''; $this->objectbuffer = array(); $this->pages=array(); $this->OrientationChanges=array(); $this->state=0; $this->fonts=array(); $this->FontFiles=array(); $this->images=array(); $this->links=array(); $this->InFooter=false; $this->processingFooter=false; $this->processingHeader=false; $this->lasth=0; $this->FontFamily=''; $this->FontStyle=''; $this->FontSizePt=9; $this->U=false; $this->upperCase = array(); $this->S = false; $this->smCapsScale = 1; $this->smCapsStretch = 100; $this->margBuffer = 0; $this->inMeter = false; $this->decimal_offset = 0; $this->defTextColor = $this->TextColor = $this->SetTColor($this->ConvertColor(0),true); $this->defDrawColor = $this->DrawColor = $this->SetDColor($this->ConvertColor(0),true); $this->defFillColor = $this->FillColor = $this->SetFColor($this->ConvertColor(255),true); $this->SVGcolors = array('antiquewhite'=>'#FAEBD7','aqua'=>'#00FFFF','aquamarine'=>'#7FFFD4','beige'=>'#F5F5DC','black'=>'#000000', 'blue'=>'#0000FF','brown'=>'#A52A2A','cadetblue'=>'#5F9EA0','chocolate'=>'#D2691E','cornflowerblue'=>'#6495ED','crimson'=>'#DC143C', 'darkblue'=>'#00008B','darkgoldenrod'=>'#B8860B','darkgreen'=>'#006400','darkmagenta'=>'#8B008B','darkorange'=>'#FF8C00', 'darkred'=>'#8B0000','darkseagreen'=>'#8FBC8F','darkslategray'=>'#2F4F4F','darkviolet'=>'#9400D3','deepskyblue'=>'#00BFFF', 'dodgerblue'=>'#1E90FF','firebrick'=>'#B22222','forestgreen'=>'#228B22','fuchsia'=>'#FF00FF','gainsboro'=>'#DCDCDC','gold'=>'#FFD700', 'gray'=>'#808080','green'=>'#008000','greenyellow'=>'#ADFF2F','hotpink'=>'#FF69B4','indigo'=>'#4B0082','khaki'=>'#F0E68C', 'lavenderblush'=>'#FFF0F5','lemonchiffon'=>'#FFFACD','lightcoral'=>'#F08080','lightgoldenrodyellow'=>'#FAFAD2','lightgreen'=>'#90EE90', 'lightsalmon'=>'#FFA07A','lightskyblue'=>'#87CEFA','lightslategray'=>'#778899','lightyellow'=>'#FFFFE0','lime'=>'#00FF00','limegreen'=>'#32CD32', 'magenta'=>'#FF00FF','maroon'=>'#800000','mediumaquamarine'=>'#66CDAA','mediumorchid'=>'#BA55D3','mediumseagreen'=>'#3CB371', 'mediumspringgreen'=>'#00FA9A','mediumvioletred'=>'#C71585','midnightblue'=>'#191970','mintcream'=>'#F5FFFA','moccasin'=>'#FFE4B5','navy'=>'#000080', 'olive'=>'#808000','orange'=>'#FFA500','orchid'=>'#DA70D6','palegreen'=>'#98FB98', 'palevioletred'=>'#D87093','peachpuff'=>'#FFDAB9','pink'=>'#FFC0CB','powderblue'=>'#B0E0E6','purple'=>'#800080', 'red'=>'#FF0000','royalblue'=>'#4169E1','salmon'=>'#FA8072','seagreen'=>'#2E8B57','sienna'=>'#A0522D','silver'=>'#C0C0C0','skyblue'=>'#87CEEB', 'slategray'=>'#708090','springgreen'=>'#00FF7F','steelblue'=>'#4682B4','tan'=>'#D2B48C','teal'=>'#008080','thistle'=>'#D8BFD8','turquoise'=>'#40E0D0', 'violetred'=>'#D02090','white'=>'#FFFFFF','yellow'=>'#FFFF00', 'aliceblue'=>'#f0f8ff', 'azure'=>'#f0ffff', 'bisque'=>'#ffe4c4', 'blanchedalmond'=>'#ffebcd', 'blueviolet'=>'#8a2be2', 'burlywood'=>'#deb887', 'chartreuse'=>'#7fff00', 'coral'=>'#ff7f50', 'cornsilk'=>'#fff8dc', 'cyan'=>'#00ffff', 'darkcyan'=>'#008b8b', 'darkgray'=>'#a9a9a9', 'darkgrey'=>'#a9a9a9', 'darkkhaki'=>'#bdb76b', 'darkolivegreen'=>'#556b2f', 'darkorchid'=>'#9932cc', 'darksalmon'=>'#e9967a', 'darkslateblue'=>'#483d8b', 'darkslategrey'=>'#2f4f4f', 'darkturquoise'=>'#00ced1', 'deeppink'=>'#ff1493', 'dimgray'=>'#696969', 'dimgrey'=>'#696969', 'floralwhite'=>'#fffaf0', 'ghostwhite'=>'#f8f8ff', 'goldenrod'=>'#daa520', 'grey'=>'#808080', 'honeydew'=>'#f0fff0', 'indianred'=>'#cd5c5c', 'ivory'=>'#fffff0', 'lavender'=>'#e6e6fa', 'lawngreen'=>'#7cfc00', 'lightblue'=>'#add8e6', 'lightcyan'=>'#e0ffff', 'lightgray'=>'#d3d3d3', 'lightgrey'=>'#d3d3d3', 'lightpink'=>'#ffb6c1', 'lightseagreen'=>'#20b2aa', 'lightslategrey'=>'#778899', 'lightsteelblue'=>'#b0c4de', 'linen'=>'#faf0e6', 'mediumblue'=>'#0000cd', 'mediumpurple'=>'#9370db', 'mediumslateblue'=>'#7b68ee', 'mediumturquoise'=>'#48d1cc', 'mistyrose'=>'#ffe4e1', 'navajowhite'=>'#ffdead', 'oldlace'=>'#fdf5e6', 'olivedrab'=>'#6b8e23', 'orangered'=>'#ff4500', 'palegoldenrod'=>'#eee8aa', 'paleturquoise'=>'#afeeee', 'papayawhip'=>'#ffefd5', 'peru'=>'#cd853f', 'plum'=>'#dda0dd', 'rosybrown'=>'#bc8f8f', 'saddlebrown'=>'#8b4513', 'sandybrown'=>'#f4a460', 'seashell'=>'#fff5ee', 'slateblue'=>'#6a5acd', 'slategrey'=>'#708090', 'snow'=>'#fffafa', 'tomato'=>'#ff6347', 'violet'=>'#ee82ee', 'wheat'=>'#f5deb3', 'whitesmoke'=>'#f5f5f5', 'yellowgreen'=>'#9acd32'); $this->ColorFlag=false; $this->extgstates = array(); $this->mb_enc='windows-1252'; $this->directionality='ltr'; $this->defaultAlign = 'L'; $this->defaultTableAlign = 'L'; $this->fixedPosBlockSave = array(); $this->extraFontSubsets = 0; $this->SHYpatterns = array(); $this->loadedSHYdictionary = false; $this->SHYdictionary = array(); $this->SHYdictionaryWords = array(); $this->blockContext = 1; $this->floatDivs = array(); $this->DisplayPreferences=''; $this->patterns = array(); $this->pageBackgrounds = array(); $this->writingHTMLheader = false; $this->writingHTMLfooter = false; $this->gradients = array(); $this->kwt_Reference = array(); $this->kwt_BMoutlines = array(); $this->kwt_toc = array(); $this->tbrot_Reference = array(); $this->tbrot_BMoutlines = array(); $this->tbrot_toc = array(); $this->col_Reference = array(); $this->col_BMoutlines = array(); $this->col_toc = array(); $this->graphs = array(); $this->pgsIns = array(); $this->PDFAXwarnings = array(); $this->inlineDisplayOff = false; $this->kerning = false; $this->lSpacingCSS = ''; $this->wSpacingCSS = ''; $this->fixedlSpacing = false; $this->minwSpacing = 0; $this->baselineC = 0.35; $this->noImageFile = str_replace("\\","/",dirname(__FILE__)) . '/includes/no_image.jpg'; $this->subPos = 0; $this->forceExactLineheight = false; $this->listOcc = 0; $this->normalLineheight = 1.3; $this->incrementFPR1 = 10; $this->incrementFPR2 = 10; $this->incrementFPR3 = 10; $this->incrementFPR4 = 10; $this->fullImageHeight = false; $this->floatbuffer = array(); $this->floatmargins = array(); $this->autoFontGroups = 0; $this->formobjects=array(); $this->InlineProperties=array(); $this->InlineAnnots=array(); $this->ktAnnots=array(); $this->tbrot_Annots=array(); $this->kwt_Annots=array(); $this->columnAnnots=array(); $this->pageDim=array(); $this->breakpoints = array(); $this->tableLevel=0; $this->tbctr=array(); $this->page_box = array(); $this->show_marks = ''; $this->kwt = false; $this->kwt_height = 0; $this->kwt_y0 = 0; $this->kwt_x0 = 0; $this->kwt_buffer = array(); $this->kwt_Links = array(); $this->kwt_moved = false; $this->kwt_saved = false; $this->PageNumSubstitutions = array(); $this->base_table_properties=array(); $this->borderstyles = array('inset','groove','outset','ridge','dotted','dashed','solid','double'); $this->tbrot_align = 'C'; $this->pageheaders=array(); $this->pagefooters=array(); $this->pageHTMLheaders=array(); $this->pageHTMLfooters=array(); $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->ktForms = array(); $this->HTMLheaderPageForms = array(); $this->columnForms = array(); $this->tbrotForms = array(); $this->useRC128encryption = false; $this->uniqid = ''; $this->bufferoutput = false; $this->encrypted=false; $this->BMoutlines=array(); $this->ColActive=0; $this->Reference=array(); $this->CurrCol=0; $this->ColL = array(0); $this->ColR = array(0); $this->ChangeColumn = 0; $this->columnbuffer = array(); $this->ColDetails = array(); $this->columnLinks = array(); $this->substitute = array(); $this->entsearch = array(); $this->entsubstitute = array(); $this->lastoptionaltag = ''; $this->charset_in = ''; $this->blk = array(); $this->blklvl = 0; $this->tts = false; $this->ttz = false; $this->tta = false; $this->ispre=false; $this->checkSIP = false; $this->checkSMP = false; $this->checkCJK = false; $this->tableCJK = false; $this->headerDetails=array(); $this->footerDetails=array(); $this->page_break_after_avoid = false; $this->margin_bottom_collapse = false; $this->tablethead = 0; $this->tabletfoot = 0; $this->table_border_attr_set = 0; $this->table_border_css_set = 0; $this->shrin_k = 1.0; $this->shrink_this_table_to_fit = 0; $this->MarginCorrection = 0; $this->tabletheadjustfinished = false; $this->usingCoreFont = false; $this->charspacing=0; $this->autoPageBreak = true; require(_MPDF_PATH.'config.php'); $this->_setPageSize($format, $orientation); $this->DefOrientation=$orientation; $this->margin_header=$mgh; $this->margin_footer=$mgf; $bmargin=$mgb; $this->DeflMargin = $mgl; $this->DefrMargin = $mgr; $this->orig_tMargin = $mgt; $this->orig_bMargin = $bmargin; $this->orig_lMargin = $this->DeflMargin; $this->orig_rMargin = $this->DefrMargin; $this->orig_hMargin = $this->margin_header; $this->orig_fMargin = $this->margin_footer; if ($this->setAutoTopMargin=='pad') { $mgt += $this->margin_header; } if ($this->setAutoBottomMargin=='pad') { $mgb += $this->margin_footer; } $this->SetMargins($this->DeflMargin,$this->DefrMargin,$mgt); $this->SetAutoPageBreak($this->autoPageBreak,$bmargin); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->cMarginL = 1; $this->cMarginR = 1; $this->LineWidth=.567/_MPDFK; $this->AliasNbPages(); $this->AliasNbPageGroups(); $this->aliasNbPgHex = '{nbHEXmarker}'; $this->aliasNbPgGpHex = '{nbpgHEXmarker}'; $this->DisableTags(); $this->SetDisplayMode(100); $this->SetCompression(true); $this->SetDisplayPreferences(''); require(_MPDF_PATH.'config_fonts.php'); $this->available_unifonts = array(); foreach ($this->fontdata AS $f => $fs) { if (isset($fs['R']) && $fs['R']) { $this->available_unifonts[] = $f; } if (isset($fs['B']) && $fs['B']) { $this->available_unifonts[] = $f.'B'; } if (isset($fs['I']) && $fs['I']) { $this->available_unifonts[] = $f.'I'; } if (isset($fs['BI']) && $fs['BI']) { $this->available_unifonts[] = $f.'BI'; } } $this->default_available_fonts = $this->available_unifonts; $optcore = false; $onlyCoreFonts = false; if (preg_match('/([\-+])aCJK/i',$mode, $m)) { preg_replace('/([\-+])aCJK/i','',$mode); if ($m[1]=='+') { $this->useAdobeCJK = true; } else { $this->useAdobeCJK = false; } } if (strlen($mode)==1) { if ($mode=='s') { $this->percentSubset = 100; $mode = ''; } else if ($mode=='c') { $onlyCoreFonts = true; $mode = ''; } } else if (substr($mode,-2)=='-s') { $this->percentSubset = 100; $mode = substr($mode,0,strlen($mode)-2); } else if (substr($mode,-2)=='-c') { $onlyCoreFonts = true; $mode = substr($mode,0,strlen($mode)-2); } else if (substr($mode,-2)=='-x') { $optcore = true; $mode = substr($mode,0,strlen($mode)-2); } if ((strlen($mode) == 5 && $mode != 'UTF-8') || strlen($mode) == 2) { list ($coreSuitable,$mpdf_pdf_unifonts) = GetLangOpts($mode, $this->useAdobeCJK); if ($coreSuitable && $optcore) { $onlyCoreFonts = true; } if ($mpdf_pdf_unifonts) { $this->RestrictUnicodeFonts($mpdf_pdf_unifonts); $this->default_available_fonts = $mpdf_pdf_unifonts; } $this->currentLang = $mode; $this->default_lang = $mode; } $this->onlyCoreFonts = $onlyCoreFonts; if ($this->onlyCoreFonts) { $this->setMBencoding('windows-1252'); } else { $this->setMBencoding('UTF-8'); } @mb_regex_encoding('UTF-8'); $this->available_CJK_fonts = array('gb','big5','sjis','uhc','gbB','big5B','sjisB','uhcB','gbI','big5I','sjisI','uhcI', 'gbBI','big5BI','sjisBI','uhcBI'); $this->CoreFonts=array('ccourier'=>'Courier','ccourierB'=>'Courier-Bold','ccourierI'=>'Courier-Oblique','ccourierBI'=>'Courier-BoldOblique', 'chelvetica'=>'Helvetica','chelveticaB'=>'Helvetica-Bold','chelveticaI'=>'Helvetica-Oblique','chelveticaBI'=>'Helvetica-BoldOblique', 'ctimes'=>'Times-Roman','ctimesB'=>'Times-Bold','ctimesI'=>'Times-Italic','ctimesBI'=>'Times-BoldItalic', 'csymbol'=>'Symbol','czapfdingbats'=>'ZapfDingbats'); $this->fontlist=array("ctimes","ccourier","chelvetica","csymbol","czapfdingbats"); $this->setHiEntitySubstitutions(); if ($this->onlyCoreFonts) { $this->useSubstitutions = true; $this->SetSubstitutions(); } else { $this->useSubstitutions = false; } if (!class_exists('cssmgr', false)) { include(_MPDF_PATH .'classes/cssmgr.php'); } $this->cssmgr = new cssmgr($this); if (file_exists(_MPDF_PATH.'mpdf.css')) { $css = file_get_contents(_MPDF_PATH.'mpdf.css'); $css2 = $this->cssmgr->ReadDefaultCSS($css); $this->defaultCSS = $this->cssmgr->array_merge_recursive_unique($this->defaultCSS,$css2); } if ($default_font=='') { if ($this->onlyCoreFonts) { if (in_array(strtolower($this->defaultCSS['BODY']['FONT-FAMILY']),$this->mono_fonts)) { $default_font = 'ccourier'; } else if (in_array(strtolower($this->defaultCSS['BODY']['FONT-FAMILY']),$this->sans_fonts)) { $default_font = 'chelvetica'; } else { $default_font = 'ctimes'; } } else { $default_font = $this->defaultCSS['BODY']['FONT-FAMILY']; } } if (!$default_font_size) { $mmsize = $this->ConvertSize($this->defaultCSS['BODY']['FONT-SIZE']); $default_font_size = $mmsize*(_MPDFK); } if ($default_font) { $this->SetDefaultFont($default_font); } if ($default_font_size) { $this->SetDefaultFontSize($default_font_size); } $this->SetLineHeight(); $this->SetFColor($this->ConvertColor(255)); $this->HREF=''; $this->oldy=-1; $this->B=0; $this->U=false; $this->S=false; $this->I=0; $this->listlvl=0; $this->listnum=0; $this->listtype=''; $this->listoccur=array(); $this->listlist=array(); $this->listitem=array(); $this->tdbegin=false; $this->table=array(); $this->cell=array(); $this->col=-1; $this->row=-1; $this->cellBorderBuffer = array(); $this->divbegin=false; $this->divalign=''; $this->divwidth=0; $this->divheight=0; $this->spanbgcolor=false; $this->divrevert=false; $this->spanborder=false; $this->spanborddet=array(); $this->blockjustfinished=false; $this->listjustfinished=false; $this->ignorefollowingspaces = true; $this->toupper=false; $this->tolower=false; $this->capitalize=false; $this->dash_on=false; $this->dotted_on=false; $this->SUP=false; $this->SUB=false; $this->strike=false; $this->textshadow=''; $this->currentfontfamily=''; $this->currentfontsize=''; $this->currentfontstyle=''; $this->colorarray=array(); $this->spanbgcolorarray=array(); $this->textbuffer=array(); $this->internallink=array(); $this->basepath = ""; $this->SetBasePath(''); $this->textparam = array(); $this->specialcontent = ''; $this->selectoption = array(); $this->tpls = array(); $this->tpl = 0; $this->tplprefix = "/TPL"; $this->res = array(); if ($this->enableImports) { $this->SetImportUse(); } if ($this->progressBar) { $this->StartProgressBarOutput($this->progressBar) ; } } function _setPageSize($format, &$orientation) { if(is_string($format)) { if ($format=='') { $format = 'A4'; } $pfo = 'P'; if(preg_match('/([0-9a-zA-Z]*)-L/i',$format,$m)) { $format=$m[1]; $pfo='L'; } $format = $this->_getPageFormat($format); if (!$format) { $this->Error('Unknown page format: '.$format); } else { $orientation = $pfo; } $this->fwPt=$format[0]; $this->fhPt=$format[1]; } else { if (!$format[0] || !$format[1]) { $this->Error('Invalid page format: '.$format[0].' '.$format[1]); } $this->fwPt=$format[0]*_MPDFK; $this->fhPt=$format[1]*_MPDFK; } $this->fw=$this->fwPt/_MPDFK; $this->fh=$this->fhPt/_MPDFK; $orientation=strtolower($orientation); if($orientation=='p' or $orientation=='portrait') { $orientation='P'; $this->wPt=$this->fwPt; $this->hPt=$this->fhPt; } elseif($orientation=='l' or $orientation=='landscape') { $orientation='L'; $this->wPt=$this->fhPt; $this->hPt=$this->fwPt; } else $this->Error('Incorrect orientation: '.$orientation); $this->CurOrientation=$orientation; $this->w=$this->wPt/_MPDFK; $this->h=$this->hPt/_MPDFK; } function _getPageFormat($format) { switch (strtoupper($format)) { case '4A0': {$format = array(4767.87,6740.79); break;} case '2A0': {$format = array(3370.39,4767.87); break;} case 'A0': {$format = array(2383.94,3370.39); break;} case 'A1': {$format = array(1683.78,2383.94); break;} case 'A2': {$format = array(1190.55,1683.78); break;} case 'A3': {$format = array(841.89,1190.55); break;} case 'A4': default: {$format = array(595.28,841.89); break;} case 'A5': {$format = array(419.53,595.28); break;} case 'A6': {$format = array(297.64,419.53); break;} case 'A7': {$format = array(209.76,297.64); break;} case 'A8': {$format = array(147.40,209.76); break;} case 'A9': {$format = array(104.88,147.40); break;} case 'A10': {$format = array(73.70,104.88); break;} case 'B0': {$format = array(2834.65,4008.19); break;} case 'B1': {$format = array(2004.09,2834.65); break;} case 'B2': {$format = array(1417.32,2004.09); break;} case 'B3': {$format = array(1000.63,1417.32); break;} case 'B4': {$format = array(708.66,1000.63); break;} case 'B5': {$format = array(498.90,708.66); break;} case 'B6': {$format = array(354.33,498.90); break;} case 'B7': {$format = array(249.45,354.33); break;} case 'B8': {$format = array(175.75,249.45); break;} case 'B9': {$format = array(124.72,175.75); break;} case 'B10': {$format = array(87.87,124.72); break;} case 'C0': {$format = array(2599.37,3676.54); break;} case 'C1': {$format = array(1836.85,2599.37); break;} case 'C2': {$format = array(1298.27,1836.85); break;} case 'C3': {$format = array(918.43,1298.27); break;} case 'C4': {$format = array(649.13,918.43); break;} case 'C5': {$format = array(459.21,649.13); break;} case 'C6': {$format = array(323.15,459.21); break;} case 'C7': {$format = array(229.61,323.15); break;} case 'C8': {$format = array(161.57,229.61); break;} case 'C9': {$format = array(113.39,161.57); break;} case 'C10': {$format = array(79.37,113.39); break;} case 'RA0': {$format = array(2437.80,3458.27); break;} case 'RA1': {$format = array(1729.13,2437.80); break;} case 'RA2': {$format = array(1218.90,1729.13); break;} case 'RA3': {$format = array(864.57,1218.90); break;} case 'RA4': {$format = array(609.45,864.57); break;} case 'SRA0': {$format = array(2551.18,3628.35); break;} case 'SRA1': {$format = array(1814.17,2551.18); break;} case 'SRA2': {$format = array(1275.59,1814.17); break;} case 'SRA3': {$format = array(907.09,1275.59); break;} case 'SRA4': {$format = array(637.80,907.09); break;} case 'LETTER': {$format = array(612.00,792.00); break;} case 'LEGAL': {$format = array(612.00,1008.00); break;} case 'LEDGER': {$format = array(279.00,432.00); break;} case 'TABLOID': {$format = array(279.00,432.00); break;} case 'EXECUTIVE': {$format = array(521.86,756.00); break;} case 'FOLIO': {$format = array(612.00,936.00); break;} case 'B': {$format=array(362.83,561.26 ); break;} case 'A': {$format=array(314.65,504.57 ); break;} case 'DEMY': {$format=array(382.68,612.28 ); break;} case 'ROYAL': {$format=array(433.70,663.30 ); break;} default: $format = false; } return $format; } function StartProgressBarOutput($mode=1) { if (!defined('_MPDF_URI')) { $this->progressBar = false; if ($this->debug) { $this->Error("You need to define _MPDF_URI to use the progress bar!"); } else return false; } $this->progressBar = $mode; if ($this->progbar_altHTML) { echo $this->progbar_altHTML; } else { echo '<html>
	<head>
	<title>mPDF File Progress</title>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<link rel="stylesheet" type="text/css" href="'._MPDF_URI.'progbar.css" />
		</head>
	<body>
	<div class="main">
		<div class="heading">'.$this->progbar_heading.'</div>
		<div class="demo">
	   '; if ($this->progressBar==2) { echo '		<table width="100%"><tr><td style="width: 50%;"> 
			<span class="barheading">Writing HTML code</span> <br/>

			<div class="progressBar">
			<div id="element1"  class="innerBar">&nbsp;</div>
			</div>
			<span class="code" id="box1"></span>
			</td><td style="width: 50%;">
			<span class="barheading">Autosizing elements</span> <br/>
			<div class="progressBar">
			<div id="element4"  class="innerBar">&nbsp;</div>
			</div>
			<span class="code" id="box4"></span>
			<br/><br/>
			<span class="barheading">Writing Tables</span> <br/>
			<div class="progressBar">
			<div id="element7"  class="innerBar">&nbsp;</div>
			</div>
			<span class="code" id="box7"></span>
			</td></tr>
			<tr><td><br /><br /></td><td></td></tr>
			<tr><td style="width: 50%;"> 
	'; } echo '			<span class="barheading">Writing PDF file</span> <br/>
			<div class="progressBar">
			<div id="element2"  class="innerBar">&nbsp;</div>
			</div>
			<span class="code" id="box2"></span>
	   '; if ($this->progressBar==2) { echo '
			</td><td style="width: 50%;">
			<span class="barheading">Memory usage</span> <br/>
			<div class="progressBar">
			<div id="element5"  class="innerBar">&nbsp;</div>
			</div>
			<span id="box5">0</span> '.ini_get("memory_limit").'<br />
			<br/><br/>
			<span class="barheading">Memory usage (peak)</span> <br/>
			<div class="progressBar">
			<div id="element6"  class="innerBar">&nbsp;</div>
			</div>
			<span id="box6">0</span> '.ini_get("memory_limit").'<br />
			</td></tr>
			</table>
	   '; } echo '			<br/><br/>
		<span id="box3"></span>

		</div>
	   '; } ob_flush(); flush(); } function UpdateProgressBar($el,$val,$txt='') { if ($this->progressBar<2) { if ($el>3) { return; } else if ($el ==1) { $el = 2; } } echo '<script type="text/javascript">'; if ($val) { echo ' document.getElementById(\'element'.$el.'\').style.width=\''.$val.'%\'; '; } if ($txt) { echo ' document.getElementById(\'box'.$el.'\').innerHTML=\''.$txt.'\'; '; } if ($this->progressBar==2) { $m = round(memory_get_usage(true)/1048576); $m2 = round(memory_get_peak_usage(true)/1048576); $mem = $m * 100 / (ini_get("memory_limit")+0); $mem2 = $m2 * 100 / (ini_get("memory_limit")+0); echo ' document.getElementById(\'element5\').style.width=\''.$mem.'%\'; '; echo ' document.getElementById(\'element6\').style.width=\''.$mem2.'%\'; '; echo ' document.getElementById(\'box5\').innerHTML=\''.$m.'MB / \'; '; echo ' document.getElementById(\'box6\').innerHTML=\''.$m2.'MB / \'; '; } echo '</script>'."\n"; ob_flush(); flush(); } function RestrictUnicodeFonts($res) { if (count($res)) { $this->available_unifonts = $res; } else { $this->available_unifonts = $this->default_available_fonts; } if (count($this->available_unifonts) == 0) { $this->available_unifonts[] = $this->default_available_fonts[0]; } $this->available_unifonts = array_values($this->available_unifonts); } function setMBencoding($enc) { if ($this->mb_enc != $enc) { $this->mb_enc = $enc; mb_internal_encoding($this->mb_enc); } } function SetMargins($left,$right,$top) { $this->lMargin=$left; $this->rMargin=$right; $this->tMargin=$top; } function ResetMargins() { if (($this->forcePortraitHeaders || $this->forcePortraitMargins) && $this->DefOrientation=='P' && $this->CurOrientation=='L') { if (($this->mirrorMargins) && (($this->page)%2==0)) { $this->tMargin=$this->orig_rMargin; $this->bMargin=$this->orig_lMargin; } else { $this->tMargin=$this->orig_lMargin; $this->bMargin=$this->orig_rMargin; } $this->lMargin=$this->DeflMargin; $this->rMargin=$this->DefrMargin; $this->MarginCorrection = 0; $this->PageBreakTrigger=$this->h-$this->bMargin; } else if (($this->mirrorMargins) && (($this->page)%2==0)) { $this->lMargin=$this->DefrMargin; $this->rMargin=$this->DeflMargin; $this->MarginCorrection = $this->DefrMargin-$this->DeflMargin; } else { $this->lMargin=$this->DeflMargin; $this->rMargin=$this->DefrMargin; if ($this->mirrorMargins) { $this->MarginCorrection = $this->DeflMargin-$this->DefrMargin; } } $this->x=$this->lMargin; } function SetLeftMargin($margin) { $this->lMargin=$margin; if($this->page>0 and $this->x<$margin) $this->x=$margin; } function SetTopMargin($margin) { $this->tMargin=$margin; } function SetRightMargin($margin) { $this->rMargin=$margin; } function SetAutoPageBreak($auto,$margin=0) { $this->autoPageBreak=$auto; $this->bMargin=$margin; $this->PageBreakTrigger=$this->h-$margin; } function SetDisplayMode($zoom,$layout='continuous') { if($zoom=='fullpage' or $zoom=='fullwidth' or $zoom=='real' or $zoom=='default' or !is_string($zoom)) $this->ZoomMode=$zoom; else $this->Error('Incorrect zoom display mode: '.$zoom); if($layout=='single' or $layout=='continuous' or $layout=='two' or $layout=='twoleft' or $layout=='tworight' or $layout=='default') $this->LayoutMode=$layout; else $this->Error('Incorrect layout display mode: '.$layout); } function SetCompression($compress) { if(function_exists('gzcompress')) $this->compress=$compress; else $this->compress=false; } function SetTitle($title) { $this->title = $title; } function SetSubject($subject) { $this->subject= $subject; } function SetAuthor($author) { $this->author= $author; } function SetKeywords($keywords) { $this->keywords= $keywords; } function SetCreator($creator) { $this->creator= $creator; } function SetAnchor2Bookmark($x) { $this->anchor2Bookmark = $x; } function AliasNbPages($alias='{nb}') { $this->aliasNbPg=$alias; } function AliasNbPageGroups($alias='{nbpg}') { $this->aliasNbPgGp=$alias; } function SetAlpha($alpha, $bm='Normal', $return=false, $mode='B') { if (($this->PDFA || $this->PDFX) && $alpha!=1) { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "Image opacity must be 100% (Opacity changed to 100%)"; } $alpha = 1; } $a = array('BM'=>'/'.$bm); if ($mode=='F' || $mode='B') $a['ca'] = $alpha; if ($mode=='S' || $mode='B') $a['CA'] = $alpha; $gs = $this->AddExtGState($a); if ($return) { return sprintf('/GS%d gs', $gs); } else { $this->_out(sprintf('/GS%d gs', $gs)); } } function AddExtGState($parms) { $n = count($this->extgstates); for ($i=1; $i<=$n; $i++) { if (count($this->extgstates[$i]['parms']) == count($parms)) { $same = true; foreach($this->extgstates[$i]['parms'] AS $k=>$v) { if (!isset($parms[$k]) || $parms[$k] != $v) { $same = false; break; } } if ($same) { return $i; } } } $n++; $this->extgstates[$n]['parms'] = $parms; return $n; } function SetVisibility($v) { if (($this->PDFA || $this->PDFX) && $this->visibility!='visible') { $this->PDFAXwarnings[] = "Cannot set visibility to anything other than full when using PDFA or PDFX"; return ''; } else if (!$this->PDFA && !$this->PDFX) $this->pdf_version='1.5'; if($this->visibility!='visible') { $this->_out('EMC'); $this->hasOC=intval($this->hasOC ); } if($v=='printonly') { $this->_out('/OC /OC1 BDC'); $this->hasOC=($this->hasOC | 1); } elseif($v=='screenonly') { $this->_out('/OC /OC2 BDC'); $this->hasOC=($this->hasOC | 2); } elseif($v=='hidden') { $this->_out('/OC /OC3 BDC'); $this->hasOC=($this->hasOC | 4); } elseif($v!='visible') $this->Error('Incorrect visibility: '.$v); $this->visibility=$v; } function Error($msg) { header('Content-Type: text/html; charset=utf-8'); die('<B>mPDF error: </B>'.$msg); } function Open() { if($this->state==0) $this->_begindoc(); } function Close() { if ($this->progressBar) { $this->UpdateProgressBar(2,'2','Closing last page'); } if($this->state==3) return; if($this->page==0) $this->AddPage($this->CurOrientation); if (count($this->cellBorderBuffer)) { $this->printcellbuffer(); } if ($this->tablebuffer) { $this->printtablebuffer(); } if ($this->ColActive) { $this->SetColumns(0); $this->ColActive = 0; if (count($this->columnbuffer)) { $this->printcolumnbuffer(); } } if (count($this->divbuffer)) { $this->printdivbuffer(); } $s = ''; $s .= $this->PrintBodyBackgrounds(); $s .= $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', "\n".$s."\n".'\\1', $this->pages[$this->page]); $this->pageBackgrounds = array(); if($this->visibility!='visible') $this->SetVisibility('visible'); $this->EndLayer(); if (!$this->tocontents || !$this->tocontents->TOCmark) { $this->InFooter=true; $this->Footer(); $this->InFooter=false; } if ($this->tocontents && ($this->tocontents->TOCmark || count($this->tocontents->m_TOC))) { $this->tocontents->insertTOC(); } $this->_endpage(); $this->_enddoc(); } function _resizeBackgroundImage($imw, $imh, $cw, $ch, $resize=0, $repx, $repy, $pba=array(), $size=array()) { if (isset($pba['w'])) $cw = $pba['w']; if (isset($pba['h'])) $ch = $pba['h']; $cw = $cw*_MPDFK; $ch = $ch*_MPDFK; if (empty($size) && !$resize) { return array($imw, $imh, $repx, $repy); } if (isset($size['w']) && $size['w']) { if ($size['w']=='contain') { $h = $imh * $cw/$imw; $w = $cw; if ($h > $ch) { $w = $w * $ch/$h; $h = $ch; } } else if ($size['w']=='cover') { $h = $imh * $cw/$imw; $w = $cw; if ($h < $ch) { $w = $w * $h/$ch; $h = $ch; } } else { if (stristr($size['w'] ,'%')) { $size['w'] += 0; $size['w'] /= 100; $size['w'] = ($cw * $size['w']); } if (stristr($size['h'] ,'%')) { $size['h'] += 0; $size['h'] /= 100; $size['h'] = ($ch * $size['h']); } if ($size['w']=='auto' && $size['h']=='auto') { $w = $imw; $h = $imh; } else if ($size['w']=='auto' && $size['h']!='auto') { $w = $imw * $size['h']/$imh; $h = $size['h']; } else if ($size['w']!='auto' && $size['h']=='auto') { $h = $imh * $size['w']/$imw; $w = $size['w']; } else { $w = $size['w']; $h = $size['h']; } } return array($w, $h, $repx, $repy); } else if ($resize==1 && $imw > $cw) { $h = $imh * $cw/$imw; return array($cw, $h, $repx, $repy); } else if ($resize==2 && $imh > $ch) { $w = $imw * $ch/$imh; return array($w, $ch, $repx, $repy); } else if ($resize==3) { $w = $imw; $h = $imh; if ($w > $cw) { $h = $h * $cw/$w; $w = $cw; } if ($h > $ch) { $w = $w * $ch/$h; $h = $ch; } return array($w, $h, $repx, $repy); } else if ($resize==4) { $h = $imh * $cw/$imw; return array($cw, $h, $repx, $repy); } else if ($resize==5) { $w = $imw * $ch/$imh; return array($w, $ch, $repx, $repy); } else if ($resize==6) { return array($cw, $ch, $repx, $repy); } return array($imw, $imh, $repx, $repy); } function SetBackground(&$properties, &$maxwidth) { if (isset($properties['BACKGROUND-ORIGIN']) && ($properties['BACKGROUND-ORIGIN']=='border-box' || $properties['BACKGROUND-ORIGIN']== 'content-box')) { $origin = $properties['BACKGROUND-ORIGIN']; } else { $origin = 'padding-box'; } if (isset($properties['BACKGROUND-SIZE'])) { if (stristr($properties['BACKGROUND-SIZE'] ,'contain') ) { $bsw = $bsh = 'contain'; } else if (stristr($properties['BACKGROUND-SIZE'] ,'cover') ) { $bsw = $bsh = 'cover'; } else { $bsw = $bsh = 'auto'; $sz = preg_split('/\s+/',trim($properties['BACKGROUND-SIZE'])); if (count($sz)==2) { $bsw = $sz[0]; $bsh = $sz[1]; } else { $bsw = $sz[0]; } if (!stristr($bsw ,'%') && !stristr($bsw ,'auto') ) { $bsw = $this->ConvertSize($bsw ,$maxwidth,$this->FontSize); } if (!stristr($bsh ,'%') && !stristr($bsh ,'auto') ) { $bsh = $this->ConvertSize($bsh ,$maxwidth,$this->FontSize); } } $size = array('w'=>$bsw, 'h'=>$bsh); } if (preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/',$properties['BACKGROUND-IMAGE'])) { return array('gradient'=>$properties['BACKGROUND-IMAGE'], 'origin'=>$origin, 'size'=>$size ); } else { $file = $properties['BACKGROUND-IMAGE']; $sizesarray = $this->Image($file,0,0,0,0,'','',false, false, false, false, true); if (isset($sizesarray['IMAGE_ID'])) { $image_id = $sizesarray['IMAGE_ID']; $orig_w = $sizesarray['WIDTH']*_MPDFK; $orig_h = $sizesarray['HEIGHT']*_MPDFK; if (isset($properties['BACKGROUND-IMAGE-RESOLUTION'])) { if (preg_match('/from-image/i', $properties['BACKGROUND-IMAGE-RESOLUTION']) && isset($sizesarray['set-dpi']) && $sizesarray['set-dpi']>0) { $orig_w *= $this->img_dpi / $sizesarray['set-dpi']; $orig_h *= $this->img_dpi / $sizesarray['set-dpi']; } else if (preg_match('/(\d+)dpi/i', $properties['BACKGROUND-IMAGE-RESOLUTION'], $m)) { $dpi = $m[1]; if ($dpi > 0) { $orig_w *= $this->img_dpi / $dpi; $orig_h *= $this->img_dpi / $dpi; } } } $x_repeat = true; $y_repeat = true; if (isset($properties['BACKGROUND-REPEAT'])) { if ($properties['BACKGROUND-REPEAT']=='no-repeat' || $properties['BACKGROUND-REPEAT']=='repeat-x') { $y_repeat = false; } if ($properties['BACKGROUND-REPEAT']=='no-repeat' || $properties['BACKGROUND-REPEAT']=='repeat-y') { $x_repeat = false; } } $x_pos = 0; $y_pos = 0; if (isset($properties['BACKGROUND-POSITION'])) { $ppos = preg_split('/\s+/',$properties['BACKGROUND-POSITION']); $x_pos = $ppos[0]; $y_pos = $ppos[1]; if (!stristr($x_pos ,'%') ) { $x_pos = $this->ConvertSize($x_pos ,$maxwidth,$this->FontSize); } if (!stristr($y_pos ,'%') ) { $y_pos = $this->ConvertSize($y_pos ,$maxwidth,$this->FontSize); } } if (isset($properties['BACKGROUND-IMAGE-RESIZE'])) { $resize = $properties['BACKGROUND-IMAGE-RESIZE']; } else { $resize = 0; } if (isset($properties['BACKGROUND-IMAGE-OPACITY'])) { $opacity = $properties['BACKGROUND-IMAGE-OPACITY']; } else { $opacity = 1; } return array('image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$sizesarray['itype'], 'origin'=>$origin, 'size'=>$size ); } } return false; } function PrintBodyBackgrounds() { $s = ''; $clx = 0; $cly = 0; $clw = $this->w; $clh = $this->h; if ($this->pageDim[$this->page]['outer_width_LR'] || $this->pageDim[$this->page]['outer_width_TB']) { $clx = $this->pageDim[$this->page]['outer_width_LR'] - $this->pageDim[$this->page]['bleedMargin']; $cly = $this->pageDim[$this->page]['outer_width_TB'] - $this->pageDim[$this->page]['bleedMargin']; $clw = $this->w - 2*$clx; $clh = $this->h - 2*$cly; } if ($this->bodyBackgroundColor) { $s .= 'q ' .$this->SetFColor($this->bodyBackgroundColor, true)."\n"; if ($this->bodyBackgroundColor{0}==5) { $s .= $this->SetAlpha(ord($this->bodyBackgroundColor{4})/100, 'Normal', true, 'F')."\n"; } else if ($this->bodyBackgroundColor{0}==6) { $s .= $this->SetAlpha(ord($this->bodyBackgroundColor{5})/100, 'Normal', true, 'F')."\n"; } $s .= sprintf('%.3F %.3F %.3F %.3F re f Q', ($clx*_MPDFK), ($cly*_MPDFK),$clw*_MPDFK,$clh*_MPDFK)."\n"; } if ($this->bodyBackgroundGradient) { $g = $this->grad->parseBackgroundGradient($this->bodyBackgroundGradient); if ($g) { $s .= $this->grad->Gradient($clx, $cly, $clw, $clh, (isset($g['gradtype']) ? $g['gradtype'] : null), $g['stops'], $g['colorspace'], $g['coords'], $g['extend'], true); } } if ($this->bodyBackgroundImage) { if ( $this->bodyBackgroundImage['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $this->bodyBackgroundImage['gradient'])) { $g = $this->grad->parseMozGradient( $this->bodyBackgroundImage['gradient']); if ($g) { $s .= $this->grad->Gradient($clx, $cly, $clw, $clh, $g['type'], $g['stops'], $g['colorspace'], $g['coords'], $g['extend'], true); } } else if ($this->bodyBackgroundImage['image_id']) { $n = count($this->patterns)+1; list($orig_w, $orig_h, $x_repeat, $y_repeat) = $this->_resizeBackgroundImage($this->bodyBackgroundImage['orig_w'], $this->bodyBackgroundImage['orig_h'], $clw, $clh, $this->bodyBackgroundImage['resize'], $this->bodyBackgroundImage['x_repeat'], $this->bodyBackgroundImage['y_repeat']); $this->patterns[$n] = array('x'=>$clx, 'y'=>$cly, 'w'=>$clw, 'h'=>$clh, 'pgh'=>$this->h, 'image_id'=>$this->bodyBackgroundImage['image_id'], 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$this->bodyBackgroundImage['x_pos'], 'y_pos'=>$this->bodyBackgroundImage['y_pos'], 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'itype'=>$this->bodyBackgroundImage['itype']); if (($this->bodyBackgroundImage['opacity']>0 || $this->bodyBackgroundImage['opacity']==='0') && $this->bodyBackgroundImage['opacity']<1) { $opac = $this->SetAlpha($this->bodyBackgroundImage['opacity'],'Normal',true); } else { $opac = ''; } $s .= sprintf('q /Pattern cs /P%d scn %s %.3F %.3F %.3F %.3F re f Q', $n, $opac, ($clx*_MPDFK), ($cly*_MPDFK),$clw*_MPDFK, $clh*_MPDFK) ."\n"; } } return $s; } function PrintPageBackgrounds($adjustmenty=0) { $s = ''; ksort($this->pageBackgrounds); foreach($this->pageBackgrounds AS $bl=>$pbs) { foreach ($pbs AS $pb) { if ((!isset($pb['image_id']) && !isset($pb['gradient'])) || isset($pb['shadowonly'])) { if($pb['z-index']>0) { $this->current_layer = $pb['z-index']; $s .= "\n".'/OCBZ-index /ZI'.$pb['z-index'].' BDC'."\n"; } if($pb['visibility']!='visible') { if($pb['visibility']=='printonly') $s .= '/OC /OC1 BDC'."\n"; else if($pb['visibility']=='screenonly') $s .= '/OC /OC2 BDC'."\n"; else if($pb['visibility']=='hidden') $s .= '/OC /OC3 BDC'."\n"; } if (isset($pb['shadow']) && $pb['shadow']) { $s .= $pb['shadow']."\n"; } if (isset($pb['clippath']) && $pb['clippath']) { $s .= $pb['clippath']."\n"; } $s .= 'q '.$this->SetFColor($pb['col'], true)."\n"; if ($pb['col']{0}==5) { $s .= $this->SetAlpha(ord($pb['col']{4})/100, 'Normal', true, 'F')."\n"; } else if ($pb['col']{0}==6) { $s .= $this->SetAlpha(ord($pb['col']{5})/100, 'Normal', true, 'F')."\n"; } $s .= sprintf('%.3F %.3F %.3F %.3F re f Q',$pb['x']*_MPDFK,($this->h-$pb['y'])*_MPDFK,$pb['w']*_MPDFK,-$pb['h']*_MPDFK)."\n"; if (isset($pb['clippath']) && $pb['clippath']) { $s .= 'Q'."\n"; } if($pb['visibility']!='visible') $s .= 'EMC'."\n"; if($pb['z-index']>0) { $s .= "\n".'EMCBZ-index'."\n"; $this->current_layer = 0; } } } foreach ($pbs AS $pb) { if ((isset($pb['gradient']) && $pb['gradient']) || (isset($pb['image_id']) && $pb['image_id'])) { if($pb['z-index']>0) { $this->current_layer = $pb['z-index']; $s .= "\n".'/OCGZ-index /ZI'.$pb['z-index'].' BDC'."\n"; } if($pb['visibility']!='visible') { if($pb['visibility']=='printonly') $s .= '/OC /OC1 BDC'."\n"; else if($pb['visibility']=='screenonly') $s .= '/OC /OC2 BDC'."\n"; else if($pb['visibility']=='hidden') $s .= '/OC /OC3 BDC'."\n"; } } if (isset($pb['gradient']) && $pb['gradient']) { if (isset($pb['clippath']) && $pb['clippath']) { $s .= $pb['clippath']."\n"; } $s .= $this->grad->Gradient($pb['x'], $pb['y'], $pb['w'], $pb['h'], $pb['gradtype'], $pb['stops'], $pb['colorspace'], $pb['coords'], $pb['extend'], true); if (isset($pb['clippath']) && $pb['clippath']) { $s .= 'Q'."\n"; } } else if (isset($pb['image_id']) && $pb['image_id']) { $pb['y'] -= $adjustmenty; $pb['h'] += $adjustmenty; $n = count($this->patterns)+1; list($orig_w, $orig_h, $x_repeat, $y_repeat) = $this->_resizeBackgroundImage($pb['orig_w'], $pb['orig_h'], $pb['w'], $pb['h'], $pb['resize'], $pb['x_repeat'], $pb['y_repeat'], $pb['bpa'], $pb['size']); $this->patterns[$n] = array('x'=>$pb['x'], 'y'=>$pb['y'], 'w'=>$pb['w'], 'h'=>$pb['h'], 'pgh'=>$this->h, 'image_id'=>$pb['image_id'], 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$pb['x_pos'], 'y_pos'=>$pb['y_pos'], 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'itype'=>$pb['itype'], 'bpa'=>$pb['bpa']); $x = $pb['x']*_MPDFK; $y = ($this->h - $pb['y'])*_MPDFK; $w = $pb['w']*_MPDFK; $h = -$pb['h']*_MPDFK; if (isset($pb['clippath']) && $pb['clippath']) { $s .= $pb['clippath']."\n"; } if ($this->writingHTMLfooter || $this->writingHTMLheader) { $iw = $pb['orig_w']/_MPDFK; $ih = $pb['orig_h']/_MPDFK; $w = $pb['w']; $h = $pb['h']; $x0 = $pb['x']; $y0 = $pb['y']; if (isset($pb['bpa']) && $pb['bpa']) { $w = $pb['bpa']['w']; $h = $pb['bpa']['h']; $x0 = $pb['bpa']['x']; $y0 = $pb['bpa']['y']; } if (isset($pb['size']['w']) && $pb['size']['w']) { $size = $pb['size']; if ($size['w']=='contain') { $ih = $ih * $pb['bpa']['w']/$iw; $iw = $pb['bpa']['w']; if ($ih > $pb['bpa']['h']) { $iw = $iw * $pb['bpa']['h']/$ih; $ih = $pb['bpa']['h']; } } else if ($size['w']=='cover') { $ih = $ih * $pb['bpa']['w']/$iw; $iw = $pb['bpa']['w']; if ($ih < $pb['bpa']['h']) { $iw = $iw * $ih/$pb['bpa']['h']; $ih = $pb['bpa']['h']; } } else { if (stristr($size['w'] ,'%')) { $size['w'] += 0; $size['w'] /= 100; $size['w'] = ($pb['bpa']['w'] * $size['w']); } if (stristr($size['h'] ,'%')) { $size['h'] += 0; $size['h'] /= 100; $size['h'] = ($pb['bpa']['h'] * $size['h']); } if ($size['w']=='auto' && $size['h']=='auto') { $iw = $iw; $ih = $ih; } else if ($size['w']=='auto' && $size['h']!='auto') { $iw = $iw * $size['h']/$ih; $ih = $size['h']; } else if ($size['w']!='auto' && $size['h']=='auto') { $ih = $ih * $size['w']/$iw; $iw = $size['w']; } else { $iw = $size['w']; $ih = $size['h']; } } } if ($pb['x_repeat']) { $nx = ceil($pb['w']/$iw)+1; } else { $nx = 1; } if ($pb['y_repeat']) { $ny = ceil($pb['h']/$ih)+1; } else { $ny = 1; } $x_pos = $pb['x_pos']; if (stristr($x_pos ,'%') ) { $x_pos += 0; $x_pos /= 100; $x_pos = ($pb['bpa']['w'] * $x_pos) - ($iw * $x_pos); } $y_pos = $pb['y_pos']; if (stristr($y_pos ,'%') ) { $y_pos += 0; $y_pos /= 100; $y_pos = ($pb['bpa']['h'] * $y_pos) - ($ih * $y_pos); } if ($nx>1) { while($x_pos>($pb['x']-$pb['bpa']['x'])) { $x_pos -= $iw; } } if ($ny>1) { while($y_pos>($pb['y']-$pb['bpa']['y'])) { $y_pos -= $ih; } } for($xi=0;$xi<$nx;$xi++) { for($yi=0;$yi<$ny;$yi++) { $x = $x0 + $x_pos + ($iw*$xi); $y = $y0 + $y_pos + ($ih*$yi); if ($pb['opacity']>0 && $pb['opacity']<1) { $opac = $this->SetAlpha($pb['opacity'],'Normal',true); } else { $opac = ''; } $s .= sprintf("q %s %.3F 0 0 %.3F %.3F %.3F cm /I%d Do Q", $opac,$iw*_MPDFK,$ih*_MPDFK,$x*_MPDFK,($this->h-($y+$ih))*_MPDFK,$pb['image_id']) ."\n"; } } } else { if (($pb['opacity']>0 || $pb['opacity']==='0') && $pb['opacity']<1) { $opac = $this->SetAlpha($pb['opacity'],'Normal',true); } else { $opac = ''; } $s .= sprintf('q /Pattern cs /P%d scn %s %.3F %.3F %.3F %.3F re f Q', $n, $opac, $x, $y, $w, $h) ."\n"; } if (isset($pb['clippath']) && $pb['clippath']) { $s .= 'Q'."\n"; } } if ((isset($pb['gradient']) && $pb['gradient']) || (isset($pb['image_id']) && $pb['image_id'])) { if($pb['visibility']!='visible') $s .= 'EMC'."\n"; if($pb['z-index']>0) { $s .= "\n".'EMCGZ-index'."\n"; $this->current_layer = 0; } } } } return $s; } function PrintTableBackgrounds($adjustmenty=0) { $s = ''; ksort($this->tableBackgrounds); foreach($this->tableBackgrounds AS $bl=>$pbs) { foreach ($pbs AS $pb) { if ((!isset($pb['gradient']) || !$pb['gradient']) && (!isset($pb['image_id']) || !$pb['image_id'])) { $s .= 'q '.$this->SetFColor($pb['col'], true)."\n"; if ($pb['col']{0}==5) { $s .= $this->SetAlpha(ord($pb['col']{4})/100, 'Normal', true, 'F')."\n"; } else if ($pb['col']{0}==6) { $s .= $this->SetAlpha(ord($pb['col']{5})/100, 'Normal', true, 'F')."\n"; } $s .= sprintf('%.3F %.3F %.3F %.3F re %s Q',$pb['x']*_MPDFK,($this->h-$pb['y'])*_MPDFK,$pb['w']*_MPDFK,-$pb['h']*_MPDFK,'f')."\n"; } if (isset($pb['gradient']) && $pb['gradient']) { if (isset($pb['clippath']) && $pb['clippath']) { $s .= $pb['clippath']."\n"; } $s .= $this->grad->Gradient($pb['x'], $pb['y'], $pb['w'], $pb['h'], $pb['gradtype'], $pb['stops'], $pb['colorspace'], $pb['coords'], $pb['extend'], true); if (isset($pb['clippath']) && $pb['clippath']) { $s .= 'Q'."\n"; } } if (isset($pb['image_id']) && $pb['image_id']) { $pb['y'] -= $adjustmenty; $pb['h'] += $adjustmenty; $n = count($this->patterns)+1; list($orig_w, $orig_h, $x_repeat, $y_repeat) = $this->_resizeBackgroundImage($pb['orig_w'], $pb['orig_h'], $pb['w'], $pb['h'], $pb['resize'], $pb['x_repeat'], $pb['y_repeat']); $this->patterns[$n] = array('x'=>$pb['x'], 'y'=>$pb['y'], 'w'=>$pb['w'], 'h'=>$pb['h'], 'pgh'=>$this->h, 'image_id'=>$pb['image_id'], 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$pb['x_pos'], 'y_pos'=>$pb['y_pos'], 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'itype'=>$pb['itype']); $x = $pb['x']*_MPDFK; $y = ($this->h - $pb['y'])*_MPDFK; $w = $pb['w']*_MPDFK; $h = -$pb['h']*_MPDFK; if (isset($pb['clippath']) && $pb['clippath']) { $s .= $pb['clippath']."\n"; } if ($pb['opacity']>0 && $pb['opacity']<1) { $opac = $this->SetAlpha($pb['opacity'],'Normal',true); } else { $opac = ''; } $s .= sprintf('q /Pattern cs /P%d scn %s %.3F %.3F %.3F %.3F re f Q', $n, $opac, $x, $y, $w, $h) ."\n"; if (isset($pb['clippath']) && $pb['clippath']) { $s .= 'Q'."\n"; } } } } return $s; } function BeginLayer($id) { if($this->current_layer>0) $this->EndLayer(); if ($id < 1) { return false; } if (!isset($this->layers[$id])) { $this->layers[$id] = array('name'=>'Layer '.($id) ); if (($this->PDFA || $this->PDFX)) { $this->PDFAXwarnings[] = "Cannot use layers when using PDFA or PDFX"; return ''; } else if (!$this->PDFA && !$this->PDFX) { $this->pdf_version='1.5'; } } $this->current_layer = $id; $this->_out('/OCZ-index /ZI'.$id.' BDC'); $this->pageoutput[$this->page] = array(); } function EndLayer() { if($this->current_layer>0) { $this->_out('EMCZ-index'); $this->current_layer = 0; } } function AddPages($orientation='',$condition='', $resetpagenum='', $pagenumstyle='', $suppress='',$mgl='',$mgr='',$mgt='',$mgb='',$mgh='',$mgf='',$ohname='',$ehname='',$ofname='',$efname='',$ohvalue=0,$ehvalue=0,$ofvalue=0,$efvalue=0,$pagesel='',$newformat='') { $this->AddPage($orientation,$condition,$resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf, $ohname, $ehname, $ofname, $efname, $ohvalue, $ehvalue, $ofvalue, $efvalue,$pagesel,$newformat); } function AddPageByArray($a) { if (!is_array($a)) { $a = array(); } $orientation = (isset($a['orientation']) ? $a['orientation'] : ''); $condition = (isset($a['condition']) ? $a['condition'] : (isset($a['type']) ? $a['type'] : '')); $resetpagenum = (isset($a['resetpagenum']) ? $a['resetpagenum'] : ''); $pagenumstyle = (isset($a['pagenumstyle']) ? $a['pagenumstyle'] : ''); $suppress = (isset($a['suppress']) ? $a['suppress'] : ''); $mgl = (isset($a['mgl']) ? $a['mgl'] : (isset($a['margin-left']) ? $a['margin-left'] : '')); $mgr = (isset($a['mgr']) ? $a['mgr'] : (isset($a['margin-right']) ? $a['margin-right'] : '')); $mgt = (isset($a['mgt']) ? $a['mgt'] : (isset($a['margin-top']) ? $a['margin-top'] : '')); $mgb = (isset($a['mgb']) ? $a['mgb'] : (isset($a['margin-bottom']) ? $a['margin-bottom'] : '')); $mgh = (isset($a['mgh']) ? $a['mgh'] : (isset($a['margin-header']) ? $a['margin-header'] : '')); $mgf = (isset($a['mgf']) ? $a['mgf'] : (isset($a['margin-footer']) ? $a['margin-footer'] : '')); $ohname = (isset($a['ohname']) ? $a['ohname'] : (isset($a['odd-header-name']) ? $a['odd-header-name'] : '')); $ehname = (isset($a['ehname']) ? $a['ehname'] : (isset($a['even-header-name']) ? $a['even-header-name'] : '')); $ofname = (isset($a['ofname']) ? $a['ofname'] : (isset($a['odd-footer-name']) ? $a['odd-footer-name'] : '')); $efname = (isset($a['efname']) ? $a['efname'] : (isset($a['even-footer-name']) ? $a['even-footer-name'] : '')); $ohvalue = (isset($a['ohvalue']) ? $a['ohvalue'] : (isset($a['odd-header-value']) ? $a['odd-header-value'] : 0)); $ehvalue = (isset($a['ehvalue']) ? $a['ehvalue'] : (isset($a['even-header-value']) ? $a['even-header-value'] : 0)); $ofvalue = (isset($a['ofvalue']) ? $a['ofvalue'] : (isset($a['odd-footer-value']) ? $a['odd-footer-value'] : 0)); $efvalue = (isset($a['efvalue']) ? $a['efvalue'] : (isset($a['even-footer-value']) ? $a['even-footer-value'] : 0)); $pagesel = (isset($a['pagesel']) ? $a['pagesel'] : (isset($a['pageselector']) ? $a['pageselector'] : '')); $newformat = (isset($a['newformat']) ? $a['newformat'] : (isset($a['sheet-size']) ? $a['sheet-size'] : '')); $this->AddPage($orientation,$condition,$resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf, $ohname, $ehname, $ofname, $efname, $ohvalue, $ehvalue, $ofvalue, $efvalue,$pagesel,$newformat); } function AddPage($orientation='',$condition='', $resetpagenum='', $pagenumstyle='', $suppress='',$mgl='',$mgr='',$mgt='',$mgb='',$mgh='',$mgf='',$ohname='',$ehname='',$ofname='',$efname='',$ohvalue=0,$ehvalue=0,$ofvalue=0,$efvalue=0,$pagesel='',$newformat='') { if ($this->state > 0 && $this->page < count($this->pages)) { $bak_cml = $this->cMarginL; $bak_cmr = $this->cMarginR; $bak_dw = $this->divwidth; if ($this->blklvl > 0) { $save_tr = $this->table_rotate; $this->table_rotate = 0; if ($this->y == $this->blk[$this->blklvl]['y0']) { $this->blk[$this->blklvl]['startpage']++; } if (($this->y > $this->blk[$this->blklvl]['y0']) || $this->flowingBlockAttr['is_table'] ) { $toplvl = $this->blklvl; } else { $toplvl = $this->blklvl-1; } $sy = $this->y; for ($bl=1;$bl<=$toplvl;$bl++) { $this->PaintDivBB('pagebottom',0,$bl); } $this->y = $sy; $this->table_rotate = $save_tr; } $s = $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $family=$this->FontFamily; $style=$this->FontStyle.($this->U ? 'U' : '').($this->S ? 'S' : ''); $size=$this->FontSizePt; $lw=$this->LineWidth; $dc=$this->DrawColor; $fc=$this->FillColor; $tc=$this->TextColor; $cf=$this->ColorFlag; $this->printfloatbuffer(); $this->page++; $this->ResetMargins(); $this->SetAutoPageBreak($this->autoPageBreak,$this->bMargin); $this->x=$this->lMargin; $this->y=$this->tMargin; $this->FontFamily=''; $this->_out('2 J'); $this->LineWidth=$lw; $this->_out(sprintf('%.3F w',$lw*_MPDFK)); if($family) $this->SetFont($family,$style,$size,true,true); $this->DrawColor=$dc; if($dc!=$this->defDrawColor) $this->_out($dc); $this->FillColor=$fc; if($fc!=$this->defFillColor) $this->_out($fc); $this->TextColor=$tc; $this->ColorFlag=$cf; for($bl=1;$bl<=$this->blklvl;$bl++) { $this->blk[$bl]['y0'] = $this->y; if (!isset($this->blk[$bl]['marginCorrected'][$this->page])) { $this->blk[$bl]['x0'] += $this->MarginCorrection; } $this->blk[$bl]['marginCorrected'][$this->page] = true; } $this->cMarginL = $bak_cml; $this->cMarginR = $bak_cmr; $this->divwidth = $bak_dw; return ''; } if($this->state==0) $this->Open(); $bak_cml = $this->cMarginL; $bak_cmr = $this->cMarginR; $bak_dw = $this->divwidth; $bak_lh = $this->lineheight; $orientation = substr(strtoupper($orientation),0,1); $condition = strtoupper($condition); if ($condition == 'NEXT-EVEN') { if (!$this->mirrorMargins) { $condition = ''; } else { if ($pagesel) { $pbch = $pagesel; $pagesel = ''; } else { $pbch = false; } $this->AddPage($this->CurOrientation,'O'); if ($pbch ) { $pagesel = $pbch; } $condition = ''; } } if ($condition == 'NEXT-ODD') { if (!$this->mirrorMargins) { $condition = ''; } else { if ($pagesel) { $pbch = $pagesel; $pagesel = ''; } else { $pbch = false; } $this->AddPage($this->CurOrientation,'E'); if ($pbch ) { $pagesel = $pbch; } $condition = ''; } } if ($condition == 'E') { if (!$this->mirrorMargins || ($this->page)%2==0) { return false; } } if ($condition == 'O') { if (!$this->mirrorMargins || ($this->page)%2==1) { return false; } } if ($resetpagenum || $pagenumstyle || $suppress) { $this->PageNumSubstitutions[] = array('from'=>($this->page+1), 'reset'=> $resetpagenum, 'type'=>$pagenumstyle, 'suppress'=>$suppress); } $save_tr = $this->table_rotate; $this->table_rotate = 0; $save_kwt = $this->kwt; $this->kwt = 0; $save_layer = $this->current_layer; $save_vis = $this->visibility; if($this->visibility!='visible') $this->SetVisibility('visible'); $this->EndLayer(); if (!$this->ColActive && $this->blklvl > 0) { if (isset($this->blk[$this->blklvl]['y0']) && $this->y == $this->blk[$this->blklvl]['y0']) { if (isset($this->blk[$this->blklvl]['startpage'])) { $this->blk[$this->blklvl]['startpage']++; } else { $this->blk[$this->blklvl]['startpage'] = 1; } } if ((isset($this->blk[$this->blklvl]['y0']) && $this->y > $this->blk[$this->blklvl]['y0']) || $this->flowingBlockAttr['is_table'] ) { $toplvl = $this->blklvl; } else { $toplvl = $this->blklvl-1; } $sy = $this->y; for ($bl=1;$bl<=$toplvl;$bl++) { if ($this->blk[$bl]['z-index']>0) { $this->BeginLayer($this->blk[$bl]['z-index']); } if (isset($this->blk[$bl]['visibility']) && $this->blk[$bl]['visibility'] && $this->blk[$bl]['visibility']!='visible') { $this->SetVisibility($this->blk[$bl]['visibility']); } $this->PaintDivBB('pagebottom',0,$bl); } $this->y = $sy; } if($this->visibility!='visible') $this->SetVisibility('visible'); $this->EndLayer(); if ($this->page > 0) { $s = ''; $s .= $this->PrintBodyBackgrounds(); $s .= $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', "\n".$s."\n".'\\1', $this->pages[$this->page]); $this->pageBackgrounds = array(); } $save_kt = $this->keep_block_together; $this->keep_block_together = 0; $save_cols = false; if ($this->ColActive) { $save_cols = true; $save_nbcol = $this->NbCol; $this->SetColumns(0); } $family=$this->FontFamily; $style=$this->FontStyle.($this->U ? 'U' : '').($this->S ? 'S' : ''); $size=$this->FontSizePt; $this->ColumnAdjust = true; $lw=$this->LineWidth; $dc=$this->DrawColor; $fc=$this->FillColor; $tc=$this->TextColor; $cf=$this->ColorFlag; if($this->page>0) { $this->InFooter=true; $this->Reset(); $this->pageoutput[$this->page] = array(); $this->Footer(); $this->_endpage(); } $this->_beginpage($orientation,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$newformat); if ($this->docTemplate) { $pagecount = $this->SetSourceFile($this->docTemplate); if (($this->page - $this->docTemplateStart) > $pagecount) { if ($this->docTemplateContinue) { $tplIdx = $this->ImportPage($pagecount); $this->UseTemplate($tplIdx); } } else { $tplIdx = $this->ImportPage(($this->page - $this->docTemplateStart)); $this->UseTemplate($tplIdx); } } if ($this->pageTemplate) { $this->UseTemplate($this->pageTemplate); } $this->_out('___PAGE___START'.date('jY')); $this->_out('___BACKGROUND___PATTERNS'.date('jY')); $this->_out('___HEADER___MARKER'.date('jY')); $this->pageBackgrounds = array(); $this->SetLineCap(2); $this->LineWidth=$lw; $this->_out(sprintf('%.3F w',$lw*_MPDFK)); if($family) $this->SetFont($family,$style,$size,true,true); $this->DrawColor=$dc; if($dc!=$this->defDrawColor) $this->_out($dc); $this->FillColor=$fc; if($fc!=$this->defFillColor) $this->_out($fc); $this->TextColor=$tc; $this->ColorFlag=$cf; $this->Header(); if($this->LineWidth!=$lw) { $this->LineWidth=$lw; $this->_out(sprintf('%.3F w',$lw*_MPDFK)); } if($family) $this->SetFont($family,$style,$size,true,true); if($this->DrawColor!=$dc) { $this->DrawColor=$dc; $this->_out($dc); } if($this->FillColor!=$fc) { $this->FillColor=$fc; $this->_out($fc); } $this->TextColor=$tc; $this->ColorFlag=$cf; $this->InFooter=false; if ($save_layer>0) $this->BeginLayer($save_layer); if($save_vis!='visible') $this->SetVisibility($save_vis); if ($save_cols) { $this->SetColumns($save_nbcol,$this->colvAlign,$this->ColGap); } if ($this->ColActive) { $this->SetCol(0); } if (!$this->ColActive) { for($bl=1;$bl<=$this->blklvl;$bl++) { $this->blk[$bl]['y0'] = $this->y; if (isset($this->blk[$bl]['x0'])) { $this->blk[$bl]['x0'] += $this->MarginCorrection; } else { $this->blk[$bl]['x0'] = $this->MarginCorrection; } $this->blk[$bl]['marginCorrected'][$this->page] = true; } } $this->table_rotate = $save_tr; $this->kwt = $save_kwt; $this->keep_block_together = $save_kt ; $this->cMarginL = $bak_cml; $this->cMarginR = $bak_cmr; $this->divwidth = $bak_dw; $this->lineheight = $bak_lh; } function PageNo() { return $this->page; } function AddSpotColorsFromFile($file) { $colors = @file($file) or die("Cannot load spot colors file - ".$file); foreach($colors AS $sc) { list($name, $c, $m, $y, $k) = preg_split("/\t/",$sc); $c = intval($c); $m = intval($m); $y = intval($y); $k = intval($k); $this->AddSpotColor($name, $c, $m, $y, $k); } } function AddSpotColor($name, $c, $m, $y, $k) { $name = strtoupper(trim($name)); if(!isset($this->spotColors[$name])) { $i=count($this->spotColors)+1; $this->spotColors[$name]=array('i'=>$i,'c'=>$c,'m'=>$m,'y'=>$y,'k'=>$k); $this->spotColorIDs[$i]=$name; } } function SetColor($col, $type='') { $out = ''; if ($col{0}==3 || $col{0}==5) { $out = sprintf('%.3F %.3F %.3F rg',ord($col{1})/255,ord($col{2})/255,ord($col{3})/255); } else if ($col{0}==1) { $out = sprintf('%.3F g',ord($col{1})/255); } else if ($col{0}==2) { $out = sprintf('/CS%d cs %.3F scn',ord($col{1}),ord($col{2})/100); } else if ($col{0}==4 || $col{0}==6) { $out = sprintf('%.3F %.3F %.3F %.3F k', ord($col{1})/100, ord($col{2})/100, ord($col{3})/100, ord($col{4})/100); } if ($type=='Draw') { $out = strtoupper($out); } else if ($type=='CodeOnly') { $out = preg_replace('/\s(rg|g|k)/','',$out); } return $out; } function SetDColor($col, $return=false) { $out = $this->SetColor($col, 'Draw'); if ($return) { return $out; } if ($out=='') { return ''; } $this->DrawColor = $out; if($this->page>0 && ((isset($this->pageoutput[$this->page]['DrawColor']) && $this->pageoutput[$this->page]['DrawColor'] != $this->DrawColor) || !isset($this->pageoutput[$this->page]['DrawColor']) || $this->keep_block_together)) { $this->_out($this->DrawColor); } $this->pageoutput[$this->page]['DrawColor'] = $this->DrawColor; } function SetFColor($col, $return=false) { $out = $this->SetColor($col, 'Fill'); if ($return) { return $out; } if ($out=='') { return ''; } $this->FillColor = $out; $this->ColorFlag = ($out != $this->TextColor); if($this->page>0 && ((isset($this->pageoutput[$this->page]['FillColor']) && $this->pageoutput[$this->page]['FillColor'] != $this->FillColor) || !isset($this->pageoutput[$this->page]['FillColor']) || $this->keep_block_together)) { $this->_out($this->FillColor); } $this->pageoutput[$this->page]['FillColor'] = $this->FillColor; } function SetTColor($col, $return=false) { $out = $this->SetColor($col, 'Text'); if ($return) { return $out; } if ($out=='') { return ''; } $this->TextColor = $out; $this->ColorFlag = ($this->FillColor != $out); } function SetDrawColor($r,$g=-1,$b=-1,$col4=-1, $return=false) { $col = array(); if(($r==0 and $g==0 and $b==0 && $col4 == -1) or $g==-1) { $col = $this->ConvertColor($r); } else if ($col4 == -1) { $col = $this->ConvertColor('rgb('.$r.','.$g.','.$b.')'); } else { $col = $this->ConvertColor('cmyk('.$r.','.$g.','.$b.','.$col4.')'); } $out = $this->SetDColor($col, $return); return $out; } function SetFillColor($r,$g=-1,$b=-1,$col4=-1, $return=false) { $col = array(); if(($r==0 and $g==0 and $b==0 && $col4 == -1) or $g==-1) { $col = $this->ConvertColor($r); } else if ($col4 == -1) { $col = $this->ConvertColor('rgb('.$r.','.$g.','.$b.')'); } else { $col = $this->ConvertColor('cmyk('.$r.','.$g.','.$b.','.$col4.')'); } $out = $this->SetFColor($col, $return); return $out; } function SetTextColor($r,$g=-1,$b=-1,$col4=-1, $return=false) { $col = array(); if(($r==0 and $g==0 and $b==0 && $col4 == -1) or $g==-1) { $col = $this->ConvertColor($r); } else if ($col4 == -1) { $col = $this->ConvertColor('rgb('.$r.','.$g.','.$b.')'); } else { $col = $this->ConvertColor('cmyk('.$r.','.$g.','.$b.','.$col4.')'); } $out = $this->SetTColor($col, $return); return $out; } function _getCharWidth(&$cw, $u, $isdef=true) { if ($u==0) { $w = false; } else { $w = (ord($cw[$u*2]) << 8) + ord($cw[$u*2+1]); } if ($w == 65535) { return 0; } else if ($w) { return $w; } else if ($isdef) { return false; } else { return 0; } } function _charDefined(&$cw, $u) { if ($u==0) { return false; } $w = (ord($cw[$u*2]) << 8) + ord($cw[$u*2+1]); if ($w) { return true; } else { return false; } } function GetCharWidthCore($c) { $c = (string)$c; $w = 0; if ($c == chr(173) && $this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats') { return 0; } else if ($this->S && isset($this->upperCase[ord($c)])) { $charw = $this->CurrentFont['cw'][chr($this->upperCase[ord($c)])]; if ($charw!==false) { $charw = $charw*$this->smCapsScale * $this->smCapsStretch/100; $w+=$charw; } } else if (isset($this->CurrentFont['cw'][$c])) { $w += $this->CurrentFont['cw'][$c]; } else if (isset($this->CurrentFont['cw'][ord($c)])) { $w += $this->CurrentFont['cw'][ord($c)]; } $w *= ($this->FontSize/ 1000); if ($this->minwSpacing || $this->fixedlSpacing) { if ($c==' ') $nb_spaces = 1; else $nb_spaces = 0; $w += $this->fixedlSpacing + ($nb_spaces * $this->minwSpacing); } return ($w); } function GetCharWidthNonCore($c, $addSubset=true) { $c = (string)$c; $w = 0; $unicode = $this->UTF8StringToArray($c, $addSubset); $char = $unicode[0]; if ($this->CurrentFont['type'] == 'Type0') { if ($char == 173) { return 0; } elseif (isset($this->CurrentFont['cw'][$char])) { $w+=$this->CurrentFont['cw'][$char]; } elseif(isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else { $w += 500; } } else { if ($char == 173) { return 0; } else if ($this->S && isset($this->upperCase[$char])) { $charw = $this->_getCharWidth($this->CurrentFont['cw'],$this->upperCase[$char]); if ($charw!==false) { $charw = $charw*$this->smCapsScale * $this->smCapsStretch/100; $w+=$charw; } elseif(isset($this->CurrentFont['desc']['MissingWidth'])) { $w += $this->CurrentFont['desc']['MissingWidth']; } elseif(isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else { $w += 500; } } else { $charw = $this->_getCharWidth($this->CurrentFont['cw'],$char); if ($charw!==false) { $w+=$charw; } elseif(isset($this->CurrentFont['desc']['MissingWidth'])) { $w += $this->CurrentFont['desc']['MissingWidth']; } elseif(isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else { $w += 500; } } } $w *= ($this->FontSize/ 1000); if ($this->minwSpacing || $this->fixedlSpacing) { if ($c==' ') $nb_spaces = 1; else $nb_spaces = 0; $w += $this->fixedlSpacing + ($nb_spaces * $this->minwSpacing); } return ($w); } function GetCharWidth($c, $addSubset=true) { if (!$this->usingCoreFont) { return $this->GetCharWidthNonCore($c, $addSubset); } else { return $this->GetCharWidthCore($c); } } function GetStringWidth($s, $addSubset=true) { $s = (string)$s; $cw = &$this->CurrentFont['cw']; $w = 0; $kerning = 0; $lastchar = 0; $nb_carac = 0; $nb_spaces = 0; if ($this->iterationCounter) $s = preg_replace('/{iteration ([a-zA-Z0-9_]+)}/', '\\1', $s); if (!$this->usingCoreFont) { $s = str_replace("\xc2\xad",'',$s ); $unicode = $this->UTF8StringToArray($s, $addSubset); if ($this->minwSpacing || $this->fixedlSpacing) { $nb_carac = count($unicode); $nb_spaces = mb_substr_count($s,' ', $this->mb_enc); } if ($this->CurrentFont['type'] == 'Type0') { foreach($unicode as $char) { if (isset($cw[$char])) { $w+=$cw[$char]; } elseif(isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else { $w += 500; } } } else { foreach($unicode as $char) { if ($this->S && isset($this->upperCase[$char])) { $charw = $this->_getCharWidth($cw,$this->upperCase[$char]); if ($charw!==false) { $charw = $charw*$this->smCapsScale * $this->smCapsStretch/100; $w+=$charw; } elseif(isset($this->CurrentFont['desc']['MissingWidth'])) { $w += $this->CurrentFont['desc']['MissingWidth']; } elseif(isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else { $w += 500; } } else { $charw = $this->_getCharWidth($cw,$char); if ($charw!==false) { $w+=$charw; } elseif(isset($this->CurrentFont['desc']['MissingWidth'])) { $w += $this->CurrentFont['desc']['MissingWidth']; } elseif(isset($this->CurrentFont['MissingWidth'])) { $w += $this->CurrentFont['MissingWidth']; } else { $w += 500; } if ($this->kerning && $this->useKerning && $lastchar) { if (isset($this->CurrentFont['kerninfo'][$lastchar][$char])) { $kerning += $this->CurrentFont['kerninfo'][$lastchar][$char]; } } $lastchar = $char; } } } } else { if ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats') { $s = str_replace(chr(173),'',$s ); } $nb_carac = $l = strlen($s); if ($this->minwSpacing || $this->fixedlSpacing) { $nb_spaces = substr_count($s,' '); } for($i=0; $i<$l; $i++) { if ($this->S && isset($this->upperCase[ord($s[$i])])) { $charw = $cw[chr($this->upperCase[ord($s[$i])])]; if ($charw!==false) { $charw = $charw*$this->smCapsScale * $this->smCapsStretch/100; $w+=$charw; } } else if (isset($cw[$s[$i]])) { $w += $cw[$s[$i]]; } else if (isset($cw[ord($s[$i])])) { $w += $cw[ord($s[$i])]; } if ($this->kerning && $this->useKerning && $i>0) { if (isset($this->CurrentFont['kerninfo'][$s[($i-1)]][$s[$i]])) { $kerning += $this->CurrentFont['kerninfo'][$s[($i-1)]][$s[$i]]; } } } } unset($cw); if ($this->kerning && $this->useKerning) { $w += $kerning; } $w *= ($this->FontSize/ 1000); $w += (($nb_carac + $nb_spaces) * $this->fixedlSpacing) + ($nb_spaces * $this->minwSpacing); return ($w); } function SetLineWidth($width) { $this->LineWidth=$width; $lwout = (sprintf('%.3F w',$width*_MPDFK)); if($this->page>0 && ((isset($this->pageoutput[$this->page]['LineWidth']) && $this->pageoutput[$this->page]['LineWidth'] != $lwout) || !isset($this->pageoutput[$this->page]['LineWidth']) || $this->keep_block_together)) { $this->_out($lwout); } $this->pageoutput[$this->page]['LineWidth'] = $lwout; } function Line($x1,$y1,$x2,$y2) { $this->_out(sprintf('%.3F %.3F m %.3F %.3F l S',$x1*_MPDFK,($this->h-$y1)*_MPDFK,$x2*_MPDFK,($this->h-$y2)*_MPDFK)); } function Arrow($x1,$y1,$x2,$y2,$headsize=3,$fill='B',$angle=25) { if($fill=='F') $fill='f'; elseif($fill=='FD' or $fill=='DF' or $fill=='B') $fill='B'; else $fill='S'; $a = atan2(($y2-$y1),($x2-$x1)); $b = $a + deg2rad($angle); $c = $a - deg2rad($angle); $x3 = $x2 - ($headsize* cos($b)); $y3 = $this->h-($y2 - ($headsize* sin($b))); $x4 = $x2 - ($headsize* cos($c)); $y4 = $this->h-($y2 - ($headsize* sin($c))); $x5 = $x3-($x3-$x4)/2; $y5 = $y3-($y3-$y4)/2; $s = ''; $s.=sprintf('%.3F %.3F m %.3F %.3F l S',$x1*_MPDFK,($this->h-$y1)*_MPDFK,$x5*_MPDFK,$y5*_MPDFK); $this->_out($s); $s = ''; $s.=sprintf('%.3F %.3F m %.3F %.3F l %.3F %.3F l %.3F %.3F l %.3F %.3F l ',$x5*_MPDFK,$y5*_MPDFK,$x3*_MPDFK,$y3*_MPDFK,$x2*_MPDFK,($this->h-$y2)*_MPDFK,$x4*_MPDFK,$y4*_MPDFK,$x5*_MPDFK,$y5*_MPDFK); $s.=$fill; $this->_out($s); } function Rect($x,$y,$w,$h,$style='') { if($style=='F') $op='f'; elseif($style=='FD' or $style=='DF') $op='B'; else $op='S'; $this->_out(sprintf('%.3F %.3F %.3F %.3F re %s',$x*_MPDFK,($this->h-$y)*_MPDFK,$w*_MPDFK,-$h*_MPDFK,$op)); } function AddFont($family,$style='') { if(empty($family)) { return; } $family = strtolower($family); $style=strtoupper($style); $style=str_replace('U','',$style); if($style=='IB') $style='BI'; $fontkey = $family.$style; if(isset($this->fonts[$fontkey])) { return; } if (in_array($family,$this->available_CJK_fonts)) { if (empty($this->Big5_widths)) { require(_MPDF_PATH . 'includes/CJKdata.php'); } $this->AddCJKFont($family); return; } if ($this->usingCoreFont) { die("mPDF Error - problem with Font management"); } $stylekey = $style; if (!$style) { $stylekey = 'R'; } if (!isset($this->fontdata[$family][$stylekey]) || !$this->fontdata[$family][$stylekey]) { die('mPDF Error - Font is not supported - '.$family.' '.$style); } $name = ''; $originalsize = 0; $sip = false; $smp = false; $unAGlyphs = false; $haskerninfo = false; $BMPselected = false; @include(_MPDF_TTFONTDATAPATH.$fontkey.'.mtx.php'); $ttffile = ''; if (defined('_MPDF_SYSTEM_TTFONTS')) { $ttffile = _MPDF_SYSTEM_TTFONTS.$this->fontdata[$family][$stylekey]; if (!file_exists($ttffile)) { $ttffile = ''; } } if (!$ttffile) { $ttffile = _MPDF_TTFONTPATH.$this->fontdata[$family][$stylekey]; if (!file_exists($ttffile)) { die("mPDF Error - cannot find TTF TrueType font file - ".$ttffile); } } $ttfstat = stat($ttffile); if (isset($this->fontdata[$family]['TTCfontID'][$stylekey])) { $TTCfontID = $this->fontdata[$family]['TTCfontID'][$stylekey]; } else { $TTCfontID = 0; } $BMPonly = false; if (in_array($family,$this->BMPonly)) { $BMPonly = true; } $regenerate = false; if ($BMPonly && !$BMPselected) { $regenerate = true; } else if (!$BMPonly && $BMPselected) { $regenerate = true; } if ($this->useKerning && !$haskerninfo) { $regenerate = true; } if (isset($this->fontdata[$family]['unAGlyphs']) && $this->fontdata[$family]['unAGlyphs'] && !$unAGlyphs) { $regenerate = true; $unAGlyphs = true; } else if ((!isset($this->fontdata[$family]['unAGlyphs']) || !$this->fontdata[$family]['unAGlyphs']) && $unAGlyphs) { $regenerate = true; $unAGlyphs = false; } if (!isset($name) || $originalsize != $ttfstat['size'] || $regenerate) { if (!class_exists('TTFontFile', false)) { include(_MPDF_PATH .'classes/ttfontsuni.php'); } $ttf = new TTFontFile(); $ttf->getMetrics($ttffile, $TTCfontID, $this->debugfonts, $BMPonly, $this->useKerning, $unAGlyphs); $cw = $ttf->charWidths; $kerninfo = $ttf->kerninfo; $haskerninfo = true; $name = preg_replace('/[ ()]/','',$ttf->fullName); $sip = $ttf->sipset; $smp = $ttf->smpset; $desc= array('Ascent'=>round($ttf->ascent), 'Descent'=>round($ttf->descent), 'CapHeight'=>round($ttf->capHeight), 'Flags'=>$ttf->flags, 'FontBBox'=>'['.round($ttf->bbox[0])." ".round($ttf->bbox[1])." ".round($ttf->bbox[2])." ".round($ttf->bbox[3]).']', 'ItalicAngle'=>$ttf->italicAngle, 'StemV'=>round($ttf->stemV), 'MissingWidth'=>round($ttf->defaultWidth)); $panose = ''; if (count($ttf->panose)) { $panoseArray = array_merge(array($ttf->sFamilyClass, $ttf->sFamilySubClass), $ttf->panose); foreach($panoseArray as $value) $panose .= ' '.dechex($value); } $up = round($ttf->underlinePosition); $ut = round($ttf->underlineThickness); $originalsize = $ttfstat['size']+0; $type = 'TTF'; $s='<?php'."\n"; $s.='$name=\''.$name."';\n"; $s.='$type=\''.$type."';\n"; $s.='$desc='.var_export($desc,true).";\n"; $s.='$up='.$up.";\n"; $s.='$ut='.$ut.";\n"; $s.='$ttffile=\''.$ttffile."';\n"; $s.='$TTCfontID=\''.$TTCfontID."';\n"; $s.='$originalsize='.$originalsize.";\n"; if ($sip) $s.='$sip=true;'."\n"; else $s.='$sip=false;'."\n"; if ($smp) $s.='$smp=true;'."\n"; else $s.='$smp=false;'."\n"; if ($BMPonly) $s.='$BMPselected=true;'."\n"; else $s.='$BMPselected=false;'."\n"; $s.='$fontkey=\''.$fontkey."';\n"; $s.='$panose=\''.$panose."';\n"; if ($this->useKerning) { $s.='$kerninfo='.var_export($kerninfo,true).";\n"; $s.='$haskerninfo=true;'."\n"; } else $s.='$haskerninfo=false;'."\n"; if ($this->fontdata[$family]['unAGlyphs']) { $s.='$unAGlyphs=true;'."\n"; } else $s.='$unAGlyphs=false;'."\n"; $s.="?>"; if (is_writable(dirname(_MPDF_TTFONTDATAPATH.'x'))) { $fh = fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.mtx.php',"w"); fwrite($fh,$s,strlen($s)); fclose($fh); $fh = fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.cw.dat',"wb"); fwrite($fh,$cw,strlen($cw)); fclose($fh); @unlink(_MPDF_TTFONTDATAPATH.$fontkey.'.cgm'); @unlink(_MPDF_TTFONTDATAPATH.$fontkey.'.z'); @unlink(_MPDF_TTFONTDATAPATH.$fontkey.'.cw127.php'); @unlink(_MPDF_TTFONTDATAPATH.$fontkey.'.cw'); } else if ($this->debugfonts) { $this->Error('Cannot write to the font caching directory - '._MPDF_TTFONTDATAPATH); } unset($ttf); } else { $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$fontkey.'.cw.dat'); } if (isset($this->fontdata[$family]['indic']) && $this->fontdata[$family]['indic']) { $indic = true; } else { $indic = false; } if (isset($this->fontdata[$family]['sip-ext']) && $this->fontdata[$family]['sip-ext']) { $sipext = $this->fontdata[$family]['sip-ext']; } else { $sipext = ''; } $i = count($this->fonts)+$this->extraFontSubsets+1; if ($sip || $smp) { $this->fonts[$fontkey] = array('i'=>$i, 'type'=>$type, 'name'=>$name, 'desc'=>$desc, 'panose'=>$panose, 'up'=>$up, 'ut'=>$ut, 'cw'=>$cw, 'ttffile'=>$ttffile, 'fontkey'=>$fontkey, 'subsets'=>array(0=>range(0,127)), 'subsetfontids'=>array($i), 'used'=>false, 'indic'=>$indic, 'sip'=>$sip, 'sipext'=>$sipext, 'smp'=>$smp, 'TTCfontID' => $TTCfontID, 'unAGlyphs' => false); } else { $ss = array(); for ($s=32; $s<128; $s++) { $ss[$s] = $s; } $this->fonts[$fontkey] = array('i'=>$i, 'type'=>$type, 'name'=>$name, 'desc'=>$desc, 'panose'=>$panose, 'up'=>$up, 'ut'=>$ut, 'cw'=>$cw, 'ttffile'=>$ttffile, 'fontkey'=>$fontkey, 'subset'=>$ss, 'used'=>false, 'indic'=>$indic, 'sip'=>$sip, 'sipext'=>$sipext, 'smp'=>$smp, 'TTCfontID' => $TTCfontID, 'unAGlyphs' => $unAGlyphs); } if ($this->useKerning && $haskerninfo) { $this->fonts[$fontkey]['kerninfo'] = $kerninfo; } $this->FontFiles[$fontkey]=array('length1'=>$originalsize, 'type'=>"TTF", 'ttffile'=>$ttffile, 'sip'=>$sip, 'smp'=>$smp); unset($cw); } function SetFont($family,$style='',$size=0, $write=true, $forcewrite=false) { $family=strtolower($family); if (!$this->onlyCoreFonts) { if ($family == 'sans' || $family == 'sans-serif') { $family = $this->sans_fonts[0]; } if ($family == 'serif') { $family = $this->serif_fonts[0]; } if ($family == 'mono' || $family == 'monospace') { $family = $this->mono_fonts[0]; } } if (isset($this->fonttrans[$family]) && $this->fonttrans[$family]) { $family = $this->fonttrans[$family]; } if($family=='') { if ($this->FontFamily) { $family=$this->FontFamily; } else if ($this->default_font) { $family=$this->default_font; } else { $this->Error("No font or default font set!"); } } $this->ReqFontStyle = $style; if (($family == 'csymbol') || ($family == 'czapfdingbats') || ($family == 'ctimes') || ($family == 'ccourier') || ($family == 'chelvetica')) { if ($this->PDFA || $this->PDFX) { if ($family == 'csymbol' || $family == 'czapfdingbats') { $this->Error("Symbol and Zapfdingbats cannot be embedded in mPDF (required for PDFA1-b or PDFX/1-a)."); } if ($family == 'ctimes' || $family == 'ccourier' || $family == 'chelvetica') { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "Core Adobe font ".ucfirst($family)." cannot be embedded in mPDF, which is required for PDFA1-b or PDFX/1-a. (Embedded font will be substituted.)"; } if ($family == 'chelvetica') { $family = 'sans'; } if ($family == 'ctimes') { $family = 'serif'; } if ($family == 'ccourier') { $family = 'mono'; } } $this->usingCoreFont = false; } else { $this->usingCoreFont = true; } if($family=='csymbol' || $family=='czapfdingbats') { $style=''; } } else { $this->usingCoreFont = false; } $this->U=false; $this->S=false; if ($style) { $style=strtoupper($style); if(strpos($style,'U')!==false) { $this->U=true; $style=str_replace('U','',$style); } if(strpos($style,'S')!==false) { $this->S=true; if (empty($this->upperCase)) { @include(_MPDF_PATH.'includes/upperCase.php'); } $style=str_replace('S','',$style); } if ($style=='IB') $style='BI'; } if ($size==0) $size=$this->FontSizePt; $fontkey=$family.$style; $stylekey = $style; if (!$stylekey) { $stylekey = "R"; } if (!$this->onlyCoreFonts && !$this->usingCoreFont) { if(!isset($this->fonts[$fontkey]) || count($this->default_available_fonts) != count($this->available_unifonts) ) { if (in_array($fontkey,$this->available_CJK_fonts)) { if(!isset($this->fonts[$fontkey])) { if (empty($this->Big5_widths)) { require(_MPDF_PATH . 'includes/CJKdata.php'); } $this->AddCJKFont($family); } } else if (!in_array($fontkey,$this->available_unifonts)) { if (in_array($family,$this->available_unifonts)) { $style = ''; } else if (count($this->available_unifonts) == 1) { $family = $this->available_unifonts[0]; $style = ''; } else { $found = 0; if (in_array($family,$this->sans_fonts)) { $i = array_intersect($this->sans_fonts,$this->available_unifonts); if (count($i)) { $i = array_values($i); if (!in_array(($i[0].$style),$this->available_unifonts)) { $style = ''; } $family = $i[0]; $found = 1; } } else if (in_array($family,$this->serif_fonts)) { $i = array_intersect($this->serif_fonts,$this->available_unifonts); if (count($i)) { $i = array_values($i); if (!in_array(($i[0].$style),$this->available_unifonts)) { $style = ''; } $family = $i[0]; $found = 1; } } else if (in_array($family,$this->mono_fonts)) { $i = array_intersect($this->mono_fonts,$this->available_unifonts); if (count($i)) { $i = array_values($i); if (!in_array(($i[0].$style),$this->available_unifonts)) { $style = ''; } $family = $i[0]; $found = 1; } } if (!$found) { $fs = $this->available_unifonts[0]; preg_match('/^([a-z_0-9\-]+)([BI]{0,2})$/',$fs,$fas); $ws = $fas[1].$style; if (in_array($ws,$this->available_unifonts)) { $family = $fas[1]; } else if (in_array($fas[1],$this->available_unifonts)) { $family = $fas[1]; $style = ''; } else { $family = $fas[1]; $style = $fas[2]; } } } $fontkey = $family.$style; } } $this->AddFont($family, $style); if($this->FontFamily == $family && $this->FontFamily == $this->currentfontfamily && $this->FontStyle == $style && $this->FontStyle == $this->currentfontstyle && $this->FontSizePt == $size && $this->FontSizePt == $this->currentfontsize && !$forcewrite) { return $family; } $fontkey = $family.$style; $this->FontFamily = $family; $this->FontStyle = $style; $this->FontSizePt = $size; $this->FontSize = $size / _MPDFK; $this->CurrentFont = &$this->fonts[$fontkey]; if ($write) { $fontout = (sprintf('BT /F%d %.3F Tf ET', $this->CurrentFont['i'], $this->FontSizePt)); if($this->page>0 && ((isset($this->pageoutput[$this->page]['Font']) && $this->pageoutput[$this->page]['Font'] != $fontout) || !isset($this->pageoutput[$this->page]['Font']) || $this->keep_block_together)) { $this->_out($fontout); } $this->pageoutput[$this->page]['Font'] = $fontout; } $this->currentfontfamily=$family; $this->currentfontsize=$size; $this->currentfontstyle=$style.($this->U ? 'U' : '').($this->S ? 'S' : ''); $this->setMBencoding('UTF-8'); } else { if ($this->PDFA || $this->PDFX) { $this->Error('Core Adobe fonts cannot be embedded in mPDF (required for PDFA1-b or PDFX/1-a) - cannot use option to use core fonts.'); } $this->setMBencoding('windows-1252'); if(($this->FontFamily == $family) AND ($this->FontStyle == $style) AND ($this->FontSizePt == $size) && !$forcewrite) { return $family; } if (!isset($this->CoreFonts[$fontkey])) { if (in_array($family,$this->serif_fonts)) { $family = 'ctimes'; } else if (in_array($family,$this->mono_fonts)) { $family = 'ccourier'; } else { $family = 'chelvetica'; } $this->usingCoreFont = true; $fontkey = $family.$style; } if(!isset($this->fonts[$fontkey])) { if (isset($this->CoreFonts[$fontkey])) { $file=$family; if($family=='ctimes' || $family=='chelvetica' || $family=='ccourier') { $file.=strtolower($style); } $file.='.php'; include(_MPDF_PATH.'font/'.$file); if(!isset($cw)) { $this->Error('Could not include font metric file'); } $i=count($this->fonts)+$this->extraFontSubsets+1; $this->fonts[$fontkey]=array('i'=>$i,'type'=>'core','name'=>$this->CoreFonts[$fontkey],'desc'=>$desc,'up'=>$up,'ut'=>$ut,'cw'=>$cw); if ($this->useKerning) { $this->fonts[$fontkey]['kerninfo'] = $kerninfo; } } else { die('mPDF error - Font not defined'); } } if(($this->FontFamily == $family) AND ($this->FontStyle == $style) AND ($this->FontSizePt == $size) && !$forcewrite) { return $family; } $this->FontFamily=$family; $this->FontStyle=$style; $this->FontSizePt=$size; $this->FontSize=$size/_MPDFK; $this->CurrentFont=&$this->fonts[$fontkey]; if ($write) { $fontout = (sprintf('BT /F%d %.3F Tf ET', $this->CurrentFont['i'], $this->FontSizePt)); if($this->page>0 && ((isset($this->pageoutput[$this->page]['Font']) && $this->pageoutput[$this->page]['Font'] != $fontout) || !isset($this->pageoutput[$this->page]['Font']) || $this->keep_block_together)) { $this->_out($fontout); } $this->pageoutput[$this->page]['Font'] = $fontout; } $this->currentfontfamily=$family; $this->currentfontsize=$size; $this->currentfontstyle=$style.($this->U ? 'U' : '').($this->S ? 'S' : ''); } return $family; } function SetFontSize($size,$write=true) { if($this->FontSizePt==$size) return; $this->FontSizePt=$size; $this->FontSize=$size/_MPDFK; $this->currentfontsize=$size; if ($write) { $fontout = (sprintf('BT /F%d %.3F Tf ET', $this->CurrentFont['i'], $this->FontSizePt)); if($this->page>0 && ((isset($this->pageoutput[$this->page]['Font']) && $this->pageoutput[$this->page]['Font'] != $fontout) || !isset($this->pageoutput[$this->page]['Font']) || $this->keep_block_together)) { $this->_out($fontout); } $this->pageoutput[$this->page]['Font'] = $fontout; } } function AddLink() { $n=count($this->links)+1; $this->links[$n]=array(0,0); return $n; } function SetLink($link,$y=0,$page=-1) { if($y==-1) $y=$this->y; if($page==-1) $page=$this->page; $this->links[$link]=array($page,$y); } function Link($x,$y,$w,$h,$link) { $l = array($x*_MPDFK,$this->hPt-$y*_MPDFK,$w*_MPDFK,$h*_MPDFK,$link); if ($this->keep_block_together) { $this->ktLinks[$this->page][]= $l; return; } else if ($this->table_rotate) { $this->tbrot_Links[$this->page][]= $l; return; } else if ($this->kwt) { $this->kwt_Links[$this->page][]= $l; return; } if ($this->writingHTMLheader || $this->writingHTMLfooter) { $this->HTMLheaderPageLinks[]= $l; return; } $this->PageLinks[$this->page][]= $l; $ref = count($this->PageLinks[$this->page])-1; $this->columnLinks[$this->CurrCol][INTVAL($this->x)][INTVAL($this->y)] = $ref; } function Text($x,$y,$txt) { $s = 'q '; if ($this->falseBoldWeight && strpos($this->ReqFontStyle,"B") !== false && strpos($this->FontStyle,"B") === false) { $s .= '2 Tr 1 J 1 j '; $s .= sprintf('%.3F w ',($this->FontSize/130)*_MPDFK*$this->falseBoldWeight); $tc = strtoupper($this->TextColor); if($this->FillColor!=$tc) { $s .= $tc.' '; } } if (strpos($this->ReqFontStyle,"I") !== false && strpos($this->FontStyle,"I") === false) { $aix = '1 0 0.261799 1 %.3F %.3F Tm'; } else { $aix = '%.3F %.3F Td'; } if($this->ColorFlag) $s.=$this->TextColor.' '; $this->CurrentFont['used']= true; if ($this->CurrentFont['type']=='TTF' && ($this->CurrentFont['sip'] || $this->CurrentFont['smp'])) { $txt2 = str_replace(chr(194).chr(160),chr(32),$txt); $txt2 = $this->UTF8toSubset($txt2); $s.=sprintf('BT '.$aix.' %s Tj ET ',$x*_MPDFK,($this->h-$y)*_MPDFK,$txt2); } else if (!$this->usingCoreFont) { $txt2 = str_replace(chr(194).chr(160),chr(32),$txt); $this->UTF8StringToArray($txt2); if ($this->kerning && $this->useKerning) { $s .= $this->_kern($txt2, '', $aix, $x, $y); } else { $txt2= $this->UTF8ToUTF16BE($txt2, false); $s.=sprintf('BT '.$aix.' (%s) Tj ET ',$x*_MPDFK,($this->h-$y)*_MPDFK,$this->_escape($txt2)); } } else { $txt2 = str_replace(chr(160),chr(32),$txt); if ($this->kerning && $this->useKerning) { $s .= $this->_kern($txt2, '', $aix, $x, $y); } else { $s.=sprintf('BT '.$aix.' (%s) Tj ET ',$x*_MPDFK,($this->h-$y)*_MPDFK,$this->_escape($txt2)); } } if($this->U && $txt!='') { $c = strtoupper($this->TextColor); if($this->FillColor!=$c) { $s.= ' '.$c.' '; } if (isset($this->CurrentFont['up'])) { $up=$this->CurrentFont['up']; } else { $up = -100; } $adjusty = (-$up/1000* $this->FontSize); if (isset($this->CurrentFont['ut'])) { $ut=$this->CurrentFont['ut']/1000* $this->FontSize; } else { $ut = 60/1000* $this->FontSize; } $olw = $this->LineWidth; $s.=' '.(sprintf(' %.3F w',$ut*_MPDFK)); $s.=' '.$this->_dounderline($x,$y + $adjusty,$txt); $s.=' '.(sprintf(' %.3F w',$olw*_MPDFK)); if($this->FillColor!=$c) { $s.= ' '.$this->FillColor.' '; } } if($this->strike && $txt!='') { $c = strtoupper($this->TextColor); if($this->FillColor!=$c) { $s.= ' '.$c.' '; } if (isset($this->CurrentFont['desc']['CapHeight'])) { $ch=$this->CurrentFont['desc']['CapHeight']; } else { $ch = 700; } $adjusty = (-$ch/1000* $this->FontSize) * 0.35; if (isset($this->CurrentFont['ut'])) { $ut=$this->CurrentFont['ut']/1000* $this->FontSize; } else { $ut = 60/1000* $this->FontSize; } $olw = $this->LineWidth; $s.=' '.(sprintf(' %.3F w',$ut*_MPDFK)); $s.=' '.$this->_dounderline($x,$y+$adjusty,$txt); $s.=' '.(sprintf(' %.3F w',$olw*_MPDFK)); if($this->FillColor!=$c) { $s.= ' '.$this->FillColor.' '; } } $s .= 'Q'; $this->_out($s); } function WriteText($x,$y,$txt) { $txt = $this->purify_utf8_text($txt); if ($this->text_input_as_HTML) { $txt = $this->all_entities_to_utf8($txt); } if ($this->usingCoreFont) { $txt = mb_convert_encoding($txt,$this->mb_enc,'UTF-8'); } if (preg_match("/([".$this->pregRTLchars."])/u", $txt)) { $this->biDirectional = true; } $this->magic_reverse_dir($txt, true, $this->directionality); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($txt); $this->Text($x,$y,$txt); } function WriteCell($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='', $currentx=0) { $txt = $this->purify_utf8_text($txt); if ($this->text_input_as_HTML) { $txt = $this->all_entities_to_utf8($txt); } if ($this->usingCoreFont) { $txt = mb_convert_encoding($txt,$this->mb_enc,'UTF-8'); } if (preg_match("/([".$this->pregRTLchars."])/u", $txt)) { $this->biDirectional = true; } $this->magic_reverse_dir($txt, true, $this->directionality); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($txt); $this->Cell($w,$h,$txt,$border,$ln,$align,$fill,$link, $currentx); } function ResetSpacing() { if ($this->ws != 0) { $this->_out('BT 0 Tw ET'); } $this->ws=0; if ($this->charspacing != 0) { $this->_out('BT 0 Tc ET'); } $this->charspacing=0; } function SetSpacing($cs,$ws) { if (intval($cs*1000)==0) { $cs = 0; } if ($cs) { $this->_out(sprintf('BT %.3F Tc ET',$cs)); } else if ($this->charspacing != 0) { $this->_out('BT 0 Tc ET'); } $this->charspacing=$cs; if (intval($ws*1000)==0) { $ws = 0; } if ($ws) { $this->_out(sprintf('BT %.3F Tw ET',$ws)); } else if ($this->ws != 0) { $this->_out('BT 0 Tw ET'); } $this->ws=$ws; } function GetJspacing($nc,$ns,$w,$inclCursive) { $ws = 0; $charspacing = 0; $ww = $this->jSWord; $ncx = $nc-1; if ($nc == 0) { return array(0,0); } else if ($nc==1) { $charspacing = $w; } else if ($this->fixedlSpacing !== false || $inclCursive) { if ($ns) { $ws = $w / $ns; } } else if (!$ns) { $charspacing = $w / ($ncx ); if (($this->jSmaxChar > 0) && ($charspacing > $this->jSmaxChar)) { $charspacing = $this->jSmaxChar; } } else if ($ns == ($ncx )) { $charspacing = $w / $ns; } else { if ($this->usingCoreFont) { $cs = ($w * (1 - $this->jSWord)) / ($ncx ); if (($this->jSmaxChar > 0) && ($cs > $this->jSmaxChar)) { $cs = $this->jSmaxChar; $ww = 1 - (($cs * ($ncx ))/$w); } $charspacing = $cs; $ws = ($w * ($ww) ) / $ns; } else { $cs = ($w * (1 - $this->jSWord)) / ($ncx -$ns); if (($this->jSmaxChar > 0) && ($cs > $this->jSmaxChar)) { $cs = $this->jSmaxChar; $ww = 1 - (($cs * ($ncx -$ns))/$w); } $charspacing = $cs; $ws = (($w * ($ww) ) / $ns) - $charspacing; } } return array($charspacing,$ws); } function Cell($w,$h=0,$txt='',$border=0,$ln=0,$align='',$fill=0,$link='', $currentx=0, $lcpaddingL=0, $lcpaddingR=0, $valign='M', $spanfill=0, $abovefont=0, $belowfont=0, $exactWidth=false) { if ($this->usingCoreFont) { $txt = str_replace(chr(160),chr(32),$txt); } else { $txt = str_replace(chr(194).chr(160),chr(32),$txt); } $oldcolumn = $this->CurrCol; if (!$this->tableLevel && (($this->y+$this->divheight>$this->PageBreakTrigger) || ($this->y+$h>$this->PageBreakTrigger) || ($this->y+($h*2)>$this->PageBreakTrigger && $this->blk[$this->blklvl]['page_break_after_avoid'])) and !$this->InFooter and $this->AcceptPageBreak()) { $x=$this->x; $ws=$this->ws; $charspacing=$this->charspacing; $this->ResetSpacing(); $this->AddPage($this->CurOrientation); $x += $this->MarginCorrection; if ($currentx) { $currentx += $this->MarginCorrection; } $this->x=$x; $this->SetSpacing($charspacing,$ws); } if ($this->CurrCol != $oldcolumn) { if ($currentx) { $currentx += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); } $this->x += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); } if ($this->ColActive) { if ($h) { $this->ColDetails[$this->CurrCol]['bottom_margin'] = $this->y+$h; } else { $this->ColDetails[$this->CurrCol]['bottom_margin'] = $this->y+$this->divheight; } } if ($this->keep_block_together) { if ($h) { $this->ktBlock[$this->page]['bottom_margin'] = $this->y+$h; } } if($w==0) $w = $this->w-$this->rMargin-$this->x; $s=''; if($fill==1 && $this->FillColor) { if((isset($this->pageoutput[$this->page]['FillColor']) && $this->pageoutput[$this->page]['FillColor'] != $this->FillColor) || !isset($this->pageoutput[$this->page]['FillColor']) || $this->keep_block_together) { $s .= $this->FillColor.' '; } $this->pageoutput[$this->page]['FillColor'] = $this->FillColor; } $boxtop = $this->y; $boxheight = $h; $boxbottom = $this->y+$h; if($txt!='') { if ($this->linemaxfontsize && !$this->processingHeader) { $bfs = $this->linemaxfontsize; } else { $bfs = $this->FontSize; } $bfx = $this->baselineC; $baseline = $bfx*$bfs; if($this->SUP) { $baseline += ($bfx-1.05)*$this->FontSize; } else if($this->SUB) { $baseline += ($bfx + 0.04)*$this->FontSize; } else if($this->bullet) { $baseline += ($bfx-0.7)*$this->FontSize; } if ($abovefont || $belowfont) { $va = $abovefont + (0.5*$bfs); } else if ($this->lineheight_correction) { if ($valign == 'T') { $va = (0.5 * $bfs * $this->lineheight_correction); } else if ($valign == 'B') { $va = $h-(0.5 * $bfs * $this->lineheight_correction); } else { $va = 0.5*$h; } } else { if ($valign == 'T') { $va = (0.5 * $bfs * $this->default_lineheight_correction); } else if ($valign == 'B') { $va = $h-(0.5 * $bfs * $this->default_lineheight_correction); } else { $va = 0.5*$h; } } if ($spanfill || !empty($this->spanborddet) || $link!='') { $exth = 0.2; $boxtop = $this->y+$baseline+$va-($this->FontSize*(1+$exth/2)*(0.5+$bfx)); $boxheight = $this->FontSize * (1+$exth); $boxbottom = $boxtop + $boxheight; } } $bbw = $tbw = $lbw = $rbw = 0; if (!empty($this->spanborddet)) { if (!isset($this->spanborddet['B'])) { $this->spanborddet['B'] = array('s' => 0, 'style' => '', 'w' => 0); } if (!isset($this->spanborddet['T'])) { $this->spanborddet['T'] = array('s' => 0, 'style' => '', 'w' => 0); } if (!isset($this->spanborddet['L'])) { $this->spanborddet['L'] = array('s' => 0, 'style' => '', 'w' => 0); } if (!isset($this->spanborddet['R'])) { $this->spanborddet['R'] = array('s' => 0, 'style' => '', 'w' => 0); } $bbw = $this->spanborddet['B']['w']; $tbw = $this->spanborddet['T']['w']; $lbw = $this->spanborddet['L']['w']; $rbw = $this->spanborddet['R']['w']; } if($fill==1 || $border==1 || !empty($this->spanborddet)) { if (!empty($this->spanborddet)) { if ($fill==1) { $s.=sprintf('%.3F %.3F %.3F %.3F re f ',($this->x-$lbw)*_MPDFK,($this->h-$boxtop+$tbw)*_MPDFK,($w+$lbw+$rbw)*_MPDFK,(-$boxheight-$tbw-$bbw)*_MPDFK); } $s.= ' q '; $dashon = 3; $dashoff = 3.5; $dot = 2.5; if($tbw) { $short = 0; if ($this->spanborddet['T']['style'] == 'dashed') { $s.=sprintf(' 0 j 0 J [%.3F %.3F] 0 d ',$tbw*$dashon*_MPDFK,$tbw*$dashoff*_MPDFK); } else if ($this->spanborddet['T']['style'] == 'dotted') { $s.=sprintf(' 1 j 1 J [%.3F %.3F] %.3F d ',0.001,$tbw*$dot*_MPDFK,-$tbw/2*_MPDFK); $short = $tbw/2; } else { $s.=' 0 j 0 J [] 0 d '; } $c = $this->SetDColor($this->spanborddet['T']['c'],true); if ($this->spanborddet['T']['style'] == 'double') { $s.=sprintf(' %s %.3F w ',$c,$tbw/3*_MPDFK); $xadj = $xadj2 = 0; if ($this->spanborddet['L']['style'] == 'double') { $xadj = $this->spanborddet['L']['w']*2/3; } if ($this->spanborddet['R']['style'] == 'double') { $xadj2 = $this->spanborddet['R']['w']*2/3; } $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw)*_MPDFK,($this->h-$boxtop+$tbw*5/6)*_MPDFK,($this->x+$w+$rbw-$short)*_MPDFK,($this->h-$boxtop+$tbw*5/6)*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw+$xadj)*_MPDFK,($this->h-$boxtop+$tbw/6)*_MPDFK,($this->x+$w+$rbw-$short-$xadj2)*_MPDFK,($this->h-$boxtop+$tbw/6)*_MPDFK); } else { $s.=sprintf(' %s %.3F w ',$c,$tbw*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw)*_MPDFK,($this->h-$boxtop+$tbw/2)*_MPDFK,($this->x+$w+$rbw-$short)*_MPDFK,($this->h-$boxtop+$tbw/2)*_MPDFK); } } if($bbw) { $short = 0; if ($this->spanborddet['B']['style'] == 'dashed') { $s.=sprintf(' 0 j 0 J [%.3F %.3F] 0 d ',$bbw*$dashon*_MPDFK,$bbw*$dashoff*_MPDFK); } else if ($this->spanborddet['B']['style'] == 'dotted') { $s.=sprintf(' 1 j 1 J [%.3F %.3F] %.3F d ',0.001,$bbw*$dot*_MPDFK,-$bbw/2*_MPDFK); $short = $bbw/2; } else { $s.=' 0 j 0 J [] 0 d '; } $c = $this->SetDColor($this->spanborddet['B']['c'],true); if ($this->spanborddet['B']['style'] == 'double') { $s.=sprintf(' %s %.3F w ',$c,$bbw/3*_MPDFK); $xadj = $xadj2 = 0; if ($this->spanborddet['L']['style'] == 'double') { $xadj = $this->spanborddet['L']['w']*2/3; } if ($this->spanborddet['R']['style'] == 'double') { $xadj2 = $this->spanborddet['R']['w']*2/3; } $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw+$xadj)*_MPDFK,($this->h-$boxbottom-$bbw/6)*_MPDFK,($this->x+$w+$rbw-$short-$xadj2)*_MPDFK,($this->h-$boxbottom-$bbw/6)*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw)*_MPDFK,($this->h-$boxbottom-$bbw*5/6)*_MPDFK,($this->x+$w+$rbw-$short)*_MPDFK,($this->h-$boxbottom-$bbw*5/6)*_MPDFK); } else { $s.=sprintf(' %s %.3F w ',$c,$bbw*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw)*_MPDFK,($this->h-$boxbottom-$bbw/2)*_MPDFK,($this->x+$w+$rbw-$short)*_MPDFK,($this->h-$boxbottom-$bbw/2)*_MPDFK); } } if($lbw) { $short = 0; if ($this->spanborddet['L']['style'] == 'dashed') { $s.=sprintf(' 0 j 0 J [%.3F %.3F] 0 d ',$lbw*$dashon*_MPDFK,$lbw*$dashoff*_MPDFK); } else if ($this->spanborddet['L']['style'] == 'dotted') { $s.=sprintf(' 1 j 1 J [%.3F %.3F] %.3F d ',0.001,$lbw*$dot*_MPDFK,-$lbw/2*_MPDFK); $short = $lbw/2; } else { $s.=' 0 j 0 J [] 0 d '; } $c = $this->SetDColor($this->spanborddet['L']['c'],true); if ($this->spanborddet['L']['style'] == 'double') { $s.=sprintf(' %s %.3F w ',$c,$lbw/3*_MPDFK); $yadj = $yadj2 = 0; if ($this->spanborddet['T']['style'] == 'double') { $yadj = $this->spanborddet['T']['w']*2/3; } if ($this->spanborddet['B']['style'] == 'double') { $yadj2 = $this->spanborddet['B']['w']*2/3; } $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw/6)*_MPDFK,($this->h-$boxtop+$tbw-$yadj)*_MPDFK,($this->x-$lbw/6)*_MPDFK,($this->h-$boxbottom-$bbw+$short+$yadj2)*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw*5/6)*_MPDFK,($this->h-$boxtop+$tbw)*_MPDFK,($this->x-$lbw*5/6)*_MPDFK,($this->h-$boxbottom-$bbw+$short)*_MPDFK); } else { $s.=sprintf(' %s %.3F w ',$c,$lbw*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x-$lbw/2)*_MPDFK,($this->h-$boxtop+$tbw)*_MPDFK,($this->x-$lbw/2)*_MPDFK,($this->h-$boxbottom-$bbw+$short)*_MPDFK); } } if($rbw) { $short = 0; if ($this->spanborddet['R']['style'] == 'dashed') { $s.=sprintf(' 0 j 0 J [%.3F %.3F] 0 d ',$rbw*$dashon*_MPDFK,$rbw*$dashoff*_MPDFK); } else if ($this->spanborddet['R']['style'] == 'dotted') { $s.=sprintf(' 1 j 1 J [%.3F %.3F] %.3F d ',0.001,$rbw*$dot*_MPDFK,-$rbw/2*_MPDFK); $short = $rbw/2; } else { $s.=' 0 j 0 J [] 0 d '; } $c = $this->SetDColor($this->spanborddet['R']['c'],true); if ($this->spanborddet['R']['style'] == 'double') { $s.=sprintf(' %s %.3F w ',$c,$rbw/3*_MPDFK); $yadj = $yadj2 = 0; if ($this->spanborddet['T']['style'] == 'double') { $yadj = $this->spanborddet['T']['w']*2/3; } if ($this->spanborddet['B']['style'] == 'double') { $yadj2 = $this->spanborddet['B']['w']*2/3; } $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x+$w+$rbw/6)*_MPDFK,($this->h-$boxtop+$tbw-$yadj)*_MPDFK,($this->x+$w+$rbw/6)*_MPDFK,($this->h-$boxbottom-$bbw+$short+$yadj2)*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x+$w+$rbw*5/6)*_MPDFK,($this->h-$boxtop+$tbw)*_MPDFK,($this->x+$w+$rbw*5/6)*_MPDFK,($this->h-$boxbottom-$bbw+$short)*_MPDFK); } else { $s.=sprintf(' %s %.3F w ',$c,$rbw*_MPDFK); $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($this->x+$w+$rbw/2)*_MPDFK,($this->h-$boxtop+$tbw)*_MPDFK,($this->x+$w+$rbw/2)*_MPDFK,($this->h-$boxbottom-$bbw+$short)*_MPDFK); } } $s.= ' Q '; } else { if ($fill==1) $op=($border==1) ? 'B' : 'f'; else $op='S'; $s.=sprintf('%.3F %.3F %.3F %.3F re %s ',$this->x*_MPDFK,($this->h-$boxtop)*_MPDFK,$w*_MPDFK,-$boxheight*_MPDFK,$op); } } if(is_string($border)) { $x=$this->x; $y=$this->y; if(is_int(strpos($border,'L'))) $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',$x*_MPDFK,($this->h-$boxtop)*_MPDFK,$x*_MPDFK,($this->h-($boxbottom))*_MPDFK); if(is_int(strpos($border,'T'))) $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',$x*_MPDFK,($this->h-$boxtop)*_MPDFK,($x+$w)*_MPDFK,($this->h-$boxtop)*_MPDFK); if(is_int(strpos($border,'R'))) $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',($x+$w)*_MPDFK,($this->h-$boxtop)*_MPDFK,($x+$w)*_MPDFK,($this->h-($boxbottom))*_MPDFK); if(is_int(strpos($border,'B'))) $s.=sprintf('%.3F %.3F m %.3F %.3F l S ',$x*_MPDFK,($this->h-($boxbottom))*_MPDFK,($x+$w)*_MPDFK,($this->h-($boxbottom))*_MPDFK); } if($txt!='') { if ($exactWidth) $stringWidth = $w; else $stringWidth = $this->GetStringWidth($txt) + ( $this->charspacing * mb_strlen( $txt, $this->mb_enc ) / _MPDFK ) + ( $this->ws * mb_substr_count( $txt, ' ', $this->mb_enc ) / _MPDFK ); if($align=='R') { $dx=$w-$this->cMarginR - $stringWidth - $lcpaddingR; } elseif($align=='C') { $dx=(($w - $stringWidth )/2); } elseif($align=='L' or $align=='J') $dx=$this->cMarginL + $lcpaddingL; else $dx = 0; if($this->ColorFlag) $s .='q '.$this->TextColor.' '; if($this->textparam['outline-s'] && !$this->S) { $s .=' '.sprintf('%.3F w',$this->LineWidth*_MPDFK).' '; $s .=" $this->DrawColor "; $s .=" 2 Tr "; } else if ($this->falseBoldWeight && strpos($this->ReqFontStyle,"B") !== false && strpos($this->FontStyle,"B") === false && !$this->S) { $s .= ' 2 Tr 1 J 1 j '; $s .= ' '.sprintf('%.3F w',($this->FontSize/130)*_MPDFK*$this->falseBoldWeight).' '; $tc = strtoupper($this->TextColor); if($this->FillColor!=$tc) { $s .= ' '.$tc.' '; } } else { $s .=" 0 Tr "; } if (strpos($this->ReqFontStyle,"I") !== false && strpos($this->FontStyle,"I") === false) { $aix = '1 0 0.261799 1 %.3F %.3F Tm '; } else { $aix = '%.3F %.3F Td '; } $sub = ''; $this->CurrentFont['used']= true; if ($this->ws && !$this->usingCoreFont && !$this->CurrentFont['sip'] && !$this->CurrentFont['smp'] && !$this->S) { $sub .= ' BT 0 Tw ET '; if ($this->kerning && $this->useKerning) { $sub .= $this->_kern($txt, 'MBTw', $aix, ($this->x+$dx), ($this->y+$baseline+$va)); } else { $space = " "; $space= $this->UTF8ToUTF16BE($space , false); $space=$this->_escape($space ); $sub .=sprintf('BT '.$aix,($this->x+$dx)*_MPDFK,($this->h-($this->y+$baseline+$va))*_MPDFK); $t = explode(' ',$txt); $sub .=sprintf(' %.3F Tc [',$this->charspacing); $numt = count($t); for($i=0;$i<$numt;$i++) { $tx = $t[$i]; $tx = $this->UTF8ToUTF16BE($tx , false); $tx = $this->_escape($tx); $sub .=sprintf('(%s) ',$tx); if (($i+1)<$numt) { $adj = -($this->ws)*1000/$this->FontSizePt; $sub .=sprintf('%d(%s) ',$adj,$space); } } $sub .='] TJ '; $sub .=' ET'; } } else { $txt2= $txt; if ($this->CurrentFont['type']=='TTF' && ($this->CurrentFont['sip'] || $this->CurrentFont['smp'])) { if ($this->S) { $sub .= $this->_smallCaps($txt2, 'SIPSMP', $aix, $dx, _MPDFK, $baseline, $va); } else { $txt2 = $this->UTF8toSubset($txt2); $sub .=sprintf('BT '.$aix.' %s Tj ET',($this->x+$dx)*_MPDFK,($this->h-($this->y+$baseline+$va))*_MPDFK,$txt2); } } else { if ($this->S) { $sub .= $this->_smallCaps($txt2, '', $aix, $dx, _MPDFK, $baseline, $va); } else if ($this->kerning && $this->useKerning) { $sub .= $this->_kern($txt2, '', $aix, ($this->x+$dx), ($this->y+$baseline+$va)); } else { if (!$this->usingCoreFont) { $txt2 = $this->UTF8ToUTF16BE($txt2, false); } $txt2=$this->_escape($txt2); $sub .=sprintf('BT '.$aix.' (%s) Tj ET',($this->x+$dx)*_MPDFK,($this->h-($this->y+$baseline+$va))*_MPDFK,$txt2); } } } if($this->U) { $c = strtoupper($this->TextColor); if($this->FillColor!=$c) { $sub .= ' '.$c.' '; } if (isset($this->CurrentFont['up'])) { $up=$this->CurrentFont['up']; } else { $up = -100; } $adjusty = (-$up/1000* $this->FontSize); if (isset($this->CurrentFont['ut'])) { $ut=$this->CurrentFont['ut']/1000* $this->FontSize; } else { $ut = 60/1000* $this->FontSize; } $olw = $this->LineWidth; $sub .=' '.(sprintf(' %.3F w 0 j 0 J ',$ut*_MPDFK)); $sub .=' '.$this->_dounderline($this->x+$dx,$this->y+$baseline+$va+$adjusty,$txt); $sub .=' '.(sprintf(' %.3F w 2 j 2 J ',$olw*_MPDFK)); if($this->FillColor!=$c) { $sub .= ' '.$this->FillColor.' '; } } if($this->strike) { $c = strtoupper($this->TextColor); if($this->FillColor!=$c) { $sub .= ' '.$c.' '; } if (isset($this->CurrentFont['desc']['CapHeight'])) { $ch=$this->CurrentFont['desc']['CapHeight']; } else { $ch = 700; } $adjusty = (-$ch/1000* $this->FontSize) * 0.35; if (isset($this->CurrentFont['ut'])) { $ut=$this->CurrentFont['ut']/1000* $this->FontSize; } else { $ut = 60/1000* $this->FontSize; } $olw = $this->LineWidth; $sub .=' '.(sprintf(' %.3F w 0 j 0 J ',$ut*_MPDFK)); $sub .=' '.$this->_dounderline($this->x+$dx,$this->y+$baseline+$va+$adjusty,$txt); $sub .=' '.(sprintf(' %.3F w 2 j 2 J ',$olw*_MPDFK)); if($this->FillColor!=$c) { $sub .= ' '.$this->FillColor.' '; } } if ($this->textshadow) { foreach($this->textshadow AS $ts) { $s .= ' q '; $s .= $this->SetTColor($ts['col'], true)."\n"; if ($ts['col']{0}==5 && ord($ts['col']{4})<100) { $s .= $this->SetAlpha(ord($ts['col']{4})/100, 'Normal', true, 'F')."\n"; } else if ($ts['col']{0}==6 && ord($ts['col']{5})<100) { $s .= $this->SetAlpha(ord($ts['col']{5})/100, 'Normal', true, 'F')."\n"; } else if ($ts['col']{0}==1 && $ts['col']{2}==1 && ord($ts['col']{3})<100) { $s .= $this->SetAlpha(ord($ts['col']{3})/100, 'Normal', true, 'F')."\n"; } $s .= sprintf(' 1 0 0 1 %.4F %.4F cm', $ts['x']*_MPDFK, -$ts['y']*_MPDFK)."\n"; $s .= $sub; $s .= ' Q '; } } $s .= $sub; if($this->ColorFlag) $s .=' Q'; if($link!='') { $this->Link($this->x,$boxtop,$w,$boxheight,$link); } } if($s) $this->_out($s); if ($this->ws && !$this->usingCoreFont) { $this->_out(sprintf('BT %.3F Tc ET',$this->charspacing)); } $this->lasth=$h; if( strpos($txt,"\n") !== false) $ln=1; if($ln>0) { $this->y += $h; if($ln==1) { if ($currentx != 0) { $this->x=$currentx; } else { $this->x=$this->lMargin; } } } else $this->x+=$w; } function _kern($txt, $mode, $aix, $x, $y) { if ($mode == 'MBTw') { $space = ' '; $space= $this->UTF8ToUTF16BE($space , false); $space=$this->_escape($space ); $s = sprintf(' BT '.$aix,$x*_MPDFK,($this->h-$y)*_MPDFK); $t = explode(' ',$txt); for($i=0;$i<count($t);$i++) { $tx = $t[$i]; $tj = '('; $unicode = $this->UTF8StringToArray($tx); for($ti=0;$ti<count($unicode);$ti++) { if ($ti > 0 && isset($this->CurrentFont['kerninfo'][$unicode[($ti-1)]][$unicode[$ti]])) { $kern = -$this->CurrentFont['kerninfo'][$unicode[($ti-1)]][$unicode[$ti]]; $tj .= sprintf(')%d(',$kern); } $tc = code2utf($unicode[$ti]); $tc = $this->UTF8ToUTF16BE($tc, false); $tj .= $this->_escape($tc); } $tj .= ')'; $s.=sprintf(' %.3F Tc [%s] TJ',$this->charspacing,$tj); if (($i+1)<count($t)) { $s.=sprintf(' %.3F Tc (%s) Tj',$this->ws+$this->charspacing,$space); } } $s.=' ET '; } else if (!$this->usingCoreFont) { $s = ''; $tj = '('; $unicode = $this->UTF8StringToArray($txt); for($i=0;$i<count($unicode);$i++) { if ($i > 0 && isset($this->CurrentFont['kerninfo'][$unicode[($i-1)]][$unicode[$i]])) { $kern = -$this->CurrentFont['kerninfo'][$unicode[($i-1)]][$unicode[$i]]; $tj .= sprintf(')%d(',$kern); } $tx = code2utf($unicode[$i]); $tx = $this->UTF8ToUTF16BE($tx, false); $tj .= $this->_escape($tx); } $tj .= ')'; $s.=sprintf(' BT '.$aix.' [%s] TJ ET ',$x*_MPDFK,($this->h-$y)*_MPDFK,$tj); } else { $s = ''; $tj = '('; $l = strlen($txt); for($i=0;$i<$l;$i++) { if ($i > 0 && isset($this->CurrentFont['kerninfo'][$txt[($i-1)]][$txt[$i]])) { $kern = -$this->CurrentFont['kerninfo'][$txt[($i-1)]][$txt[$i]]; $tj .= sprintf(')%d(',$kern); } $tj .= $this->_escape($txt[$i]); } $tj .= ')'; $s.=sprintf(' BT '.$aix.' [%s] TJ ET ',$x*_MPDFK,($this->h-$y)*_MPDFK,$tj); } return $s; } function _smallCaps($txt, $mode, $aix, $dx, $k, $baseline, $va) { $upp = false; $str = array(); $bits = array(); if (!$this->usingCoreFont) { $unicode = $this->UTF8StringToArray($txt); foreach($unicode as $char) { if ($this->ws && $char == 32) { if (count($str)) { $bits[] = array($upp, $str, false); } $bits[] = array(false, array(32), true); $str = array(); $upp = false; } else if (isset($this->upperCase[$char])) { if (!$upp) { if (count($str)) { $bits[] = array($upp, $str, false); } $str = array(); } $str[] = $this->upperCase[$char]; if ((!isset($this->CurrentFont['sip']) || !$this->CurrentFont['sip']) && (!isset($this->CurrentFont['smp']) || !$this->CurrentFont['smp'])) { $this->CurrentFont['subset'][$this->upperCase[$char]] = $this->upperCase[$char]; } $upp = true; } else { if ($upp) { if (count($str)) { $bits[] = array($upp, $str, false); } $str = array(); } $str[] = $char; $upp = false; } } } else { for($i=0;$i<strlen($txt);$i++) { if (isset($this->upperCase[ord($txt[$i])]) && $this->upperCase[ord($txt[$i])] < 256) { if (!$upp) { if (count($str)) { $bits[] = array($upp, $str, false); } $str = array(); } $str[] = $this->upperCase[ord($txt[$i])]; $upp = true; } else { if ($upp) { if (count($str)) { $bits[] = array($upp, $str, false); } $str = array(); } $str[] = ord($txt[$i]); $upp = false; } } } if (count($str)) { $bits[] = array($upp, $str, false); } $fid = $this->CurrentFont['i']; $s=sprintf(' BT '.$aix,($this->x+$dx)*$k,($this->h-($this->y+$baseline+$va))*$k); foreach($bits AS $b) { if ($b[0]) { $upp = true; } else { $upp = false; } $size = count ($b[1]); $txt = ''; for ($i = 0; $i < $size; $i++) { $txt .= code2utf($b[1][$i]); } if ($this->usingCoreFont) { $txt = utf8_decode($txt); } if ($mode == 'SIPSMP') { $txt = $this->UTF8toSubset($txt); } else { if (!$this->usingCoreFont) { $txt = $this->UTF8ToUTF16BE($txt, false); } $txt=$this->_escape($txt); $txt = '('.$txt.')'; } if ($b[2]) { $s.=sprintf(' /F%d %.3F Tf %d Tz', $fid, $this->FontSizePt, 100); $s.=sprintf(' %.3F Tc', ($this->charspacing+$this->ws)); $s.=sprintf(' %s Tj', $txt); } else if ($upp) { $s.=sprintf(' /F%d %.3F Tf', $fid, $this->FontSizePt*$this->smCapsScale); $s.=sprintf(' %d Tz', $this->smCapsStretch); $s.=sprintf(' %.3F Tc', ($this->charspacing*100/$this->smCapsStretch)); $s.=sprintf(' %s Tj', $txt); } else { $s.=sprintf(' /F%d %.3F Tf %d Tz', $fid, $this->FontSizePt, 100); $s.=sprintf(' %.3F Tc', ($this->charspacing)); $s.=sprintf(' %s Tj', $txt); } } $s.=' ET '; return $s; } function MultiCell($w,$h,$txt,$border=0,$align='',$fill=0,$link='',$directionality='ltr',$encoded=false) { if (!$encoded) { $txt = $this->purify_utf8_text($txt); if ($this->text_input_as_HTML) { $txt = $this->all_entities_to_utf8($txt); } if ($this->usingCoreFont) { $txt = mb_convert_encoding($txt,$this->mb_enc,'UTF-8'); } else if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) { $this->ConvertIndic($tmp); } if (preg_match("/([".$this->pregRTLchars."])/u", $txt)) { $this->biDirectional = true; } } if (!$align) { $align = $this->defaultAlign; } $cw=&$this->CurrentFont['cw']; if($w==0) $w=$this->w-$this->rMargin-$this->x; $wmax = ($w - ($this->cMarginL+$this->cMarginR)); if ($this->usingCoreFont) { $s=str_replace("\r",'',$txt); $nb=strlen($s); while($nb>0 and $s[$nb-1]=="\n") $nb--; } else { $s=str_replace("\r",'',$txt); $nb=mb_strlen($s, $this->mb_enc ); while($nb>0 and mb_substr($s,$nb-1,1,$this->mb_enc )=="\n") $nb--; } $b=0; if($border) { if($border==1) { $border='LTRB'; $b='LRT'; $b2='LR'; } else { $b2=''; if(is_int(strpos($border,'L'))) $b2.='L'; if(is_int(strpos($border,'R'))) $b2.='R'; $b=is_int(strpos($border,'T')) ? $b2.'T' : $b2; } } $sep=-1; $i=0; $j=0; $l=0; $ns=0; $nl=1; if (!$this->usingCoreFont) { $checkCursive=false; if ($this->biDirectional) { $checkCursive=true; } else if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) { $checkCursive=true; } while($i<$nb) { $c = mb_substr($s,$i,1,$this->mb_enc ); if($c == "\n") { $this->ResetSpacing(); $tmp = rtrim(mb_substr($s,$j,$i-$j,$this->mb_enc)); $this->magic_reverse_dir($tmp, true, $directionality); $this->Cell($w,$h,$tmp,$b,2,$align,$fill,$link); $i++; $sep=-1; $j=$i; $l=0; $ns=0; $nl++; if($border and $nl==2) $b=$b2; continue; } if($c == " ") { $sep=$i; $ls=$l; $ns++; } $l += $this->GetCharWidthNonCore($c); if($l>$wmax) { if($sep==-1) { if($i==$j) $i++; $this->ResetSpacing(); $tmp = rtrim(mb_substr($s,$j,$i-$j,$this->mb_enc)); $this->magic_reverse_dir($tmp, true, $directionality); $this->Cell($w,$h,$tmp,$b,2,$align,$fill,$link); } else { $tmp = rtrim(mb_substr($s,$j,$sep-$j,$this->mb_enc)); if($align=='J') { $tmp = str_replace(chr(194).chr(160),chr(32),$tmp ); $len_ligne = $this->GetStringWidth($tmp ); $nb_carac = mb_strlen( $tmp , $this->mb_enc ) ; $nb_spaces = mb_substr_count( $tmp ,' ', $this->mb_enc ) ; $inclCursive=false; if ($checkCursive) { if (preg_match("/([".$this->pregRTLchars."])/u", $tmp)) { $inclCursive = true; } if (preg_match("/([".$this->pregHIchars.$this->pregBNchars.$this->pregPAchars."])/u", $tmp)) { $inclCursive = true; } } list($charspacing,$ws) = $this->GetJspacing($nb_carac,$nb_spaces,((($wmax) - $len_ligne) * _MPDFK),$inclCursive); $this->SetSpacing($charspacing,$ws); } $this->magic_reverse_dir($tmp, true, $directionality); $this->Cell($w,$h,$tmp,$b,2,$align,$fill,$link); $i=$sep+1; } $sep=-1; $j=$i; $l=0; $ns=0; $nl++; if($border and $nl==2) $b=$b2; } else $i++; } $this->ResetSpacing(); } else { while($i<$nb) { $c=$s[$i]; if($c == "\n") { $this->ResetSpacing(); $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill,$link); $i++; $sep=-1; $j=$i; $l=0; $ns=0; $nl++; if($border and $nl==2) $b=$b2; continue; } if($c == " ") { $sep=$i; $ls=$l; $ns++; } $l += $this->GetCharWidthCore($c); if($l>$wmax) { if($sep==-1) { if($i==$j) $i++; $this->ResetSpacing(); $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill,$link); } else { if($align=='J') { $tmp = rtrim(substr($s,$j,$sep-$j)); $tmp = str_replace(chr(160),chr(32),$tmp); $len_ligne = $this->GetStringWidth($tmp ); $nb_carac = strlen( $tmp ) ; $nb_spaces = substr_count( $tmp ,' ' ) ; list($charspacing,$ws) = $this->GetJspacing($nb_carac,$nb_spaces,((($wmax) - $len_ligne) * _MPDFK),false); $this->SetSpacing($charspacing,$ws); } $this->Cell($w,$h,substr($s,$j,$sep-$j),$b,2,$align,$fill,$link); $i=$sep+1; } $sep=-1; $j=$i; $l=0; $ns=0; $nl++; if($border and $nl==2) $b=$b2; } else $i++; } $this->ResetSpacing(); } if($border and is_int(strpos($border,'B'))) $b.='B'; if (!$this->usingCoreFont) { $tmp = rtrim(mb_substr($s,$j,$i-$j,$this->mb_enc)); $this->magic_reverse_dir($tmp, true, $directionality); $this->Cell($w,$h,$tmp,$b,2,$align,$fill,$link); } else { $this->Cell($w,$h,substr($s,$j,$i-$j),$b,2,$align,$fill,$link); } $this->x=$this->lMargin; } function Write($h,$txt,$currentx=0,$link='',$directionality='ltr',$align='') { if (!class_exists('directw', false)) { include(_MPDF_PATH.'classes/directw.php'); } if (empty($this->directw)) { $this->directw = new directw($this); } $this->directw->Write($h,$txt,$currentx,$link,$directionality,$align); } function saveInlineProperties() { $saved = array(); $saved[ 'family' ] = $this->FontFamily; $saved[ 'style' ] = $this->FontStyle; $saved[ 'sizePt' ] = $this->FontSizePt; $saved[ 'size' ] = $this->FontSize; $saved[ 'HREF' ] = $this->HREF; $saved[ 'underline' ] = $this->U; $saved[ 'smCaps' ] = $this->S; $saved[ 'strike' ] = $this->strike; $saved[ 'textshadow' ] = $this->textshadow; $saved[ 'SUP' ] = $this->SUP; $saved[ 'SUB' ] = $this->SUB; $saved[ 'linewidth' ] = $this->LineWidth; $saved[ 'drawcolor' ] = $this->DrawColor; $saved[ 'textparam' ] = $this->textparam; $saved[ 'toupper' ] = $this->toupper; $saved[ 'tolower' ] = $this->tolower; $saved[ 'capitalize' ] = $this->capitalize; $saved[ 'fontkerning' ] = $this->kerning; $saved[ 'lSpacingCSS' ] = $this->lSpacingCSS; $saved[ 'wSpacingCSS' ] = $this->wSpacingCSS; $saved[ 'I' ] = $this->I; $saved[ 'B' ] = $this->B; $saved[ 'colorarray' ] = $this->colorarray; $saved[ 'bgcolorarray' ] = $this->spanbgcolorarray; $saved[ 'border' ] = $this->spanborddet; $saved[ 'color' ] = $this->TextColor; $saved[ 'bgcolor' ] = $this->FillColor; $saved[ 'lang' ] = $this->currentLang; $saved[ 'display_off' ] = $this->inlineDisplayOff; return $saved; } function restoreInlineProperties( &$saved) { $FontFamily = $saved[ 'family' ]; $this->FontStyle = $saved[ 'style' ]; $this->FontSizePt = $saved[ 'sizePt' ]; $this->FontSize = $saved[ 'size' ]; $this->currentLang = $saved['lang']; if ($this->useLang && !$this->usingCoreFont) { if ($this->currentLang != $this->default_lang && ((strlen($this->currentLang) == 5 && $this->currentLang != 'UTF-8') || strlen($this->currentLang ) == 2)) { list ($coreSuitable,$mpdf_pdf_unifonts) = GetLangOpts($this->currentLang, $this->useAdobeCJK); if ($mpdf_pdf_unifonts) { $this->RestrictUnicodeFonts($mpdf_pdf_unifonts); } else { $this->RestrictUnicodeFonts($this->default_available_fonts ); } } else { $this->RestrictUnicodeFonts($this->default_available_fonts ); } } $this->ColorFlag = ($this->FillColor != $this->TextColor); $this->HREF = $saved[ 'HREF' ]; $this->U = $saved[ 'underline' ]; $this->S = $saved[ 'smCaps' ]; $this->strike = $saved[ 'strike' ]; $this->textshadow = $saved[ 'textshadow' ]; $this->SUP = $saved[ 'SUP' ]; $this->SUB = $saved[ 'SUB' ]; $this->LineWidth = $saved[ 'linewidth' ]; $this->DrawColor = $saved[ 'drawcolor' ]; $this->textparam = $saved[ 'textparam' ]; $this->inlineDisplayOff = $saved['display_off']; $this->toupper = $saved[ 'toupper' ]; $this->tolower = $saved[ 'tolower' ]; $this->capitalize = $saved[ 'capitalize' ]; $this->kerning = $saved[ 'fontkerning' ]; $this->lSpacingCSS = $saved[ 'lSpacingCSS' ]; if (($this->lSpacingCSS || $this->lSpacingCSS==='0') && strtoupper($this->lSpacingCSS) != 'NORMAL') { $this->fixedlSpacing = $this->ConvertSize($this->lSpacingCSS,$this->FontSize); } else { $this->fixedlSpacing = false; } $this->wSpacingCSS = $saved[ 'wSpacingCSS' ]; if ($this->wSpacingCSS && strtoupper($this->wSpacingCSS) != 'NORMAL') { $this->minwSpacing = $this->ConvertSize($this->wSpacingCSS,$this->FontSize); } else { $this->minwSpacing = 0; } $this->SetFont($FontFamily, $saved[ 'style' ].($this->U ? 'U' : '').($this->S ? 'S' : ''),$saved[ 'sizePt' ],false); $this->currentfontstyle = $saved[ 'style' ].($this->U ? 'U' : '').($this->S ? 'S' : ''); $this->currentfontsize = $saved[ 'sizePt' ]; $this->SetStylesArray(array('S'=>$this->S, 'U'=>$this->U, 'B'=>$saved[ 'B' ], 'I'=>$saved[ 'I' ])); $this->TextColor = $saved[ 'color' ]; $this->FillColor = $saved[ 'bgcolor' ]; $this->colorarray = $saved[ 'colorarray' ]; $cor = $saved[ 'colorarray' ]; if ($cor) $this->SetTColor($cor); $this->spanbgcolorarray = $saved[ 'bgcolorarray' ]; $cor = $saved[ 'bgcolorarray' ]; if ($cor) $this->SetFColor($cor); $this->spanborddet = $saved[ 'border' ]; } function GetFirstBlockFill() { $startfill = 0; for ($i=1;$i<=$this->blklvl;$i++) { if ($this->blk[$i]['bgcolor'] || $this->blk[$i]['border_left']['w'] || $this->blk[$i]['border_right']['w'] || $this->blk[$i]['border_top']['w'] || $this->blk[$i]['border_bottom']['w'] ) { $startfill = $i; break; } } return $startfill; } function SetBlockFill($blvl) { if ($this->blk[$blvl]['bgcolor']) { $this->SetFColor($this->blk[$blvl]['bgcolorarray']); return 1; } else { $this->SetFColor($this->ConvertColor(255)); return 0; } } function saveFont() { $saved = array(); $saved[ 'family' ] = $this->FontFamily; $saved[ 'style' ] = $this->FontStyle; $saved[ 'sizePt' ] = $this->FontSizePt; $saved[ 'size' ] = $this->FontSize; $saved[ 'curr' ] = &$this->CurrentFont; $saved[ 'color' ] = $this->TextColor; $saved[ 'spanbgcolor' ] = $this->spanbgcolor; $saved[ 'spanbgcolorarray' ] = $this->spanbgcolorarray; $saved[ 'bord' ] = $this->spanborder; $saved[ 'border' ] = $this->spanborddet; $saved[ 'HREF' ] = $this->HREF; $saved[ 'underline' ] = $this->U; $saved[ 'smCaps' ] = $this->S; $saved[ 'strike' ] = $this->strike; $saved[ 'textshadow' ] = $this->textshadow; $saved[ 'SUP' ] = $this->SUP; $saved[ 'SUB' ] = $this->SUB; $saved[ 'linewidth' ] = $this->LineWidth; $saved[ 'drawcolor' ] = $this->DrawColor; $saved[ 'textparam' ] = $this->textparam; $saved[ 'ReqFontStyle' ] = $this->ReqFontStyle; $saved[ 'fontkerning' ] = $this->kerning; $saved[ 'fixedlSpacing' ] = $this->fixedlSpacing; $saved[ 'minwSpacing' ] = $this->minwSpacing; return $saved; } function restoreFont( &$saved, $write=true) { if (!isset($saved) || empty($saved)) return; $this->FontFamily = $saved[ 'family' ]; $this->FontStyle = $saved[ 'style' ]; $this->FontSizePt = $saved[ 'sizePt' ]; $this->FontSize = $saved[ 'size' ]; $this->CurrentFont = &$saved[ 'curr' ]; $this->TextColor = $saved[ 'color' ]; $this->spanbgcolor = $saved[ 'spanbgcolor' ]; $this->spanbgcolorarray = $saved[ 'spanbgcolorarray' ]; $this->spanborder = $saved[ 'bord' ]; $this->spanborddet = $saved[ 'border' ]; $this->ColorFlag = ($this->FillColor != $this->TextColor); $this->HREF = $saved[ 'HREF' ]; $this->U = $saved[ 'underline' ]; $this->S = $saved[ 'smCaps' ]; $this->kerning = $saved[ 'fontkerning' ]; $this->fixedlSpacing = $saved[ 'fixedlSpacing' ]; $this->minwSpacing = $saved[ 'minwSpacing' ]; $this->strike = $saved[ 'strike' ]; $this->textshadow = $saved[ 'textshadow' ]; $this->SUP = $saved[ 'SUP' ]; $this->SUB = $saved[ 'SUB' ]; $this->LineWidth = $saved[ 'linewidth' ]; $this->DrawColor = $saved[ 'drawcolor' ]; $this->textparam = $saved[ 'textparam' ]; if ($write) { $this->SetFont($saved[ 'family' ],$saved[ 'style' ].($this->U ? 'U' : '').($this->S ? 'S' : ''),$saved[ 'sizePt' ],true,true); $fontout = (sprintf('BT /F%d %.3F Tf ET', $this->CurrentFont['i'], $this->FontSizePt)); if($this->page>0 && ((isset($this->pageoutput[$this->page]['Font']) && $this->pageoutput[$this->page]['Font'] != $fontout) || !isset($this->pageoutput[$this->page]['Font']) || $this->keep_block_together)) { $this->_out($fontout); } $this->pageoutput[$this->page]['Font'] = $fontout; } else $this->SetFont($saved[ 'family' ],$saved[ 'style' ].($this->U ? 'U' : '').($this->S ? 'S' : ''),$saved[ 'sizePt' ]); $this->ReqFontStyle = $saved[ 'ReqFontStyle' ]; } function newFlowingBlock( $w, $h, $a = '', $is_table = false, $is_list = false, $blockstate = 0, $newblock=true, $blockdir='ltr') { if (!$a) { if ($blockdir=='rtl') { $a = 'R'; } else { $a = 'L'; } } $this->flowingBlockAttr[ 'width' ] = ($w * _MPDFK); $this->flowingBlockAttr[ 'is_table' ] = $is_table; $this->flowingBlockAttr[ 'is_list' ] = $is_list; $this->flowingBlockAttr[ 'height' ] = $h; $this->flowingBlockAttr[ 'lineCount' ] = 0; $this->flowingBlockAttr[ 'align' ] = $a; $this->flowingBlockAttr[ 'font' ] = array(); $this->flowingBlockAttr[ 'content' ] = array(); $this->flowingBlockAttr[ 'contentB' ] = array(); $this->flowingBlockAttr[ 'contentWidth' ] = 0; $this->flowingBlockAttr[ 'blockstate' ] = $blockstate; $this->flowingBlockAttr[ 'newblock' ] = $newblock; $this->flowingBlockAttr[ 'valign' ] = 'M'; $this->flowingBlockAttr['blockdir'] = $blockdir; } function finishFlowingBlock($endofblock=false, $next='') { $currentx = $this->x; $is_table = $this->flowingBlockAttr[ 'is_table' ]; $is_list = $this->flowingBlockAttr[ 'is_list' ]; $maxWidth =& $this->flowingBlockAttr[ 'width' ]; $lineHeight =& $this->flowingBlockAttr[ 'height' ]; $align =& $this->flowingBlockAttr[ 'align' ]; $content =& $this->flowingBlockAttr[ 'content' ]; $contentB =& $this->flowingBlockAttr[ 'contentB' ]; $font =& $this->flowingBlockAttr[ 'font' ]; $contentWidth =& $this->flowingBlockAttr[ 'contentWidth' ]; $lineCount =& $this->flowingBlockAttr[ 'lineCount' ]; $valign =& $this->flowingBlockAttr[ 'valign' ]; $blockstate = $this->flowingBlockAttr[ 'blockstate' ]; $newblock = $this->flowingBlockAttr[ 'newblock' ]; $blockdir = $this->flowingBlockAttr['blockdir']; if ($this->blk[$this->blklvl]['bgcolor'] && !$is_table) { $fill = 0; } else { $this->SetFColor($this->ConvertColor(255)); $fill = 0; } $hanger = ''; if (isset($content[count($content)-1]) && preg_match('/[ ]+$/',$content[count($content)-1], $m)) { $strip = strlen($m[0]); $content[count($content)-1] = substr($content[count($content)-1],0,(strlen($content[count($content)-1])-$strip)); $this->restoreFont( $font[ count($content)-1 ],false ); $contentWidth -= $this->GetStringWidth($m[0]) * _MPDFK; } $usedWidth = 0; $oldcolumn = $this->CurrCol; if ($this->ColActive && !$is_table) { $this->breakpoints[$this->CurrCol][] = $this->y; } if ($is_table) { $ipaddingL = 0; $ipaddingR = 0; $paddingL = 0; $paddingR = 0; } else { $ipaddingL = $this->blk[$this->blklvl]['padding_left']; $ipaddingR = $this->blk[$this->blklvl]['padding_right']; $paddingL = ($ipaddingL * _MPDFK); $paddingR = ($ipaddingR * _MPDFK); $this->cMarginL = $this->blk[$this->blklvl]['border_left']['w']; $this->cMarginR = $this->blk[$this->blklvl]['border_right']['w']; $fpaddingR = 0; $fpaddingL = 0; if (count($this->floatDivs)) { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl); if ($r_exists) { $fpaddingR = $r_width; } if ($l_exists) { $fpaddingL = $l_width; } } $usey = $this->y + 0.002; if (($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 0) ) { $usey += $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w']; } if (isset($this->floatmargins['R']) && $usey <= $this->floatmargins['R']['y1'] && $usey >= $this->floatmargins['R']['y0'] && !$this->floatmargins['R']['skipline']) { $fpaddingR += $this->floatmargins['R']['w']; } if (isset($this->floatmargins['L']) && $usey <= $this->floatmargins['L']['y1'] && $usey >= $this->floatmargins['L']['y0'] && !$this->floatmargins['L']['skipline']) { $fpaddingL += $this->floatmargins['L']['w']; } } $lhfixed = false; if ($is_list) { if (preg_match('/([0-9.,]+)mm/',$this->list_lineheight[$this->listlvl][$this->listOcc],$am)) { $lhfixed = true; $def_fontsize = $this->InlineProperties['LISTITEM'][$this->listlvl][$this->listOcc][$this->listnum]['size']; $this->lineheight_correction = $am[1] / $def_fontsize ; } else { $this->lineheight_correction = $this->list_lineheight[$this->listlvl][$this->listOcc]; } } else if ($is_table) { if (preg_match('/([0-9.,]+)mm/',$this->table_lineheight,$am)) { $lhfixed = true; $def_fontsize = $this->FontSize; $this->lineheight_correction = $lineHeight / $def_fontsize ; } else { $this->lineheight_correction = $this->table_lineheight; } } else if (isset($this->blk[$this->blklvl]['line_height']) && $this->blk[$this->blklvl]['line_height']) { if (preg_match('/([0-9.,]+)mm/',$this->blk[$this->blklvl]['line_height'],$am)) { $lhfixed = true; $def_fontsize = $this->blk[$this->blklvl]['InlineProperties']['size']; $this->lineheight_correction = $am[1] / $def_fontsize ; } else { $this->lineheight_correction = $this->blk[$this->blklvl]['line_height']; } } else { $this->lineheight_correction = $this->normalLineheight; } if ($lhfixed) { $maxlineHeight = $this->lineheight; } else { $maxlineHeight = 0; } $this->forceExactLineheight = true; $maxfontsize = 0; $checkCursive=false; if ($this->biDirectional) { $checkCursive=true; } foreach ( $content as $k => $chunk ) { $this->restoreFont( $font[ $k ],false ); if (!isset($this->objectbuffer[$k])) { if (!$this->usingCoreFont) { $content[$k] = $chunk = str_replace("\xc2\xad",'',$chunk ); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) { $checkCursive=true; } } else if ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats') { $content[$k] = $chunk = str_replace(chr(173),'',$chunk ); } if (($this->SUB || $this->SUP) && count($content)==1) { $actfs = $this->FontSize*100/55; } else { $actfs = $this->FontSize; } if (!$lhfixed) { $maxlineHeight = max($maxlineHeight,$actfs * $this->lineheight_correction ); } if ($lhfixed && ($actfs > $def_fontsize || ($actfs > ($lineHeight * $this->lineheight_correction) && $is_list))) { $this->forceExactLineheight = false; } $maxfontsize = max($maxfontsize,$actfs); } } if(isset($font[count($font)-1])) { $lastfontreqstyle = $font[count($font)-1]['ReqFontStyle']; $lastfontstyle = $font[count($font)-1]['style']; } else { $lastfontreqstyle=null; $lastfontstyle=null; } if ($blockdir == 'ltr' && strpos($lastfontreqstyle,"I") !== false && strpos($lastfontstyle,"I") === false) { $lastitalic = $this->FontSize*0.15*_MPDFK; } else { $lastitalic = 0; } if ($is_list && is_array($this->bulletarray) && count($this->bulletarray)) { $actfs = $this->bulletarray['fontsize']; if (!$lhfixed) { $maxlineHeight = max($maxlineHeight,$actfs * $this->lineheight_correction ); } if ($lhfixed && $actfs > $def_fontsize) { $this->forceExactLineheight = false; } $maxfontsize = max($maxfontsize,$actfs); } $af = 0; $bf = 0; $mta = 0; $mba = 0; foreach ( $content as $k => $chunk ) { if (isset($this->objectbuffer[$k])) { $oh = $this->objectbuffer[$k]['OUTER-HEIGHT']; $va = $this->objectbuffer[$k]['vertical-align']; if ($lhfixed && $oh > $def_fontsize) { $this->forceExactLineheight = false; } if ($va == 'BS') { $af = max($af, ($oh - ($maxfontsize * (0.5 + $this->baselineC)))); } else if ($va == 'M') { $af = max($af, ($oh - $maxfontsize)/2); $bf = max($bf, ($oh - $maxfontsize)/2); } else if ($va == 'TT') { $bf = max($bf, ($oh - $maxfontsize)); } else if ($va == 'TB') { $af = max($af, ($oh - $maxfontsize)); } else if ($va == 'T') { $mta = max($mta, $oh); } else if ($va == 'B') { $mba = max($mba, $oh); } } } if ((!$lhfixed || !$this->forceExactLineheight) && ($af > (($maxlineHeight - $maxfontsize)/2) || $bf > (($maxlineHeight - $maxfontsize)/2))) { $maxlineHeight = $maxfontsize + $af + $bf; } else if (!$lhfixed) { $af = $bf = ($maxlineHeight - $maxfontsize)/2; } if ($mta > $maxlineHeight) { $bf += ($mta - $maxlineHeight); $maxlineHeight = $mta; } if ($mba > $maxlineHeight) { $af += ($mba - $maxlineHeight); $maxlineHeight = $mba; } $lineHeight = $maxlineHeight; if ($lhfixed && $af==0 && $bf==0 && $maxfontsize<=($def_fontsize * $this->lineheight_correction * 0.8 )) { $this->linemaxfontsize = $def_fontsize; } else { $this->linemaxfontsize = $maxfontsize; } $check_h = max($this->divheight,$lineHeight); if ($endofblock && $newblock && $blockstate==0 && !$content) { $check_h = 0; } if ($this->blklvl > 0 && !$is_table) { if ($endofblock && $blockstate > 1) { if ($this->blk[$this->blklvl]['page_break_after_avoid']) { $check_h += $lineHeight; } $check_h += ($this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w']); } if (($newblock && ($blockstate==1 || $blockstate==3) && $lineCount == 0) || ($endofblock && $blockstate ==3 && $lineCount == 0)) { $check_h += ($this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['border_top']['w']); } } if ($this->ColActive && $check_h > ($this->PageBreakTrigger - $this->y0)) { $this->SetCol($this->NbCol-1); } if ($endofblock && $blockstate > 1 && !$content) { $buff = $this->margBuffer; } else { $buff = 0; } if(!$is_table && ($this->y+$check_h) > ($this->PageBreakTrigger + $buff) and !$this->InFooter and $this->AcceptPageBreak()) { $bak_x=$this->x; $ws=$this->ws; $charspacing=$this->charspacing; $this->ResetSpacing(); $this->AddPage($this->CurOrientation); $this->x=$bak_x; $currentx += $this->MarginCorrection; $this->x += $this->MarginCorrection; $this->SetSpacing($charspacing,$ws); } if ($this->keep_block_together && !$is_table && $this->kt_p00 < $this->page && ($this->y+$check_h) > $this->kt_y00) { $this->printdivbuffer(); $this->keep_block_together = 0; } if ($this->CurrCol != $oldcolumn) { $currentx += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); $this->x += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); $oldcolumn = $this->CurrCol; } if ($this->ColActive && !$is_table) { $this->breakpoints[$this->CurrCol][] = $this->y; } if ($newblock && ($blockstate==1 || $blockstate==3) && ($this->blk[$this->blklvl]['margin_top']) && $lineCount == 0 && !$is_table && !$is_list) { $this->DivLn($this->blk[$this->blklvl]['margin_top'],$this->blklvl-1,true,$this->blk[$this->blklvl]['margin_collapse']); if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } if ($newblock && ($blockstate==1 || $blockstate==3) && $lineCount == 0 && !$is_table && !$is_list) { $this->blk[$this->blklvl]['y0'] = $this->y; $this->blk[$this->blklvl]['startpage'] = $this->page; if ($this->blk[$this->blklvl]['float']) { $this->blk[$this->blklvl]['float_start_y'] = $this->y; } if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } $WidthCorrection = 0; if (($newblock) && ($blockstate==1 || $blockstate==3) && isset($this->blk[$this->blklvl]['text_indent']) && ($lineCount == 0) && (!$is_table) && (!$is_list) && ($align != 'C')) { $ti = $this->ConvertSize($this->blk[$this->blklvl]['text_indent'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); $WidthCorrection = ($ti*_MPDFK); } if (($newblock) && ($blockstate==1 || $blockstate==3) && (($this->blk[$this->blklvl]['padding_top']) || ($this->blk[$this->blklvl]['border_top'])) && ($lineCount == 0) && (!$is_table) && (!$is_list)) { $this->DivLn($this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w'],-3,true,false,1); if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } $this->x = $currentx; } $fpaddingR = 0; $fpaddingL = 0; if (count($this->floatDivs)) { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl); if ($r_exists) { $fpaddingR = $r_width; } if ($l_exists) { $fpaddingL = $l_width; } } $usey = $this->y + 0.002; if (($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 0) ) { $usey += $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w']; } if (isset($this->floatmargins['R']) && $usey <= $this->floatmargins['R']['y1'] && $usey >= $this->floatmargins['R']['y0'] && !$this->floatmargins['R']['skipline']) { $fpaddingR += $this->floatmargins['R']['w']; } if (isset($this->floatmargins['L']) && $usey <= $this->floatmargins['L']['y1'] && $usey >= $this->floatmargins['L']['y0'] && !$this->floatmargins['L']['skipline']) { $fpaddingL += $this->floatmargins['L']['w']; } if ($content) { $nb_carac = 0; $nb_spaces = 0; $jcharspacing = 0; $jws = 0; $inclCursive=false; $dottab = false; foreach ( $content as $k => $chunk ) { if (!isset($this->objectbuffer[$k]) || (isset($this->objectbuffer[$k]) && !$this->objectbuffer[$k])) { if ($this->usingCoreFont) { $chunk = str_replace(chr(160),chr(32),$chunk ); } else { $chunk = str_replace(chr(194).chr(160),chr(32),$chunk ); } $nb_carac += mb_strlen( $chunk, $this->mb_enc ); $nb_spaces += mb_substr_count( $chunk,' ', $this->mb_enc ); if ($checkCursive) { if (preg_match("/([".$this->pregRTLchars."])/u", $chunk)) { $inclCursive = true; } if (preg_match("/([".$this->pregHIchars.$this->pregBNchars.$this->pregPAchars."])/u", $chunk)) { $inclCursive = true; } } } else if ($this->objectbuffer[$k]['type']=='dottab') { $dottab = $this->objectbuffer[$k]['outdent']; } } $lastchar = mb_substr($content[(count($content)-1)],mb_strlen($content[(count($content)-1)], $this->mb_enc)-1, 1, $this->mb_enc); if (preg_match("/[".$this->CJKoverflow."]/u", $lastchar)) { $CJKoverflow = true; } else {$CJKoverflow = false; } if ((((($contentWidth + $lastitalic) > $maxWidth) && ($content[count($content)-1] != ' ') ) || (!$endofblock && $align=='J' && ($next=='image' || $next=='select' || $next=='input' || $next=='textarea' || ($next=='br' && $this->justifyB4br)))) && !($CJKoverflow && $this->allowCJKoverflow) ) { list($jcharspacing,$jws) = $this->GetJspacing($nb_carac,$nb_spaces,($maxWidth-$lastitalic-$contentWidth-$WidthCorrection-(($this->cMarginL+$this->cMarginR)*_MPDFK)-($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) )),$inclCursive); } else if ($this->checkCJK && $align=='J' && $CJKoverflow && $this->allowCJKoverflow && $this->CJKforceend) { $hanger = mb_substr($content[count($content)-1],mb_strlen($content[count($content)-1],$this->mb_enc)-1,1,$this->mb_enc ); if (preg_match("/[".$this->CJKoverflow."]/u", $hanger)) { $content[count($content)-1] = mb_substr($content[count($content)-1],0,mb_strlen($content[count($content)-1],$this->mb_enc)-1,$this->mb_enc ); $this->restoreFont( $font[ count($content)-1 ],false ); $contentWidth -= $this->GetStringWidth($hanger) * _MPDFK; $nb_carac -= 1; list($jcharspacing,$jws) = $this->GetJspacing($nb_carac,$nb_spaces,($maxWidth-$lastitalic-$contentWidth-$WidthCorrection-(($this->cMarginL+$this->cMarginR)*_MPDFK)-($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) )),$inclCursive); } } else if ($contentWidth < ($maxWidth - $lastitalic-$WidthCorrection - (($this->cMarginL+$this->cMarginR)* _MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK))) && !$this->fixedlSpacing) { if ($this->ws > $this->jSmaxWordLast) { $jws = $this->jSmaxWordLast; } if ($this->charspacing > $this->jSmaxCharLast) { $jcharspacing = $this->jSmaxCharLast; } $check = $maxWidth - $lastitalic-$WidthCorrection - $contentWidth - (($this->cMarginL+$this->cMarginR)* _MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ) - ( $jcharspacing * $nb_carac) - ( $jws * $nb_spaces); if ($check <= 0) { $jcharspacing = 0; $jws = 0; } } $empty = $maxWidth - $lastitalic-$WidthCorrection - $contentWidth - (($this->cMarginL+$this->cMarginR)* _MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ); $empty -= ($jcharspacing * $nb_carac); $empty -= ($jws * $nb_spaces); $empty /= _MPDFK; if (!$is_table) { $this->maxPosR = max($this->maxPosR , ($this->w - $this->rMargin - $this->blk[$this->blklvl]['outer_right_margin'] - $empty)); $this->maxPosL = min($this->maxPosL , ($this->lMargin + $this->blk[$this->blklvl]['outer_left_margin'] + $empty)); } $arraysize = count($content); $margins = ($this->cMarginL+$this->cMarginR) + ($ipaddingL+$ipaddingR + $fpaddingR + $fpaddingR ); if (!$is_table) { $this->DivLn($lineHeight,$this->blklvl,false); } $all_rtl = false; $contains_rtl = false; if ($blockdir == 'rtl' || $this->biDirectional) { $all_rtl = true; foreach ( $content as $k => $chunk ) { $reversed = $this->magic_reverse_dir($chunk, false, $blockdir); if ($reversed > 0) { $contains_rtl = true; } if ($reversed < 2) { $all_rtl = false; } $content[$k] = $chunk; } if (($blockdir =='rtl' && $contains_rtl) || $all_rtl) { $content = array_reverse($content,false); $contentB = array_reverse($contentB,false); } } $this->x = $currentx + $this->cMarginL + $ipaddingL + $fpaddingL; if ($dottab !== false && $blockdir=='rtl') { $this->x -= $dottab; } else if ($align == 'R') { $this->x += $empty; } else if ($align == 'J' && $blockdir == 'rtl') { $this->x += $empty; } else if ($align == 'C') { $this->x += ($empty / 2); } $WidthCorrection = 0; if (($newblock) && ($blockstate==1 || $blockstate==3) && isset($this->blk[$this->blklvl]['text_indent']) && ($lineCount == 0) && (!$is_table) && (!$is_list) && ($align !='C')) { $ti = $this->ConvertSize($this->blk[$this->blklvl]['text_indent'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); $this->x += $ti; } foreach ( $content as $k => $chunk ) { if ((($blockdir == 'rtl') && ($contains_rtl )) || $all_rtl ) { $dirk = $arraysize-1 - $k; } else { $dirk = $k; } $va = 'M'; if (isset($this->objectbuffer[$dirk]) && $this->objectbuffer[$dirk]) { $xadj = $this->x - $this->objectbuffer[$dirk]['OUTER-X']; $this->objectbuffer[$dirk]['OUTER-X'] += $xadj; $this->objectbuffer[$dirk]['BORDER-X'] += $xadj; $this->objectbuffer[$dirk]['INNER-X'] += $xadj; $va = $this->objectbuffer[$dirk]['vertical-align']; $yadj = $this->y - $this->objectbuffer[$dirk]['OUTER-Y']; if ($va == 'BS') { $yadj += $af + ($this->linemaxfontsize * (0.5 + $this->baselineC)) - $this->objectbuffer[$dirk]['OUTER-HEIGHT']; } else if ($va == 'M' || $va == '') { $yadj += $af + ($this->linemaxfontsize /2) - ($this->objectbuffer[$dirk]['OUTER-HEIGHT']/2); } else if ($va == 'TB') { $yadj += $af + $this->linemaxfontsize - $this->objectbuffer[$dirk]['OUTER-HEIGHT']; } else if ($va == 'TT') { $yadj += $af; } else if ($va == 'B') { $yadj += $af + $this->linemaxfontsize + $bf - $this->objectbuffer[$dirk]['OUTER-HEIGHT']; } else if ($va == 'T') { $yadj += 0; } $this->objectbuffer[$dirk]['OUTER-Y'] += $yadj; $this->objectbuffer[$dirk]['BORDER-Y'] += $yadj; $this->objectbuffer[$dirk]['INNER-Y'] += $yadj; } if ((($blockdir == 'rtl') && ($contains_rtl )) || $all_rtl ) { $this->restoreFont( $font[ $arraysize-1 - $k ] ); } else { $this->restoreFont( $font[ $k ] ); } if ($is_table && substr($align,0,1)=='D' && $k==0 ) { $dp = $this->decimal_align[substr($align,0,2)]; $s = preg_split('/'.preg_quote($dp,'/').'/', $content[0], 2); $s0 = $this->GetStringWidth($s[0], false); $this->x += ($this->decimal_offset - $s0); } $this->SetSpacing(($this->fixedlSpacing*_MPDFK)+$jcharspacing,($this->fixedlSpacing+$this->minwSpacing)*_MPDFK+$jws); $this->fixedlSpacing = false; $this->minwSpacing = 0; $save_vis = $this->visibility; if (isset($this->textparam['visibility']) && $this->textparam['visibility'] && $this->textparam['visibility'] != $this->visibility) { $this->SetVisibility($this->textparam['visibility']); } if (isset($this->spanbgcolor) && $this->spanbgcolor) { $cor = $this->spanbgcolorarray; $this->SetFColor($cor); $save_fill = $fill; $spanfill = 1; $fill = 1; } if (!empty($this->spanborddet)) { if (strpos($contentB[$k],'L')!==false && isset($this->spanborddet['L'])) $this->x += $this->spanborddet['L']['w']; if (strpos($contentB[$k],'L')===false) $this->spanborddet['L']['s'] = $this->spanborddet['L']['w'] = 0; if (strpos($contentB[$k],'R')===false) $this->spanborddet['R']['s'] = $this->spanborddet['R']['w'] = 0; } $stringWidth = $this->GetStringWidth($chunk ) + ( $this->charspacing * mb_strlen($chunk,$this->mb_enc ) / _MPDFK ) + ( $this->ws * mb_substr_count($chunk,' ',$this->mb_enc ) / _MPDFK ); if (isset($this->objectbuffer[$dirk])) { if ($this->objectbuffer[$dirk]['type']=='dottab') { $this->objectbuffer[$dirk]['OUTER-WIDTH'] +=$empty; $this->objectbuffer[$dirk]['OUTER-WIDTH'] +=$this->objectbuffer[$dirk]['outdent']; } $stringWidth = $this->objectbuffer[$dirk]['OUTER-WIDTH']; } if ($stringWidth==0) { $stringWidth = 0.000001; } if ($k == $arraysize-1) { if ($this->checkCJK && $CJKoverflow && $align=='J' && $this->allowCJKoverflow && $hanger && $this->CJKforceend) { $this->Cell( $stringWidth, $lineHeight, $chunk, '', 0, '', $fill, $this->HREF, $currentx,0,0,'M', $fill, $af, $bf, true ); $this->Cell( $this->GetStringWidth($hanger), $lineHeight, $hanger, '', 1, '', $fill, $this->HREF, $currentx,0,0,'M', $fill, $af, $bf, true ); } else { $this->Cell( $stringWidth, $lineHeight, $chunk, '', 1, '', $fill, $this->HREF, $currentx,0,0,'M', $fill, $af, $bf, true ); } } else $this->Cell( $stringWidth, $lineHeight, $chunk, '', 0, '', $fill, $this->HREF, 0, 0,0,'M', $fill, $af, $bf, true ); if (!empty($this->spanborddet)) { if (strpos($contentB[$k],'R')!==false && $k != $arraysize-1) $this->x += $this->spanborddet['R']['w']; } if (isset($spanfill) && $spanfill) { $fill = $save_fill; $spanfill = 0; if ($fill) { $this->SetFColor($bcor); } } if (isset($this->textparam['visibility']) && $this->textparam['visibility'] && $this->visibility != $save_vis) { $this->SetVisibility($save_vis); } } $this->printobjectbuffer($is_table, $blockdir); $this->objectbuffer = array(); $this->ResetSpacing(); if ($is_list && is_array($this->bulletarray) && ($lineCount == 0) ) { $savedFont = $this->saveFont(); $bull = $this->bulletarray; if (isset($bull['level']) && isset($bull['occur']) && isset($this->InlineProperties['LIST'][$bull['level']][$bull['occur']])) { $this->restoreInlineProperties($this->InlineProperties['LIST'][$bull['level']][$bull['occur']]); } if (isset($bull['level']) && isset($bull['occur']) && isset($bull['num']) && isset($this->InlineProperties['LISTITEM'][$bull['level']][$bull['occur']][$bull['num']]) && $this->InlineProperties['LISTITEM'][$bull['level']][$bull['occur']][$bull['num']]) { $this->restoreInlineProperties($this->InlineProperties['LISTITEM'][$bull['level']][$bull['occur']][$bull['num']]); } if (isset($bull['font']) && $bull['font'] == 'czapfdingbats') { $this->bullet = true; $this->SetFont('czapfdingbats','',$this->FontSizePt/2.5); } else { $this->SetFont($this->FontFamily,$this->FontStyle,$this->FontSizePt,true,true); } $this->x = $currentx; if (isset($bull['x'])) { $this->x += $bull['x']; } $this->y -= $lineHeight; if (isset($bull['col']) && $bull['col']) { $this->SetTColor($bull['col']); } if (isset($bull['txt'])) { $this->Cell($bull['w'], $lineHeight,$bull['txt'],'','',$bull['align'],0,'',0,-$this->cMarginL, -$this->cMarginR ); } if (isset($bull['font']) && $bull['font'] == 'czapfdingbats') { $this->bullet = false; } $this->x = $currentx; $this->y += $lineHeight; if ($this->ColActive && !$is_table) { $this->breakpoints[$this->CurrCol][] = $this->y; } $this->restoreFont( $savedFont ); $this->bulletarray = array(); } } if ($this->floatmargins) { $this->_advanceFloatMargins(); } if ($endofblock && $blockstate>1) { if (isset($this->floatmargins['R']['y1'])) { $fry1 = $this->floatmargins['R']['y1']; } else { $fry1 = 0; } if (isset($this->floatmargins['L']['y1'])) { $fly1 = $this->floatmargins['L']['y1']; } else { $fly1 = 0; } if ($this->y < $fry1 || $this->y < $fly1) { $drop = max($fry1,$fly1) - $this->y; $this->DivLn($drop); $this->x = $currentx; } } if ($endofblock && ($blockstate > 1) && ($this->blk[$this->blklvl]['padding_bottom'] || $this->blk[$this->blklvl]['border_bottom'] || $this->blk[$this->blklvl]['css_set_height']) && (!$is_table) && (!$is_list)) { $extra = 0; if ($this->blk[$this->blklvl]['css_set_height'] && $this->blk[$this->blklvl]['startpage']==$this->page) { $h1 = ($this->y-$this->blk[$this->blklvl]['y0']) + $this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w']; if ($h1 < ($this->blk[$this->blklvl]['css_set_height']+$this->blk[$this->blklvl]['padding_bottom']+$this->blk[$this->blklvl]['padding_top'])) { $extra = ($this->blk[$this->blklvl]['css_set_height']+$this->blk[$this->blklvl]['padding_bottom']+$this->blk[$this->blklvl]['padding_top']) - $h1; } if($this->y + $this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w'] + $extra > $this->PageBreakTrigger) { $extra = $this->PageBreakTrigger - ($this->y + $this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w']); } } $this->DivLn($this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w'] + $extra,-3,true,false,2); $this->x = $currentx; if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } if (($endofblock) && ($blockstate > 1) && (!$is_table) && (!$is_list)) { $this->blk[$this->blklvl]['y1'] = $this->y; } if (($endofblock) && ($blockstate > 1) && ($this->blk[$this->blklvl]['margin_bottom']) && (!$is_table) && (!$is_list)) { if($this->y+$this->blk[$this->blklvl]['margin_bottom'] < $this->PageBreakTrigger and !$this->InFooter) { $this->DivLn($this->blk[$this->blklvl]['margin_bottom'],$this->blklvl-1,true,$this->blk[$this->blklvl]['margin_collapse']); if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } } $lineHeight = $this->divheight; } function printobjectbuffer($is_table=false, $blockdir=false) { if (!$blockdir) { $blockdir = $this->directionality; } if ($is_table && $this->shrin_k > 1) { $k = $this->shrin_k; } else { $k = 1; } $save_y = $this->y; $save_x = $this->x; $save_currentfontfamily = $this->FontFamily; $save_currentfontsize = $this->FontSizePt; $save_currentfontstyle = $this->FontStyle.($this->U ? 'U' : '').($this->S ? 'S' : ''); if ($blockdir == 'rtl') { $rtlalign = 'R'; } else { $rtlalign = 'L'; } foreach ($this->objectbuffer AS $ib => $objattr) { if ($objattr['type'] == 'bookmark' || $objattr['type'] == 'indexentry' || $objattr['type'] == 'toc') { $x = $objattr['OUTER-X']; $y = $objattr['OUTER-Y']; $this->y = $y - $this->FontSize/2; $this->x = $x; if ($objattr['type'] == 'bookmark' ) { $this->Bookmark($objattr['CONTENT'],$objattr['bklevel'] ,$y - $this->FontSize); } if ($objattr['type'] == 'indexentry') { $this->IndexEntry($objattr['CONTENT']); } if ($objattr['type'] == 'toc') { $this->TOC_Entry($objattr['CONTENT'], $objattr['toclevel'], $objattr['toc_id']); } } else if ($objattr['type'] == 'annot') { if ($objattr['POS-X']) { $x = $objattr['POS-X']; } else if ($this->annotMargin<>0) { $x = -$objattr['OUTER-X']; } else { $x = $objattr['OUTER-X']; } if ($objattr['POS-Y']) { $y = $objattr['POS-Y']; } else { $y = $objattr['OUTER-Y'] - $this->FontSize/2; } $this->y = $y-1; $this->x = $x-1; $this->Line($x-1,$y-1,$x-1,$y-1); $this->Annotation($objattr['CONTENT'], $x , $y , $objattr['ICON'], $objattr['AUTHOR'], $objattr['SUBJECT'], $objattr['OPACITY'], $objattr['COLOR'], $objattr['POPUP'], $objattr['FILE']); } else { $y = $objattr['OUTER-Y']; $x = $objattr['OUTER-X']; $w = $objattr['OUTER-WIDTH']; $h = $objattr['OUTER-HEIGHT']; if (isset($objattr['text'])) { $texto = $objattr['text']; } $this->y = $y; $this->x = $x; if (isset($objattr['fontfamily'])) { $this->SetFont($objattr['fontfamily'],'',$objattr['fontsize'] ); } } if ($objattr['type'] == 'hr') { $this->SetDColor($objattr['color']); switch($objattr['align']) { case 'C': $empty = $objattr['OUTER-WIDTH'] - $objattr['INNER-WIDTH']; $empty /= 2; $x += $empty; break; case 'R': $empty = $objattr['OUTER-WIDTH'] - $objattr['INNER-WIDTH']; $x += $empty; break; } $oldlinewidth = $this->LineWidth; $this->SetLineWidth($objattr['linewidth']/$k ); $this->y += ($objattr['linewidth']/2) + $objattr['margin_top']/$k; $this->Line($x,$this->y,$x+$objattr['INNER-WIDTH'],$this->y); $this->SetLineWidth($oldlinewidth); $this->SetDColor($this->ConvertColor(0)); } if ($objattr['type'] == 'image') { if (isset($objattr['z-index']) && $objattr['z-index'] > 0 && $this->currentlayer==0) { $this->BeginLayer($objattr['z-index']); } if(isset($objattr['visibility']) && $objattr['visibility']!='visible' && $objattr['visibility']) { $this->SetVisibility($objattr['visibility']); } if (isset($objattr['opacity'])) { $this->SetAlpha($objattr['opacity']); } $rotate = 0; $obiw = $objattr['INNER-WIDTH']; $obih = $objattr['INNER-HEIGHT']; $sx = $objattr['INNER-WIDTH']*_MPDFK / $objattr['orig_w']; $sy = abs($objattr['INNER-HEIGHT'])*_MPDFK / abs($objattr['orig_h']); $sx = ($objattr['INNER-WIDTH']*_MPDFK / $objattr['orig_w']); $sy = ($objattr['INNER-HEIGHT']*_MPDFK / $objattr['orig_h']); if (isset($objattr['ROTATE'])) { $rotate = $objattr['ROTATE']; } if ($rotate==90) { $obiw = $objattr['INNER-HEIGHT']; $obih = $objattr['INNER-WIDTH']; $tr = $this->transformTranslate(0, -$objattr['INNER-WIDTH'], true) ; $tr .= ' '. $this->transformRotate(90, $objattr['INNER-X'],($objattr['INNER-Y'] +$objattr['INNER-WIDTH'] ),true) ; $sx = $obiw*_MPDFK / $objattr['orig_h']; $sy = $obih*_MPDFK / $objattr['orig_w']; } else if ($rotate==-90 || $rotate==270) { $obiw = $objattr['INNER-HEIGHT']; $obih = $objattr['INNER-WIDTH']; $tr = $this->transformTranslate($objattr['INNER-WIDTH'], ($objattr['INNER-HEIGHT']-$objattr['INNER-WIDTH']), true) ; $tr .= ' '. $this->transformRotate(-90, $objattr['INNER-X'],($objattr['INNER-Y'] +$objattr['INNER-WIDTH'] ),true) ; $sx = $obiw*_MPDFK / $objattr['orig_h']; $sy = $obih*_MPDFK / $objattr['orig_w']; } else if ($rotate==180) { $tr = $this->transformTranslate($objattr['INNER-WIDTH'], -$objattr['INNER-HEIGHT'], true) ; $tr .= ' '. $this->transformRotate(180, $objattr['INNER-X'],($objattr['INNER-Y'] +$objattr['INNER-HEIGHT'] ),true) ; } else { $tr = ''; } $tr = trim($tr); if ($tr) { $tr .= ' '; } $gradmask = ''; if (isset($objattr['GRADIENT-MASK'])) { $g = $this->grad->parseMozGradient( $objattr['GRADIENT-MASK'] ); if ($g) { $dummy = $this->grad->Gradient($objattr['INNER-X'], $objattr['INNER-Y'], $obiw, $obih, $g['type'], $g['stops'], $g['colorspace'], $g['coords'], $g['extend'], true, true); $gradmask = '/TGS'.count($this->gradients).' gs '; } } if (isset($objattr['itype']) && $objattr['itype']=='wmf') { $outstring = sprintf('q '.$tr.'%.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q', $sx, -$sy, $objattr['INNER-X']*_MPDFK-$sx*$objattr['wmf_x'], (($this->h-$objattr['INNER-Y'])*_MPDFK)+$sy*$objattr['wmf_y'], $objattr['ID']); } else if (isset($objattr['itype']) && $objattr['itype']=='svg') { $outstring = sprintf('q '.$tr.'%.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q', $sx, -$sy, $objattr['INNER-X']*_MPDFK-$sx*$objattr['wmf_x'], (($this->h-$objattr['INNER-Y'])*_MPDFK)+$sy*$objattr['wmf_y'], $objattr['ID']); } else { $outstring = sprintf("q ".$tr."%.3F 0 0 %.3F %.3F %.3F cm ".$gradmask."/I%d Do Q",$obiw*_MPDFK, $obih*_MPDFK, $objattr['INNER-X'] *_MPDFK, ($this->h-($objattr['INNER-Y'] +$obih ))*_MPDFK,$objattr['ID'] ); } $this->_out($outstring); if (isset($objattr['link'])) $this->Link($objattr['INNER-X'],$objattr['INNER-Y'],$objattr['INNER-WIDTH'],$objattr['INNER-HEIGHT'],$objattr['link']); if (isset($objattr['opacity'])) { $this->SetAlpha(1); } if ((isset($objattr['border_top']) && $objattr['border_top']>0) || (isset($objattr['border_left']) && $objattr['border_left']>0) || (isset($objattr['border_right']) && $objattr['border_right']>0) || (isset($objattr['border_bottom']) && $objattr['border_bottom']>0)) { $this->PaintImgBorder($objattr,$is_table); } if(isset($objattr['visibility']) && $objattr['visibility']!='visible' && $objattr['visibility']) { $this->SetVisibility('visible'); } if (isset($objattr['z-index']) && $objattr['z-index'] > 0 && $this->currentlayer==0) { $this->EndLayer(); } } if ($objattr['type'] == 'barcode') { $bgcol = $this->ConvertColor(255); if (isset($objattr['bgcolor']) && $objattr['bgcolor']) { $bgcol = $objattr['bgcolor']; } $col = $this->ConvertColor(0); if (isset($objattr['color']) && $objattr['color']) { $col = $objattr['color']; } $this->SetFColor($bgcol); $this->Rect($objattr['BORDER-X'], $objattr['BORDER-Y'], $objattr['BORDER-WIDTH'], $objattr['BORDER-HEIGHT'], 'F'); $this->SetFColor($this->ConvertColor(255)); if (isset($objattr['BORDER-WIDTH'])) { $this->PaintImgBorder($objattr,$is_table); } if ($objattr['btype'] == 'EAN13' || $objattr['btype'] == 'ISBN' || $objattr['btype'] == 'ISSN' || $objattr['btype'] == 'UPCA' || $objattr['btype'] == 'UPCE' || $objattr['btype'] == 'EAN8') { $this->WriteBarcode($objattr['code'], $objattr['showtext'], $objattr['INNER-X'], $objattr['INNER-Y'], $objattr['bsize'], 0, 0, 0, 0, 0, $objattr['bheight'], $bgcol, $col, $objattr['btype'], $objattr['bsupp'], $objattr['bsupp_code'], $k); } else if ($objattr['btype']=='QR') { if (!class_exists('QRcode', false)) { include(_MPDF_PATH.'qrcode/qrcode.class.php'); } $this->qrcode = new QRcode($objattr['code'], $objattr['errorlevel']); $this->qrcode->displayFPDF($this, $objattr['INNER-X'], $objattr['INNER-Y'], $objattr['bsize']*25, array(255,255,255), array(0,0,0)); } else { $this->WriteBarcode2($objattr['code'], $objattr['INNER-X'], $objattr['INNER-Y'], $objattr['bsize'], $objattr['bheight'], $bgcol, $col, $objattr['btype'], $objattr['pr_ratio'], $k); } } if ($objattr['type'] == 'textcircle') { $bgcol = ''; if (isset($objattr['bgcolor']) && $objattr['bgcolor']) { $bgcol = $objattr['bgcolor']; } $col = $this->ConvertColor(0); if (isset($objattr['color']) && $objattr['color']) { $col = $objattr['color']; } $this->SetTColor($col); $this->SetFColor($bgcol); if ($bgcol) $this->Rect($objattr['BORDER-X'], $objattr['BORDER-Y'], $objattr['BORDER-WIDTH'], $objattr['BORDER-HEIGHT'], 'F'); $this->SetFColor($this->ConvertColor(255)); if (isset($objattr['BORDER-WIDTH'])) { $this->PaintImgBorder($objattr,$is_table); } if (!class_exists('directw', false)) { include(_MPDF_PATH.'classes/directw.php'); } if (empty($this->directw)) { $this->directw = new directw($this); } $save_lmfs = $this->linemaxfontsize; $this->linemaxfontsize = 0; if (isset($objattr['top-text'])) { $this->directw->CircularText($objattr['INNER-X']+$objattr['INNER-WIDTH']/2, $objattr['INNER-Y']+$objattr['INNER-HEIGHT']/2, $objattr['r']/$k, $objattr['top-text'], 'top', $objattr['fontfamily'], $objattr['fontsize']/$k, $objattr['fontstyle'], $objattr['space-width'], $objattr['char-width'], $objattr['divider']); } if (isset($objattr['bottom-text'])) { $this->directw->CircularText($objattr['INNER-X']+$objattr['INNER-WIDTH']/2, $objattr['INNER-Y']+$objattr['INNER-HEIGHT']/2, $objattr['r']/$k, $objattr['bottom-text'], 'bottom', $objattr['fontfamily'], $objattr['fontsize']/$k, $objattr['fontstyle'], $objattr['space-width'], $objattr['char-width'], $objattr['divider']); } $this->linemaxfontsize = $save_lmfs; } $this->ResetSpacing(); if ($objattr['type'] == 'dottab') { if (isset($objattr['fontfamily'])) { $this->SetFont($objattr['fontfamily'],'',$objattr['fontsize'] ); } $sp = $this->GetStringWidth(' '); $nb=floor(($w-2*$sp)/$this->GetStringWidth('.')); if ($nb>0) { $dots=' '.str_repeat('.',$nb).' '; } else { $dots=' '; } $col = $this->ConvertColor(0); if (isset($objattr['colorarray']) && ($objattr['colorarray'])) { $col = $objattr['colorarray']; } $this->SetTColor($col); $save_dh = $this->divheight; $save_sbd = $this->spanborddet; $save_u = $this->U; $save_s = $this->strike; $this->spanborddet = ''; $this->divheight = 0; $this->U = false; $this->strike = false; $this->Cell($w,$h,$dots,0,0,'C'); $this->spanborddet = $save_sbd; $this->U = $save_u; $this->strike = $save_s; $this->divheight = $save_dh; $this->SetTColor($this->ConvertColor(0)); } if ($objattr['type'] == 'input' && ($objattr['subtype'] == 'TEXT' || $objattr['subtype'] == 'PASSWORD')) { $this->form->print_ob_text($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir); } if ($objattr['type'] == 'textarea') { $this->form->print_ob_textarea($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir); } if ($objattr['type'] == 'select') { $this->form->print_ob_select($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir); } if ($objattr['type'] == 'input' && $objattr['subtype'] == 'IMAGE') { $this->form->print_ob_imageinput($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir); } if ($objattr['type'] == 'input' && ($objattr['subtype'] == 'SUBMIT' || $objattr['subtype'] == 'RESET' || $objattr['subtype'] == 'BUTTON')) { $this->form->print_ob_button($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir); } if ($objattr['type'] == 'input' && ($objattr['subtype'] == 'CHECKBOX')) { $this->form->print_ob_checkbox($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir,$x,$y); } if ($objattr['type'] == 'input' && ($objattr['subtype'] == 'RADIO')) { $this->form->print_ob_radio($objattr,$w,$h,$texto,$rtlalign,$k,$blockdir,$x,$y); } } $this->SetFont($save_currentfontfamily,$save_currentfontstyle,$save_currentfontsize); $this->y = $save_y; $this->x = $save_x; unset($content); } function WriteFlowingBlock( $s) { $currentx = $this->x; $is_table = $this->flowingBlockAttr[ 'is_table' ]; $is_list = $this->flowingBlockAttr[ 'is_list' ]; $contentWidth =& $this->flowingBlockAttr[ 'contentWidth' ]; $maxWidth =& $this->flowingBlockAttr[ 'width' ]; $lineCount =& $this->flowingBlockAttr[ 'lineCount' ]; $lineHeight =& $this->flowingBlockAttr[ 'height' ]; $align =& $this->flowingBlockAttr[ 'align' ]; $content =& $this->flowingBlockAttr[ 'content' ]; $contentB =& $this->flowingBlockAttr[ 'contentB' ]; $font =& $this->flowingBlockAttr[ 'font' ]; $valign =& $this->flowingBlockAttr[ 'valign' ]; $blockstate = $this->flowingBlockAttr[ 'blockstate' ]; $newblock = $this->flowingBlockAttr[ 'newblock' ]; $blockdir = $this->flowingBlockAttr['blockdir']; if ($this->blk[$this->blklvl]['bgcolor'] && !$is_table) { $fill = 0; } else { $this->SetFColor($this->ConvertColor(255)); $fill = 0; } $font[] = $this->saveFont(); $content[] = ''; $contentB[] = ''; $currContent =& $content[ count( $content ) - 1 ]; $cutoffWidth = $contentWidth; $CJKoverflow = false; $hanger = ''; $oldcolumn = $this->CurrCol; if ($this->ColActive && !$is_table) { $this->breakpoints[$this->CurrCol][] = $this->y; } if ($is_table) { $ipaddingL = 0; $ipaddingR = 0; $paddingL = 0; $paddingR = 0; $cpaddingadjustL = 0; $cpaddingadjustR = 0; $fpaddingR = 0; $fpaddingL = 0; } else { $ipaddingL = $this->blk[$this->blklvl]['padding_left']; $ipaddingR = $this->blk[$this->blklvl]['padding_right']; $paddingL = ($ipaddingL * _MPDFK); $paddingR = ($ipaddingR * _MPDFK); $this->cMarginL = $this->blk[$this->blklvl]['border_left']['w']; $cpaddingadjustL = -$this->cMarginL; $this->cMarginR = $this->blk[$this->blklvl]['border_right']['w']; $cpaddingadjustR = -$this->cMarginR; $fpaddingR = 0; $fpaddingL = 0; if (count($this->floatDivs)) { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl); if ($r_exists) { $fpaddingR = $r_width; } if ($l_exists) { $fpaddingL = $l_width; } } $usey = $this->y + 0.002; if (($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 0) ) { $usey += $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w']; } if (isset($this->floatmargins['R']) && $usey <= $this->floatmargins['R']['y1'] && $usey >= $this->floatmargins['R']['y0'] && !$this->floatmargins['R']['skipline']) { $fpaddingR += $this->floatmargins['R']['w']; } if (isset($this->floatmargins['L']) && $usey <= $this->floatmargins['L']['y1'] && $usey >= $this->floatmargins['L']['y0'] && !$this->floatmargins['L']['skipline']) { $fpaddingL += $this->floatmargins['L']['w']; } } if (substr($s,0,3) == "\xbb\xa4\xac") { $objattr = $this->_getObjAttr($s); $h_corr = 0; if ($is_table) { $maximumW = ($maxWidth/_MPDFK) - ($this->cellPaddingL + $this->cMarginL + $this->cellPaddingR + $this->cMarginR); } else { if (($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 0) && (!$is_table)) { $h_corr = $this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w']; } $maximumW = ($maxWidth/_MPDFK) - ($this->blk[$this->blklvl]['padding_left'] + $this->blk[$this->blklvl]['border_left']['w'] + $this->blk[$this->blklvl]['padding_right'] + $this->blk[$this->blklvl]['border_right']['w'] + $fpaddingL + $fpaddingR ); } $objattr = $this->inlineObject($objattr['type'],$this->lMargin + $fpaddingL + ($contentWidth/_MPDFK),($this->y + $h_corr), $objattr, $this->lMargin,($contentWidth/_MPDFK),$maximumW,$lineHeight,true,$is_table); $lineHeight = MAX($lineHeight,$objattr['OUTER-HEIGHT']); $this->objectbuffer[count($content)-1] = $objattr; $contentWidth += ($objattr['OUTER-WIDTH'] * _MPDFK); return; } $lbw = $rbw = 0; if (!empty($this->spanborddet)) { if (isset($this->spanborddet['L'])) $lbw = $this->spanborddet['L']['w']; if (isset($this->spanborddet['R'])) $rbw = $this->spanborddet['R']['w']; } if ($this->usingCoreFont) { $tmp = strlen( $s ); } else { $tmp = mb_strlen( $s, $this->mb_enc ); } for ( $i = 0; $i < $tmp; $i++ ) { if ($this->usingCoreFont) { $c = $s[$i]; $cw = ($this->GetCharWidthCore($c) * _MPDFK); if ($this->kerning && $this->useKerning && $i > 0) { if (isset($this->CurrentFont['kerninfo'][$s[($i-1)]][$c])) { $cw += ($this->CurrentFont['kerninfo'][$s[($i-1)]][$c] * $this->FontSizePt / 1000 ); } } } else { $c = mb_substr($s,$i,1,$this->mb_enc ); $cw = ($this->GetCharWidthNonCore($c, false) * _MPDFK); if ($this->kerning && $this->useKerning && $i > 0) { $lastc = mb_substr($s,($i-1),1,$this->mb_enc ); $ulastc = $this->UTF8StringToArray($lastc, false); $uc = $this->UTF8StringToArray($c, false); if (isset($this->CurrentFont['kerninfo'][$ulastc[0]][$uc[0]])) { $cw += ($this->CurrentFont['kerninfo'][$ulastc[0]][$uc[0]] * $this->FontSizePt / 1000 ); } } } if ($i==0) { $cw += $lbw*_MPDFK; $contentB[(count($contentB)-1)] .= 'L'; } if ($i==($tmp-1)) { $cw += $rbw*_MPDFK; $contentB[(count($contentB)-1)] .= 'R'; } if ($c==' ') { $currContent .= $c; $cutoffWidth = $contentWidth; $contentWidth += $cw; continue; } $WidthCorrection = 0; if (($newblock) && ($blockstate==1 || $blockstate==3) && isset($this->blk[$this->blklvl]['text_indent']) && ($lineCount == 0) && (!$is_table) && (!$is_list) && ($align != 'C')) { $ti = $this->ConvertSize($this->blk[$this->blklvl]['text_indent'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); $WidthCorrection = ($ti*_MPDFK); } $fpaddingR = 0; $fpaddingL = 0; if (count($this->floatDivs)) { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl); if ($r_exists) { $fpaddingR = $r_width; } if ($l_exists) { $fpaddingL = $l_width; } } $usey = $this->y + 0.002; if (($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 0) ) { $usey += $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w']; } if (isset($this->floatmargins['R']) && $usey <= $this->floatmargins['R']['y1'] && $usey >= $this->floatmargins['R']['y0'] && !$this->floatmargins['R']['skipline']) { $fpaddingR += $this->floatmargins['R']['w']; } if (isset($this->floatmargins['L']) && $usey <= $this->floatmargins['L']['y1'] && $usey >= $this->floatmargins['L']['y0'] && !$this->floatmargins['L']['skipline']) { $fpaddingL += $this->floatmargins['L']['w']; } if (( $contentWidth + $cw > $maxWidth - $WidthCorrection - (($this->cMarginL+$this->cMarginR)*_MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ) + 0.001)) { $lineCount++; $savedContent = ''; $savedContentB = ''; $savedFont = array(); $savedObj = array(); $savedPreContent = array(); $savedPreContentB = array(); $savedPreFont = array(); $words = explode( ' ', $currContent ); $currWord = $words[count($words)-1] ; $success = false; $hardsuccess = false; if ($this->textparam['hyphens'] != 2 && preg_match("/\-/",$currWord)) { $rem = $maxWidth - $WidthCorrection - (($this->cMarginL+$this->cMarginR)*_MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ); list($hardsuccess,$pre,$post,$prelength) = $this->hardHyphenate($currWord, (($rem-$cutoffWidth)/_MPDFK -$this->GetCharWidth("-", false)) ); if ($hardsuccess) { $already = array_pop( $words ); $forward = mb_substr($already,$prelength+1,mb_strlen($already, $this->mb_enc), $this->mb_enc); $words[] = $pre.'-'; $words[] = $forward; $currContent = mb_substr($currContent,0,mb_strlen($currContent, $this->mb_enc)+1-mb_strlen($post, $this->mb_enc), $this->mb_enc) . '-'; } } else if ($this->textparam['hyphens'] != 2 && (!$this->usingCoreFont && preg_match("/\xc2\xad/",$currWord)) || ($this->usingCoreFont && preg_match("/".chr(173)."/",$currWord) && ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats')) ) { $rem = $maxWidth - $WidthCorrection - (($this->cMarginL+$this->cMarginR)*_MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ); list($success,$pre,$post,$prelength) = $this->softHyphenate($currWord, (($rem-$cutoffWidth)/_MPDFK -$this->GetCharWidth(" ", false)) ); } if (!$success && !$hardsuccess && $this->textparam['hyphens'] == 1 ) { for($ac = $i; $ac<(mb_strlen($s)-1); $ac++) { $addc = mb_substr($s,$ac,1,$this->mb_enc ); if ($addc == ' ') { break; } $currWord .= $addc; } $rem = $maxWidth - $WidthCorrection - (($this->cMarginL+$this->cMarginR)*_MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ); list($success,$pre,$post,$prelength) = $this->hyphenateWord($currWord, (($rem-$cutoffWidth)/_MPDFK -$this->GetCharWidth(" ", false)) ); } if ($success) { $already = array_pop( $words ); $forward = mb_substr($already,$prelength,mb_strlen($already, $this->mb_enc), $this->mb_enc); $words[] = $pre.'-'; $words[] = $forward; $currContent = mb_substr($currContent,0,mb_strlen($currContent, $this->mb_enc)+1-mb_strlen($post, $this->mb_enc), $this->mb_enc) . '-'; } if ($is_table && substr($align,0,1)=='D' ) { $align=substr($align,2,1); } if ($this->checkCJK) { $lastchar = mb_substr($words[(count($words)-1)],mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, 1, $this->mb_enc); } if ($this->checkCJK && preg_match("/[".$this->CJKoverflow."]/u", $c) && $this->allowCJKorphans && !$CJKoverflow) { $currContent .= $c; $cutoffWidth = $contentWidth; $contentWidth += $cw; $CJKoverflow = true; continue; } else if ($this->checkCJK && preg_match("/[".$this->CJKleading."]/u", $lastchar)) { $m0 = $lastchar; $m1 = $c; while(preg_match("/[".$this->CJKleading."]/u", $m0) && mb_strlen($words[(count($words)-1)], $this->mb_enc)>2) { $words[(count($words)-1)] = mb_substr($words[(count($words)-1)],0,mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, $this->mb_enc); $savedContent = $m0.$savedContent; $m1 = $lastchar; $lastchar = mb_substr($words[(count($words)-1)],mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, 1, $this->mb_enc); $m0 = $lastchar; } $lastContent = ''; for ( $w = 0; $w < count( $words ) ; $w++) { $lastContent .= $words[ $w ]." "; } $savedFont = $this->saveFont(); $currContent = rtrim( $lastContent ); } else if ($this->checkCJK && preg_match("/[".$this->CJKfollowing."]/u", $c)) { if ($this->allowCJKorphans && !$CJKoverflow) { $lookahead = mb_substr($s,$i+1,1,$this->mb_enc ); if (!$lookahead || ($lookahead && !preg_match("/[".$this->CJKfollowing."]/u", $lookahead))) { $currContent .= $c; $cutoffWidth = $contentWidth; $contentWidth += $cw; if ($this->allowCJKoverflow && preg_match("/[".$this->CJKoverflow."]/u", $c)) { $CJKoverflow = true; } continue; } } $m0 = $lastchar; $m1 = $c; while(preg_match("/[".$this->CJKfollowing."]/u", $m1) && mb_strlen($words[(count($words)-1)], $this->mb_enc)>2) { $words[(count($words)-1)] = mb_substr($words[(count($words)-1)],0,mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, $this->mb_enc); $savedContent = $m0.$savedContent; $m1 = $lastchar; $lastchar = mb_substr($words[(count($words)-1)],mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, 1, $this->mb_enc); $m0 = $lastchar; } $lastContent = ''; for ( $w = 0; $w < count( $words ) ; $w++) { $lastContent .= $words[ $w ]." "; } $savedFont = $this->saveFont(); $currContent = rtrim( $lastContent ); } else if ($this->checkCJK && preg_match("/([".$this->pregCJKchars."]+[0-9\x{ff10}-\x{ff19}]+$)/u", $words[0])) { $lookahead = mb_substr($s,$i,16,$this->mb_enc ); if ($lookahead && (preg_match("/^([0-9\x{ff10}-\x{ff19}]+[".$this->pregCJKchars."]+)/u", $lookahead) || preg_match("/^([0-9\x{ff10}-\x{ff19}]+$)/u", $lookahead)) ) { $m0 = $lastchar; while(preg_match("/[0-9\x{ff10}-\x{ff19}]/u", $m0) && mb_strlen($words[(count($words)-1)], $this->mb_enc)>2) { $words[(count($words)-1)] = mb_substr($words[(count($words)-1)],0,mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, $this->mb_enc); $savedContent = $m0.$savedContent; $lastchar = mb_substr($words[(count($words)-1)],mb_strlen($words[(count($words)-1)], $this->mb_enc)-1, 1, $this->mb_enc); $m0 = $lastchar; } } $lastContent = ''; for ( $w = 0; $w < count( $words ) ; $w++) { $lastContent .= $words[ $w ]." "; } $savedFont = $this->saveFont(); $currContent = rtrim( $lastContent ); } else if ( count( $words ) == 1 ) { if (count($content) == 1 && $currContent != ' ') { $lastchar = mb_substr($words[0],mb_strlen($words[0], $this->mb_enc)-1, 1, $this->mb_enc); $lastContent = $words[0]; $savedFont = $this->saveFont(); $currContent = rtrim( $lastContent ); } else if ( count($content)>1 && (!isset($this->objectbuffer[(count($content)-1)]) && !isset($this->objectbuffer[(count($content)-2)])) && substr($content[count($content)-2],-1,1) != ' ' && substr($currContent,0,1) != ' ' ) { $found = false; for ($ix=count($content)-1;$ix>=0;$ix--) { if ($this->usingCoreFont && preg_match('/[ '.chr(173).']/',$content[$ix],$m)) { $match = $m[0]; $found = $ix; break; } else if (!$this->usingCoreFont) { if (preg_match('/[ ]/',$content[$ix])) { $match = ' '; $found = $ix; break; } else if (preg_match('/[\x{00AD}]/u',$content[$ix])) { $content[$ix] = preg_replace('/[\x{00AD}]/u',chr(173),$content[$ix]); $match = chr(173); $found = $ix; break; } } } if ($found !== false) { $charpos = strrpos($content[$found],$match); for ($ix=count($content)-1;$ix>$found;$ix--) { $savedPreContent[] = array_pop($content); $savedPreContentB[] = array_pop($contentB); $savedPreFont[] = array_pop($font); } if (substr($content[count($content)-1],$charpos+1,strlen($content[count($content)-1])-1) != '') { $savedPreContent[] = substr($content[count($content)-1],$charpos+1,strlen($content[count($content)-1])-1); $savedPreContentB[] = preg_replace('/L/','',$contentB[count($content)-1]); $savedPreFont[] = $font[count($content)-1]; } $savedContent = ''; $savedContentB = ''; $savedFont = array(); $currContent =& $content[ count( $content ) - 1 ]; $currContent = substr($currContent,0,$charpos); if ($match == chr(173)) { $currContent .= '-'; } if (strpos($contentB[(count($contentB)-1)],'R')!==false) { $contentB[count($content)-1] = preg_replace('/R/','',$contentB[count($content)-1]); } $currContent = rtrim( $currContent ); } else { $savedContent = array_pop( $content ); $savedContentB = array_pop($contentB); $savedFont = array_pop( $font ); $currContent =& $content[ count( $content ) - 1 ]; $currContent = rtrim( $currContent ); } } else { $savedContent = array_pop( $content ); $savedContentB = array_pop($contentB); $savedFont = array_pop( $font ); $currContent =& $content[ count( $content ) - 1 ]; $currContent = rtrim( $currContent ); } } else { $lastContent = ''; for ( $w = 0; $w < count( $words ) - 1; $w++) { $lastContent .= $words[ $w ]." "; } $savedContent = $words[ count( $words ) - 1 ]; $savedFont = $this->saveFont(); $currContent = rtrim( $lastContent ); } if ($this->checkCJK) { $currContent = preg_replace("/\xe3\x80\x80$/",'',$currContent) ; } if (isset($this->objectbuffer[(count($content)-1)]) && $this->objectbuffer[(count($content)-1)]['type']=='dottab') { $savedObj = array_pop( $this->objectbuffer ); $contentWidth -= ($this->objectbuffer[(count($content)-1)]['OUTER-WIDTH'] * _MPDFK); } $lhfixed = false; if ($is_list) { if (preg_match('/([0-9.,]+)mm/',$this->list_lineheight[$this->listlvl][$this->listOcc],$am)) { $lhfixed = true; $def_fontsize = $this->InlineProperties['LISTITEM'][$this->listlvl][$this->listOcc][$this->listnum]['size']; $this->lineheight_correction = $am[1] / $def_fontsize ; } else { $this->lineheight_correction = $this->list_lineheight[$this->listlvl][$this->listOcc]; } } else if ($is_table) { if (preg_match('/([0-9.,]+)mm/',$this->table_lineheight,$am)) { $lhfixed = true; $def_fontsize = $this->FontSize; $this->lineheight_correction = $lineHeight / $def_fontsize ; } else { $this->lineheight_correction = $this->table_lineheight; } } else if (isset($this->blk[$this->blklvl]['line_height']) && $this->blk[$this->blklvl]['line_height']) { if (preg_match('/([0-9.,]+)mm/',$this->blk[$this->blklvl]['line_height'],$am)) { $lhfixed = true; $def_fontsize = $this->blk[$this->blklvl]['InlineProperties']['size']; $this->lineheight_correction = $am[1] / $def_fontsize ; } else { $this->lineheight_correction = $this->blk[$this->blklvl]['line_height']; } } else { $this->lineheight_correction = $this->normalLineheight; } $contentWidth = 0; if ($lhfixed) { $maxlineHeight = $this->lineheight; } else { $maxlineHeight = 0; } $this->forceExactLineheight = true; $maxfontsize = 0; $checkCursive=false; if ($this->biDirectional) { $checkCursive=true; } foreach ( $content as $k => $chunk ) { $this->restoreFont( $font[ $k ]); if (!isset($this->objectbuffer[$k])) { if ($this->checkCJK && $k == count($content)-1 && $CJKoverflow && $align=='J' && $this->allowCJKoverflow && $this->CJKforceend) { $hanger = mb_substr($chunk,mb_strlen($chunk,$this->mb_enc)-1,1,$this->mb_enc ); $content[$k] = $chunk = mb_substr($chunk,0,mb_strlen($chunk,$this->mb_enc)-1,$this->mb_enc ); } if (!$this->usingCoreFont) { $content[$k] = $chunk = str_replace("\xc2\xad",'',$chunk ); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) { $checkCursive=true; } } else if ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats') { $content[$k] = $chunk = str_replace(chr(173),'',$chunk ); } $contentWidth += $this->GetStringWidth( $chunk ) * _MPDFK; if (!empty($this->spanborddet)) { if (strpos($contentB[$k],'L')!==false) $contentWidth += $this->spanborddet['L']['w'] * _MPDFK; if (strpos($contentB[$k],'R')!==false) $contentWidth += $this->spanborddet['R']['w'] * _MPDFK; } if (!$lhfixed) { $maxlineHeight = max($maxlineHeight,$this->FontSize * $this->lineheight_correction ); } if ($lhfixed && ($this->FontSize > $def_fontsize || ($this->FontSize > ($lineHeight * $this->lineheight_correction) && $is_list))) { $this->forceExactLineheight = false; } $maxfontsize = max($maxfontsize,$this->FontSize); } } $lastfontreqstyle = $font[count($font)-1]['ReqFontStyle']; $lastfontstyle = $font[count($font)-1]['style']; if ($blockdir == 'ltr' && strpos($lastfontreqstyle,"I") !== false && strpos($lastfontstyle,"I") === false) { $lastitalic = $this->FontSize*0.15*_MPDFK; } else { $lastitalic = 0; } if ($is_list && is_array($this->bulletarray) && $this->bulletarray) { $actfs = $this->bulletarray['fontsize']; if (!$lhfixed) { $maxlineHeight = max($maxlineHeight,$actfs * $this->lineheight_correction ); } if ($lhfixed && $actfs > $def_fontsize) { $this->forceExactLineheight = false; } $maxfontsize = max($maxfontsize,$actfs); } $af = 0; $bf = 0; $mta = 0; $mba = 0; foreach ( $content as $k => $chunk ) { if (isset($this->objectbuffer[$k]) && $this->objectbuffer[$k]) { $contentWidth += $this->objectbuffer[$k]['OUTER-WIDTH'] * _MPDFK; $oh = $this->objectbuffer[$k]['OUTER-HEIGHT']; $va = $this->objectbuffer[$k]['vertical-align']; if ($lhfixed && $oh > $def_fontsize) { $this->forceExactLineheight = false; } if ($va == 'BS') { $af = max($af, ($oh - ($maxfontsize * (0.5 + $this->baselineC)))); } else if ($va == 'M') { $af = max($af, ($oh - $maxfontsize)/2); $bf = max($bf, ($oh - $maxfontsize)/2); } else if ($va == 'TT') { $bf = max($bf, ($oh - $maxfontsize)); } else if ($va == 'TB') { $af = max($af, ($oh - $maxfontsize)); } else if ($va == 'T') { $mta = max($mta, $oh); } else if ($va == 'B') { $mba = max($mba, $oh); } } } if ((!$lhfixed || !$this->forceExactLineheight) && ($af > (($maxlineHeight - $maxfontsize)/2) || $bf > (($maxlineHeight - $maxfontsize)/2))) { $maxlineHeight = $maxfontsize + $af + $bf; } else if (!$lhfixed) { $af = $bf = ($maxlineHeight - $maxfontsize)/2; } if ($mta > $maxlineHeight) { $bf += ($mta - $maxlineHeight); $maxlineHeight = $mta; } if ($mba > $maxlineHeight) { $af += ($mba - $maxlineHeight); $maxlineHeight = $mba; } $lineHeight = $maxlineHeight; $cutoffWidth = $contentWidth; if ($lhfixed && $af==0 && $bf==0 && $maxfontsize<=($def_fontsize * $this->lineheight_correction * 0.8 )) { $this->linemaxfontsize = $def_fontsize; } else { $this->linemaxfontsize = $maxfontsize; } $inclCursive=false; foreach ( $content as $k => $chunk ) { if (!isset($this->objectbuffer[$k]) || (isset($this->objectbuffer[$k]) && !$this->objectbuffer[$k])) { if ($this->usingCoreFont) { $content[$k] = str_replace(chr(160),chr(32),$chunk ); } else { $content[$k] = str_replace(chr(194).chr(160),chr(32),$chunk ); if ($checkCursive) { if (preg_match("/([".$this->pregRTLchars."])/u", $chunk)) { $inclCursive = true; } if (preg_match("/([".$this->pregHIchars.$this->pregBNchars.$this->pregPAchars."])/u", $chunk)) { $inclCursive = true; } } } } } $jcharspacing = 0; $jws = 0; $nb_carac = 0; $nb_spaces = 0; if ( ($align == 'J' && !$CJKoverflow) || (($cutoffWidth + $lastitalic > $maxWidth - $WidthCorrection - (($this->cMarginL+$this->cMarginR)*_MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ) + 0.001) && (!$CJKoverflow || ($CJKoverflow && !$this->allowCJKoverflow))) || $CJKoverflow && $align=='J' && $this->allowCJKoverflow && $hanger && $this->CJKforceend) { foreach ( $content as $k => $chunk ) { if (!isset($this->objectbuffer[$k]) || (isset($this->objectbuffer[$k]) && !$this->objectbuffer[$k])) { $nb_carac += mb_strlen( $chunk, $this->mb_enc ) ; $nb_spaces += mb_substr_count( $chunk,' ', $this->mb_enc ) ; } } list($jcharspacing,$jws) = $this->GetJspacing($nb_carac,$nb_spaces,($maxWidth-$lastitalic-$cutoffWidth-$WidthCorrection-(($this->cMarginL+$this->cMarginR)*_MPDFK)-($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) )),$inclCursive); } $empty = $maxWidth - $lastitalic-$WidthCorrection - $contentWidth - (($this->cMarginL+$this->cMarginR)* _MPDFK) - ($paddingL+$paddingR +(($fpaddingL + $fpaddingR) * _MPDFK) ); $empty -= ($jcharspacing * $nb_carac); $empty -= ($jws * $nb_spaces); $empty /= _MPDFK; $b = ''; $check_h = max($this->divheight,$lineHeight); if (($newblock) && ($blockstate==1 || $blockstate==3) && ($this->blklvl > 0) && ($lineCount == 1) && (!$is_table) && (!$is_list)) { $check_h += ($this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['border_top']['w']); } if ($this->ColActive && $check_h > ($this->PageBreakTrigger - $this->y0)) { $this->SetCol($this->NbCol-1); } if(!$is_table && ($this->y+$check_h) > $this->PageBreakTrigger and !$this->InFooter and $this->AcceptPageBreak()) { $bak_x=$this->x; $ws=$this->ws; $charspacing=$this->charspacing; $this->ResetSpacing(); $this->AddPage($this->CurOrientation); $this->x = $bak_x; $currentx += $this->MarginCorrection; $this->x += $this->MarginCorrection; $this->SetSpacing($charspacing,$ws); } if ($this->keep_block_together && !$is_table && $this->kt_p00 < $this->page && ($this->y+$check_h) > $this->kt_y00) { $this->printdivbuffer(); $this->keep_block_together = 0; } if ($this->CurrCol != $oldcolumn) { $currentx += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); $this->x += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); $oldcolumn = $this->CurrCol; } if ($this->ColActive && !$is_table) { $this->breakpoints[$this->CurrCol][] = $this->y; } if (($newblock) && ($blockstate==1 || $blockstate==3) && ($this->blk[$this->blklvl]['margin_top']) && ($lineCount == 1) && (!$is_table) && (!$is_list)) { $this->DivLn($this->blk[$this->blklvl]['margin_top'],$this->blklvl-1,true,$this->blk[$this->blklvl]['margin_collapse']); if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } if (($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 1) && (!$is_table) && (!$is_list)) { $this->blk[$this->blklvl]['y0'] = $this->y; $this->blk[$this->blklvl]['startpage'] = $this->page; if ($this->blk[$this->blklvl]['float']) { $this->blk[$this->blklvl]['float_start_y'] = $this->y; } } if (($newblock) && ($blockstate==1 || $blockstate==3) && (($this->blk[$this->blklvl]['padding_top']) || ($this->blk[$this->blklvl]['border_top'])) && ($lineCount == 1) && (!$is_table) && (!$is_list)) { $this->DivLn($this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w'],-3,true,false,1); if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } $arraysize = count($content); $margins = ($this->cMarginL+$this->cMarginR) + ($ipaddingL+$ipaddingR + $fpaddingR + $fpaddingR ); if (!$is_table) { $this->DivLn($lineHeight,$this->blklvl,false); } $this->x = $currentx + $this->cMarginL + $ipaddingL + $fpaddingL ; if ($align == 'R') { $this->x += $empty; } else if ($align == 'C') { $this->x += ($empty / 2); } if (isset($this->blk[$this->blklvl]['text_indent']) && ($newblock) && ($blockstate==1 || $blockstate==3) && ($lineCount == 1) && (!$is_table) && ($blockdir !='rtl') && ($align !='C')) { $ti = $this->ConvertSize($this->blk[$this->blklvl]['text_indent'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); $this->x += $ti; } $all_rtl = false; $contains_rtl = false; if ($blockdir == 'rtl' || $this->biDirectional) { $all_rtl = true; foreach ( $content as $k => $chunk ) { $reversed = $this->magic_reverse_dir($chunk, false, $blockdir); if ($reversed > 0) { $contains_rtl = true; } if ($reversed < 2) { $all_rtl = false; } $content[$k] = $chunk; } if (($blockdir =='rtl' && $contains_rtl) || $all_rtl) { $content = array_reverse($content,false); $contentB = array_reverse($contentB,false); } } foreach ( $content as $k => $chunk ) { if (($blockdir =='rtl' && $contains_rtl) || $all_rtl) { $dirk = $arraysize-1 - $k ; } else { $dirk = $k; } $va = 'M'; if (isset($this->objectbuffer[$dirk]) && $this->objectbuffer[$dirk]) { $xadj = $this->x - $this->objectbuffer[$dirk]['OUTER-X'] ; $this->objectbuffer[$dirk]['OUTER-X'] += $xadj; $this->objectbuffer[$dirk]['BORDER-X'] += $xadj; $this->objectbuffer[$dirk]['INNER-X'] += $xadj; $va = $this->objectbuffer[$dirk]['vertical-align']; $yadj = $this->y - $this->objectbuffer[$dirk]['OUTER-Y']; if ($va == 'BS') { $yadj += $af + ($this->linemaxfontsize * (0.5 + $this->baselineC)) - $this->objectbuffer[$dirk]['OUTER-HEIGHT']; } else if ($va == 'M' || $va == '') { $yadj += $af + ($this->linemaxfontsize /2) - ($this->objectbuffer[$dirk]['OUTER-HEIGHT']/2); } else if ($va == 'TB') { $yadj += $af + $this->linemaxfontsize - $this->objectbuffer[$dirk]['OUTER-HEIGHT']; } else if ($va == 'TT') { $yadj += $af; } else if ($va == 'B') { $yadj += $af + $this->linemaxfontsize + $bf - $this->objectbuffer[$dirk]['OUTER-HEIGHT']; } else if ($va == 'T') { $yadj += 0; } $this->objectbuffer[$dirk]['OUTER-Y'] += $yadj; $this->objectbuffer[$dirk]['BORDER-Y'] += $yadj; $this->objectbuffer[$dirk]['INNER-Y'] += $yadj; } if ((($blockdir == 'rtl') && ($contains_rtl )) || ($all_rtl )) { $this->restoreFont($font[$arraysize-1 - $k]); } else { $this->restoreFont( $font[ $k ] ); } $this->SetSpacing(($this->fixedlSpacing*_MPDFK)+$jcharspacing,($this->fixedlSpacing+$this->minwSpacing)*_MPDFK+$jws); $this->fixedlSpacing = false; $this->minwSpacing = 0; $save_vis = $this->visibility; if (isset($this->textparam['visibility']) && $this->textparam['visibility'] && $this->textparam['visibility'] != $this->visibility) { $this->SetVisibility($this->textparam['visibility']); } if ($this->spanbgcolor) { $cor = $this->spanbgcolorarray; $this->SetFColor($cor); $save_fill = $fill; $spanfill = 1; $fill = 1; } if (!empty($this->spanborddet)) { if (strpos($contentB[$k],'L')!==false) $this->x += $this->spanborddet['L']['w']; if (strpos($contentB[$k],'L')===false) $this->spanborddet['L']['s'] = $this->spanborddet['L']['w'] = 0; if (strpos($contentB[$k],'R')===false) $this->spanborddet['R']['s'] = $this->spanborddet['R']['w'] = 0; } $stringWidth = $this->GetStringWidth($chunk ); $stringWidth += ( $this->charspacing * mb_strlen($chunk,$this->mb_enc ) / _MPDFK ); $stringWidth += ( $this->ws * mb_substr_count($chunk,' ',$this->mb_enc ) / _MPDFK ); if (isset($this->objectbuffer[$dirk])) { $stringWidth = $this->objectbuffer[$dirk]['OUTER-WIDTH']; } if ($stringWidth==0) { $stringWidth = 0.000001; } if ($k == $arraysize-1) { $stringWidth -= ( $this->charspacing / _MPDFK ); if ($this->checkCJK && $CJKoverflow && $align=='J' && $this->allowCJKoverflow && $hanger && $this->CJKforceend) { $this->Cell( $stringWidth, $lineHeight, $chunk, '', 0, '', $fill, $this->HREF, $currentx,0,0,'M', $fill, $af, $bf, true ); $this->Cell( $this->GetStringWidth($hanger), $lineHeight, $hanger, '', 1, '', $fill, $this->HREF, $currentx,0,0,'M', $fill, $af, $bf, true ); } else { $this->Cell( $stringWidth, $lineHeight, $chunk, '', 1, '', $fill, $this->HREF, $currentx,0,0,'M', $fill, $af, $bf, true ); } } else $this->Cell( $stringWidth, $lineHeight, $chunk, '', 0, '', $fill, $this->HREF, 0, 0,0,'M', $fill, $af, $bf, true ); if (!empty($this->spanborddet)) { if (strpos($contentB[$k],'R')!==false && $k != $arraysize-1) $this->x += $this->spanborddet['R']['w']; } if (isset($spanfill) && $spanfill) { $fill = $save_fill; $spanfill = 0; if ($fill) { $this->SetFColor($bcor); } } if (isset($this->textparam['visibility']) && $this->textparam['visibility'] && $this->visibility != $save_vis) { $this->SetVisibility($save_vis); } } if (!$is_table) { $this->maxPosR = max($this->maxPosR , ($this->w - $this->rMargin - $this->blk[$this->blklvl]['outer_right_margin'])); $this->maxPosL = min($this->maxPosL , ($this->lMargin + $this->blk[$this->blklvl]['outer_left_margin'])); } $this->printobjectbuffer($is_table, $blockdir); $this->objectbuffer = array(); if ($is_list && is_array($this->bulletarray) && ($lineCount == 1) ) { $this->ResetSpacing(); $bull = $this->bulletarray; if (isset($bull['level']) && isset($bull['occur']) && isset($this->InlineProperties['LIST'][$bull['level']][$bull['occur']])) { $this->restoreInlineProperties($this->InlineProperties['LIST'][$bull['level']][$bull['occur']]); } if (isset($bull['level']) && isset($bull['occur']) && isset($bull['num']) && isset($this->InlineProperties['LISTITEM'][$bull['level']][$bull['occur']][$bull['num']]) && $this->InlineProperties['LISTITEM'][$bull['level']][$bull['occur']][$bull['num']]) { $this->restoreInlineProperties($this->InlineProperties['LISTITEM'][$bull['level']][$bull['occur']][$bull['num']]); } if (isset($bull['font']) && $bull['font'] == 'czapfdingbats') { $this->bullet = true; $this->SetFont('czapfdingbats','',$this->FontSizePt/2.5); } else { $this->SetFont($this->FontFamily,$this->FontStyle,$this->FontSizePt,true,true); } $this->x = $currentx; if (isset($bull['x'])) { $this->x += $bull['x']; } $this->y -= $lineHeight; if (isset($bull['col']) && $bull['col']) { $this->SetTColor($bull['col']); } if (isset($bull['txt'])) { $this->Cell($bull['w'], $lineHeight,$bull['txt'],'','',$bull['align'],0,'',0,-$this->cMarginL, -$this->cMarginR ); } if (isset($bull['font']) && $bull['font'] == 'czapfdingbats') { $this->bullet = false; } $this->x = $currentx; $this->y += $lineHeight; if ($this->ColActive && !$is_table) { $this->breakpoints[$this->CurrCol][] = $this->y; } $this->bulletarray = array(); } if ($this->floatmargins) { $this->_advanceFloatMargins(); } $lineHeight = $this->divheight; $valign = 'M'; $font = array(); $content = array(); $contentB = array(); $contentWidth = 0; if (!empty($savedObj)) { $this->objectbuffer[] = $savedObj; $font[] = $savedFont; $content[] = ''; $contentB[] = ''; $contentWidth += $savedObj['OUTER-WIDTH'] * _MPDFK; } if (count($savedPreContent) > 0) { for($ix=count($savedPreContent)-1;$ix>=0;$ix--) { $font[] = $savedPreFont[$ix]; $content[] = $savedPreContent[$ix]; $contentB[] = $savedPreContentB[$ix]; $this->restoreFont( $savedPreFont[$ix] ); $lbw = $rbw = 0; if (!empty($this->spanborddet)) { $lbw = $this->spanborddet['L']['w']; $rbw = $this->spanborddet['R']['w']; } if ($ix>0) { $contentWidth += $this->GetStringWidth( $savedPreContent[$ix] ) * _MPDFK; if (strpos($savedPreContentB[$ix],'L')!==false) $contentWidth += $lbw; if (strpos($savedPreContentB[$ix],'R')!==false) $contentWidth += $rbw; } } $savedPreContent = array(); $savedPreContentB = array(); $savedPreFont = array(); $content[ (count($content)-1) ] .= $c; } else { $font[] = $savedFont; $content[] = $savedContent . $c; $contentB[] = $savedContentB ; } $currContent =& $content[ (count($content)-1) ]; if ($this->checkCJK && $currContent == "\xe3\x80\x80") { $currContent = '' ; } $this->restoreFont( $savedFont ); $lbw = $rbw = 0; if (!empty($this->spanborddet)) { $lbw = $this->spanborddet['L']['w']; $rbw = $this->spanborddet['R']['w']; } $contentWidth += $this->GetStringWidth( $currContent ) * _MPDFK; if (strpos($savedContentB,'L')!==false) $contentWidth += $lbw; $cutoffWidth = $contentWidth; $CJKoverflow = false; $hanger = ''; } else { $contentWidth += $cw; $currContent .= $c; } } unset($content); unset($contentB); } function _advanceFloatMargins() { if (isset($this->floatmargins['L']) && $this->floatmargins['L']['skipline'] && $this->floatmargins['L']['y0'] != $this->y) { $yadj = $this->y - $this->floatmargins['L']['y0']; $this->floatmargins['L']['y0'] = $this->y; $this->floatmargins['L']['y1'] += $yadj; if ($this->floatbuffer[$this->floatmargins['L']['id']]['border_left']['w']) { $this->floatbuffer[$this->floatmargins['L']['id']]['BORDER-Y'] += $yadj; } $this->floatbuffer[$this->floatmargins['L']['id']]['INNER-Y'] += $yadj; $this->floatbuffer[$this->floatmargins['L']['id']]['OUTER-Y'] += $yadj; $this->floatbuffer[$this->floatmargins['L']['id']]['skipline'] = false; $this->floatmargins['L']['skipline'] = false; $this->floatmargins['L']['id'] = ''; } if (isset($this->floatmargins['R']) && $this->floatmargins['R']['skipline'] && $this->floatmargins['R']['y0'] != $this->y) { $yadj = $this->y - $this->floatmargins['R']['y0']; $this->floatmargins['R']['y0'] = $this->y; $this->floatmargins['R']['y1'] += $yadj; if ($this->floatbuffer[$this->floatmargins['R']['id']]['border_left']['w']) { $this->floatbuffer[$this->floatmargins['R']['id']]['BORDER-Y'] += $yadj; } $this->floatbuffer[$this->floatmargins['R']['id']]['INNER-Y'] += $yadj; $this->floatbuffer[$this->floatmargins['R']['id']]['OUTER-Y'] += $yadj; $this->floatbuffer[$this->floatmargins['R']['id']]['skipline'] = false; $this->floatmargins['R']['skipline'] = false; $this->floatmargins['R']['id'] = ''; } } function WordWrap(&$text, $maxwidth, $forcewrap = 0) { $biggestword=0; $toonarrow=false; $text = trim($text); if ($text==='') return 0; $space = $this->GetCharWidth(' ',false); $lines = explode("\n", $text); $text = ''; $count = 0; foreach ($lines as $line) { $words = explode(' ', $line); $width = 0; foreach ($words as $word) { $word = trim($word); $wordwidth = $this->GetStringWidth($word); if ($wordwidth > $maxwidth + 0.0001) { if ($wordwidth > $biggestword) { $biggestword = $wordwidth; } $toonarrow=true; if ($forcewrap) { while($wordwidth > $maxwidth) { $chw = 0; for ( $i = 0; $i < mb_strlen($word, $this->mb_enc ); $i++ ) { $chw = $this->GetStringWidth(mb_substr($word,0,$i+1,$this->mb_enc )); if ($chw > $maxwidth ) { if ($text) { $text = rtrim($text)."\n".mb_substr($word,0,$i,$this->mb_enc ); $count++; } else { $text = mb_substr($word,0,$i,$this->mb_enc ); } $word = mb_substr($word,$i,mb_strlen($word, $this->mb_enc )-$i,$this->mb_enc ); $wordwidth = $this->GetStringWidth($word); $width = $maxwidth; break; } } } } } if ($width + $wordwidth < $maxwidth - 0.0001) { $width += $wordwidth + $space; $text .= $word.' '; } else { $width = $wordwidth + $space; $text = rtrim($text)."\n".$word.' '; $count++; } } $text .= "\n"; $count++; } $text = rtrim($text); if ($forcewrap) { return $count; } if (($toonarrow) && ($this->table_error_report)) { $this->Error("Word is too long to fit in table - ".$this->table_error_report_param); } if ($toonarrow) return -$biggestword; else return $count; } function _SetTextRendering($mode) { if (!(($mode == 0) || ($mode == 1) || ($mode == 2))) $this->Error("Text rendering mode should be 0, 1 or 2 (value : $mode)"); $tr = ($mode.' Tr'); if($this->page>0 && ((isset($this->pageoutput[$this->page]['TextRendering']) && $this->pageoutput[$this->page]['TextRendering'] != $tr) || !isset($this->pageoutput[$this->page]['TextRendering']) || $this->keep_block_together)) { $this->_out($tr); } $this->pageoutput[$this->page]['TextRendering'] = $tr; } function SetTextOutline($params=array()) { if (isset($params['outline-s']) && $params['outline-s']) { $this->SetLineWidth($params['outline-WIDTH']); $this->SetDColor($params['outline-COLOR']); $tr = ('2 Tr'); if($this->page>0 && ((isset($this->pageoutput[$this->page]['TextRendering']) && $this->pageoutput[$this->page]['TextRendering'] != $tr) || !isset($this->pageoutput[$this->page]['TextRendering']) || $this->keep_block_together)) { $this->_out($tr); } $this->pageoutput[$this->page]['TextRendering'] = $tr; } else { $this->SetLineWidth(0.2); $this->SetDColor($this->ConvertColor(0)); $this->_SetTextRendering(0); $tr = ('0 Tr'); if($this->page>0 && ((isset($this->pageoutput[$this->page]['TextRendering']) && $this->pageoutput[$this->page]['TextRendering'] != $tr) || !isset($this->pageoutput[$this->page]['TextRendering']) || $this->keep_block_together)) { $this->_out($tr); } $this->pageoutput[$this->page]['TextRendering'] = $tr; } } function Image($file,$x,$y,$w=0,$h=0,$type='',$link='',$paint=true, $constrain=true, $watermark=false, $shownoimg=true, $allowvector=true) { $orig_srcpath = $file; $this->GetFullPath($file); $info=$this->_getImage($file, true, $allowvector, $orig_srcpath ); if(!$info && $paint) { $info = $this->_getImage($this->noImageFile); if ($info) { $file = $this->noImageFile; $w = ($info['w'] * (25.4/$this->dpi)); $h = ($info['h'] * (25.4/$this->dpi)); } } if(!$info) return false; if($w==0 and $h==0) { if ($info['type']=='wmf') { $w = abs($info['w'])/(20*_MPDFK); $h = abs($info['h']) / (20*_MPDFK); } else if ($info['type']=='svg') { $w = abs($info['w'])/_MPDFK; $h = abs($info['h']) /_MPDFK; } else { $w=($info['w']/_MPDFK) * (72/$this->img_dpi); $h=($info['h']/_MPDFK) * (72/$this->img_dpi); } } if($w==0) $w=abs($h*$info['w']/$info['h']); if($h==0) $h=abs($w*$info['h']/$info['w']); if ($watermark) { $maxw = $this->w; $maxh = $this->h; if (is_array($this->watermark_size)) { $w = $this->watermark_size[0]; $h = $this->watermark_size[1]; } else if (!is_string($this->watermark_size)) { $maxw -= $this->watermark_size*2; $maxh -= $this->watermark_size*2; $w = $maxw; $h=abs($w*$info['h']/$info['w']); if ($h > $maxh ) { $h = $maxh ; $w=abs($h*$info['w']/$info['h']); } } else if ($this->watermark_size == 'F') { if ($this->ColActive) { $maxw = $this->w - ($this->DeflMargin + $this->DefrMargin); } else { $maxw = $this->pgwidth; } $maxh = $this->h - ($this->tMargin + $this->bMargin); $w = $maxw; $h=abs($w*$info['h']/$info['w']); if ($h > $maxh ) { $h = $maxh ; $w=abs($h*$info['w']/$info['h']); } } else if ($this->watermark_size == 'P') { $w = $maxw; $h=abs($w*$info['h']/$info['w']); if ($h > $maxh ) { $h = $maxh ; $w=abs($h*$info['w']/$info['h']); } } if ($w > $maxw) { $w = $maxw; $h=abs($w*$info['h']/$info['w']); } if ($h > $maxh ) { $h = $maxh ; $w=abs($h*$info['w']/$info['h']); } if (is_array($this->watermark_pos)) { $x = $this->watermark_pos[0]; $y = $this->watermark_pos[1]; } else if ($this->watermark_pos == 'F') { if ($this->ColActive) { if (($this->mirrorMargins) && (($this->page)%2==0)) { $xadj = $this->DeflMargin-$this->DefrMargin; } else { $xadj = 0; } $x = ($this->DeflMargin - $xadj + ($this->w - ($this->DeflMargin + $this->DefrMargin))/2) - ($w/2); } else { $x = ($this->lMargin + ($this->pgwidth)/2) - ($w/2); } $y = ($this->tMargin + ($this->h - ($this->tMargin + $this->bMargin))/2) - ($h/2); } else { $x = ($this->w/2) - ($w/2); $y = ($this->h/2) - ($h/2); } if ($info['type']=='wmf') { $sx = $w*_MPDFK / $info['w']; $sy = -$h*_MPDFK / $info['h']; $outstring = sprintf('q %.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q', $sx, $sy, $x*_MPDFK-$sx*$info['x'], (($this->h-$y)*_MPDFK)-$sy*$info['y'], $info['i']); } else if ($info['type']=='svg') { $sx = $w*_MPDFK / $info['w']; $sy = -$h*_MPDFK / $info['h']; $outstring = sprintf('q %.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q', $sx, $sy, $x*_MPDFK-$sx*$info['x'], (($this->h-$y)*_MPDFK)-$sy*$info['y'], $info['i']); } else { $outstring = sprintf("q %.3F 0 0 %.3F %.3F %.3F cm /I%d Do Q",$w*_MPDFK,$h*_MPDFK,$x*_MPDFK,($this->h-($y+$h))*_MPDFK,$info['i']); } if ($this->watermarkImgBehind) { $outstring = $this->watermarkImgAlpha . "\n" . $outstring . "\n" . $this->SetAlpha(1, 'Normal', true) . "\n"; $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', "\n".$outstring."\n".'\\1', $this->pages[$this->page]); } else { $this->_out($outstring); } return 0; } if ($constrain) { if (isset($this->blk[$this->blklvl]['inner_width']) && $this->blk[$this->blklvl]['inner_width']) { $maxw = $this->blk[$this->blklvl]['inner_width']; } else { $maxw = $this->pgwidth; } if ($w > $maxw) { $w = $maxw; $h=abs($w*$info['h']/$info['w']); } if ($h > $this->h - ($this->tMargin + $this->bMargin + 1)) { $h = $this->h - ($this->tMargin + $this->bMargin + 1) ; if ($this->fullImageHeight) { $h = $this->fullImageHeight; } $w=abs($h*$info['w']/$info['h']); } if ( ($x + $w) > $this->w ) { $x = $this->lMargin; $y += 5; } $changedpage = false; $oldcolumn = $this->CurrCol; if($y+$h>$this->PageBreakTrigger and !$this->InFooter and $this->AcceptPageBreak()) { $this->AddPage($this->CurOrientation); $x=$x +$this->MarginCorrection; $y = $tMargin + $this->margin_header; $changedpage = true; } if ($this->CurrCol != $oldcolumn) { $y = $this->y0; $x += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); $this->x += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); } } if ($info['type']=='wmf') { $sx = $w*_MPDFK / $info['w']; $sy = -$h*_MPDFK / $info['h']; $outstring = sprintf('q %.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q', $sx, $sy, $x*_MPDFK-$sx*$info['x'], (($this->h-$y)*_MPDFK)-$sy*$info['y'], $info['i']); } else if ($info['type']=='svg') { $sx = $w*_MPDFK / $info['w']; $sy = -$h*_MPDFK / $info['h']; $outstring = sprintf('q %.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q', $sx, $sy, $x*_MPDFK-$sx*$info['x'], (($this->h-$y)*_MPDFK)-$sy*$info['y'], $info['i']); } else { $outstring = sprintf("q %.3F 0 0 %.3F %.3F %.3F cm /I%d Do Q",$w*_MPDFK,$h*_MPDFK,$x*_MPDFK,($this->h-($y+$h))*_MPDFK,$info['i']); } if($paint) { $this->_out($outstring); if($link) $this->Link($x,$y,$w,$h,$link); $this->y = $y + $h; } $sizesarray['WIDTH'] = $w; $sizesarray['HEIGHT'] = $h; $sizesarray['X'] = $x; $sizesarray['Y'] = $y; $sizesarray['OUTPUT'] = $outstring; $sizesarray['IMAGE_ID'] = $info['i']; $sizesarray['itype'] = $info['type']; $sizesarray['set-dpi'] = $info['set-dpi']; return $sizesarray; } function _getObjAttr($t) { $c = explode("\xbb\xa4\xac",$t,2); $c = explode(",",$c[1],2); foreach($c as $v) { $v = explode("=",$v,2); $sp[$v[0]] = $v[1]; } return (unserialize($sp['objattr'])); } function inlineObject($type,$x,$y,$objattr,$Lmargin,$widthUsed,$maxWidth,$lineHeight,$paint=false,$is_table=false) { if ($is_table) { $k = $this->shrin_k; } else { $k = 1; } $w = 0; if (isset($objattr['width'])) { $w = $objattr['width']/$k; } $h = 0; if (isset($objattr['height'])) { $h = abs($objattr['height']/$k); } $widthLeft = $maxWidth - $widthUsed; $maxHeight = $this->h - ($this->tMargin + $this->bMargin + 10) ; if ($this->fullImageHeight) { $maxHeight = $this->fullImageHeight; } if (isset($objattr['border_left'])) { $extraWidth = ($objattr['border_left']['w'] + $objattr['border_right']['w'] + $objattr['margin_left']+ $objattr['margin_right'])/$k; $extraHeight = ($objattr['border_top']['w'] + $objattr['border_bottom']['w'] + $objattr['margin_top']+ $objattr['margin_bottom'])/$k; if ($type == 'image' || $type == 'barcode' || $type == 'textcircle') { $extraWidth += ($objattr['padding_left'] + $objattr['padding_right'])/$k; $extraHeight += ($objattr['padding_top'] + $objattr['padding_bottom'])/$k; } } if (!isset($objattr['vertical-align'])) { $objattr['vertical-align'] = 'M'; } if ($type == 'image' || (isset($objattr['subtype']) && $objattr['subtype'] == 'IMAGE')) { if (isset($objattr['itype']) && ($objattr['itype'] == 'wmf' || $objattr['itype'] == 'svg')) { $file = $objattr['file']; $info=$this->formobjects[$file]; } else if (isset($objattr['file'])) { $file = $objattr['file']; $info=$this->images[$file]; } } if ($type == 'annot' || $type == 'bookmark' || $type == 'indexentry' || $type == 'toc') { $w = 0.00001; $h = 0.00001; } if (!$paint) { if ($type == 'hr') { if (($y + $h + $lineHeight > $this->PageBreakTrigger) && !$this->InFooter && !$is_table) { return array(-2, $w ,$h ); } else { return array(1, $w ,$h ); } } else { if ($widthUsed > 0 && $w > $widthLeft && (!$is_table || $type != 'image')) { if (($y + $h + $lineHeight > $this->PageBreakTrigger) && !$this->InFooter) { return array(-2,$w ,$h ); } return array(1,$w ,$h ); } else if ($widthUsed > 0 && $w > $widthLeft && $is_table) { return array(1,$w ,$h ); } else if (($y + $h > $this->PageBreakTrigger) && !$this->InFooter && !$is_table) { return array(-1,$w ,$h ); } else { return array(0,$w ,$h ); } } } if ($type == 'annot' || $type == 'bookmark' || $type == 'indexentry' || $type == 'toc') { $w = 0.00001; $h = 0.00001; $objattr['BORDER-WIDTH'] = 0; $objattr['BORDER-HEIGHT'] = 0; $objattr['BORDER-X'] = $x; $objattr['BORDER-Y'] = $y; $objattr['INNER-WIDTH'] = 0; $objattr['INNER-HEIGHT'] = 0; $objattr['INNER-X'] = $x; $objattr['INNER-Y'] = $y; } if ($type == 'image') { if ($w > $widthLeft && !$is_table) { $w = $widthLeft ; $h=abs($w*$info['h']/$info['w']); } $img_w = $w - $extraWidth ; $img_h = $h - $extraHeight ; $objattr['BORDER-WIDTH'] = $img_w + $objattr['padding_left']/$k + $objattr['padding_right']/$k + (($objattr['border_left']['w']/$k + $objattr['border_right']['w']/$k)/2) ; $objattr['BORDER-HEIGHT'] = $img_h + $objattr['padding_top']/$k + $objattr['padding_bottom']/$k + (($objattr['border_top']['w']/$k + $objattr['border_bottom']['w']/$k)/2) ; $objattr['BORDER-X'] = $x + $objattr['margin_left']/$k + (($objattr['border_left']['w']/$k)/2) ; $objattr['BORDER-Y'] = $y + $objattr['margin_top']/$k + (($objattr['border_top']['w']/$k)/2) ; $objattr['INNER-WIDTH'] = $img_w; $objattr['INNER-HEIGHT'] = $img_h; $objattr['INNER-X'] = $x + $objattr['padding_left']/$k + $objattr['margin_left']/$k + ($objattr['border_left']['w']/$k); $objattr['INNER-Y'] = $y + $objattr['padding_top']/$k + $objattr['margin_top']/$k + ($objattr['border_top']['w']/$k) ; $objattr['ID'] = $info['i']; } if ($type == 'input' && $objattr['subtype'] == 'IMAGE') { $img_w = $w - $extraWidth ; $img_h = $h - $extraHeight ; $objattr['BORDER-WIDTH'] = $img_w + (($objattr['border_left']['w']/$k + $objattr['border_right']['w']/$k)/2) ; $objattr['BORDER-HEIGHT'] = $img_h + (($objattr['border_top']['w']/$k + $objattr['border_bottom']['w']/$k)/2) ; $objattr['BORDER-X'] = $x + $objattr['margin_left']/$k + (($objattr['border_left']['w']/$k)/2) ; $objattr['BORDER-Y'] = $y + $objattr['margin_top']/$k + (($objattr['border_top']['w']/$k)/2) ; $objattr['INNER-WIDTH'] = $img_w; $objattr['INNER-HEIGHT'] = $img_h; $objattr['INNER-X'] = $x + $objattr['margin_left']/$k + ($objattr['border_left']['w']/$k); $objattr['INNER-Y'] = $y + $objattr['margin_top']/$k + ($objattr['border_top']['w']/$k) ; $objattr['ID'] = $info['i']; } if ($type == 'barcode' || $type == 'textcircle') { $b_w = $w - $extraWidth ; $b_h = $h - $extraHeight ; $objattr['BORDER-WIDTH'] = $b_w + $objattr['padding_left']/$k + $objattr['padding_right']/$k + (($objattr['border_left']['w']/$k + $objattr['border_right']['w']/$k)/2) ; $objattr['BORDER-HEIGHT'] = $b_h + $objattr['padding_top']/$k + $objattr['padding_bottom']/$k + (($objattr['border_top']['w']/$k + $objattr['border_bottom']['w']/$k)/2) ; $objattr['BORDER-X'] = $x + $objattr['margin_left']/$k + (($objattr['border_left']['w']/$k)/2) ; $objattr['BORDER-Y'] = $y + $objattr['margin_top']/$k + (($objattr['border_top']['w']/$k)/2) ; $objattr['INNER-X'] = $x + $objattr['padding_left']/$k + $objattr['margin_left']/$k + ($objattr['border_left']['w']/$k); $objattr['INNER-Y'] = $y + $objattr['padding_top']/$k + $objattr['margin_top']/$k + ($objattr['border_top']['w']/$k) ; $objattr['INNER-WIDTH'] = $b_w; $objattr['INNER-HEIGHT'] = $b_h; } if ($type == 'textarea') { if ($w > $widthLeft && !$is_table) { $w = $widthLeft ; } if (($y + $h > $this->PageBreakTrigger) && !$this->InFooter) { $h=$this->h - $y - $this->bMargin; } } if ($type == 'hr') { if ($is_table) { $objattr['INNER-WIDTH'] = $maxWidth * $objattr['W-PERCENT']/100; $objattr['width'] = $objattr['INNER-WIDTH']; $w = $maxWidth; } else { if ($w>$maxWidth) { $w = $maxWidth; } $objattr['INNER-WIDTH'] = $w; $w = $maxWidth; } } if (($type == 'select') || ($type == 'input' && ($objattr['subtype'] == 'TEXT' || $objattr['subtype'] == 'PASSWORD'))) { if ($w > $widthLeft && !$is_table) { $w = $widthLeft; } } if ($type == 'textarea' || $type == 'select' || $type == 'input') { if (isset($objattr['fontsize'])) $objattr['fontsize'] /= $k; if (isset($objattr['linewidth'])) $objattr['linewidth'] /= $k; } if (!isset($objattr['BORDER-Y'])) { $objattr['BORDER-Y'] = 0; } if (!isset($objattr['BORDER-X'])) { $objattr['BORDER-X'] = 0; } if (!isset($objattr['INNER-Y'])) { $objattr['INNER-Y'] = 0; } if (!isset($objattr['INNER-X'])) { $objattr['INNER-X'] = 0; } $objattr['OUTER-WIDTH'] = $w; $objattr['OUTER-HEIGHT'] = $h; $objattr['OUTER-X'] = $x; $objattr['OUTER-Y'] = $y; return $objattr; } function SetLineJoin($mode=0) { $s=sprintf('%d j',$mode); if($this->page>0 && ((isset($this->pageoutput[$this->page]['LineJoin']) && $this->pageoutput[$this->page]['LineJoin'] != $s) || !isset($this->pageoutput[$this->page]['LineJoin']) || $this->keep_block_together)) { $this->_out($s); } $this->pageoutput[$this->page]['LineJoin'] = $s; } function SetLineCap($mode=2) { $s=sprintf('%d J',$mode); if($this->page>0 && ((isset($this->pageoutput[$this->page]['LineCap']) && $this->pageoutput[$this->page]['LineCap'] != $s) || !isset($this->pageoutput[$this->page]['LineCap']) || $this->keep_block_together)) { $this->_out($s); } $this->pageoutput[$this->page]['LineCap'] = $s; } function SetDash($black=false,$white=false) { if($black and $white) $s=sprintf('[%.3F %.3F] 0 d',$black*_MPDFK,$white*_MPDFK); else $s='[] 0 d'; if($this->page>0 && ((isset($this->pageoutput[$this->page]['Dash']) && $this->pageoutput[$this->page]['Dash'] != $s) || !isset($this->pageoutput[$this->page]['Dash']) || $this->keep_block_together)) { $this->_out($s); } $this->pageoutput[$this->page]['Dash'] = $s; } function SetDisplayPreferences($preferences) { $this->DisplayPreferences .= $preferences; } function Ln($h='',$collapsible=0) { $this->x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin']; if ($collapsible && ($this->y==$this->tMargin) && (!$this->ColActive)) { $h = 0; } if(is_string($h)) $this->y+=$this->lasth; else $this->y+=$h; } function DivLn($h,$level=-3,$move_y=true,$collapsible=false,$state=0) { if ($collapsible && (sprintf("%0.4f", $this->y)==sprintf("%0.4f", $this->tMargin)) && (!$this->ColActive)) { return; } if ($collapsible && (sprintf("%0.4f", $this->y)==sprintf("%0.4f", $this->y0)) && ($this->ColActive) && $this->CurrCol == 0) { return; } if (!$this->ColActive && !$this->keep_block_together && !$this->kwt) { if ($move_y && !$this->ColActive) { $this->y += $h; } return; } if ($level == -3) { $level = $this->blklvl; } $firstblockfill = $this->GetFirstBlockFill(); if ($firstblockfill && $this->blklvl > 0 && $this->blklvl >= $firstblockfill) { $last_x = 0; $last_w = 0; $last_fc = $this->FillColor; $bak_x = $this->x; $bak_h = $this->divheight; $this->divheight = 0; for ($blvl=$firstblockfill;$blvl<=$level;$blvl++) { $this->SetBlockFill($blvl); $this->x = $this->lMargin + $this->blk[$blvl]['outer_left_margin']; if ($last_x != $this->lMargin + $this->blk[$blvl]['outer_left_margin'] || $last_w != $this->blk[$blvl]['width'] || $last_fc != $this->FillColor || $this->blk[$blvl]['border_top']['s'] || $this->blk[$blvl]['border_bottom']['s'] || $this->blk[$blvl]['border_left']['s'] || $this->blk[$blvl]['border_right']['s']) { $x = $this->x; $this->Cell( ($this->blk[$blvl]['width']), $h, '', '', 0, '', 1); if (!$this->keep_block_together && !$this->writingHTMLheader && !$this->writingHTMLfooter) { $this->x = $x; if ($blvl == $this->blklvl) { $this->PaintDivLnBorder($state,$blvl,$h); } else { $this->PaintDivLnBorder(0,$blvl,$h); } } } $last_x = $this->lMargin + $this->blk[$blvl]['outer_left_margin']; $last_w = $this->blk[$blvl]['width']; $last_fc = $this->FillColor; } if (isset($this->blk[$this->blklvl]['bgcolorarray'])) { $bcor = $this->blk[$this->blklvl]['bgcolorarray']; $this->SetFColor($bcor); } $this->x = $bak_x; $this->divheight = $bak_h; } if ($move_y) { $this->y += $h; } } function SetX($x) { if($x >= 0) $this->x=$x; else $this->x = $this->w + $x; } function SetY($y) { $this->x=$this->lMargin; if($y>=0) $this->y=$y; else $this->y=$this->h+$y; } function SetXY($x,$y) { $this->SetY($y); $this->SetX($x); } function Output($name='',$dest='') { if ($this->showStats) { echo '<div>Generated in '.sprintf('%.2F',(microtime(true) - $this->time0)).' seconds</div>'; } if ($this->progressBar) { $this->UpdateProgressBar(1,'100','Finished'); } if($this->state < 3) $this->Close(); if ($this->progressBar) { $this->UpdateProgressBar(2,'100','Finished'); } if ($this->debug && function_exists('error_get_last') && error_get_last()) { $e = error_get_last(); if (($e['type'] < 2048 && $e['type'] != 8) || (intval($e['type']) & intval(ini_get("error_reporting")))) { echo "<p>Error message detected - PDF file generation aborted.</p>"; echo $e['message'].'<br />'; echo 'File: '.$e['file'].'<br />'; echo 'Line: '.$e['line'].'<br />'; exit; } } if (($this->PDFA || $this->PDFX) && $this->encrypted) { $this->Error("PDFA1-b or PDFX/1-a does not permit encryption of documents."); } if (count($this->PDFAXwarnings) && (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto))) { if ($this->PDFA) { echo '<div>WARNING - This file could not be generated as it stands as a PDFA1-b compliant file.</div>'; echo '<div>These issues can be automatically fixed by mPDF using <i>$mpdf-&gt;PDFAauto=true;</i></div>'; echo '<div>Action that mPDF will take to automatically force PDFA1-b compliance are shown in brackets.</div>'; } else { echo '<div>WARNING - This file could not be generated as it stands as a PDFX/1-a compliant file.</div>'; echo '<div>These issues can be automatically fixed by mPDF using <i>$mpdf-&gt;PDFXauto=true;</i></div>'; echo '<div>Action that mPDF will take to automatically force PDFX/1-a compliance are shown in brackets.</div>'; } echo '<div>Warning(s) generated:</div><ul>'; $this->PDFAXwarnings = array_unique($this->PDFAXwarnings); foreach($this->PDFAXwarnings AS $w) { echo '<li>'.$w.'</li>'; } echo '</ul>'; exit; } if ($this->showStats) { echo '<div>Compiled in '.sprintf('%.2F',(microtime(true) - $this->time0)).' seconds (total)</div>'; echo '<div>Peak Memory usage '.number_format((memory_get_peak_usage(true)/(1024*1024)),2).' MB</div>'; echo '<div>PDF file size '.number_format((strlen($this->buffer)/1024)).' kB</div>'; echo '<div>Number of fonts '.count($this->fonts).'</div>'; exit; } if(is_bool($dest)) $dest=$dest ? 'D' : 'F'; $dest=strtoupper($dest); if($dest=='') { if($name=='') { $name='mpdf.pdf'; $dest='I'; } else { $dest='F'; } } if ($this->progressBar && ($dest=='D' || $dest=='I')) { if($name=='') { $name='mpdf.pdf'; } $tempfile = '_tempPDF'.RAND(1,10000); $f=fopen(_MPDF_TEMP_PATH.$tempfile.'.pdf','wb'); if(!$f) $this->Error('Unable to create temporary output file: '.$tempfile.'.pdf'); fwrite($f,$this->buffer,strlen($this->buffer)); fclose($f); $this->UpdateProgressBar(3,'','Finished'); echo '<script type="text/javascript">

		var form = document.createElement("form");
		form.setAttribute("method", "post");
		form.setAttribute("action", "'._MPDF_URI.'includes/out.php");

		var hiddenField = document.createElement("input");
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "filename");
		hiddenField.setAttribute("value", "'.$tempfile.'");
		form.appendChild(hiddenField);

		var hiddenField = document.createElement("input");
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "dest");
		hiddenField.setAttribute("value", "'.$dest.'");
		form.appendChild(hiddenField);

		var hiddenField = document.createElement("input");
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "opname");
		hiddenField.setAttribute("value", "'.$name.'");
		form.appendChild(hiddenField);

		var hiddenField = document.createElement("input");
		hiddenField.setAttribute("type", "hidden");
		hiddenField.setAttribute("name", "path");
		hiddenField.setAttribute("value", "'.urlencode(_MPDF_TEMP_PATH).'");
		form.appendChild(hiddenField);

		document.body.appendChild(form); 
		form.submit();

      	</script>
		</div>
		</body>
		</html>'; exit; } else { if ($this->progressBar) { $this->UpdateProgressBar(3,'','Finished'); } switch($dest) { case 'I': if ($this->debug && !$this->allow_output_buffering && ob_get_contents()) { echo "<p>Output has already been sent from the script - PDF file generation aborted.</p>"; exit; } if(PHP_SAPI!='cli') { header('Content-Type: application/pdf'); if(headers_sent()) $this->Error('Some data has already been output to browser, can\'t send PDF file'); if (!isset($_SERVER['HTTP_ACCEPT_ENCODING']) OR empty($_SERVER['HTTP_ACCEPT_ENCODING'])) { header('Content-Length: '.strlen($this->buffer)); } header('Content-disposition: inline; filename="'.$name.'"'); header('Cache-Control: public, must-revalidate, max-age=0'); header('Pragma: public'); header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); header('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); } echo $this->buffer; break; case 'D': header('Content-Description: File Transfer'); if (headers_sent()) $this->Error('Some data has already been output to browser, can\'t send PDF file'); header('Content-Transfer-Encoding: binary'); header('Cache-Control: public, must-revalidate, max-age=0'); header('Pragma: public'); header('Expires: Sat, 26 Jul 1997 05:00:00 GMT'); header('Last-Modified: '.gmdate('D, d M Y H:i:s').' GMT'); header('Content-Type: application/force-download'); header('Content-Type: application/octet-stream', false); header('Content-Type: application/download', false); header('Content-Type: application/pdf', false); if (!isset($_SERVER['HTTP_ACCEPT_ENCODING']) OR empty($_SERVER['HTTP_ACCEPT_ENCODING'])) { header('Content-Length: '.strlen($this->buffer)); } header('Content-disposition: attachment; filename="'.$name.'"'); echo $this->buffer; break; case 'F': $f=fopen($name,'wb'); if(!$f) $this->Error('Unable to create output file: '.$name); fwrite($f,$this->buffer,strlen($this->buffer)); fclose($f); break; case 'S': return $this->buffer; default: $this->Error('Incorrect output destination: '.$dest); } } $interval = 3600; if ($handle = opendir(preg_replace('/\/$/','',_MPDF_TEMP_PATH))) { while (false !== ($file = readdir($handle))) { if (!is_dir($file) && ((filemtime(_MPDF_TEMP_PATH.$file)+$interval) < time()) && ($file != "..") && ($file != ".")) { unlink(_MPDF_TEMP_PATH.$file); } } closedir($handle); } return ''; } function _dochecks() { if(1.1==1) $this->Error('Don\'t alter the locale before including mPDF'); if(sprintf('%.1f',1.0)!='1.0') setlocale(LC_NUMERIC,'C'); $mqr=ini_get("magic_quotes_runtime"); if ($mqr) { $this->Error('mPDF requires magic_quotes_runtime to be turned off e.g. by using ini_set("magic_quotes_runtime", 0);'); } } function _begindoc() { $this->state=1; $this->_out('%PDF-'.$this->pdf_version); $this->_out('%'.chr(226).chr(227).chr(207).chr(211)); } function _puthtmlheaders() { $this->state=2; $nb=$this->page; for($n=1;$n<=$nb;$n++) { if ($this->mirrorMargins && $n%2==0) { $OE = 'E'; } else { $OE = 'O'; } $this->page = $n; if (isset($this->saveHTMLHeader[$n][$OE])) { $html = $this->saveHTMLHeader[$n][$OE]['html']; $this->lMargin = $this->saveHTMLHeader[$n][$OE]['ml']; $this->rMargin = $this->saveHTMLHeader[$n][$OE]['mr']; $this->tMargin = $this->saveHTMLHeader[$n][$OE]['mh']; $this->bMargin = $this->saveHTMLHeader[$n][$OE]['mf']; $this->margin_header = $this->saveHTMLHeader[$n][$OE]['mh']; $this->margin_footer = $this->saveHTMLHeader[$n][$OE]['mf']; $this->w = $this->saveHTMLHeader[$n][$OE]['pw']; $this->h = $this->saveHTMLHeader[$n][$OE]['ph']; $rotate = (isset($this->saveHTMLHeader[$n][$OE]['rotate']) ? $this->saveHTMLHeader[$n][$OE]['rotate'] : null); $this->Reset(); $this->pageoutput[$n] = array(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->x = $this->lMargin; $this->y = $this->margin_header; $pn = $this->docPageNum($n); if ($pn) $pnstr = $this->pagenumPrefix.$pn.$this->pagenumSuffix; else { $pnstr = ''; } $html = str_replace('{PAGENO}',$pnstr,$html); $pnt = $this->docPageNumTotal($n); if ($pnt) $pntstr = $this->nbpgPrefix.$pnt.$this->nbpgSuffix; else { $pntstr = ''; } $html = str_replace($this->aliasNbPgGp,$pntstr,$html ); $html = str_replace($this->aliasNbPg,$nb,$html ); $html = preg_replace('/\{DATE\s+(.*?)\}/e',"date('\\1')",$html ); $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = array(); $this->writingHTMLheader = true; $this->WriteHTML($html , 4); $this->writingHTMLheader = false; $this->Reset(); $this->pageoutput[$n] = array(); $s = $this->PrintPageBackgrounds(); $this->headerbuffer = $s . $this->headerbuffer; $os = ''; if ($rotate) { $os .= sprintf('q 0 -1 1 0 0 %.3F cm ',($this->w*_MPDFK)); } $os .= $this->headerbuffer ; if ($rotate) { $os .= ' Q' . "\n"; } $os = preg_replace('/\\\\/','\\\\\\\\',$os); $this->pages[$n] = preg_replace('/(___HEADER___MARKER'.date('jY').')/', "\n".$os."\n".'\\1', $this->pages[$n]); $lks = $this->HTMLheaderPageLinks; foreach($lks AS $lk) { if ($rotate) { $lw = $lk[2]; $lh = $lk[3]; $lk[2] = $lh; $lk[3] = $lw; $ax = $lk[0]/_MPDFK; $ay = $lk[1]/_MPDFK; $bx = $ay-($lh/_MPDFK); $by = $this->w-$ax; $lk[0] = $bx*_MPDFK; $lk[1] = ($this->h-$by)*_MPDFK - $lw; } $this->PageLinks[$n][]=$lk; } foreach($this->HTMLheaderPageForms AS $f) { $this->form->forms[$f['n']] = $f; } } if (isset($this->saveHTMLFooter[$n][$OE])) { $html = $this->saveHTMLFooter[$this->page][$OE]['html']; $this->lMargin = $this->saveHTMLFooter[$n][$OE]['ml']; $this->rMargin = $this->saveHTMLFooter[$n][$OE]['mr']; $this->tMargin = $this->saveHTMLFooter[$n][$OE]['mh']; $this->bMargin = $this->saveHTMLFooter[$n][$OE]['mf']; $this->margin_header = $this->saveHTMLFooter[$n][$OE]['mh']; $this->margin_footer = $this->saveHTMLFooter[$n][$OE]['mf']; $this->w = $this->saveHTMLFooter[$n][$OE]['pw']; $this->h = $this->saveHTMLFooter[$n][$OE]['ph']; $rotate = (isset($this->saveHTMLFooter[$n][$OE]['rotate']) ? $this->saveHTMLFooter[$n][$OE]['rotate'] : null); $this->Reset(); $this->pageoutput[$n] = array(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->x = $this->lMargin; $top_y = $this->y = $this->h - $this->margin_footer; if ($this->y == $this->h) { $top_y = $this->y = ($this->h - 0.1); } $pn = $this->docPageNum($n); if ($pn) $pnstr = $this->pagenumPrefix.$pn.$this->pagenumSuffix; else { $pnstr = ''; } $html = str_replace('{PAGENO}',$pnstr,$html); $pnt = $this->docPageNumTotal($n); if ($pnt) $pntstr = $this->nbpgPrefix.$pnt.$this->nbpgSuffix; else { $pntstr = ''; } $html = str_replace($this->aliasNbPgGp,$pntstr,$html ); $html = str_replace($this->aliasNbPg,$nb,$html ); $html = preg_replace('/\{DATE\s+(.*?)\}/e',"date('\\1')",$html ); $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = array(); $this->writingHTMLfooter = true; $this->InFooter = true; $this->WriteHTML($html , 4); $this->writingHTMLfooter = false; $this->InFooter = false; $this->Reset(); $this->pageoutput[$n] = array(); $fheight = $this->y - $top_y; $adj = -$fheight; $s = $this->PrintPageBackgrounds(-$adj); $this->headerbuffer = $s . $this->headerbuffer; $os = ''; $os .= $this->StartTransform(true)."\n"; if ($rotate) { $os .= sprintf('q 0 -1 1 0 0 %.3F cm ',($this->w*_MPDFK)); } $os .= $this->transformTranslate(0, $adj, true)."\n"; $os .= $this->headerbuffer ; if ($rotate) { $os .= ' Q' . "\n"; } $os .= $this->StopTransform(true)."\n"; $os = preg_replace('/\\\\/','\\\\\\\\',$os); $this->pages[$n] = preg_replace('/(___HEADER___MARKER'.date('jY').')/', "\n".$os."\n".'\\1', $this->pages[$n]); $lks = $this->HTMLheaderPageLinks; foreach($lks AS $lk) { $lk[1] -= $adj*_MPDFK; if ($rotate) { $lw = $lk[2]; $lh = $lk[3]; $lk[2] = $lh; $lk[3] = $lw; $ax = $lk[0]/_MPDFK; $ay = $lk[1]/_MPDFK; $bx = $ay-($lh/_MPDFK); $by = $this->w-$ax; $lk[0] = $bx*_MPDFK; $lk[1] = ($this->h-$by)*_MPDFK - $lw; } $this->PageLinks[$n][]=$lk; } foreach($this->HTMLheaderPageForms AS $f) { $f['y'] += $adj; $this->form->forms[$f['n']] = $f; } } } $this->page=$nb; $this->state=1; } function _putpages() { $nb=$this->page; $filter=($this->compress) ? '/Filter /FlateDecode ' : ''; if($this->DefOrientation=='P') { $defwPt=$this->fwPt; $defhPt=$this->fhPt; } else { $defwPt=$this->fhPt; $defhPt=$this->fwPt; } $annotid=(3+2*$nb); $totaladdnum = 0; for($n=1;$n<=$nb;$n++) { if (isset($this->PageLinks[$n])) { $totaladdnum += count($this->PageLinks[$n]); } if (isset($this->PageAnnots[$n])) { foreach ($this->PageAnnots[$n] as $k => $pl) { if (!empty($pl['opt']['popup']) || !empty($pl['opt']['file'])) { $totaladdnum += 2 ; } else { $totaladdnum++; } } } if ( count($this->form->forms) > 0 ) { $this->form->countPageForms($n, $totaladdnum); } } $ctr = 0; if (count($this->form->form_radio_groups)) { foreach($this->form->form_radio_groups AS $name=>$frg) { $this->form->form_radio_groups[$name]['obj_id'] = $annotid + $totaladdnum + $ctr; $ctr++; } } $unused = array(); foreach($this->fonts as $fk=>$font) { if (!$font['used'] && ($font['type']=='TTF')) { $unused[] = $fk; } } for($n=1;$n<=$nb;$n++) { $thispage = $this->pages[$n]; if(isset($this->OrientationChanges[$n])) { $hPt=$this->pageDim[$n]['w']*_MPDFK; $wPt=$this->pageDim[$n]['h']*_MPDFK; $owidthPt_LR = $this->pageDim[$n]['outer_width_TB']*_MPDFK; $owidthPt_TB = $this->pageDim[$n]['outer_width_LR']*_MPDFK; } else { $wPt=$this->pageDim[$n]['w']*_MPDFK; $hPt=$this->pageDim[$n]['h']*_MPDFK; $owidthPt_LR = $this->pageDim[$n]['outer_width_LR']*_MPDFK; $owidthPt_TB = $this->pageDim[$n]['outer_width_TB']*_MPDFK; } foreach($unused as $fk) { if ($this->fonts[$fk]['sip'] || $this->fonts[$fk]['smp']) { foreach($this->fonts[$fk]['subsetfontids'] AS $k => $fid) { $thispage = preg_replace('/\s\/F'.$fid.' \d[\d.]* Tf\s/is',' ',$thispage); } } else { $thispage = preg_replace('/\s\/F'.$this->fonts[$fk]['i'].' \d[\d.]* Tf\s/is',' ',$thispage); } } if(!empty($this->aliasNbPg)) { if (!$this->onlyCoreFonts) { $s1 = $this->UTF8ToUTF16BE($this->aliasNbPg, false); } $s2 = $this->aliasNbPg; if (!$this->onlyCoreFonts) { $r1 = $this->UTF8ToUTF16BE($nb, false); } $r2 = $nb; if (preg_match_all('/{mpdfheadernbpg (C|R) ff=(\S*) fs=(\S*) fz=(.*?)}/',$thispage,$m)) { for($hi=0;$hi<count($m[0]);$hi++) { $pos = $m[1][$hi]; $hff = $m[2][$hi]; $hfst = $m[3][$hi]; $hfsz = $m[4][$hi]; $this->SetFont($hff,$hfst,$hfsz, false); $x1 = $this->GetStringWidth($this->aliasNbPg); $x2 = $this->GetStringWidth($nb); $xadj = $x1 - $x2; if ($pos=='C') { $xadj /= 2; } $rep = sprintf(' q 1 0 0 1 %.3F 0 cm ', $xadj*_MPDFK); $thispage = str_replace($m[0][$hi], $rep, $thispage); } } if (!$this->onlyCoreFonts) { $thispage=str_replace($s1,$r1,$thispage); } $thispage=str_replace($s2,$r2,$thispage); $r = ''; $nstr = "$nb"; for($i=0;$i<strlen($nstr);$i++) { $r .= sprintf("%02s", strtoupper(dechex(intval($nstr[$i])+48))); } $thispage=str_replace($this->aliasNbPgHex,$r,$thispage); } if(!empty($this->aliasNbPgGp)) { if (!$this->onlyCoreFonts) { $s1 = $this->UTF8ToUTF16BE($this->aliasNbPgGp, false); } $s2 = $this->aliasNbPgGp; $nbt = $this->docPageNumTotal($n); if (!$this->onlyCoreFonts) { $r1 = $this->UTF8ToUTF16BE($nbt, false); } $r2 = $nbt; if (preg_match_all('/{mpdfheadernbpggp (C|R) ff=(\S*) fs=(\S*) fz=(.*?)}/',$thispage,$m)) { for($hi=0;$hi<count($m[0]);$hi++) { $pos = $m[1][$hi]; $hff = $m[2][$hi]; $hfst = $m[3][$hi]; $hfsz = $m[4][$hi]; $this->SetFont($hff,$hfst,$hfsz, false); $x1 = $this->GetStringWidth($this->aliasNbPgGp); $x2 = $this->GetStringWidth($nbt); $xadj = $x1 - $x2; if ($pos=='C') { $xadj /= 2; } $rep = sprintf(' q 1 0 0 1 %.3F 0 cm ', $xadj*_MPDFK); $thispage = str_replace($m[0][$hi], $rep, $thispage); } } if (!$this->onlyCoreFonts) { $thispage=str_replace($s1,$r1,$thispage); } $thispage=str_replace($s2,$r2,$thispage); $r = ''; $nstr = "$nbt"; for($i=0;$i<strlen($nstr);$i++) { $r .= sprintf("%02s", strtoupper(dechex(intval($nstr[$i])+48))); } $thispage=str_replace($this->aliasNbPgGpHex,$r,$thispage); } $thispage = preg_replace('/(\s*___BACKGROUND___PATTERNS'.date('jY').'\s*)/', " ", $thispage); $thispage = preg_replace('/(\s*___HEADER___MARKER'.date('jY').'\s*)/', " ", $thispage); $thispage = preg_replace('/(\s*___PAGE___START'.date('jY').'\s*)/', " ", $thispage); $thispage = preg_replace('/(\s*___TABLE___BACKGROUNDS'.date('jY').'\s*)/', " ", $thispage); $this->_newobj(); $this->_out('<</Type /Page'); $this->_out('/Parent 1 0 R'); if(isset($this->OrientationChanges[$n])) { $this->_out(sprintf('/MediaBox [0 0 %.3F %.3F]',$hPt,$wPt)); $bleedMargin = $this->pageDim[$n]['bleedMargin']*_MPDFK; if ($bleedMargin && ($owidthPt_TB || $owidthPt_LR)) { $x0 = $owidthPt_TB-$bleedMargin; $y0 = $owidthPt_LR-$bleedMargin; $x1 = $hPt-$owidthPt_TB+$bleedMargin; $y1 = $wPt-$owidthPt_LR+$bleedMargin; $this->_out(sprintf('/BleedBox [%.3F %.3F %.3F %.3F]', $x0, $y0, $x1, $y1)); } $this->_out(sprintf('/TrimBox [%.3F %.3F %.3F %.3F]', $owidthPt_TB, $owidthPt_LR, ($hPt-$owidthPt_TB), ($wPt-$owidthPt_LR))); if (isset($this->OrientationChanges[$n]) && $this->displayDefaultOrientation) { if ($this->DefOrientation=='P') { $this->_out('/Rotate 270'); } else { $this->_out('/Rotate 90'); } } } else { $this->_out(sprintf('/MediaBox [0 0 %.3F %.3F]',$wPt,$hPt)); $bleedMargin = $this->pageDim[$n]['bleedMargin']*_MPDFK; if ($bleedMargin && ($owidthPt_TB || $owidthPt_LR)) { $x0 = $owidthPt_LR-$bleedMargin; $y0 = $owidthPt_TB-$bleedMargin; $x1 = $wPt-$owidthPt_LR+$bleedMargin; $y1 = $hPt-$owidthPt_TB+$bleedMargin; $this->_out(sprintf('/BleedBox [%.3F %.3F %.3F %.3F]', $x0, $y0, $x1, $y1)); } $this->_out(sprintf('/TrimBox [%.3F %.3F %.3F %.3F]', $owidthPt_LR, $owidthPt_TB, ($wPt-$owidthPt_LR), ($hPt-$owidthPt_TB))); } $this->_out('/Resources 2 0 R'); if (!$this->PDFA && !$this->PDFX) { if ($this->restrictColorSpace == 3) $this->_out('/Group << /Type /Group /S /Transparency /CS /DeviceCMYK >> '); else if ($this->restrictColorSpace == 1) $this->_out('/Group << /Type /Group /S /Transparency /CS /DeviceGray >> '); else $this->_out('/Group << /Type /Group /S /Transparency /CS /DeviceRGB >> '); } $annotsnum = 0; if (isset($this->PageLinks[$n])) { $annotsnum += count($this->PageLinks[$n]); } if (isset($this->PageAnnots[$n])) { foreach ($this->PageAnnots[$n] as $k => $pl) { if (!empty($pl['opt']['popup']) || !empty($pl['opt']['file'])) { $annotsnum += 2 ; } else { $annotsnum++; } $this->PageAnnots[$n][$k]['pageobj'] = $this->n; } } $formsnum = 0; if ( count($this->form->forms) > 0 ) { foreach( $this->form->forms as $val ) { if ( $val['page'] == $n ) $formsnum++; } } if ($annotsnum || $formsnum) { $s = '/Annots [ '; for($i=0;$i<$annotsnum;$i++) { $s .= ($annotid + $i) . ' 0 R '; } $annotid += $annotsnum; if ( count($this->form->forms) > 0 ) { $this->form->addFormIds($n, $s, $annotid); } $s .= '] '; $this->_out($s); } $this->_out('/Contents '.($this->n+1).' 0 R>>'); $this->_out('endobj'); $this->_newobj(); $p=($this->compress) ? gzcompress($thispage) : $thispage; $this->_out('<<'.$filter.'/Length '.strlen($p).'>>'); $this->_putstream($p); $this->_out('endobj'); } $this->_putannots($n); $this->offsets[1]=strlen($this->buffer); $this->_out('1 0 obj'); $this->_out('<</Type /Pages'); $kids='/Kids ['; for($i=0;$i<$nb;$i++) $kids.=(3+2*$i).' 0 R '; $this->_out($kids.']'); $this->_out('/Count '.$nb); $this->_out(sprintf('/MediaBox [0 0 %.3F %.3F]',$defwPt,$defhPt)); $this->_out('>>'); $this->_out('endobj'); } function _putannots($n) { $filter=($this->compress) ? '/Filter /FlateDecode ' : ''; $nb=$this->page; for($n=1;$n<=$nb;$n++) { $annotobjs = array(); if(isset($this->PageLinks[$n]) || isset($this->PageAnnots[$n]) || count($this->form->forms) > 0 ) { $wPt=$this->pageDim[$n]['w']*_MPDFK; $hPt=$this->pageDim[$n]['h']*_MPDFK; if(isset($this->PageLinks[$n])) { foreach($this->PageLinks[$n] as $key => $pl) { $this->_newobj(); $annot=''; $rect=sprintf('%.3F %.3F %.3F %.3F',$pl[0],$pl[1],$pl[0]+$pl[2],$pl[1]-$pl[3]); $annot .= '<</Type /Annot /Subtype /Link /Rect ['.$rect.']'; $annot .= ' /Contents '.$this->_UTF16BEtextstring($pl[4]); $annot .= ' /NM '.$this->_textstring(sprintf('%04u-%04u', $n, $key)); $annot .= ' /M '.$this->_textstring('D:'.date('YmdHis')); $annot .= ' /Border [0 0 0]'; if ($this->PDFA || $this->PDFX) { $annot .= ' /F 28'; } if (strpos($pl[4],'@')===0) { $p=substr($pl[4],1); $htarg=$this->pageDim[$p]['h']*_MPDFK; $annot.=sprintf(' /Dest [%d 0 R /XYZ 0 %.3F null]>>',1+2*$p,$htarg); } else if(is_string($pl[4])) { $annot .= ' /A <</S /URI /URI '.$this->_textstring($pl[4]).'>> >>'; } else { $l=$this->links[$pl[4]]; if (isset($this->pageDim[$l[0]]['h'])) { $htarg=$this->pageDim[$l[0]]['h']*_MPDFK; } else { $htarg=$this->h*_MPDFK; } $annot.=sprintf(' /Dest [%d 0 R /XYZ 0 %.3F null]>>',1+2*$l[0],$htarg-$l[1]*_MPDFK); } $this->_out($annot); $this->_out('endobj'); } } if(isset($this->PageAnnots[$n])) { foreach ($this->PageAnnots[$n] as $key => $pl) { if ($pl['opt']['file']) { $FileAttachment=true; } else { $FileAttachment=false; } $this->_newobj(); $annot=''; $pl['opt'] = array_change_key_case($pl['opt'], CASE_LOWER); $x = $pl['x']; if ($this->annotMargin <> 0 || $x==0 || $x<0) { $x = ($wPt/_MPDFK) - $this->annotMargin; } $w = $h = 0; $a = $x * _MPDFK; $b = $hPt - ($pl['y'] * _MPDFK); $annot .= '<</Type /Annot '; if ($FileAttachment) { $annot .= '/Subtype /FileAttachment'; if ($pl['opt']['icon']=='Paperclip') { $w=8.235; $h=20; } else if ($pl['opt']['icon']=='Tag') { $w=20; $h=16; } else if ($pl['opt']['icon']=='Graph') { $w=20; $h=20; } else { $w=14; $h=20; } $f = $pl['opt']['file']; $f = preg_replace('/^.*\//', '', $f); $f = preg_replace('/[^a-zA-Z0-9._]/', '', $f); $annot .= '/FS <</Type /Filespec /F ('.$f.')'; $annot .= '/EF <</F '.($this->n+1).' 0 R>>'; $annot .= '>>'; } else { $annot .= '/Subtype /Text'; } $rect = sprintf('%.3F %.3F %.3F %.3F', $a, $b-$h, $a+$w, $b); $annot .= '/Rect ['.$rect.']'; $annot .= ' /Contents '.$this->_UTF16BEtextstring($pl['txt']); $annot .= ' /NM '.$this->_textstring(sprintf('%04u-%04u', $n, (2000 + $key))); $annot .= ' /M '.$this->_textstring('D:'.date('YmdHis')); $annot .= ' /CreationDate '.$this->_textstring('D:'.date('YmdHis')); $annot .= ' /Border [0 0 0]'; if ($this->PDFA || $this->PDFX) { $annot .= ' /F 28'; $annot .= ' /CA 1'; } else if ($pl['opt']['ca']>0) { $annot .= ' /CA '.$pl['opt']['ca']; } $annotcolor = ' /C ['; if (isset($pl['opt']['c']) AND $pl['opt']['c']) { $col = $pl['opt']['c']; if ($col{0}==3 || $col{0}==5) { $annotcolor .= sprintf("%.3F %.3F %.3F", ord($col{1})/255,ord($col{2})/255,ord($col{3})/255); } else if ($col{0}==1) { $annotcolor .= sprintf("%.3F", ord($col{1})/255); } else if ($col{0}==4 || $col{0}==6) { $annotcolor .= sprintf("%.3F %.3F %.3F %.3F", ord($col{1})/100,ord($col{2})/100,ord($col{3})/100,ord($col{4})/100); } else { $annotcolor .= '1 1 0'; } } else { $annotcolor .= '1 1 0'; } $annotcolor .= ']'; $annot .= $annotcolor; if (isset($pl['opt']['t']) AND is_string($pl['opt']['t'])) { $annot .= ' /T '.$this->_UTF16BEtextstring($pl['opt']['t']); } if ($FileAttachment) { $iconsapp = array('Paperclip', 'Graph', 'PushPin', 'Tag'); } else { $iconsapp = array('Comment', 'Help', 'Insert', 'Key', 'NewParagraph', 'Note', 'Paragraph'); } if (isset($pl['opt']['icon']) AND in_array($pl['opt']['icon'], $iconsapp)) { $annot .= ' /Name /'.$pl['opt']['icon']; } else if ($FileAttachment) { $annot .= ' /Name /PushPin'; } else { $annot .= ' /Name /Note'; } if (!$FileAttachment) { if (isset($pl['opt']['subj']) && !$this->PDFA && !$this->PDFX) { $annot .= ' /Subj '.$this->_UTF16BEtextstring($pl['opt']['subj']); } if (!empty($pl['opt']['popup'])) { $annot .= ' /Open true'; $annot .= ' /Popup '.($this->n+1).' 0 R'; } else { $annot .= ' /Open false'; } } $annot .= ' /P '.$pl['pageobj'].' 0 R'; $annot .= '>>'; $this->_out($annot); $this->_out('endobj'); if ($FileAttachment) { $file = @file_get_contents($pl['opt']['file']) or die('mPDF Error: Cannot access file attachment - '.$pl['opt']['file']); $filestream = gzcompress($file); $this->_newobj(); $this->_out('<</Type /EmbeddedFile'); $this->_out('/Length '.strlen($filestream)); $this->_out('/Filter /FlateDecode'); $this->_out('>>'); $this->_putstream($filestream); $this->_out('endobj'); } else if (!empty($pl['opt']['popup'])) { $this->_newobj(); $annot=''; if (is_array($pl['opt']['popup']) && isset($pl['opt']['popup'][0])) { $x = $pl['opt']['popup'][0] * _MPDFK; } else { $x = $pl['x'] * _MPDFK; } if (is_array($pl['opt']['popup']) && isset($pl['opt']['popup'][1])) { $y = $hPt - ($pl['opt']['popup'][1] * _MPDFK); } else { $y = $hPt - ($pl['y'] * _MPDFK); } if (is_array($pl['opt']['popup']) && isset($pl['opt']['popup'][2])) { $w = $pl['opt']['popup'][2] * _MPDFK; } else { $w = 180; } if (is_array($pl['opt']['popup']) && isset($pl['opt']['popup'][3])) { $h = $pl['opt']['popup'][3] * _MPDFK; } else { $h = 120; } $rect = sprintf('%.3F %.3F %.3F %.3F', $x, $y-$h, $x+$w, $y); $annot .= '<</Type /Annot /Subtype /Popup /Rect ['.$rect.']'; $annot .= ' /M '.$this->_textstring('D:'.date('YmdHis')); if ($this->PDFA || $this->PDFX) { $annot .= ' /F 28'; } $annot .= ' /Parent '.($this->n-1).' 0 R'; $annot .= '>>'; $this->_out($annot); $this->_out('endobj'); } } } if ( count($this->form->forms) > 0 ) { $this->form->_putFormItems($n, $hPt); } } } if (count($this->form->form_radio_groups)) { $this->form->_putRadioItems($n); } } function Annotation($text, $x=0, $y=0, $icon='Note', $author='', $subject='', $opacity=0, $colarray=false, $popup='', $file='') { if (is_array($colarray) && count($colarray)==3) { $colarray = $this->ConvertColor('rgb('.$colarray[0].','.$colarray[1].','.$colarray[2].')'); } if ($colarray === false) { $colarray = $this->ConvertColor('yellow'); } if ($x==0) { $x = $this->x; } if ($y==0) { $y = $this->y; } $page = $this->page; if ($page < 1) { $page = 1; if ($x==0) { $x = $this->lMargin; } if ($y==0) { $y = $this->tMargin; } } if ($this->PDFA || $this->PDFX) { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "Annotation markers cannot be semi-transparent in PDFA1-b or PDFX/1-a, so they may make underlying text unreadable. (Annotation markers moved to right margin)"; } $x = ($this->w) - $this->rMargin*0.66; } if (!$this->annotMargin) { $y -= $this->FontSize / 2; } if (!$opacity && $this->annotMargin) { $opacity = 1; } else if (!$opacity) { $opacity = $this->annotOpacity; } $an = array('txt' => $text, 'x' => $x, 'y' => $y, 'opt' => array('Icon'=>$icon, 'T'=>$author, 'Subj'=>$subject, 'C'=>$colarray, 'CA'=>$opacity, 'popup'=>$popup, 'file'=>$file)); if ($this->keep_block_together) { $this->ktAnnots[$this->page][]= $an; return; } else if ($this->table_rotate) { $this->tbrot_Annots[$this->page][]= $an; return; } else if ($this->kwt) { $this->kwt_Annots[$this->page][]= $an; return; } if ($this->writingHTMLheader || $this->writingHTMLfooter) { $this->HTMLheaderPageAnnots[]= $an; return; } $this->PageAnnots[$page][] = $an; $ref = count($this->PageAnnots[$this->page])-1; $this->columnAnnots[$this->CurrCol][INTVAL($this->x)][INTVAL($this->y)] = $ref; } function _putfonts() { $nf=$this->n; foreach($this->FontFiles as $fontkey=>$info) { if (isset($info['type']) && $info['type']=='TTF' && !$info['sip'] && !$info['smp']) { $used = true; $asSubset = false; foreach($this->fonts AS $k=>$f) { if ($f['fontkey'] == $fontkey && $f['type']=='TTF') { $used = $f['used']; if ($used) { $nChars = (ord($f['cw'][0]) << 8) + ord($f['cw'][1]); $usage = intval(count($f['subset'])*100 / $nChars); $fsize = $info['length1']; if ($fsize > ($this->maxTTFFilesize *1024)) { $asSubset = true; } else if ($usage < $this->percentSubset) { $asSubset = true; } } if ($f['unAGlyphs']) $aaSubset = true; if ($this->PDFA || $this->PDFX) $asSubset = false; $this->fonts[$k]['asSubset'] = $asSubset; break; } } if ($used && !$asSubset) { $this->_newobj(); $this->FontFiles[$fontkey]['n']=$this->n; $font=''; $originalsize = $info['length1']; if ($this->repackageTTF || $this->fonts[$fontkey]['TTCfontID']>0) { if (file_exists(_MPDF_TTFONTDATAPATH.$fontkey.'.ps.z')) { $f=fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.ps.z','rb'); if(!$f) { $this->Error('Font file .ps.z not found'); } while(!feof($f)) { $font .= fread($f, 2048); } fclose($f); include(_MPDF_TTFONTDATAPATH.$fontkey.'.ps.php'); } else { if (!class_exists('TTFontFile', false)) { include(_MPDF_PATH .'classes/ttfontsuni.php'); } $ttf = new TTFontFile(); $font = $ttf->repackageTTF($this->FontFiles[$fontkey]['ttffile'], $this->fonts[$fontkey]['TTCfontID'], $this->debugfonts, $this->fonts[$fontkey]['unAGlyphs']); $originalsize = strlen($font); $font = gzcompress($font); unset($ttf); if (is_writable(dirname(_MPDF_TTFONTDATAPATH.'x'))) { $fh = fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.ps.z',"wb"); fwrite($fh,$font,strlen($font)); fclose($fh); $fh = fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.ps.php',"wb"); $len = "<?php \n"; $len.='$originalsize='.$originalsize.";\n"; $len.="?>"; fwrite($fh,$len,strlen($len)); fclose($fh); } } } else { if (file_exists(_MPDF_TTFONTDATAPATH.$fontkey.'.z')) { $f=fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.z','rb'); if(!$f) { $this->Error('Font file not found'); } while(!feof($f)) { $font .= fread($f, 2048); } fclose($f); } else { $f=fopen($this->FontFiles[$fontkey]['ttffile'],'rb'); if(!$f) { $this->Error('Font file not found'); } while(!feof($f)) { $font .= fread($f, 2048); } fclose($f); $font = gzcompress($font); if (is_writable(dirname(_MPDF_TTFONTDATAPATH.'x'))) { $fh = fopen(_MPDF_TTFONTDATAPATH.$fontkey.'.z',"wb"); fwrite($fh,$font,strlen($font)); fclose($fh); } } } $this->_out('<</Length '.strlen($font)); $this->_out('/Filter /FlateDecode'); $this->_out('/Length1 '.$originalsize); $this->_out('>>'); $this->_putstream($font); $this->_out('endobj'); } } } $nfonts = count($this->fonts); $fctr = 1; foreach($this->fonts as $k=>$font) { $type=$font['type']; $name=$font['name']; if ((!isset($font['used']) || !$font['used']) && $type=='TTF') { continue; } if ($this->progressBar) { $this->UpdateProgressBar(2,intval($fctr*100/$nfonts),'Writing Fonts'); $fctr++; } if (isset($font['asSubset'])) { $asSubset = $font['asSubset']; } else { $asSubset = ''; } if($type=='Type0') { $this->fonts[$k]['n']=$this->n+1; $this->_newobj(); $this->_out('<</Type /Font'); $this->_putType0($font); } else if($type=='core') { $this->fonts[$k]['n']=$this->n+1; if ($this->PDFA || $this->PDFX) { $this->Error('Core fonts are not allowed in PDF/A1-b or PDFX/1-a files (Times, Helvetica, Courier etc.)'); } $this->_newobj(); $this->_out('<</Type /Font'); $this->_out('/BaseFont /'.$name); $this->_out('/Subtype /Type1'); if($name!='Symbol' && $name!='ZapfDingbats') { $this->_out('/Encoding /WinAnsiEncoding'); } $this->_out('>>'); $this->_out('endobj'); } else if ($type=='TTF' && ($font['sip'] || $font['smp'])) { if (!$font['used']) { continue; } $ssfaid="AA"; if (!class_exists('TTFontFile', false)) { include(_MPDF_PATH .'classes/ttfontsuni.php'); } $ttf = new TTFontFile(); for($sfid=0;$sfid<count($font['subsetfontids']);$sfid++) { $this->fonts[$k]['n'][$sfid]=$this->n+1; $subsetname = 'MPDF'.$ssfaid.'+'.$font['name']; $ssfaid++; $subset = $font['subsets'][$sfid]; unset($subset[0]); $ttfontstream = $ttf->makeSubsetSIP($font['ttffile'], $subset, $font['TTCfontID'], $this->debugfonts); $ttfontsize = strlen($ttfontstream); $fontstream = gzcompress($ttfontstream); $widthstring = ''; $toUnistring = ''; foreach($font['subsets'][$sfid] AS $cp=>$u) { $w = $this->_getCharWidth($font['cw'], $u); if ($w !== false) { $widthstring .= $w.' '; } else { $widthstring .= round($ttf->defaultWidth).' '; } if ($u > 65535) { $utf8 = chr(($u>>18)+240).chr((($u>>12)&63)+128).chr((($u>>6)&63)+128) .chr(($u&63)+128); $utf16 = mb_convert_encoding($utf8, 'UTF-16BE', 'UTF-8'); $l1 = ord($utf16[0]); $h1 = ord($utf16[1]); $l2 = ord($utf16[2]); $h2 = ord($utf16[3]); $toUnistring .= sprintf("<%02s> <%02s%02s%02s%02s>\n", strtoupper(dechex($cp)), strtoupper(dechex($l1)), strtoupper(dechex($h1)), strtoupper(dechex($l2)), strtoupper(dechex($h2))); } else { $toUnistring .= sprintf("<%02s> <%04s>\n", strtoupper(dechex($cp)), strtoupper(dechex($u))); } } $this->_newobj(); $this->_out('<</Type /Font'); $this->_out('/BaseFont /'.$subsetname); $this->_out('/Subtype /TrueType'); $this->_out('/FirstChar 0 /LastChar '.(count($font['subsets'][$sfid])-1)); $this->_out('/Widths '.($this->n+1).' 0 R'); $this->_out('/FontDescriptor '.($this->n+2).' 0 R'); $this->_out('/ToUnicode '.($this->n + 3).' 0 R'); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $this->_out('['.$widthstring.']'); $this->_out('endobj'); $this->_newobj(); $s='<</Type /FontDescriptor /FontName /'.$subsetname."\n"; foreach($font['desc'] as $kd=>$v) { if ($kd == 'Flags') { $v = $v | 4; $v = $v & ~32; } $s.=' /'.$kd.' '.$v."\n"; } $s.='/FontFile2 '.($this->n + 2).' 0 R'; $this->_out($s.'>>'); $this->_out('endobj'); $this->_newobj(); $toUni = "/CIDInit /ProcSet findresource begin\n"; $toUni .= "12 dict begin\n"; $toUni .= "begincmap\n"; $toUni .= "/CIDSystemInfo\n"; $toUni .= "<</Registry (Adobe)\n"; $toUni .= "/Ordering (UCS)\n"; $toUni .= "/Supplement 0\n"; $toUni .= ">> def\n"; $toUni .= "/CMapName /Adobe-Identity-UCS def\n"; $toUni .= "/CMapType 2 def\n"; $toUni .= "1 begincodespacerange\n"; $toUni .= "<00> <FF>\n"; $toUni .= "endcodespacerange\n"; $toUni .= count($font['subsets'][$sfid])." beginbfchar\n"; $toUni .= $toUnistring; $toUni .= "endbfchar\n"; $toUni .= "endcmap\n"; $toUni .= "CMapName currentdict /CMap defineresource pop\n"; $toUni .= "end\n"; $toUni .= "end\n"; $this->_out('<</Length '.(strlen($toUni)).'>>'); $this->_putstream($toUni); $this->_out('endobj'); $this->_newobj(); $this->_out('<</Length '.strlen($fontstream)); $this->_out('/Filter /FlateDecode'); $this->_out('/Length1 '.$ttfontsize); $this->_out('>>'); $this->_putstream($fontstream); $this->_out('endobj'); } unset($ttf); } else if ($type=='TTF') { $this->fonts[$k]['n']=$this->n+1; if ($asSubset ) { $ssfaid="A"; if (!class_exists('TTFontFile', false)) { include(_MPDF_PATH .'classes/ttfontsuni.php'); } $ttf = new TTFontFile(); $fontname = 'MPDFA'.$ssfaid.'+'.$font['name']; $subset = $font['subset']; unset($subset[0]); $ttfontstream = $ttf->makeSubset($font['ttffile'], $subset, $font['TTCfontID'], $this->debugfonts, $font['unAGlyphs']); $ttfontsize = strlen($ttfontstream); $fontstream = gzcompress($ttfontstream); $codeToGlyph = $ttf->codeToGlyph; unset($codeToGlyph[0]); } else { $fontname = $font['name']; } $this->_newobj(); $this->_out('<</Type /Font'); $this->_out('/Subtype /Type0'); $this->_out('/BaseFont /'.$fontname.''); $this->_out('/Encoding /Identity-H'); $this->_out('/DescendantFonts ['.($this->n + 1).' 0 R]'); $this->_out('/ToUnicode '.($this->n + 2).' 0 R'); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $this->_out('<</Type /Font'); $this->_out('/Subtype /CIDFontType2'); $this->_out('/BaseFont /'.$fontname.''); $this->_out('/CIDSystemInfo '.($this->n + 2).' 0 R'); $this->_out('/FontDescriptor '.($this->n + 3).' 0 R'); if (isset($font['desc']['MissingWidth'])){ $this->_out('/DW '.$font['desc']['MissingWidth'].''); } if (!$asSubset && file_exists(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw')) { $w = ''; $w=file_get_contents(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw'); $this->_out($w); } else { $this->_putTTfontwidths($font, $asSubset, $ttf->maxUni); } $this->_out('/CIDToGIDMap '.($this->n + 4).' 0 R'); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $toUni = "/CIDInit /ProcSet findresource begin\n"; $toUni .= "12 dict begin\n"; $toUni .= "begincmap\n"; $toUni .= "/CIDSystemInfo\n"; $toUni .= "<</Registry (Adobe)\n"; $toUni .= "/Ordering (UCS)\n"; $toUni .= "/Supplement 0\n"; $toUni .= ">> def\n"; $toUni .= "/CMapName /Adobe-Identity-UCS def\n"; $toUni .= "/CMapType 2 def\n"; $toUni .= "1 begincodespacerange\n"; $toUni .= "<0000> <FFFF>\n"; $toUni .= "endcodespacerange\n"; $toUni .= "1 beginbfrange\n"; $toUni .= "<0000> <FFFF> <0000>\n"; $toUni .= "endbfrange\n"; $toUni .= "endcmap\n"; $toUni .= "CMapName currentdict /CMap defineresource pop\n"; $toUni .= "end\n"; $toUni .= "end\n"; $this->_out('<</Length '.(strlen($toUni)).'>>'); $this->_putstream($toUni); $this->_out('endobj'); $this->_newobj(); $this->_out('<</Registry (Adobe)'); $this->_out('/Ordering (UCS)'); $this->_out('/Supplement 0'); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $this->_out('<</Type /FontDescriptor'); $this->_out('/FontName /'.$fontname); foreach($font['desc'] as $kd=>$v) { if ($asSubset && $kd == 'Flags') { $v = $v | 4; $v = $v & ~32; } $this->_out(' /'.$kd.' '.$v); } if ($font['panose']) { $this->_out(' /Style << /Panose <'.$font['panose'].'> >>'); } if ($asSubset ) { $this->_out('/FontFile2 '.($this->n + 2).' 0 R'); } else if ($font['fontkey']) { $this->_out('/FontFile2 '.$this->FontFiles[$font['fontkey']]['n'].' 0 R'); } $this->_out('>>'); $this->_out('endobj'); if ($asSubset ) { $cidtogidmap = ''; $cidtogidmap = str_pad('', 256*256*2, "\x00"); foreach($codeToGlyph as $cc=>$glyph) { $cidtogidmap[$cc*2] = chr($glyph >> 8); $cidtogidmap[$cc*2 + 1] = chr($glyph & 0xFF); } $cidtogidmap = gzcompress($cidtogidmap); } else { $cidtogidmap = ''; if (file_exists(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cgm')) { $f=fopen(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cgm','rb'); while(!feof($f)) { $cidtogidmap .= fread($f, 2048); } fclose($f); } else { if (!class_exists('TTFontFile', false)) { include(_MPDF_PATH .'classes/ttfontsuni.php'); } $ttf = new TTFontFile(); $charToGlyph = $ttf->getCTG($font['ttffile'], $font['TTCfontID'], $this->debugfonts, $font['unAGlyphs']); $cidtogidmap = str_pad('', 256*256*2, "\x00"); foreach($charToGlyph as $cc=>$glyph) { $cidtogidmap[$cc*2] = chr($glyph >> 8); $cidtogidmap[$cc*2 + 1] = chr($glyph & 0xFF); } unset($ttf); $cidtogidmap = gzcompress($cidtogidmap); if (is_writable(dirname(_MPDF_TTFONTDATAPATH.'x'))) { $fh = fopen(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cgm',"wb"); fwrite($fh,$cidtogidmap,strlen($cidtogidmap)); fclose($fh); } } } $this->_newobj(); $this->_out('<</Length '.strlen($cidtogidmap).''); $this->_out('/Filter /FlateDecode'); $this->_out('>>'); $this->_putstream($cidtogidmap); $this->_out('endobj'); if ($asSubset ) { $this->_newobj(); $this->_out('<</Length '.strlen($fontstream)); $this->_out('/Filter /FlateDecode'); $this->_out('/Length1 '.$ttfontsize); $this->_out('>>'); $this->_putstream($fontstream); $this->_out('endobj'); unset($ttf); } } else { $this->Error('Unsupported font type: '.$type.' ('.$name.')'); } } } function _putTTfontwidths(&$font, $asSubset, $maxUni) { if ($asSubset && file_exists(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw127.php')) { include(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw127.php') ; $startcid = 128; } else { $rangeid = 0; $range = array(); $prevcid = -2; $prevwidth = -1; $interval = false; $startcid = 1; } if ($asSubset) { $cwlen = $maxUni + 1; } else { $cwlen = (strlen($font['cw'])/2); } for ($cid=$startcid; $cid<$cwlen; $cid++) { if ($cid==128 && $asSubset && (!file_exists(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw127.php'))) { if (is_writable(dirname(_MPDF_TTFONTDATAPATH.'x'))) { $fh = fopen(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw127.php',"wb"); $cw127='<?php'."\n"; $cw127.='$rangeid='.$rangeid.";\n"; $cw127.='$prevcid='.$prevcid.";\n"; $cw127.='$prevwidth='.$prevwidth.";\n"; if ($interval) { $cw127.='$interval=true'.";\n"; } else { $cw127.='$interval=false'.";\n"; } $cw127.='$range='.var_export($range,true).";\n"; $cw127.="?>"; fwrite($fh,$cw127,strlen($cw127)); fclose($fh); } } if ($font['cw'][$cid*2] == "\00" && $font['cw'][$cid*2+1] == "\00") { continue; } $width = (ord($font['cw'][$cid*2]) << 8) + ord($font['cw'][$cid*2+1]); if ($width == 65535) { $width = 0; } if ($asSubset && $cid > 255 && (!isset($font['subset'][$cid]) || !$font['subset'][$cid])) { continue; } if (!isset($font['dw']) || (isset($font['dw']) && $width != $font['dw'])) { if ($cid == ($prevcid + 1)) { if ($width == $prevwidth) { if ($width == $range[$rangeid][0]) { $range[$rangeid][] = $width; } else { array_pop($range[$rangeid]); $rangeid = $prevcid; $range[$rangeid] = array(); $range[$rangeid][] = $prevwidth; $range[$rangeid][] = $width; } $interval = true; $range[$rangeid]['interval'] = true; } else { if ($interval) { $rangeid = $cid; $range[$rangeid] = array(); $range[$rangeid][] = $width; } else { $range[$rangeid][] = $width; } $interval = false; } } else { $rangeid = $cid; $range[$rangeid] = array(); $range[$rangeid][] = $width; $interval = false; } $prevcid = $cid; $prevwidth = $width; } } $w = $this->_putfontranges($range); $this->_out($w); if (!$asSubset) { if (is_writable(dirname(_MPDF_TTFONTDATAPATH.'x'))) { $fh = fopen(_MPDF_TTFONTDATAPATH.$font['fontkey'].'.cw',"wb"); fwrite($fh,$w,strlen($w)); fclose($fh); } } } function _putfontranges(&$range) { $prevk = -1; $nextk = -1; $prevint = false; foreach ($range as $k => $ws) { $cws = count($ws); if (($k == $nextk) AND (!$prevint) AND ((!isset($ws['interval'])) OR ($cws < 4))) { if (isset($range[$k]['interval'])) { unset($range[$k]['interval']); } $range[$prevk] = array_merge($range[$prevk], $range[$k]); unset($range[$k]); } else { $prevk = $k; } $nextk = $k + $cws; if (isset($ws['interval'])) { if ($cws > 3) { $prevint = true; } else { $prevint = false; } unset($range[$k]['interval']); --$nextk; } else { $prevint = false; } } $w = ''; foreach ($range as $k => $ws) { if (count(array_count_values($ws)) == 1) { $w .= ' '.$k.' '.($k + count($ws) - 1).' '.$ws[0]; } else { $w .= ' '.$k.' [ '.implode(' ', $ws).' ]' . "\n"; } } return '/W ['.$w.' ]'; } function _putfontwidths(&$font, $cidoffset=0) { ksort($font['cw']); unset($font['cw'][65535]); $rangeid = 0; $range = array(); $prevcid = -2; $prevwidth = -1; $interval = false; foreach ($font['cw'] as $cid => $width) { $cid -= $cidoffset; if (!isset($font['dw']) || (isset($font['dw']) && $width != $font['dw'])) { if ($cid == ($prevcid + 1)) { if ($width == $prevwidth) { if ($width == $range[$rangeid][0]) { $range[$rangeid][] = $width; } else { array_pop($range[$rangeid]); $rangeid = $prevcid; $range[$rangeid] = array(); $range[$rangeid][] = $prevwidth; $range[$rangeid][] = $width; } $interval = true; $range[$rangeid]['interval'] = true; } else { if ($interval) { $rangeid = $cid; $range[$rangeid] = array(); $range[$rangeid][] = $width; } else { $range[$rangeid][] = $width; } $interval = false; } } else { $rangeid = $cid; $range[$rangeid] = array(); $range[$rangeid][] = $width; $interval = false; } $prevcid = $cid; $prevwidth = $width; } } $this->_out($this->_putfontranges($range)); } function _putType0(&$font) { $this->_out('/Subtype /Type0'); $this->_out('/BaseFont /'.$font['name'].'-'.$font['CMap']); $this->_out('/Encoding /'.$font['CMap']); $this->_out('/DescendantFonts ['.($this->n+1).' 0 R]'); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $this->_out('<</Type /Font'); $this->_out('/Subtype /CIDFontType0'); $this->_out('/BaseFont /'.$font['name']); $cidinfo = '/Registry '.$this->_textstring('Adobe'); $cidinfo .= ' /Ordering '.$this->_textstring($font['registry']['ordering']); $cidinfo .= ' /Supplement '.$font['registry']['supplement']; $this->_out('/CIDSystemInfo <<'.$cidinfo.'>>'); $this->_out('/FontDescriptor '.($this->n+1).' 0 R'); if (isset($font['MissingWidth'])){ $this->_out('/DW '.$font['MissingWidth'].''); } $this->_putfontwidths($font, 31); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $s = '<</Type /FontDescriptor /FontName /'.$font['name']; foreach ($font['desc'] as $k => $v) { if ($k != 'Style') { $s .= ' /'.$k.' '.$v.''; } } $this->_out($s.'>>'); $this->_out('endobj'); } function _putimages() { $filter=($this->compress) ? '/Filter /FlateDecode ' : ''; reset($this->images); while(list($file,$info)=each($this->images)) { $this->_newobj(); $this->images[$file]['n']=$this->n; $this->_out('<</Type /XObject'); $this->_out('/Subtype /Image'); $this->_out('/Width '.$info['w']); $this->_out('/Height '.$info['h']); if (isset($info['masked'])) { $this->_out('/SMask '.($this->n - 1).' 0 R'); } if($info['cs']=='Indexed') { if ($this->PDFX || ($this->PDFA && $this->restrictColorSpace==3)) { $this->Error("PDFA1-b and PDFX/1-a files do not permit using mixed colour space (".$file.")."); } $this->_out('/ColorSpace [/Indexed /DeviceRGB '.(strlen($info['pal'])/3-1).' '.($this->n+1).' 0 R]'); } else { $this->_out('/ColorSpace /'.$info['cs']); if($info['cs']=='DeviceCMYK') { if ($this->PDFA && $this->restrictColorSpace!=3) { $this->Error("PDFA1-b does not permit Images using mixed colour space (".$file.")."); } if($info['type']=='jpg') { $this->_out('/Decode [1 0 1 0 1 0 1 0]'); } } else if ($info['cs']=='DeviceRGB' && ($this->PDFX || ($this->PDFA && $this->restrictColorSpace==3))) { $this->Error("PDFA1-b and PDFX/1-a files do not permit using mixed colour space (".$file.")."); } } $this->_out('/BitsPerComponent '.$info['bpc']); if (isset($info['f']) && $info['f']) { $this->_out('/Filter /'.$info['f']); } if(isset($info['parms'])) { $this->_out($info['parms']); } if(isset($info['trns']) and is_array($info['trns'])) { $trns=''; for($i=0;$i<count($info['trns']);$i++) $trns.=$info['trns'][$i].' '.$info['trns'][$i].' '; $this->_out('/Mask ['.$trns.']'); } $this->_out('/Length '.strlen($info['data']).'>>'); $this->_putstream($info['data']); unset($this->images[$file]['data']); $this->_out('endobj'); if($info['cs']=='Indexed') { $this->_newobj(); $pal=($this->compress) ? gzcompress($info['pal']) : $info['pal']; $this->_out('<<'.$filter.'/Length '.strlen($pal).'>>'); $this->_putstream($pal); $this->_out('endobj'); } } } function _putinfo() { $this->_out('/Producer '.$this->_UTF16BEtextstring('mPDF '.mPDF_VERSION)); if(!empty($this->title)) $this->_out('/Title '.$this->_UTF16BEtextstring($this->title)); if(!empty($this->subject)) $this->_out('/Subject '.$this->_UTF16BEtextstring($this->subject)); if(!empty($this->author)) $this->_out('/Author '.$this->_UTF16BEtextstring($this->author)); if(!empty($this->keywords)) $this->_out('/Keywords '.$this->_UTF16BEtextstring($this->keywords)); if(!empty($this->creator)) $this->_out('/Creator '.$this->_UTF16BEtextstring($this->creator)); $z = date('O'); $offset = substr($z,0,3)."'".substr($z,3,2)."'"; $this->_out('/CreationDate '.$this->_textstring(date('YmdHis').$offset)); $this->_out('/ModDate '.$this->_textstring(date('YmdHis').$offset)); if ($this->PDFX) { $this->_out('/Trapped/False'); $this->_out('/GTS_PDFXVersion(PDF/X-1a:2003)'); } } function _putmetadata() { $this->_newobj(); $this->MetadataRoot = $this->n; $Producer = 'mPDF '.mPDF_VERSION; $z = date('O'); $offset = substr($z,0,3).':'.substr($z,3,2); $CreationDate = date('Y-m-d\TH:i:s').$offset; $uuid = sprintf('%04x%04x-%04x-%04x-%04x-%04x%04x%04x', mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0x0fff) | 0x4000, mt_rand(0, 0x3fff) | 0x8000, mt_rand(0, 0xffff), mt_rand(0, 0xffff), mt_rand(0, 0xffff) ); $m = '<?xpacket begin="'.chr(239).chr(187).chr(191).'" id="W5M0MpCehiHzreSzNTczkc9d"?>'."\n"; $m .= ' <x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-701">'."\n"; $m .= '  <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">'."\n"; $m .= '   <rdf:Description rdf:about="uuid:'.$uuid.'" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">'."\n"; $m .= '    <pdf:Producer>'.$Producer.'</pdf:Producer>'."\n"; if(!empty($this->keywords)) { $m .= '    <pdf:Keywords>'.$this->keywords.'</pdf:Keywords>'."\n"; } $m .= '   </rdf:Description>'."\n"; $m .= '   <rdf:Description rdf:about="uuid:'.$uuid.'" xmlns:xmp="http://ns.adobe.com/xap/1.0/">'."\n"; $m .= '    <xmp:CreateDate>'.$CreationDate.'</xmp:CreateDate>'."\n"; $m .= '    <xmp:ModifyDate>'.$CreationDate.'</xmp:ModifyDate>'."\n"; $m .= '    <xmp:MetadataDate>'.$CreationDate.'</xmp:MetadataDate>'."\n"; if(!empty($this->creator)) { $m .= '    <xmp:CreatorTool>'.$this->creator.'</xmp:CreatorTool>'."\n"; } $m .= '   </rdf:Description>'."\n"; $m .= '   <rdf:Description rdf:about="uuid:'.$uuid.'" xmlns:dc="http://purl.org/dc/elements/1.1/">'."\n"; $m .= '    <dc:format>application/pdf</dc:format>'."\n"; if(!empty($this->title)) { $m .= '    <dc:title>
     <rdf:Alt>
      <rdf:li xml:lang="x-default">'.$this->title.'</rdf:li>
     </rdf:Alt>
    </dc:title>'."\n"; } if(!empty($this->keywords)) { $m .= '    <dc:subject>
     <rdf:Bag>
      <rdf:li>'.$this->keywords.'</rdf:li>
     </rdf:Bag>
    </dc:subject>'."\n"; } if(!empty($this->subject)) { $m .= '    <dc:description>
     <rdf:Alt>
      <rdf:li xml:lang="x-default">'.$this->subject.'</rdf:li>
     </rdf:Alt>
    </dc:description>'."\n"; } if(!empty($this->author)) { $m .= '    <dc:creator>
     <rdf:Seq>
      <rdf:li>'.$this->author.'</rdf:li>
     </rdf:Seq>
    </dc:creator>'."\n"; } $m .= '   </rdf:Description>'."\n"; if ($this->PDFX) { $m .= '   <rdf:Description rdf:about="uuid:'.$uuid.'" xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/" pdfx:Apag_PDFX_Checkup="1.3" pdfx:GTS_PDFXConformance="PDF/X-1a:2003" pdfx:GTS_PDFXVersion="PDF/X-1:2003"/>'."\n"; } else if ($this->PDFA) { $m .= '   <rdf:Description rdf:about="uuid:'.$uuid.'" xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" >'."\n"; $m .= '    <pdfaid:part>1</pdfaid:part>'."\n"; $m .= '    <pdfaid:conformance>B</pdfaid:conformance>'."\n"; $m .= '    <pdfaid:amd>2005</pdfaid:amd>'."\n"; $m .= '   </rdf:Description>'."\n"; } $m .= '   <rdf:Description rdf:about="uuid:'.$uuid.'" xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/">'."\n"; $m .= '    <xmpMM:DocumentID>uuid:'.$uuid.'</xmpMM:DocumentID>'."\n"; $m .= '   </rdf:Description>'."\n"; $m .= '  </rdf:RDF>'."\n"; $m .= ' </x:xmpmeta>'."\n"; $m .= str_repeat(str_repeat(' ',100)."\n",20); $m .= '<?xpacket end="w"?>'; $this->_out('<</Type/Metadata/Subtype/XML/Length '.strlen($m).'>>'); $this->_putstream($m); $this->_out('endobj'); } function _putoutputintent() { $this->_newobj(); $this->OutputIntentRoot = $this->n; $this->_out('<</Type /OutputIntent'); if ($this->PDFA) { $this->_out('/S /GTS_PDFA1'); if ($this->ICCProfile) { $this->_out('/Info ('.preg_replace('/_/',' ',$this->ICCProfile).')'); $this->_out('/OutputConditionIdentifier (Custom)'); $this->_out('/OutputCondition ()'); } else { $this->_out('/Info (sRGB IEC61966-2.1)'); $this->_out('/OutputConditionIdentifier (sRGB IEC61966-2.1)'); $this->_out('/OutputCondition ()'); } $this->_out('/DestOutputProfile '.($this->n+1).' 0 R'); } else if ($this->PDFX) { $this->_out('/S /GTS_PDFX'); if ($this->ICCProfile) { $this->_out('/Info ('.preg_replace('/_/',' ',$this->ICCProfile).')'); $this->_out('/OutputConditionIdentifier (Custom)'); $this->_out('/OutputCondition ()'); $this->_out('/DestOutputProfile '.($this->n+1).' 0 R'); } else { $this->_out('/Info (CGATS TR 001)'); $this->_out('/OutputConditionIdentifier (CGATS TR 001)'); $this->_out('/OutputCondition (CGATS TR 001 (SWOP))'); $this->_out('/RegistryName (http://www.color.org)'); } } $this->_out('>>'); $this->_out('endobj'); if ($this->PDFX && !$this->ICCProfile) { return; } $this->_newobj(); if ($this->ICCProfile) $s = file_get_contents(_MPDF_PATH.'iccprofiles/'.$this->ICCProfile.'.icc'); else $s = file_get_contents(_MPDF_PATH.'iccprofiles/sRGB_IEC61966-2-1.icc'); if ($this->compress) { $s = gzcompress($s); } $this->_out('<<'); if ($this->PDFX || ($this->PDFA && $this->restrictColorSpace == 3)) { $this->_out('/N 4'); } else { $this->_out('/N 3'); } if ($this->compress) $this->_out('/Filter /FlateDecode '); $this->_out('/Length '.strlen($s).'>>'); $this->_putstream($s); $this->_out('endobj'); } function _putcatalog() { $this->_out('/Type /Catalog'); $this->_out('/Pages 1 0 R'); if($this->ZoomMode=='fullpage') $this->_out('/OpenAction [3 0 R /Fit]'); elseif($this->ZoomMode=='fullwidth') $this->_out('/OpenAction [3 0 R /FitH null]'); elseif($this->ZoomMode=='real') $this->_out('/OpenAction [3 0 R /XYZ null null 1]'); elseif(!is_string($this->ZoomMode)) $this->_out('/OpenAction [3 0 R /XYZ null null '.($this->ZoomMode/100).']'); else $this->_out('/OpenAction [3 0 R /XYZ null null null]'); if($this->LayoutMode=='single') $this->_out('/PageLayout /SinglePage'); elseif($this->LayoutMode=='continuous') $this->_out('/PageLayout /OneColumn'); elseif($this->LayoutMode=='twoleft') $this->_out('/PageLayout /TwoColumnLeft'); elseif($this->LayoutMode=='tworight') $this->_out('/PageLayout /TwoColumnRight'); elseif($this->LayoutMode=='two') { if ($this->mirrorMargins) { $this->_out('/PageLayout /TwoColumnRight'); } else { $this->_out('/PageLayout /TwoColumnLeft'); } } if(count($this->BMoutlines)>0) { $this->_out('/Outlines '.$this->OutlineRoot.' 0 R'); $this->_out('/PageMode /UseOutlines'); } if(is_int(strpos($this->DisplayPreferences,'FullScreen'))) $this->_out('/PageMode /FullScreen'); if ($this->PDFA || $this->PDFX) { $this->_out('/Metadata '.$this->MetadataRoot.' 0 R'); } if ($this->PDFA || $this->PDFX || $this->ICCProfile) { $this->_out('/OutputIntents ['.$this->OutputIntentRoot.' 0 R]'); } if (count($this->form->forms)>0) { $this->form->_putFormsCatalog(); } if ( isset($this->js) ) { $this->_out('/Names << /JavaScript '.($this->n_js).' 0 R >> '); } if($this->DisplayPreferences || $this->directionality == 'rtl' || $this->mirrorMargins) { $this->_out('/ViewerPreferences<<'); if(is_int(strpos($this->DisplayPreferences,'HideMenubar'))) $this->_out('/HideMenubar true'); if(is_int(strpos($this->DisplayPreferences,'HideToolbar'))) $this->_out('/HideToolbar true'); if(is_int(strpos($this->DisplayPreferences,'HideWindowUI'))) $this->_out('/HideWindowUI true'); if(is_int(strpos($this->DisplayPreferences,'DisplayDocTitle'))) $this->_out('/DisplayDocTitle true'); if(is_int(strpos($this->DisplayPreferences,'CenterWindow'))) $this->_out('/CenterWindow true'); if(is_int(strpos($this->DisplayPreferences,'FitWindow'))) $this->_out('/FitWindow true'); if(is_int(strpos($this->DisplayPreferences,'NoPrintScaling')) && !$this->PDFA && !$this->PDFX) $this->_out('/PrintScaling /None'); if($this->directionality == 'rtl') $this->_out('/Direction /R2L'); if($this->mirrorMargins && !$this->PDFA && !$this->PDFX) { $this->_out('/Duplex /DuplexFlipLongEdge'); } $this->_out('>>'); } if($this->open_layer_pane && ($this->hasOC || count($this->layers))) $this->_out('/PageMode /UseOC'); if ($this->hasOC || count($this->layers)) { $p = $v = $h = $l = $loff = $lall = $as = ''; if ($this->hasOC) { if (($this->hasOC & 1) == 1) $p=$this->n_ocg_print.' 0 R'; if (($this->hasOC & 2) == 2) $v=$this->n_ocg_view.' 0 R'; if (($this->hasOC & 4) == 4) $h=$this->n_ocg_hidden.' 0 R'; $as="<</Event /Print /OCGs [$p $v $h] /Category [/Print]>> <</Event /View /OCGs [$p $v $h] /Category [/View]>>"; } if(count($this->layers)) { foreach($this->layers as $k=>$layer) { if (strtolower($this->layerDetails[$k]['state'])=='hidden') { $loff .= $layer['n'].' 0 R '; } else { $l .= $layer['n'].' 0 R '; } $lall .= $layer['n'].' 0 R '; } } $this->_out("/OCProperties <</OCGs [$p $v $h $lall] /D <</ON [$p $l] /OFF [$v $h $loff] "); $this->_out("/Order [$v $p $h $lall] "); if ($as) $this->_out("/AS [$as] "); $this->_out(">>>>"); } } function SetUserRights($enable=true, $annots="", $form="", $signature="") { } function _enddoc() { if ($this->progressBar) { $this->UpdateProgressBar(2,'10','Writing Headers & Footers'); } $this->_puthtmlheaders(); if ($this->progressBar) { $this->UpdateProgressBar(2,'20','Writing Pages'); } foreach($this->fonts as $fk=>$font) { if (!$font['used'] && ($font['type']=='TTF')) { if ($font['sip'] || $font['smp']) { foreach($font['subsetfontids'] AS $k => $fid) { foreach($this->pages AS $pn=>$page) { $this->pages[$pn] = preg_replace('/\s\/F'.$fid.' \d[\d.]* Tf\s/is',' ',$this->pages[$pn]); } } } else { foreach($this->pages AS $pn=>$page) { $this->pages[$pn] = preg_replace('/\s\/F'.$font['i'].' \d[\d.]* Tf\s/is',' ',$this->pages[$pn]); } } } } if (count($this->layers)) { foreach($this->pages AS $pn=>$page) { preg_match_all('/\/OCZ-index \/ZI(\d+) BDC(.*?)(EMCZ)-index/is',$this->pages[$pn],$m1); preg_match_all('/\/OCBZ-index \/ZI(\d+) BDC(.*?)(EMCBZ)-index/is',$this->pages[$pn],$m2); preg_match_all('/\/OCGZ-index \/ZI(\d+) BDC(.*?)(EMCGZ)-index/is',$this->pages[$pn],$m3); $m = array(); for ($i=0;$i<4;$i++) { $m[$i] = array_merge($m1[$i],$m2[$i],$m3[$i]); } if (count($m[0])) { $sortarr = array(); for($i=0;$i<count($m[0]);$i++) { $key = $m[1][$i]*2; if ($m[3][$i]=='EMCZ') $key +=2; else if ($m[3][$i]=='EMCGZ') $key +=1; $sortarr[$i] = $key; } asort($sortarr); foreach($sortarr AS $i=>$k) { $this->pages[$pn] = str_replace($m[0][$i],'',$this->pages[$pn] ); $this->pages[$pn] .= "\n".$m[0][$i]."\n"; } $this->pages[$pn] = preg_replace('/\/OC[BG]{0,1}Z-index \/ZI(\d+) BDC/is','/OC /ZI\\1 BDC ',$this->pages[$pn]); $this->pages[$pn] = preg_replace('/EMC[BG]{0,1}Z-index/is','EMC',$this->pages[$pn]); } } } $this->_putpages(); if ($this->progressBar) { $this->UpdateProgressBar(2,'30','Writing document resources'); } $this->_putresources(); $this->_newobj(); $this->InfoRoot = $this->n; $this->_out('<<'); if ($this->progressBar) { $this->UpdateProgressBar(2,'80','Writing document info'); } $this->_putinfo(); $this->_out('>>'); $this->_out('endobj'); if ($this->PDFA || $this->PDFX) { $this->_putmetadata(); } if ($this->PDFA || $this->PDFX || $this->ICCProfile) { $this->_putoutputintent(); } $this->_newobj(); $this->_out('<<'); if ($this->progressBar) { $this->UpdateProgressBar(2,'90','Writing document catalog'); } $this->_putcatalog(); $this->_out('>>'); $this->_out('endobj'); $o=strlen($this->buffer); $this->_out('xref'); $this->_out('0 '.($this->n+1)); $this->_out('0000000000 65535 f '); for($i=1; $i <= $this->n ; $i++) $this->_out(sprintf('%010d 00000 n ',$this->offsets[$i])); $this->_out('trailer'); $this->_out('<<'); $this->_puttrailer(); $this->_out('>>'); $this->_out('startxref'); $this->_out($o); $this->buffer .= '%%EOF'; $this->state=3; if ($this->enableImports && count($this->parsers) > 0) { foreach ($this->parsers as $k => $_){ $this->parsers[$k]->closeFile(); $this->parsers[$k] = null; unset($this->parsers[$k]); } } } function _beginpage($orientation,$mgl='',$mgr='',$mgt='',$mgb='',$mgh='',$mgf='',$ohname='',$ehname='',$ofname='',$efname='',$ohvalue=0,$ehvalue=0,$ofvalue=0,$efvalue=0,$pagesel='',$newformat='') { if (!($pagesel && $this->page==1 && (sprintf("%0.4f", $this->y)==sprintf("%0.4f", $this->tMargin)))) { $this->page++; $this->pages[$this->page]=''; } $this->state=2; $resetHTMLHeadersrequired = false; if ($newformat) { $this->_setPageSize($newformat, $orientation); } if ($pagesel || (isset($this->page_box['using']) && $this->page_box['using'])) { if ($pagesel || $this->page==1) { $first = true; } else { $first = false; } if ($this->mirrorMargins && ($this->page % 2==0)) { $oddEven = 'E'; } else { $oddEven = 'O'; } if ($pagesel) { $psel = $pagesel; } else if ($this->page_box['current']) { $psel = $this->page_box['current']; } else { $psel = ''; } list($orientation,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$hname,$fname,$bg,$resetpagenum,$pagenumstyle,$suppress,$marks,$newformat) = $this->SetPagedMediaCSS($psel, $first, $oddEven); if ($this->mirrorMargins && ($this->page % 2==0)) { if ($hname) { $ehvalue = 1; $ehname = $hname; } else { $ehvalue = -1; } if ($fname) { $efvalue = 1; $efname = $fname; } else { $efvalue = -1; } } else { if ($hname) { $ohvalue = 1; $ohname = $hname; } else { $ohvalue = -1; } if ($fname) { $ofvalue = 1; $ofname = $fname; } else { $ofvalue = -1; } } if ($resetpagenum || $pagenumstyle || $suppress) { $this->PageNumSubstitutions[] = array('from'=>($this->page), 'reset'=> $resetpagenum, 'type'=>$pagenumstyle, 'suppress'=>$suppress); } $this->show_marks = $marks; if (isset($bg['BACKGROUND-COLOR'])) { $cor = $this->ConvertColor($bg['BACKGROUND-COLOR']); if ($cor) { $this->bodyBackgroundColor = $cor; } } else { $this->bodyBackgroundColor = false; } if (isset($bg['BACKGROUND-GRADIENT'])) { $this->bodyBackgroundGradient = $bg['BACKGROUND-GRADIENT']; } else { $this->bodyBackgroundGradient = false; } if (isset($bg['BACKGROUND-IMAGE']) && $bg['BACKGROUND-IMAGE']) { $ret = $this->SetBackground($bg, $this->pgwidth); if ($ret) { $this->bodyBackgroundImage = $ret; } } else { $this->bodyBackgroundImage = false; } $this->page_box['current'] = $psel; $this->page_box['using'] = true; } if(!$orientation) $orientation=$this->DefOrientation; else { $orientation=strtoupper(substr($orientation,0,1)); if($orientation!=$this->DefOrientation) $this->OrientationChanges[$this->page]=true; } if($orientation!=$this->CurOrientation || $newformat) { if($orientation=='P') { $this->wPt=$this->fwPt; $this->hPt=$this->fhPt; $this->w=$this->fw; $this->h=$this->fh; if (($this->forcePortraitHeaders || $this->forcePortraitMargins) && $this->DefOrientation=='P') { $this->tMargin = $this->orig_tMargin; $this->bMargin = $this->orig_bMargin; $this->DeflMargin = $this->orig_lMargin; $this->DefrMargin = $this->orig_rMargin; $this->margin_header = $this->orig_hMargin; $this->margin_footer = $this->orig_fMargin; } else { $resetHTMLHeadersrequired = true; } } else { $this->wPt=$this->fhPt; $this->hPt=$this->fwPt; $this->w=$this->fh; $this->h=$this->fw; if (($this->forcePortraitHeaders || $this->forcePortraitMargins) && $this->DefOrientation=='P') { $this->tMargin = $this->orig_lMargin; $this->bMargin = $this->orig_rMargin; $this->DeflMargin = $this->orig_bMargin; $this->DefrMargin = $this->orig_tMargin; $this->margin_header = $this->orig_hMargin; $this->margin_footer = $this->orig_fMargin; } else { $resetHTMLHeadersrequired = true; } } $this->CurOrientation=$orientation; $this->ResetMargins(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->PageBreakTrigger=$this->h-$this->bMargin; } $this->pageDim[$this->page]['w']=$this->w ; $this->pageDim[$this->page]['h']=$this->h ; $this->pageDim[$this->page]['outer_width_LR'] = isset($this->page_box['outer_width_LR']) ? $this->page_box['outer_width_LR'] : 0; $this->pageDim[$this->page]['outer_width_TB'] = isset($this->page_box['outer_width_TB']) ? $this->page_box['outer_width_TB'] : 0; if (!isset($this->page_box['outer_width_LR']) && !isset($this->page_box['outer_width_TB'])) { $this->pageDim[$this->page]['bleedMargin'] = 0; } else if ($this->bleedMargin <= $this->page_box['outer_width_LR'] && $this->bleedMargin <= $this->page_box['outer_width_TB']) { $this->pageDim[$this->page]['bleedMargin'] = $this->bleedMargin; } else { $this->pageDim[$this->page]['bleedMargin'] = min($this->page_box['outer_width_LR'], $this->page_box['outer_width_TB'])-0.01; } if ((strlen($mgl)>0 && $this->DeflMargin != $mgl) || (strlen($mgr)>0 && $this->DefrMargin != $mgr) || (strlen($mgt)>0 && $this->tMargin != $mgt) || (strlen($mgb)>0 && $this->bMargin != $mgb) || (strlen($mgh)>0 && $this->margin_header!=$mgh) || (strlen($mgf)>0 && $this->margin_footer!=$mgf)) { if (strlen($mgl)>0) $this->DeflMargin = $mgl; if (strlen($mgr)>0) $this->DefrMargin = $mgr; if (strlen($mgt)>0) $this->tMargin = $mgt; if (strlen($mgb)>0) $this->bMargin = $mgb; if (strlen($mgh)>0) $this->margin_header=$mgh; if (strlen($mgf)>0) $this->margin_footer=$mgf; $this->ResetMargins(); $this->SetAutoPageBreak($this->autoPageBreak,$this->bMargin); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $resetHTMLHeadersrequired = true; } $this->ResetMargins(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->SetAutoPageBreak($this->autoPageBreak,$this->bMargin); $this->y0 = $this->tMargin; $this->x=$this->lMargin; $this->y=$this->tMargin; $this->FontFamily=''; if ($ohvalue<0 || strtoupper($ohvalue)=='OFF') { $this->HTMLHeader = ''; $this->headerDetails['odd'] = array(); $resetHTMLHeadersrequired = true; } else if ($ohname && $ohvalue>0) { if (preg_match('/^html_(.*)$/i',$ohname,$n)) { if (isset($this->pageHTMLheaders[$n[1]])) { $this->HTMLHeader = $this->pageHTMLheaders[$n[1]]; } else { $this->HTMLHeader = ''; } $this->headerDetails['odd'] = array(); $resetHTMLHeadersrequired = true; } else { if (isset($this->pageheaders[$ohname])) { $this->headerDetails['odd'] = $this->pageheaders[$ohname]; } else if ($ohname!='_default') { $this->headerDetails['odd'] = array(); } $this->HTMLHeader = ''; $resetHTMLHeadersrequired = false; } } if ($ehvalue<0 || strtoupper($ehvalue)=='OFF') { $this->HTMLHeaderE = ''; $this->headerDetails['even'] = array(); $resetHTMLHeadersrequired = true; } else if ($ehname && $ehvalue>0) { if (preg_match('/^html_(.*)$/i',$ehname,$n)) { if (isset($this->pageHTMLheaders[$n[1]])) { $this->HTMLHeaderE = $this->pageHTMLheaders[$n[1]]; } else { $this->HTMLHeaderE = ''; } $this->headerDetails['even'] = array(); $resetHTMLHeadersrequired = true; } else { if (isset($this->pageheaders[$ehname])) { $this->headerDetails['even'] = $this->pageheaders[$ehname]; } else if ($ehname!='_default') { $this->headerDetails['even'] = array(); } $this->HTMLHeaderE = ''; $resetHTMLHeadersrequired = false; } } if ($ofvalue<0 || strtoupper($ofvalue)=='OFF') { $this->HTMLFooter = ''; $this->footerDetails['odd'] = array(); $resetHTMLHeadersrequired = true; } else if ($ofname && $ofvalue>0) { if (preg_match('/^html_(.*)$/i',$ofname,$n)) { if (isset($this->pageHTMLfooters[$n[1]])) { $this->HTMLFooter = $this->pageHTMLfooters[$n[1]]; } else { $this->HTMLFooter = ''; } $this->footerDetails['odd'] = array(); $resetHTMLHeadersrequired = true; } else { if (isset($this->pagefooters[$ofname])) { $this->footerDetails['odd'] = $this->pagefooters[$ofname]; } else if ($ofname!='_default') { $this->footerDetails['odd'] = array(); } $this->HTMLFooter = ''; $resetHTMLHeadersrequired = true; } } if ($efvalue<0 || strtoupper($efvalue)=='OFF') { $this->HTMLFooterE = ''; $this->footerDetails['even'] = array(); $resetHTMLHeadersrequired = true; } else if ($efname && $efvalue>0) { if (preg_match('/^html_(.*)$/i',$efname,$n)) { if (isset($this->pageHTMLfooters[$n[1]])) { $this->HTMLFooterE = $this->pageHTMLfooters[$n[1]]; } else { $this->HTMLFooterE = ''; } $this->footerDetails['even'] = array(); $resetHTMLHeadersrequired = true; } else { if (isset($this->pagefooters[$efname])) { $this->footerDetails['even'] = $this->pagefooters[$efname]; } else if ($efname!='_default') { $this->footerDetails['even'] = array(); } $this->HTMLFooterE = ''; $resetHTMLHeadersrequired = true; } } if ($resetHTMLHeadersrequired) { $this->SetHTMLHeader($this->HTMLHeader ); $this->SetHTMLHeader($this->HTMLHeaderE ,'E'); $this->SetHTMLFooter($this->HTMLFooter ); $this->SetHTMLFooter($this->HTMLFooterE ,'E'); } if (($this->mirrorMargins) && (($this->page)%2==0)) { $this->_setAutoHeaderHeight($this->headerDetails['even'], $this->HTMLHeaderE); $this->_setAutoFooterHeight($this->footerDetails['even'], $this->HTMLFooterE); } else { $this->_setAutoHeaderHeight($this->headerDetails['odd'], $this->HTMLHeader); $this->_setAutoFooterHeight($this->footerDetails['odd'], $this->HTMLFooter); } $this->y0 = $this->tMargin; $this->x=$this->lMargin; $this->y=$this->tMargin; } function _setAutoHeaderHeight(&$det, &$htmlh) { if ($this->setAutoTopMargin=='pad') { if ($htmlh['h']) { $h = $htmlh['h']; } else if ($det) { $h = $this->_getHFHeight($det,'H'); } else { $h = 0; } $this->tMargin = $this->margin_header + $h + $this->orig_tMargin; } else if ($this->setAutoTopMargin=='stretch') { if ($htmlh['h']) { $h = $htmlh['h']; } else if ($det) { $h = $this->_getHFHeight($det,'H'); } else { $h = 0; } $this->tMargin = max($this->orig_tMargin, $this->margin_header + $h + $this->autoMarginPadding); } } function _setAutoFooterHeight(&$det, &$htmlf) { if ($this->setAutoBottomMargin=='pad') { if ($htmlf['h']) { $h = $htmlf['h']; } else if ($det) { $h = $this->_getHFHeight($det,'F'); } else { $h = 0; } $this->bMargin = $this->margin_footer + $h + $this->orig_bMargin; $this->PageBreakTrigger=$this->h-$this->bMargin ; } else if ($this->setAutoBottomMargin=='stretch') { if ($htmlf['h']) { $h = $htmlf['h']; } else if ($det) { $h = $this->_getHFHeight($det,'F'); } else { $h = 0; } $this->bMargin = max($this->orig_bMargin, $this->margin_footer + $h + $this->autoMarginPadding); $this->PageBreakTrigger=$this->h-$this->bMargin ; } } function _getHFHeight(&$det,$end) { $h = 0; if(count($det)) { foreach(array('L','C','R') AS $pos) { if (isset($det[$pos]['content']) && $det[$pos]['content']) { if (isset($det[$pos]['font-size']) && $det[$pos]['font-size']) { $hfsz = $det[$pos]['font-size']; } else { $hfsz = $this->default_font_size; } $h = max($h,$hfsz/_MPDFK); } } if ($det['line'] && $end=='H') { $h += $h/_MPDFK*$this->header_line_spacing; } else if ($det['line'] && $end=='F') { $h += $h/_MPDFK*$this->footer_line_spacing; } } return $h; } function _endpage() { $this->printfloatbuffer(); if($this->visibility!='visible') $this->SetVisibility('visible'); $this->EndLayer(); $this->state=1; } function _newobj($obj_id=false,$onlynewobj=false) { if (!$obj_id) { $obj_id = ++$this->n; } if (!$onlynewobj) { $this->offsets[$obj_id] = strlen($this->buffer); $this->_out($obj_id.' 0 obj'); $this->_current_obj_id = $obj_id; } } function _dounderline($x,$y,$txt) { $w =($this->GetStringWidth($txt)*_MPDFK) + ($this->charspacing * mb_strlen( $txt, $this->mb_enc )) + ( $this->ws * mb_substr_count( $txt, ' ', $this->mb_enc )); return sprintf('%.3F %.3F m %.3F %.3F l S',$x*_MPDFK,($this->h-$y)*_MPDFK,($x*_MPDFK)+$w,($this->h-$y)*_MPDFK); } function _imageError($file, $firsttime, $msg) { $this->failedimages[$file] = true; if ($firsttime && ($this->showImageErrors || $this->debug)) { $this->Error("IMAGE Error (".$file."): ".$msg); } return false; } function _getImage(&$file, $firsttime=true, $allowvector=true, $orig_srcpath=false) { if (preg_match('/var:\s*(.*)/',$file, $v)) { $data = $this->$v[1]; $file = md5($data); } if (preg_match('/data:image\/(gif|jpeg|png);base64,(.*)/',$file, $v)) { $type = $v[1]; $data = base64_decode($v[2]); $file = md5($data); } if ($firsttime && $file && substr($file,0,5)!='data:') { $file = urlencode_part($file); } if ($firsttime && $orig_srcpath && substr($orig_srcpath,0,5)!='data:') { $orig_srcpath = urlencode_part($orig_srcpath); } $ppUx = 0; if ($orig_srcpath && isset($this->images[$orig_srcpath])) { $file=$orig_srcpath; return $this->images[$orig_srcpath]; } if (isset($this->images[$file])) { return $this->images[$file]; } else if ($orig_srcpath && isset($this->formobjects[$orig_srcpath])) { $file=$orig_srcpath; return $this->formobjects[$file]; } else if (isset($this->formobjects[$file])) { return $this->formobjects[$file]; } else if ($firsttime && isset($this->failedimages[$file])) { return $this->_imageError($file, $firsttime, ''); } if (empty($data)) { $type = ''; $data = ''; if ($orig_srcpath && $this->basepathIsLocal && $check = @fopen($orig_srcpath,"rb")) { fclose($check); $file=$orig_srcpath; $data = file_get_contents($file); $type = $this->_imageTypeFromString($data); } if (!$data && $check = @fopen($file,"rb")) { fclose($check); $data = file_get_contents($file); $type = $this->_imageTypeFromString($data); } if ((!$data || !$type) && !ini_get('allow_url_fopen') ) { $this->file_get_contents_by_socket($file, $data); if ($data) { $type = $this->_imageTypeFromString($data); } } if ((!$data || !$type) && !ini_get('allow_url_fopen') && function_exists("curl_init")) { $this->file_get_contents_by_curl($file, $data); if ($data) { $type = $this->_imageTypeFromString($data); } } } if (!$data) { return $this->_imageError($file, $firsttime, 'Could not find image file'); } if (empty($type)) { $type = $this->_imageTypeFromString($data); } if (($type == 'wmf' || $type == 'svg') && !$allowvector) { return $this->_imageError($file, $firsttime, 'WMF or SVG image file not supported in this context'); } if ($type == 'svg') { if (!class_exists('SVG', false)) { include(_MPDF_PATH .'classes/svg.php'); } $svg = new SVG($this); $family=$this->FontFamily; $style=$this->FontStyle; $size=$this->FontSizePt; $info = $svg->ImageSVG($data); if($family) $this->SetFont($family,$style,$size,false); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing SVG file'); } $info['type']='svg'; $info['i']=count($this->formobjects)+1; $this->formobjects[$file]=$info; return $info; } if ($type == 'jpeg' || $type == 'jpg') { $hdr = $this->_jpgHeaderFromString($data); if (!$hdr) { return $this->_imageError($file, $firsttime, 'Error parsing JPG header'); } $a = $this->_jpgDataFromHeader($hdr); $j = strpos($data,'JFIF'); if ($j) { $unitSp=ord(substr($data,($j+7),1)); if ($unitSp > 0) { $ppUx=$this->_twobytes2int(substr($data,($j+8),2)); if ($unitSp == 2) { $ppUx=round($ppUx/10 *25.4); } } } if ($a[2] == 'DeviceCMYK' && (($this->PDFA && $this->restrictColorSpace!=3) || $this->restrictColorSpace==2)) { if (!function_exists("gd_info")) { $this->Error("JPG image may not use CMYK color space (".$file.")."); } if ($this->PDFA && !$this->PDFAauto) { $this->PDFAXwarnings[] = "JPG image may not use CMYK color space - ".$file." - (Image converted to RGB. NB This will alter the colour profile of the image.)"; } $im = @imagecreatefromstring($data); if ($im) { $tempfile = _MPDF_TEMP_PATH.'_tempImgPNG'.RAND(1,10000).'.png'; imageinterlace($im, false); $check = @imagepng($im, $tempfile); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary file ('.$tempfile.') whilst using GD library to parse JPG(CMYK) image'); } $info = $this->_getImage($tempfile, false); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file ('.$tempfile.') created with GD library to parse JPG(CMYK) image'); } imagedestroy($im); unlink($tempfile); $info['type']='jpg'; if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else { return $this->_imageError($file, $firsttime, 'Error creating GD image file from JPG(CMYK) image'); } } else if ($a[2] == 'DeviceRGB' && ($this->PDFX || $this->restrictColorSpace==3)) { $info = $this->_convImage($data, $a[2], 'DeviceCMYK', $a[0], $a[1], $ppUx, false); if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "JPG image may not use RGB color space - ".$file." - (Image converted to CMYK. NB This will alter the colour profile of the image.)"; } } else if (($a[2] == 'DeviceRGB' || $a[2] == 'DeviceCMYK') && $this->restrictColorSpace==1) { $info = $this->_convImage($data, $a[2], 'DeviceGray', $a[0], $a[1], $ppUx, false); } else { $info = array('w'=>$a[0],'h'=>$a[1],'cs'=>$a[2],'bpc'=>$a[3],'f'=>'DCTDecode','data'=>$data, 'type'=>'jpg'); if ($ppUx) { $info['set-dpi'] = $ppUx; } } if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing or converting JPG image'); } if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else if ($type == 'png') { if(substr($data,0,8)!=chr(137).'PNG'.chr(13).chr(10).chr(26).chr(10)) { return $this->_imageError($file, $firsttime, 'Error parsing PNG identifier'); } if(substr($data,12,4)!='IHDR') { return $this->_imageError($file, $firsttime, 'Incorrect PNG file (no IHDR block found)'); } $w=$this->_fourbytes2int(substr($data,16,4)); $h=$this->_fourbytes2int(substr($data,20,4)); $bpc=ord(substr($data,24,1)); $errpng = false; $pngalpha = false; if($bpc>8) { $errpng = 'not 8-bit depth'; } $ct=ord(substr($data,25,1)); if($ct==0) { $colspace='DeviceGray'; } elseif($ct==2) { $colspace='DeviceRGB'; } elseif($ct==3) { $colspace='Indexed'; } elseif($ct==4) { $colspace='DeviceGray'; $errpng = 'alpha channel'; $pngalpha = true; } else { $colspace='DeviceRGB'; $errpng = 'alpha channel'; $pngalpha = true; } if(ord(substr($data,26,1))!=0) { $errpng = 'compression method'; } if(ord(substr($data,27,1))!=0) { $errpng = 'filter method'; } if(ord(substr($data,28,1))!=0) { $errpng = 'interlaced file'; } $j = strpos($data,'pHYs'); if ($j) { $unitSp=ord(substr($data,($j+12),1)); if ($unitSp == 1) { $ppUx=$this->_fourbytes2int(substr($data,($j+4),4)); $ppUx=round($ppUx/1000 *25.4); } } if (($colspace == 'DeviceRGB' || $colspace == 'Indexed') && ($this->PDFX || $this->restrictColorSpace==3)) { $info = $this->_convImage($data, $colspace, 'DeviceCMYK', $w, $h, $ppUx, $pngalpha); if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "PNG image may not use RGB color space - ".$file." - (Image converted to CMYK. NB This will alter the colour profile of the image.)"; } } else if (($colspace == 'DeviceRGB' || $colspace == 'Indexed') && $this->restrictColorSpace==1) { $info = $this->_convImage($data, $colspace, 'DeviceGray', $w, $h, $ppUx, $pngalpha); } else if (($this->PDFA || $this->PDFX) && $pngalpha) { if ($this->restrictColorSpace==1) { $info = $this->_convImage($data, $colspace, 'DeviceGray', $w, $h, $ppUx, $pngalpha); } else if ($this->restrictColorSpace==3) { $info = $this->_convImage($data, $colspace, 'DeviceCMYK', $w, $h, $ppUx, $pngalpha); } else if ($this->PDFA ) { $info = $this->_convImage($data, $colspace, 'DeviceRGB', $w, $h, $ppUx, $pngalpha); } if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "Transparency (alpha channel) not permitted in PDFA or PDFX files - ".$file." - (Image converted to one without transparency.)"; } } else if ($errpng || $pngalpha) { if (function_exists('gd_info')) { $gd = gd_info(); } else {$gd = array(); } if (!isset($gd['PNG Support'])) { return $this->_imageError($file, $firsttime, 'GD library required for PNG image ('.$errpng.')'); } $im = imagecreatefromstring($data); if (!$im) { return $this->_imageError($file, $firsttime, 'Error creating GD image from PNG file ('.$errpng.')'); } $w = imagesx($im); $h = imagesy($im); if ($im) { $tempfile = _MPDF_TEMP_PATH.'_tempImgPNG'.RAND(1,10000).'.png'; if ($pngalpha) { if ($this->PDFA) { $this->Error("PDFA1-b does not permit images with alpha channel transparency (".$file.")."); } $imgalpha = imagecreate($w, $h); for ($c = 0; $c < 256; ++$c) { ImageColorAllocate($imgalpha, $c, $c, $c); } $gammacorr = 2.2; for ($xpx = 0; $xpx < $w; ++$xpx) { for ($ypx = 0; $ypx < $h; ++$ypx) { $alpha = (imagecolorat($im, $xpx, $ypx) & 0x7F000000) >> 24; if ($alpha < 127) { if ($alpha==0) { $gamma = 255; } else $gamma = (pow((((127 - $alpha) * 255 / 127) / 255), $gammacorr) * 255); imagesetpixel($imgalpha, $xpx, $ypx, $gamma); } } } $tempfile_alpha = _MPDF_TEMP_PATH.'_tempMskPNG'.RAND(1,10000).'.png'; if (!is_writable($tempfile_alpha)) { ob_start(); $check = @imagepng($imgalpha); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary image object whilst using GD library to parse PNG image'); } imagedestroy($imgalpha); $this->_tempimg = ob_get_contents(); $this->_tempimglnk = 'var:_tempimg'; ob_end_clean(); $imgplain = imagecreatetruecolor($w, $h); imagecopy($imgplain, $im, 0, 0, 0, 0, $w, $h); $minfo = $this->_getImage($this->_tempimglnk, false); if (!$minfo) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file image object created with GD library to parse PNG image'); } ob_start(); $check = @imagepng($imgplain); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary image object whilst using GD library to parse PNG image'); } $this->_tempimg = ob_get_contents(); $this->_tempimglnk = 'var:_tempimg'; ob_end_clean(); $info = $this->_getImage($this->_tempimglnk, false); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file image object created with GD library to parse PNG image'); } imagedestroy($imgplain); $imgmask = count($this->images)+1; $minfo['cs'] = 'DeviceGray'; $minfo['i']=$imgmask ; $this->images[$tempfile_alpha] = $minfo; } else { $check = @imagepng($imgalpha, $tempfile_alpha); if (!$check) { return $this->_imageError($file, $firsttime, 'Failed to create temporary image file ('.$tempfile_alpha.') parsing PNG image with alpha channel ('.$errpng.')'); } imagedestroy($imgalpha); $imgplain = imagecreatetruecolor($w, $h); imagecopy($imgplain, $im, 0, 0, 0, 0, $w, $h); $check = @imagepng($imgplain, $tempfile); if (!$check) { return $this->_imageError($file, $firsttime, 'Failed to create temporary image file ('.$tempfile.') parsing PNG image with alpha channel ('.$errpng.')'); } imagedestroy($imgplain); $minfo = $this->_getImage($tempfile_alpha, false); unlink($tempfile_alpha); if (!$minfo) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file ('.$tempfile_alpha.') created with GD library to parse PNG image'); } $imgmask = count($this->images)+1; $minfo['cs'] = 'DeviceGray'; $minfo['i']=$imgmask ; $this->images[$tempfile_alpha] = $minfo; $info = $this->_getImage($tempfile, false); unlink($tempfile); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file ('.$tempfile.') created with GD library to parse PNG image'); } } $info['masked'] = $imgmask; if ($ppUx) { $info['set-dpi'] = $ppUx; } $info['type']='png'; if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else { imagealphablending($im, false); imagesavealpha($im, false); imageinterlace($im, false); if (!is_writable($tempfile)) { ob_start(); $check = @imagepng($im); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary image object whilst using GD library to parse PNG image'); } $this->_tempimg = ob_get_contents(); $this->_tempimglnk = 'var:_tempimg'; ob_end_clean(); $info = $this->_getImage($this->_tempimglnk, false); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file image object created with GD library to parse PNG image'); } imagedestroy($im); } else { $check = @imagepng($im, $tempfile ); if (!$check) { return $this->_imageError($file, $firsttime, 'Failed to create temporary image file ('.$tempfile.') parsing PNG image ('.$errpng.')'); } imagedestroy($im); $info = $this->_getImage($tempfile, false) ; unlink($tempfile ); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file ('.$tempfile.') created with GD library to parse PNG image'); } } if ($ppUx) { $info['set-dpi'] = $ppUx; } $info['type']='png'; if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } } } else { $parms='/DecodeParms <</Predictor 15 /Colors '.($ct==2 ? 3 : 1).' /BitsPerComponent '.$bpc.' /Columns '.$w.'>>'; $pal=''; $trns=''; $pngdata=''; $p = 33; do { $n=$this->_fourbytes2int(substr($data,$p,4)); $p += 4; $type=substr($data,$p,4); $p += 4; if($type=='PLTE') { $pal=substr($data,$p,$n); $p += $n; $p += 4; } elseif($type=='tRNS') { $t=substr($data,$p,$n); $p += $n; if($ct==0) $trns=array(ord(substr($t,1,1))); elseif($ct==2) $trns=array(ord(substr($t,1,1)),ord(substr($t,3,1)),ord(substr($t,5,1))); else { $pos=strpos($t,chr(0)); if(is_int($pos)) $trns=array($pos); } $p += 4; } elseif($type=='IDAT') { $pngdata.=substr($data,$p,$n); $p += $n; $p += 4; } elseif($type=='IEND') { break; } else if (preg_match('/[a-zA-Z]{4}/',$type)) { $p += $n+4; } else { return $this->_imageError($file, $firsttime, 'Error parsing PNG image data'); } } while($n); if (!$pngdata) { return $this->_imageError($file, $firsttime, 'Error parsing PNG image data - no IDAT data found'); } if($colspace=='Indexed' and empty($pal)) { return $this->_imageError($file, $firsttime, 'Error parsing PNG image data - missing colour palette'); } $info = array('w'=>$w,'h'=>$h,'cs'=>$colspace,'bpc'=>$bpc,'f'=>'FlateDecode','parms'=>$parms,'pal'=>$pal,'trns'=>$trns,'data'=>$pngdata); $info['type']='png'; if ($ppUx) { $info['set-dpi'] = $ppUx; } } if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing or converting PNG image'); } if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else if ($type == 'gif') { if (function_exists('gd_info')) { $gd = gd_info(); } else {$gd = array(); } if (isset($gd['GIF Read Support']) && $gd['GIF Read Support']) { $im = @imagecreatefromstring($data); if ($im) { $tempfile = _MPDF_TEMP_PATH.'_tempImgPNG'.RAND(1,10000).'.png'; imagealphablending($im, false); imagesavealpha($im, false); imageinterlace($im, false); if (!is_writable($tempfile)) { ob_start(); $check = @imagepng($im); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary image object whilst using GD library to parse GIF image'); } $this->_tempimg = ob_get_contents(); $this->_tempimglnk = 'var:_tempimg'; ob_end_clean(); $info = $this->_getImage($this->_tempimglnk, false); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file image object created with GD library to parse GIF image'); } imagedestroy($im); } else { $check = @imagepng($im, $tempfile); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary file ('.$tempfile.') whilst using GD library to parse GIF image'); } $info = $this->_getImage($tempfile, false); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file ('.$tempfile.') created with GD library to parse GIF image'); } imagedestroy($im); unlink($tempfile); } $info['type']='gif'; if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else { return $this->_imageError($file, $firsttime, 'Error creating GD image file from GIF image'); } } if (!class_exists('gif', false)) { include_once(_MPDF_PATH.'classes/gif.php'); } $gif=new CGIF(); $h=0; $w=0; $gif->loadFile($data, 0); if(isset($gif->m_img->m_gih->m_bLocalClr) && $gif->m_img->m_gih->m_bLocalClr) { $nColors = $gif->m_img->m_gih->m_nTableSize; $pal = $gif->m_img->m_gih->m_colorTable->toString(); if($bgColor != -1) { $bgColor = $gif->m_img->m_gih->m_colorTable->colorIndex($bgColor); } $colspace='Indexed'; } elseif(isset($gif->m_gfh->m_bGlobalClr) && $gif->m_gfh->m_bGlobalClr) { $nColors = $gif->m_gfh->m_nTableSize; $pal = $gif->m_gfh->m_colorTable->toString(); if((isset($bgColor)) and $bgColor != -1) { $bgColor = $gif->m_gfh->m_colorTable->colorIndex($bgColor); } $colspace='Indexed'; } else { $nColors = 0; $bgColor = -1; $colspace='DeviceGray'; $pal=''; } $trns=''; if(isset($gif->m_img->m_bTrans) && $gif->m_img->m_bTrans && ($nColors > 0)) { $trns=array($gif->m_img->m_nTrans); } $gifdata=$gif->m_img->m_data; $w=$gif->m_gfh->m_nWidth; $h=$gif->m_gfh->m_nHeight; $gif->ClearData(); if($colspace=='Indexed' and empty($pal)) { return $this->_imageError($file, $firsttime, 'Error parsing GIF image - missing colour palette'); } if ($this->compress) { $gifdata=gzcompress($gifdata); $info = array( 'w'=>$w, 'h'=>$h, 'cs'=>$colspace, 'bpc'=>8, 'f'=>'FlateDecode', 'pal'=>$pal, 'trns'=>$trns, 'data'=>$gifdata); } else { $info = array( 'w'=>$w, 'h'=>$h, 'cs'=>$colspace, 'bpc'=>8, 'pal'=>$pal, 'trns'=>$trns, 'data'=>$gifdata); } $info['type']='gif'; if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else if ($type == 'bmp') { if (!class_exists('bmp', false)) { include(_MPDF_PATH.'classes/bmp.php'); } if (empty($this->bmp)) { $this->bmp = new bmp($this); } $info = $this->bmp->_getBMPimage($data, $file); if (isset($info['error'])) { return $this->_imageError($file, $firsttime, $info['error']); } if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } else if ($type == 'wmf') { if (!class_exists('wmf', false)) { include(_MPDF_PATH.'classes/wmf.php'); } if (empty($this->wmf)) { $this->wmf = new wmf($this); } $wmfres = $this->wmf->_getWMFimage($data); if ($wmfres[0]==0) { if ($wmfres[1]) { return $this->_imageError($file, $firsttime, $wmfres[1]); } return $this->_imageError($file, $firsttime, 'Error parsing WMF image'); } $info = array('x'=>$wmfres[2][0],'y'=>$wmfres[2][1],'w'=>$wmfres[3][0],'h'=>$wmfres[3][1],'data'=>$wmfres[1]); $info['i']=count($this->formobjects)+1; $info['type']='wmf'; $this->formobjects[$file]=$info; return $info; } else { if (function_exists('gd_info')) { $gd = gd_info(); } else {$gd = array(); } if (isset($gd['PNG Support']) && $gd['PNG Support']) { $im = @imagecreatefromstring($data); if (!$im) { return $this->_imageError($file, $firsttime, 'Error parsing image file - image type not recognised, and not supported by GD imagecreate'); } $tempfile = _MPDF_TEMP_PATH.'_tempImgPNG'.RAND(1,10000).'.png'; imagealphablending($im, false); imagesavealpha($im, false); imageinterlace($im, false); $check = @imagepng($im, $tempfile); if (!$check) { return $this->_imageError($file, $firsttime, 'Error creating temporary file ('.$tempfile.') whilst using GD library to parse unknown image type'); } $info = $this->_getImage($tempfile, false); imagedestroy($im); unlink($tempfile); if (!$info) { return $this->_imageError($file, $firsttime, 'Error parsing temporary file ('.$tempfile.') created with GD library to parse unknown image type'); } $info['type']='png'; if ($firsttime) { $info['i']=count($this->images)+1; $this->images[$file]=$info; } return $info; } } return $this->_imageError($file, $firsttime, 'Error parsing image file - image type not recognised'); } function _convImage(&$data, $colspace, $targetcs, $w, $h, $dpi, $mask) { if ($this->PDFA || $this->PDFX) { $mask=false; } $im = @imagecreatefromstring($data); $info = array(); if ($im) { $imgdata = ''; $mimgdata = ''; $minfo = array(); $trns=array(); $trnsrgb = false; if (!$this->PDFA && !$this->PDFX) { $p = strpos($data,'tRNS'); if ($p) { $n=$this->_fourbytes2int(substr($data,($p-4),4)); $t = substr($data,($p+4),$n); if ($colspace=='DeviceGray') { $trns=array(ord(substr($t,1,1))); $trnsrgb = array($trns[0],$trns[0],$trns[0]); } else if ($colspace=='DeviceRGB') { $trns=array(ord(substr($t,1,1)),ord(substr($t,3,1)),ord(substr($t,5,1))); $trnsrgb = $trns; if ($targetcs=='DeviceCMYK') { $col = $this->rgb2cmyk(array(3,$trns[0],$trns[1],$trns[2])); $c1 = intval($col[1]*2.55); $c2 = intval($col[2]*2.55); $c3 = intval($col[3]*2.55); $c4 = intval($col[4]*2.55); $trns = array($c1,$c2,$c3,$c4); } else if ($targetcs=='DeviceGray') { $c = intval(($trns[0] * .21) + ($trns[1] * .71) + ($trns[2] * .07)); $trns = array($c); } } else { $pos = strpos($t,chr(0)); if (is_int($pos)) { $pal = imagecolorsforindex($im, $pos); $r = $pal['red']; $g = $pal['green']; $b = $pal['blue']; $trns=array($r,$g,$b); $trnsrgb = $trns; if ($targetcs=='DeviceCMYK') { $col = $this->rgb2cmyk(array(3,$r,$g,$b)); $c1 = intval($col[1]*2.55); $c2 = intval($col[2]*2.55); $c3 = intval($col[3]*2.55); $c4 = intval($col[4]*2.55); $trns = array($c1,$c2,$c3,$c4); } else if ($targetcs=='DeviceGray') { $c = intval(($r * .21) + ($g * .71) + ($b * .07)); $trns = array($c); } } } } } for ($i = 0; $i < $h; $i++) { for ($j = 0; $j < $w; $j++) { $rgb = imagecolorat($im, $j, $i); $r = ($rgb >> 16) & 0xFF; $g = ($rgb >> 8) & 0xFF; $b = $rgb & 0xFF; if ($colspace=='Indexed') { $pal = imagecolorsforindex($im, $rgb); $r = $pal['red']; $g = $pal['green']; $b = $pal['blue']; } if ($targetcs=='DeviceCMYK') { $col = $this->rgb2cmyk(array(3,$r,$g,$b)); $c1 = intval($col[1]*2.55); $c2 = intval($col[2]*2.55); $c3 = intval($col[3]*2.55); $c4 = intval($col[4]*2.55); if ($trnsrgb) { if ($trnsrgb!=array($r,$g,$b) && $trns==array($c1,$c2,$c3,$c4)) { if ($c4==0) { $c4=1; } else { $c4--; } } } $imgdata .= chr($c1).chr($c2).chr($c3).chr($c4); } else if ($targetcs=='DeviceGray') { $c = intval(($r * .21) + ($g * .71) + ($b * .07)); if ($trnsrgb) { if ($trnsrgb!=array($r,$g,$b) && $trns==array($c)) { if ($c==0) { $c=1; } else { $c--; } } } $imgdata .= chr($c); } else if ($targetcs=='DeviceRGB') { $imgdata .= chr($r).chr($g).chr($b); } if ($mask) { $col = imagecolorsforindex($im, $rgb); $gammacorr = 2.2; $gamma = intval((pow((((127 - $col['alpha']) * 255 / 127) / 255), $gammacorr) * 255)); $mimgdata .= chr($gamma); } } } if ($targetcs=='DeviceGray') { $ncols = 1; } else if ($targetcs=='DeviceRGB') { $ncols = 3; } else if ($targetcs=='DeviceCMYK') { $ncols = 4; } $imgdata = gzcompress($imgdata); $info = array('w'=>$w,'h'=>$h,'cs'=>$targetcs,'bpc'=>8,'f'=>'FlateDecode','data'=>$imgdata, 'type'=>'png', 'parms'=>'/DecodeParms <</Colors '.$ncols.' /BitsPerComponent 8 /Columns '.$w.'>>'); if ($dpi) { $info['set-dpi'] = $dpi; } if ($mask) { $mimgdata = gzcompress($mimgdata); $minfo = array('w'=>$w,'h'=>$h,'cs'=>'DeviceGray','bpc'=>8,'f'=>'FlateDecode','data'=>$mimgdata, 'type'=>'png', 'parms'=>'/DecodeParms <</Colors '.$ncols.' /BitsPerComponent 8 /Columns '.$w.'>>'); if ($dpi) { $minfo['set-dpi'] = $dpi; } $tempfile = '_tempImgPNG'.RAND(1,10000).'.png'; $imgmask = count($this->images)+1; $minfo['i']=$imgmask ; $this->images[$tempfile] = $minfo; $info['masked'] = $imgmask; } else if ($trns) { $info['trns'] = $trns; } imagedestroy($im); } return $info; } function _fourbytes2int($s) { return (ord($s[0])<<24) + (ord($s[1])<<16) + (ord($s[2])<<8) + ord($s[3]); } function _twobytes2int($s) { return (ord(substr($s, 0, 1))<<8) + ord(substr($s, 1, 1)); } function _jpgHeaderFromString(&$data) { $p = 4; $p += $this->_twobytes2int(substr($data, $p, 2)); $marker = substr($data, $p, 2); while($marker != chr(255).chr(192) && $marker != chr(255).chr(194) && $p<strlen($data)) { $p += ($this->_twobytes2int(substr($data, $p+2, 2))) + 2; $marker = substr($data, $p, 2); } if ($marker != chr(255).chr(192) && $marker != chr(255).chr(194)) { return false; } return substr($data, $p+2, 10); } function _jpgDataFromHeader($hdr) { $bpc = ord(substr($hdr, 2, 1)); if (!$bpc) { $bpc = 8; } $h = $this->_twobytes2int(substr($hdr, 3, 2)); $w = $this->_twobytes2int(substr($hdr, 5, 2)); $channels = ord(substr($hdr, 7, 1)); if ($channels==3) { $colspace='DeviceRGB'; } elseif($channels==4) { $colspace='DeviceCMYK'; } else { $colspace='DeviceGray'; } return array($w, $h, $colspace, $bpc); } function file_get_contents_by_curl($url, &$data) { $timeout = 5; $ch = curl_init($url); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_NOBODY, 0); curl_setopt ( $ch , CURLOPT_RETURNTRANSFER , 1 ); curl_setopt ( $ch , CURLOPT_CONNECTTIMEOUT , $timeout ); $data = curl_exec($ch); curl_close($ch); } function file_get_contents_by_socket($url, &$data) { $timeout = 1; $p = parse_url($url); $file = $p['path']; if ($p['query']) { $file .= '?'.$p['query']; } if(!($fh = @fsockopen($p['host'], 80, $errno, $errstr, $timeout))) { return false; } $getstring = "GET ".$file." HTTP/1.0 \r\n" . "Host: ".$p['host']." \r\n" . "Connection: close\r\n\r\n"; fwrite($fh, $getstring); $s = fgets($fh, 1024); if (!$s) { return false; } $httpheader .= $s; while (!feof($fh)) { $s = fgets($fh, 1024); if ( $s == "\r\n" ) { break; } } $data = ''; while (!feof($fh)) { $data .= fgets($fh, 1024); } fclose($fh); } function _imageTypeFromString(&$data) { $type = ''; if (substr($data, 6, 4)== 'JFIF' || substr($data, 6, 4)== 'Exif') { $type = 'jpeg'; } else if (substr($data, 0, 6)== "GIF87a" || substr($data, 0, 6)== "GIF89a") { $type = 'gif'; } else if (substr($data, 0, 8)== chr(137).'PNG'.chr(13).chr(10).chr(26).chr(10)) { $type = 'png'; } else if (substr($data, 0, 4)== chr(215).chr(205).chr(198).chr(154)) { $type = 'wmf'; } else if (preg_match('/<svg.*<\/svg>/is',$data)) { $type = 'svg'; } else if (substr($data, 0, 2)== "BM") { $type = 'bmp'; } return $type; } function _putformobjects() { reset($this->formobjects); while(list($file,$info)=each($this->formobjects)) { $this->_newobj(); $this->formobjects[$file]['n']=$this->n; $this->_out('<</Type /XObject'); $this->_out('/Subtype /Form'); $this->_out('/Group '.($this->n+1).' 0 R'); $this->_out('/BBox ['.$info['x'].' '.$info['y'].' '.($info['w']+$info['x']).' '.($info['h']+$info['y']).']'); if ($this->compress) $this->_out('/Filter /FlateDecode'); $data=($this->compress) ? gzcompress($info['data']) : $info['data']; $this->_out('/Length '.strlen($data).'>>'); $this->_putstream($data); unset($this->formobjects[$file]['data']); $this->_out('endobj'); $this->_newobj(); $this->_out('<</Type /Group'); $this->_out('/S /Transparency'); $this->_out('>>'); $this->_out('endobj'); } } function _freadint($f) { $i=ord(fread($f,1))<<24; $i+=ord(fread($f,1))<<16; $i+=ord(fread($f,1))<<8; $i+=ord(fread($f,1)); return $i; } function _UTF16BEtextstring($s) { $s = $this->UTF8ToUTF16BE($s, true); if ($this->encrypted) { $s = $this->_RC4($this->_objectkey($this->_current_obj_id), $s); } return '('. $this->_escape($s).')'; } function _textstring($s) { if ($this->encrypted) { $s = $this->_RC4($this->_objectkey($this->_current_obj_id), $s); } return '('. $this->_escape($s).')'; } function _escape($s) { return strtr($s, array(')' => '\\)', '(' => '\\(', '\\' => '\\\\', chr(13) => '\r')); } function _putstream($s) { if ($this->encrypted) { $s = $this->_RC4($this->_objectkey($this->_current_obj_id), $s); } $this->_out('stream'); $this->_out($s); $this->_out('endstream'); } function _out($s,$ln=true) { if($this->state==2) { if ($this->bufferoutput) { $this->headerbuffer.= $s."\n"; } else if (($this->ColActive) && !$this->processingHeader && !$this->processingFooter) { if (preg_match('/q \d+\.\d\d+ 0 0 (\d+\.\d\d+) \d+\.\d\d+ \d+\.\d\d+ cm \/(I|FO)\d+ Do Q/',$s,$m)) { $h = ($m[1]/_MPDFK); $this->ColDetails[$this->CurrCol]['bottom_margin'] = $this->y+$h; } else if (preg_match('/\d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ ([\-]{0,1}\d+\.\d\d+) re/',$s,$m) && $this->tableLevel>0) { $h = ($m[1]/_MPDFK); $this->ColDetails[$this->CurrCol]['bottom_margin'] = max($this->ColDetails[$this->CurrCol]['bottom_margin'],($this->y+$h)); } else { if (isset($this->ColDetails[$this->CurrCol]['bottom_margin'])) { $h = $this->ColDetails[$this->CurrCol]['bottom_margin'] - $this->y; } else { $h = 0; } } if ($h < 0) { $h = -$h; } $this->columnbuffer[] = array( 's' => $s, 'col' => $this->CurrCol, 'x' => $this->x, 'y' => $this->y, 'h' => $h ); } else if ($this->table_rotate && !$this->processingHeader && !$this->processingFooter) { $this->tablebuffer .= $s . "\n"; } else if ($this->kwt && !$this->processingHeader && !$this->processingFooter) { $this->kwt_buffer[] = array( 's' => $s, 'x' => $this->x, 'y' => $this->y, ); } else if (($this->keep_block_together) && !$this->processingHeader && !$this->processingFooter) { if (!isset($this->ktBlock[$this->page]['bottom_margin'])) { $this->ktBlock[$this->page]['bottom_margin'] = $this->y; } if (preg_match('/q \d+\.\d\d+ 0 0 (\d+\.\d\d+) \d+\.\d\d+ \d+\.\d\d+ cm \/(I|FO)\d+ Do Q/',$s,$m)) { $h = ($m[1]/_MPDFK); $this->ktBlock[$this->page]['bottom_margin'] = $this->y+$h; } else { if (isset($this->ktBlock[$this->page]['bottom_margin'])) { $h = $this->ktBlock[$this->page]['bottom_margin'] - $this->y; } else { $h = 0; } } if ($h < 0) { $h = -$h; } $this->divbuffer[] = array( 'page' => $this->page, 's' => $s, 'x' => $this->x, 'y' => $this->y, 'h' => $h ); } else { $this->pages[$this->page] .= $s.($ln == true ? "\n" : ''); } } else { $this->buffer .= $s.($ln == true ? "\n" : ''); } } function watermark( $texte, $angle=45, $fontsize=96, $alpha=0.2 ) { if ($this->PDFA || $this->PDFX) { $this->Error('PDFA and PDFX do not permit transparency, so mPDF does not allow Watermarks!'); } if (!$this->watermark_font) { $this->watermark_font = $this->default_font; } $this->SetFont( $this->watermark_font, "B", $fontsize, false ); $texte= $this->purify_utf8_text($texte); if ($this->text_input_as_HTML) { $texte= $this->all_entities_to_utf8($texte); } if ($this->usingCoreFont) { $texte = mb_convert_encoding($texte,$this->mb_enc,'UTF-8'); } $this->magic_reverse_dir($texte, true, $this->directionality); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($texte); $this->SetAlpha($alpha); $this->SetTColor($this->ConvertColor(0)); $szfont = $fontsize; $loop = 0; $maxlen = (min($this->w,$this->h) ); while ( $loop == 0 ) { $this->SetFont( $this->watermark_font, "B", $szfont, false ); $offset = ((sin(deg2rad($angle))) * ($szfont/_MPDFK)); $strlen = $this->GetStringWidth($texte); if ( $strlen > $maxlen - $offset ) $szfont --; else $loop ++; } $this->SetFont( $this->watermark_font, "B", $szfont-0.1, true, true); $adj = ((cos(deg2rad($angle))) * ($strlen/2)); $opp = ((sin(deg2rad($angle))) * ($strlen/2)); $wx = ($this->w/2) - $adj + $offset/3; $wy = ($this->h/2) + $opp; $this->Rotate($angle,$wx,$wy); $this->Text($wx,$wy,$texte); $this->Rotate(0); $this->SetTColor($this->ConvertColor(0)); $this->SetAlpha(1); } function watermarkImg( $src, $alpha=0.2 ) { if ($this->PDFA || $this->PDFX) { $this->Error('PDFA and PDFX do not permit transparency, so mPDF does not allow Watermarks!'); } if ($this->watermarkImgBehind) { $this->watermarkImgAlpha = $this->SetAlpha($alpha, 'Normal', true); } else { $this->SetAlpha($alpha, $this->watermarkImgAlphaBlend); } $this->Image($src,0,0,0,0,'','', true, true, true); if (!$this->watermarkImgBehind) { $this->SetAlpha(1); } } function Rotate($angle,$x=-1,$y=-1) { if($x==-1) $x=$this->x; if($y==-1) $y=$this->y; if($this->angle!=0) $this->_out('Q'); $this->angle=$angle; if($angle!=0) { $angle*=M_PI/180; $c=cos($angle); $s=sin($angle); $cx=$x*_MPDFK; $cy=($this->h-$y)*_MPDFK; $this->_out(sprintf('q %.5F %.5F %.5F %.5F %.3F %.3F cm 1 0 0 1 %.3F %.3F cm',$c,$s,-$s,$c,$cx,$cy,-$cx,-$cy)); } } function CircularText($x, $y, $r, $text, $align='top', $fontfamily='', $fontsize=0, $fontstyle='', $kerning=120, $fontwidth=100, $divider) { if (!class_exists('directw', false)) { include(_MPDF_PATH.'classes/directw.php'); } if (empty($this->directw)) { $this->directw = new directw($this); } $this->directw->CircularText($x, $y, $r, $text, $align, $fontfamily, $fontsize, $fontstyle, $kerning, $fontwidth, $divider); } function RoundedRect($x, $y, $w, $h, $r, $style = '') { $hp = $this->h; if($style=='F') $op='f'; elseif($style=='FD' or $style=='DF') $op='B'; else $op='S'; $MyArc = 4/3 * (sqrt(2) - 1); $this->_out(sprintf('%.3F %.3F m',($x+$r)*_MPDFK,($hp-$y)*_MPDFK )); $xc = $x+$w-$r ; $yc = $y+$r; $this->_out(sprintf('%.3F %.3F l', $xc*_MPDFK,($hp-$y)*_MPDFK )); $this->_Arc($xc + $r*$MyArc, $yc - $r, $xc + $r, $yc - $r*$MyArc, $xc + $r, $yc); $xc = $x+$w-$r ; $yc = $y+$h-$r; $this->_out(sprintf('%.3F %.3F l',($x+$w)*_MPDFK,($hp-$yc)*_MPDFK)); $this->_Arc($xc + $r, $yc + $r*$MyArc, $xc + $r*$MyArc, $yc + $r, $xc, $yc + $r); $xc = $x+$r ; $yc = $y+$h-$r; $this->_out(sprintf('%.3F %.3F l',$xc*_MPDFK,($hp-($y+$h))*_MPDFK)); $this->_Arc($xc - $r*$MyArc, $yc + $r, $xc - $r, $yc + $r*$MyArc, $xc - $r, $yc); $xc = $x+$r ; $yc = $y+$r; $this->_out(sprintf('%.3F %.3F l',($x)*_MPDFK,($hp-$yc)*_MPDFK )); $this->_Arc($xc - $r, $yc - $r*$MyArc, $xc - $r*$MyArc, $yc - $r, $xc, $yc - $r); $this->_out($op); } function _Arc($x1, $y1, $x2, $y2, $x3, $y3) { $h = $this->h; $this->_out(sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c ', $x1*_MPDFK, ($h-$y1)*_MPDFK, $x2*_MPDFK, ($h-$y2)*_MPDFK, $x3*_MPDFK, ($h-$y3)*_MPDFK)); } function Shaded_box( $text,$font='',$fontstyle='B',$szfont='',$width='70%',$style='DF',$radius=2.5,$fill='#FFFFFF',$color='#000000',$pad=2 ) { if (!class_exists('directw', false)) { include(_MPDF_PATH.'classes/directw.php'); } if (empty($this->directw)) { $this->directw = new directw($this); } $this->directw->Shaded_box( $text,$font,$fontstyle,$szfont,$width,$style,$radius,$fill,$color,$pad); } function UTF8StringToArray($str, $addSubset=true) { $out = array(); $len = strlen($str); for ($i = 0; $i < $len; $i++) { $uni = -1; $h = ord($str[$i]); if ( $h <= 0x7F ) $uni = $h; elseif ( $h >= 0xC2 ) { if ( ($h <= 0xDF) && ($i < $len -1) ) $uni = ($h & 0x1F) << 6 | (ord($str[++$i]) & 0x3F); elseif ( ($h <= 0xEF) && ($i < $len -2) ) $uni = ($h & 0x0F) << 12 | (ord($str[++$i]) & 0x3F) << 6 | (ord($str[++$i]) & 0x3F); elseif ( ($h <= 0xF4) && ($i < $len -3) ) $uni = ($h & 0x0F) << 18 | (ord($str[++$i]) & 0x3F) << 12 | (ord($str[++$i]) & 0x3F) << 6 | (ord($str[++$i]) & 0x3F); } if ($uni >= 0) { $out[] = $uni; if ($addSubset && isset($this->CurrentFont['subset'])) { $this->CurrentFont['subset'][$uni] = $uni; } } } return $out; } function UTF8toSubset($str) { $ret = '<'; $str = preg_replace('/'.preg_quote($this->aliasNbPg,'/').'/', chr(7), $str ); $str = preg_replace('/'.preg_quote($this->aliasNbPgGp,'/').'/', chr(8), $str ); $unicode = $this->UTF8StringToArray($str); $orig_fid = $this->CurrentFont['subsetfontids'][0]; $last_fid = $this->CurrentFont['subsetfontids'][0]; foreach($unicode as $c) { if ($c == 7 || $c == 8) { if ($orig_fid != $last_fid) { $ret .= '> Tj /F'.$orig_fid.' '.$this->FontSizePt.' Tf <'; $last_fid = $orig_fid; } if ($c == 7) { $ret .= $this->aliasNbPgHex; } else { $ret .= $this->aliasNbPgGpHex; } continue; } for ($i=0; $i<99; $i++) { $init = array_search($c, $this->CurrentFont['subsets'][$i]); if ($init!==false) { if ($this->CurrentFont['subsetfontids'][$i] != $last_fid) { $ret .= '> Tj /F'.$this->CurrentFont['subsetfontids'][$i].' '.$this->FontSizePt.' Tf <'; $last_fid = $this->CurrentFont['subsetfontids'][$i]; } $ret .= sprintf("%02s", strtoupper(dechex($init))); break; } else if (count($this->CurrentFont['subsets'][$i]) < 255) { $n = count($this->CurrentFont['subsets'][$i]); $this->CurrentFont['subsets'][$i][$n] = $c; if ($this->CurrentFont['subsetfontids'][$i] != $last_fid) { $ret .= '> Tj /F'.$this->CurrentFont['subsetfontids'][$i].' '.$this->FontSizePt.' Tf <'; $last_fid = $this->CurrentFont['subsetfontids'][$i]; } $ret .= sprintf("%02s", strtoupper(dechex($n))); break; } else if (!isset($this->CurrentFont['subsets'][($i+1)])) { $this->CurrentFont['subsets'][($i+1)] = array(0=>0); $new_fid = count($this->fonts)+$this->extraFontSubsets+1; $this->CurrentFont['subsetfontids'][($i+1)] = $new_fid; $this->extraFontSubsets++; } } } $ret .= '>'; if ($last_fid != $orig_fid) { $ret .= ' Tj /F'.$orig_fid.' '.$this->FontSizePt.' Tf <> '; } return $ret; } function UTF8ToUTF16BE($str, $setbom=true) { if ($this->checkSIP && preg_match("/([\x{20000}-\x{2FFFF}])/u", $str)) { if (!in_array($this->currentfontfamily, array('gb','big5','sjis','uhc','gbB','big5B','sjisB','uhcB','gbI','big5I','sjisI','uhcI', 'gbBI','big5BI','sjisBI','uhcBI'))) { $str = preg_replace("/[\x{20000}-\x{2FFFF}]/u", chr(0), $str); } } if ($this->checkSMP && preg_match("/([\x{10000}-\x{1FFFF}])/u", $str )) { $str = preg_replace("/[\x{10000}-\x{1FFFF}]/u", chr(0), $str ); } $outstr = ""; if ($setbom) { $outstr .= "\xFE\xFF"; } $outstr .= mb_convert_encoding($str, 'UTF-16BE', 'UTF-8'); return $outstr; } function AddCIDFont($family,$style,$name,&$cw,$CMap,$registry,$desc) { $fontkey=strtolower($family).strtoupper($style); if(isset($this->fonts[$fontkey])) $this->Error("Font already added: $family $style"); $i=count($this->fonts)+$this->extraFontSubsets+1; $name=str_replace(' ','',$name); if ($family == 'sjis') { $up = -120; } else { $up = -130; } $this->fonts[$fontkey]=array('i'=>$i,'type'=>'Type0','name'=>$name,'up'=>$up,'ut'=>40,'cw'=>$cw,'CMap'=>$CMap,'registry'=>$registry,'MissingWidth'=>1000,'desc'=>$desc); } function AddCJKFont($family) { if ($this->PDFA || $this->PDFX) { $this->Error("Adobe CJK fonts cannot be embedded in mPDF (required for PDFA1-b and PDFX/1-a)."); } if ($family == 'big5') { $this->AddBig5Font(); } else if ($family == 'gb') { $this->AddGBFont(); } else if ($family == 'sjis') { $this->AddSJISFont(); } else if ($family == 'uhc') { $this->AddUHCFont(); } } function AddBig5Font() { $family='big5'; $name='MSungStd-Light-Acro'; $cw=$this->Big5_widths; $CMap='UniCNS-UTF16-H'; $registry=array('ordering'=>'CNS1','supplement'=>4); $desc = array( 'Ascent' => 880, 'Descent' => -120, 'CapHeight' => 880, 'Flags' => 6, 'FontBBox' => '[-160 -249 1015 1071]', 'ItalicAngle' => 0, 'StemV' => 93, ); $this->AddCIDFont($family,'',$name,$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'B',$name.',Bold',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'I',$name.',Italic',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'BI',$name.',BoldItalic',$cw,$CMap,$registry,$desc); } function AddGBFont() { $family='gb'; $name='STSongStd-Light-Acro'; $cw=$this->GB_widths; $CMap='UniGB-UTF16-H'; $registry=array('ordering'=>'GB1','supplement'=>4); $desc = array( 'Ascent' => 752, 'Descent' => -271, 'CapHeight' => 737, 'Flags' => 6, 'FontBBox' => '[-25 -254 1000 880]', 'ItalicAngle' => 0, 'StemV' => 58, 'Style' => '<< /Panose <000000000400000000000000> >>', ); $this->AddCIDFont($family,'',$name,$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'B',$name.',Bold',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'I',$name.',Italic',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'BI',$name.',BoldItalic',$cw,$CMap,$registry,$desc); } function AddSJISFont() { $family='sjis'; $name='KozMinPro-Regular-Acro'; $cw=$this->SJIS_widths; $CMap='UniJIS-UTF16-H'; $registry=array('ordering'=>'Japan1','supplement'=>5); $desc = array( 'Ascent' => 880, 'Descent' => -120, 'CapHeight' => 740, 'Flags' => 6, 'FontBBox' => '[-195 -272 1110 1075]', 'ItalicAngle' => 0, 'StemV' => 86, 'XHeight' => 502, ); $this->AddCIDFont($family,'',$name,$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'B',$name.',Bold',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'I',$name.',Italic',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'BI',$name.',BoldItalic',$cw,$CMap,$registry,$desc); } function AddUHCFont() { $family='uhc'; $name='HYSMyeongJoStd-Medium-Acro'; $cw=$this->UHC_widths; $CMap='UniKS-UTF16-H'; $registry=array('ordering'=>'Korea1','supplement'=>2); $desc = array( 'Ascent' => 880, 'Descent' => -120, 'CapHeight' => 720, 'Flags' => 6, 'FontBBox' => '[-28 -148 1001 880]', 'ItalicAngle' => 0, 'StemV' => 60, 'Style' => '<< /Panose <000000000600000000000000> >>', ); $this->AddCIDFont($family,'',$name,$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'B',$name.',Bold',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'I',$name.',Italic',$cw,$CMap,$registry,$desc); $this->AddCIDFont($family,'BI',$name.',BoldItalic',$cw,$CMap,$registry,$desc); } function SetAutoFont($af = AUTOFONT_ALL) { if ($this->onlyCoreFonts) { return false; } if (!$af && $af !== 0) { $af = AUTOFONT_ALL; } $this->autoFontGroups = $af; if ($this->autoFontGroups ) { $this->useLang = true; } } function SetDefaultFont($font) { if ($this->PDFA || $this->PDFX) { if (strtolower($font) == 'ctimes') { $font = 'serif'; } if (strtolower($font) == 'ccourier') { $font = 'monospace'; } if (strtolower($font) == 'chelvetica') { $font = 'sans-serif'; } } $font = $this->SetFont($font); $this->default_font = $font; $this->original_default_font = $font; if (!$this->watermark_font ) { $this->watermark_font = $font; } $this->defaultCSS['BODY']['FONT-FAMILY'] = $font; $this->cssmgr->CSS['BODY']['FONT-FAMILY'] = $font; } function SetDefaultFontSize($fontsize) { $this->default_font_size = $fontsize; $this->original_default_font_size = $fontsize; $this->SetFontSize($fontsize); $this->defaultCSS['BODY']['FONT-SIZE'] = $fontsize . 'pt'; $this->cssmgr->CSS['BODY']['FONT-SIZE'] = $fontsize . 'pt'; } function SetDefaultBodyCSS($prop, $val) { if ($prop) { $this->defaultCSS['BODY'][strtoupper($prop)] = $val; $this->cssmgr->CSS['BODY'][strtoupper($prop)] = $val; } } function SetDirectionality($dir='ltr') { if (strtolower($dir) == 'rtl') { if ($this->directionality != 'rtl') { $tmp = $this->DeflMargin; $this->DeflMargin = $this->DefrMargin; $this->DefrMargin = $tmp; $this->orig_lMargin = $this->DeflMargin; $this->orig_rMargin = $this->DefrMargin; $this->SetMargins($this->DeflMargin,$this->DefrMargin,$this->tMargin); } $this->directionality = 'rtl'; $this->defaultAlign = 'R'; $this->defaultTableAlign = 'R'; } else { $this->directionality = 'ltr'; $this->defaultAlign = 'L'; $this->defaultTableAlign = 'L'; } $this->cssmgr->CSS['BODY']['DIRECTION'] = $this->directionality; } function SetLineHeightCorrection($val) { if ($val > 0) { $this->default_lineheight_correction = $val; } else { $this->default_lineheight_correction = 1.2; } } function SetLineHeight($FontPt='',$spacing = '') { if ($this->shrin_k > 1) { $k = $this->shrin_k; } else { $k = 1; } if ($spacing > 0) { if (preg_match('/mm/',$spacing)) { $this->lineheight = ($spacing + 0.0) / $k; } else { if ($FontPt) { $this->lineheight = (($FontPt/_MPDFK) *$spacing); } else { $this->lineheight = (($this->FontSizePt/_MPDFK) *$spacing); } } } else { if ($FontPt) { $this->lineheight = (($FontPt/_MPDFK) *$this->normalLineheight); } else { $this->lineheight = (($this->FontSizePt/_MPDFK) *$this->normalLineheight); } } } function _computeLineheight($lh, $fs='') { if ($this->shrin_k > 1) { $k = $this->shrin_k; } else { $k = 1; } if (!$fs) { $fs = $this->FontSize; } if (preg_match('/mm/',$lh)) { return (($lh + 0.0) / $k); } else if ($lh > 0) { return ($fs * $lh); } else if (isset($this->normalLineheight)) { return ($fs * $this->normalLineheight); } else return ($fs * $this->default_lineheight_correction); } function SetBasePath($str='') { if ( isset($_SERVER['HTTP_HOST']) ) { $host = $_SERVER['HTTP_HOST']; } else if ( isset($_SERVER['SERVER_NAME']) ) { $host = $_SERVER['SERVER_NAME']; } else { $host = ''; } if (!$str) { if ($_SERVER['SCRIPT_NAME']) { $currentPath = dirname($_SERVER['SCRIPT_NAME']); } else { $currentPath = dirname($_SERVER['PHP_SELF']); } $currentPath = str_replace("\\","/",$currentPath); if ($currentPath == '/') { $currentPath = ''; } if ($host) { $currpath = 'http://' . $host . $currentPath .'/'; } else { $currpath = ''; } $this->basepath = $currpath; $this->basepathIsLocal = true; return; } $str = preg_replace('/\?.*/','',$str); if (!preg_match('/(http|https|ftp):\/\/.*\//i',$str)) { $str .= '/'; } $str .= 'xxx'; $this->basepath = dirname($str) . "/"; $this->basepath = str_replace("\\","/",$this->basepath); $tr = parse_url($this->basepath); if (isset($tr['host']) && ($tr['host'] == $host)) { $this->basepathIsLocal = true; } else { $this->basepathIsLocal = false; } } function GetFullPath(&$path,$basepath='') { if (!$basepath) { $basepath = $this->basepath; } $path = str_replace("\\","/",$path); $path = preg_replace('/^\/\//','http://',$path); $regexp = '|^./|'; $path = preg_replace($regexp,'',$path); if(substr($path,0,1) == '#') { return; } if (stristr($path,"mailto:") !== false) { return; } if (strpos($path,"../") !== false ) { $backtrackamount = substr_count($path,"../"); $maxbacktrack = substr_count($basepath,"/") - 3; $filepath = str_replace("../",'',$path); $path = $basepath; if ($backtrackamount > $maxbacktrack) $backtrackamount = $maxbacktrack; for( $i = 0 ; $i < $backtrackamount + 1 ; $i++ ) $path = substr( $path, 0 , strrpos($path,"/") ); $path = $path . "/" . $filepath; } else if( strpos($path,":/") === false || strpos($path,":/") > 10) { if (substr($path,0,1) == "/") { $tr = parse_url($basepath); $root = $tr['scheme'].'://'.$tr['host']; $path = $root . $path; } else { $path = $basepath . $path; } } } function _get_file($path) { $contents = ''; $contents = @file_get_contents($path); if ($contents) { return $contents; } if ($this->basepathIsLocal) { $tr = parse_url($path); $lp=getenv("SCRIPT_NAME"); $ap=realpath($lp); $ap=str_replace("\\","/",$ap); $docroot=substr($ap,0,strpos($ap,$lp)); if ($tr['scheme'] && $tr['host'] && $_SERVER["DOCUMENT_ROOT"] ) { $localpath = $_SERVER["DOCUMENT_ROOT"] . $tr['path']; } else if ($docroot) { $localpath = $docroot . $tr['path']; } else { $localpath = $path; } $contents = @file_get_contents($localpath); } else if (!$contents && !ini_get('allow_url_fopen') && function_exists("curl_init")) { $ch = curl_init($path); curl_setopt($ch, CURLOPT_HEADER, 0); curl_setopt ( $ch , CURLOPT_RETURNTRANSFER , 1 ); $contents = curl_exec($ch); curl_close($ch); } return $contents; } function docPageNum($num = 0, $extras = false) { if ($num < 1) { $num = $this->page; } $type = '1'; $ppgno = $num; $suppress = 0; $offset = 0; $lastreset = 0; foreach($this->PageNumSubstitutions AS $psarr) { if ($num >= $psarr['from']) { if ($psarr['reset']) { if ($psarr['reset']>1) { $offset = $psarr['reset']-1; } $ppgno = $num - $psarr['from'] + 1 + $offset; $lastreset = $psarr['from']; } if ($psarr['type']) { $type = $psarr['type']; } if (strtoupper($psarr['suppress'])=='ON' || $psarr['suppress']==1) { $suppress = 1; } else if (strtoupper($psarr['suppress'])=='OFF') { $suppress = 0; } } } if ($suppress) { return ''; } foreach($this->pgsIns AS $k=>$v) { if ($k>$lastreset && $k<$num) { $ppgno -= $v; } } if ($type=='A') { $ppgno = $this->dec2alpha($ppgno,true); } else if ($type=='a') { $ppgno = $this->dec2alpha($ppgno,false);} else if ($type=='I') { $ppgno = $this->dec2roman($ppgno,true); } else if ($type=='i') { $ppgno = $this->dec2roman($ppgno,false); } if ($extras) { $ppgno = $this->pagenumPrefix . $ppgno . $this->pagenumSuffix; } return $ppgno; } function docPageSettings($num = 0) { if ($num < 1) { $num = $this->page; } $type = '1'; $ppgno = $num; $suppress = 0; $offset = 0; $reset = ''; foreach($this->PageNumSubstitutions AS $psarr) { if ($num >= $psarr['from']) { if ($psarr['reset']) { if ($psarr['reset']>1) { $offset = $psarr['reset']-1; } $ppgno = $num - $psarr['from'] + 1 + $offset; } if ($psarr['type']) { $type = $psarr['type']; } if (strtoupper($psarr['suppress'])=='ON' || $psarr['suppress']==1) { $suppress = 1; } else if (strtoupper($psarr['suppress'])=='OFF') { $suppress = 0; } } if ($num == $psarr['from']) { $reset = $psarr['reset']; } } if ($suppress) { $suppress = 'on'; } else { $suppress = 'off'; } return array($type, $suppress, $reset); } function docPageNumTotal($num = 0, $extras = false) { if ($num < 1) { $num = $this->page; } $type = '1'; $ppgstart = 1; $ppgend = count($this->pages)+1; $suppress = 0; $offset = 0; foreach($this->PageNumSubstitutions AS $psarr) { if ($num >= $psarr['from']) { if ($psarr['reset']) { if ($psarr['reset']>1) { $offset = $psarr['reset']-1; } $ppgstart = $psarr['from'] + $offset; $ppgend = count($this->pages)+1 + $offset; } if ($psarr['type']) { $type = $psarr['type']; } if (strtoupper($psarr['suppress'])=='ON' || $psarr['suppress']==1) { $suppress = 1; } else if (strtoupper($psarr['suppress'])=='OFF') { $suppress = 0; } } if ($num < $psarr['from']) { if ($psarr['reset']) { $ppgend = $psarr['from'] + $offset; break; } } } if ($suppress) { return ''; } $ppgno = $ppgend-$ppgstart+$offset; foreach($this->pgsIns AS $k => $v) { if ($k>$ppgstart && $k<$ppgend) { $ppgno -= $v; } } if ($extras) { $ppgno = $this->nbpgPrefix . $ppgno . $this->nbpgSuffix; } return $ppgno; } function RestartDocTemplate() { $this->docTemplateStart = $this->page; } function Header($content='') { $this->cMarginL = 0; $this->cMarginR = 0; if (($this->mirrorMargins && ($this->page%2==0) && $this->HTMLHeaderE) || ($this->mirrorMargins && ($this->page%2==1) && $this->HTMLHeader) || (!$this->mirrorMargins && $this->HTMLHeader)) { $this->writeHTMLHeaders(); return; } $this->processingHeader=true; $h = $this->headerDetails; if(count($h)) { if ($this->forcePortraitHeaders && $this->CurOrientation=='L' && $this->CurOrientation!=$this->DefOrientation) { $this->_out(sprintf('q 0 -1 1 0 0 %.3F cm ',($this->h*_MPDFK))); $yadj = $this->w - $this->h; $headerpgwidth = $this->h - $this->orig_lMargin - $this->orig_rMargin; if (($this->mirrorMargins) && (($this->page)%2==0)) { $headerlmargin = $this->orig_rMargin; } else { $headerlmargin = $this->orig_lMargin; } } else { $yadj = 0; $headerpgwidth = $this->pgwidth; $headerlmargin = $this->lMargin; } $this->y = $this->margin_header - $yadj ; $this->SetTColor($this->ConvertColor(0)); $this->SUP = false; $this->SUB = false; $this->bullet = false; $pgno = $this->docPageNum($this->page, true); if (($this->mirrorMargins) && (($this->page)%2==0)) { $side = 'even'; } else { $side = 'odd'; } $maxfontheight = 0; foreach(array('L','C','R') AS $pos) { if (isset($h[$side][$pos]['content']) && $h[$side][$pos]['content']) { if (isset($h[$side][$pos]['font-size']) && $h[$side][$pos]['font-size']) { $hfsz = $h[$side][$pos]['font-size']; } else { $hfsz = $this->default_font_size; } $maxfontheight = max($maxfontheight,$hfsz); } } foreach(array('L','C','R') AS $pos) { if (isset($h[$side][$pos]['content']) && $h[$side][$pos]['content']) { $hd = str_replace('{PAGENO}',$pgno,$h[$side][$pos]['content']); $hd = str_replace($this->aliasNbPgGp,$this->nbpgPrefix.$this->aliasNbPgGp.$this->nbpgSuffix,$hd); $hd = preg_replace('/\{DATE\s+(.*?)\}/e',"date('\\1')",$hd); if (isset($h[$side][$pos]['font-family']) && $h[$side][$pos]['font-family']) { $hff = $h[$side][$pos]['font-family']; } else { $hff = $this->original_default_font; } if (isset($h[$side][$pos]['font-size']) && $h[$side][$pos]['font-size']) { $hfsz = $h[$side][$pos]['font-size']; } else { $hfsz = $this->original_default_font_size; } $maxfontheight = max($maxfontheight,$hfsz); $hfst = ''; if (isset($h[$side][$pos]['font-style']) && $h[$side][$pos]['font-style']) { $hfst = $h[$side][$pos]['font-style']; } if (isset($h[$side][$pos]['color']) && $h[$side][$pos]['color']) { $hfcol = $h[$side][$pos]['color']; $cor = $this->ConvertColor($hfcol); if ($cor) { $this->SetTColor($cor); } } else { $hfcol = ''; } $this->SetFont($hff,$hfst,$hfsz,true,true); $this->x = $headerlmargin ; $this->y = $this->margin_header - $yadj ; $hd = $this->purify_utf8_text($hd); if ($this->text_input_as_HTML) { $hd = $this->all_entities_to_utf8($hd); } if ($this->usingCoreFont) { $hd = mb_convert_encoding($hd,$this->mb_enc,'UTF-8'); } $this->magic_reverse_dir($hd, true, $this->directionality); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($hd); $align = $pos; if ($this->directionality == 'rtl') { if ($pos == 'L') { $align = 'R'; } else if ($pos == 'R') { $align = 'L'; } } if ($pos!='L' && (strpos($hd,$this->aliasNbPg)!==false || strpos($hd,$this->aliasNbPgGp)!==false)) { if (strpos($hd,$this->aliasNbPgGp)!==false) { $type= 'nbpggp'; } else { $type= 'nbpg'; } $this->_out('{mpdfheader'.$type.' '.$pos.' ff='.$hff.' fs='.$hfst.' fz='.$hfsz.'}'); $this->Cell($headerpgwidth ,$maxfontheight/_MPDFK ,$hd,0,0,$align,0,'',0,0,0,'M'); $this->_out('Q'); } else { $this->Cell($headerpgwidth ,$maxfontheight/_MPDFK ,$hd,0,0,$align,0,'',0,0,0,'M'); } if ($hfcol) { $this->SetTColor($this->ConvertColor(0)); } } } $this->SetFont($this->default_font,'',$this->original_default_font_size); if (isset($h[$side]['line']) && $h[$side]['line']) { $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $this->Line($headerlmargin , $this->margin_header + ($maxfontheight*(1+$this->header_line_spacing)/_MPDFK) - $yadj , $headerlmargin + $headerpgwidth, $this->margin_header + ($maxfontheight*(1+$this->header_line_spacing)/_MPDFK) - $yadj ); } if ($this->forcePortraitHeaders && $this->CurOrientation=='L' && $this->CurOrientation!=$this->DefOrientation) { $this->_out('Q'); } } $this->SetY($this->tMargin); if ($this->ColActive) { $this->pgwidth = $this->ColWidth; } $this->processingHeader=false; } function TableHeaderFooter($content='',$tablestartpage='',$tablestartcolumn ='',$horf = 'H',$level, $firstSpread=true, $finalSpread=true) { if(($horf=='H' || $horf=='F') && !empty($content) && !empty($content[0])) { $table = &$this->table[1][1]; if ($horf=='H') { if ($table['borders_separate']) { $adv = $table['border_spacing_V']/2 + $table['border_details']['T']['w'] + $table['padding']['T']; } else { $adv = $table['max_cell_border_width']['T'] /2 ; } if ($adv) { if ($this->table_rotate) { $this->y += ($adv); } else { $this->DivLn($adv,$this->blklvl,true); } } } if ($horf=='F') { $firstrow = count($table['cells']) - $table['footernrows']; $lastrow = count($table['cells']) - 1; } else { $firstrow = 0; $lastrow = $table['headernrows'] - 1; } $topy = $content[$firstrow][0]['y']-$this->y; for ($i=$firstrow ; $i<=$lastrow; $i++) { $y = $this->y; if ($this->ColActive) { if ($this->blklvl > 0) { $firstblockfill = $this->GetFirstBlockFill(); if ($firstblockfill && $this->blklvl >= $firstblockfill) { $divh = $content[$i][0]['h']; $bak_x = $this->x; $this->DivLn($divh,-3,false); $bcor = $this->blk[$this->blklvl]['bgcolorarray']; $this->SetFColor($bcor); $this->x = $bak_x; } } } $colctr = 0; foreach($content[$i] as $tablehf) { $colctr++; $y = $tablehf['y'] - $topy; $this->y = $y; $x = $tablehf['x']; if (($this->mirrorMargins) && ($tablestartpage == 'ODD') && (($this->page)%2==0)) { $x = $x +$this->MarginCorrection; } else if (($this->mirrorMargins) && ($tablestartpage == 'EVEN') && (($this->page)%2==1)) { $x = $x +$this->MarginCorrection; } if ($this->ColActive) { if ($this->directionality == 'rtl') { $x -= ($this->CurrCol - $tablestartcolumn) * ($this->ColWidth+$this->ColGap); } else { $x += ($this->CurrCol - $tablestartcolumn) * ($this->ColWidth+$this->ColGap); } } if ($colctr==1) { $x0 = $x; } if ($this->iterationCounter) { foreach($tablehf['textbuffer'] AS $k=>$t) { if (!is_array($t[0]) && preg_match('/{iteration ([a-zA-Z0-9_]+)}/',$t[0], $m)) { $vname = '__'.$m[1].'_'; if (!isset($this->$vname)) { $this->$vname = 1; } else { $this->$vname++; } $tablehf['textbuffer'][$k][0] = preg_replace('/{iteration '.$m[1].'}/', $this->$vname, $tablehf['textbuffer'][$k][0]); } } } $w = $tablehf['w']; $h = $tablehf['h']; $va = $tablehf['va']; $R = $tablehf['R']; $mih = $tablehf['mih']; $border = $tablehf['border']; $border_details = $tablehf['border_details']; $padding = $tablehf['padding']; $this->tabletheadjustfinished = true; $textbuffer = $tablehf['textbuffer']; $align = $tablehf['a']; $this->divalign=$align; $this->x = $x; if ($this->ColActive) { if ($table['borders_separate']) { $tablefill = isset($table['bgcolor'][-1]) ? $table['bgcolor'][-1] : 0; if ($tablefill) { $color = $this->ConvertColor($tablefill); if ($color) { $xadj = ($table['border_spacing_H']/2); $yadj = ($table['border_spacing_V']/2); $wadj = $table['border_spacing_H']; $hadj = $table['border_spacing_V']; if ($i == $firstrow && $horf=='H') { $yadj += $table['padding']['T'] + $table['border_details']['T']['w'] ; $hadj += $table['padding']['T'] + $table['border_details']['T']['w'] ; } if (($i == ($lastrow) || (isset($tablehf['rowspan']) && ($i+$tablehf['rowspan']) == ($lastrow+1)) || (!isset($tablehf['rowspan']) && ($i+1) == ($lastrow+1))) && $horf=='F') { $hadj += $table['padding']['B'] + $table['border_details']['B']['w'] ; } if ($colctr == 1) { $xadj += $table['padding']['L'] + $table['border_details']['L']['w'] ; $wadj += $table['padding']['L'] + $table['border_details']['L']['w'] ; } if ($colctr == count($content[$i]) ) { $wadj += $table['padding']['R'] + $table['border_details']['R']['w'] ; } $this->SetFColor($color); $this->Rect($x - $xadj, $y - $yadj, $w + $wadj, $h + $hadj, 'F'); } } } } if ($table['empty_cells']!='hide' || !empty($textbuffer) || !$table['borders_separate']) { $paintcell = true; } else { $paintcell = false; } if ($R && INTVAL($R) > 0 && isset($va) && $va!='B') { $va='B';} if (!isset($va) || empty($va) || $va=='M') $this->y += ($h-$mih)/2; elseif (isset($va) && $va=='B') $this->y += $h-$mih; $fill = 0; if (isset($tablehf['bgcolor']) && $tablehf['bgcolor'] && $tablehf['bgcolor']!='transparent') { $fill = $tablehf['bgcolor']; $leveladj = 6; } else if (isset($content[$i][0]['trbgcolor']) && $content[$i][0]['trbgcolor'] && $content[$i][0]['trbgcolor']!='transparent') { $fill = $content[$i][0]['trbgcolor']; $leveladj = 3; } if ($fill && $paintcell) { $color = $this->ConvertColor($fill); if ($color) { if ($table['borders_separate']) { if ($this->ColActive) { $this->SetFColor($color); $this->Rect($x+ ($table['border_spacing_H']/2), $y+ ($table['border_spacing_V']/2), $w- $table['border_spacing_H'], $h- $table['border_spacing_V'], 'F'); } else { $this->tableBackgrounds[$level*9+$leveladj][] = array('gradient'=>false, 'x'=>($x + ($table['border_spacing_H']/2)), 'y'=>($y + ($table['border_spacing_V']/2)), 'w'=>($w - $table['border_spacing_H']), 'h'=>($h - $table['border_spacing_V']), 'col'=>$color); } } else { if ($this->ColActive) { $this->SetFColor($color); $this->Rect($x, $y, $w, $h, 'F'); } else { $this->tableBackgrounds[$level*9+$leveladj][] = array('gradient'=>false, 'x'=>$x, 'y'=>$y, 'w'=>$w, 'h'=>$h, 'col'=>$color); } } } } if (isset($tablehf['gradient']) && $tablehf['gradient'] && $paintcell){ $g = $this->grad->parseBackgroundGradient($tablehf['gradient']); if ($g) { if ($table['borders_separate']) { $px = $x+ ($table['border_spacing_H']/2); $py = $y+ ($table['border_spacing_V']/2); $pw = $w- $table['border_spacing_H']; $ph = $h- $table['border_spacing_V']; } else { $px = $x; $py = $y; $pw = $w; $ph = $h; } if ($this->ColActive) { $this->grad->Gradient($px, $py, $pw, $ph, $g['type'], $g['stops'], $g['colorspace'], $g['coords'], $g['extend']); } else { $this->tableBackgrounds[$level*9+7][] = array('gradient'=>true, 'x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } if (isset($tablehf['background-image']) && $paintcell){ if ($tablehf['background-image']['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $tablehf['background-image']['gradient'] )) { $g = $this->grad->parseMozGradient( $tablehf['background-image']['gradient'] ); if ($g) { if ($table['borders_separate']) { $px = $x+ ($table['border_spacing_H']/2); $py = $y+ ($table['border_spacing_V']/2); $pw = $w- $table['border_spacing_H']; $ph = $h- $table['border_spacing_V']; } else { $px = $x; $py = $y; $pw = $w; $ph = $h; } if ($this->ColActive) { $this->grad->Gradient($px, $py, $pw, $ph, $g['type'], $g['stops'], $g['colorspace'], $g['coords'], $g['extend']); } else { $this->tableBackgrounds[$level*9+7][] = array('gradient'=>true, 'x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } else if ($tablehf['background-image']['image_id']) { $n = count($this->patterns)+1; if ($table['borders_separate']) { $px = $x+ ($table['border_spacing_H']/2); $py = $y+ ($table['border_spacing_V']/2); $pw = $w- $table['border_spacing_H']; $ph = $h- $table['border_spacing_V']; } else { $px = $x; $py = $y; $pw = $w; $ph = $h; } if ($this->ColActive) { list($orig_w, $orig_h, $x_repeat, $y_repeat) = $this->_resizeBackgroundImage($tablehf['background-image']['orig_w'], $tablehf['background-image']['orig_h'], $pw, $ph, $tablehf['background-image']['resize'], $tablehf['background-image']['x_repeat'] , $tablehf['background-image']['y_repeat']); $this->patterns[$n] = array('x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'pgh'=>$this->h, 'image_id'=>$tablehf['background-image']['image_id'], 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$tablehf['background-image']['x_pos'] , 'y_pos'=>$tablehf['background-image']['y_pos'] , 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'itype'=>$tablehf['background-image']['itype']); if ($tablehf['background-image']['opacity']>0 && $tablehf['background-image']['opacity']<1) { $opac = $this->SetAlpha($tablehf['background-image']['opacity'],'Normal',true); } else { $opac = ''; } $this->_out(sprintf('q /Pattern cs /P%d scn %s %.3F %.3F %.3F %.3F re f Q', $n, $opac, $px*_MPDFK, ($this->h-$py)*_MPDFK, $pw*_MPDFK, -$ph*_MPDFK)); } else { $this->tableBackgrounds[$level*9+8][] = array('x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'image_id'=>$tablehf['background-image']['image_id'], 'orig_w'=>$tablehf['background-image']['orig_w'], 'orig_h'=>$tablehf['background-image']['orig_h'], 'x_pos'=>$tablehf['background-image']['x_pos'], 'y_pos'=>$tablehf['background-image']['y_pos'], 'x_repeat'=>$tablehf['background-image']['x_repeat'], 'y_repeat'=>$tablehf['background-image']['y_repeat'], 'clippath'=>'', 'resize'=>$tablehf['background-image']['resize'], 'opacity'=>$tablehf['background-image']['opacity'], 'itype'=>$tablehf['background-image']['itype']); } } } if ($table['borders_separate'] && $paintcell && $border) { $this->_tableRect($x+ ($table['border_spacing_H']/2)+($border_details['L']['w'] /2), $y+ ($table['border_spacing_V']/2)+($border_details['T']['w'] /2), $w-$table['border_spacing_H']-($border_details['L']['w'] /2)-($border_details['R']['w'] /2), $h- $table['border_spacing_V']-($border_details['T']['w'] /2)-($border_details['B']['w']/2), $border, $border_details, false, $table['borders_separate']); } else if ($paintcell && $border) { $this->_tableRect($x, $y, $w, $h, $border, $border_details, true, $table['borders_separate']); } if (!empty($textbuffer)) { if ($horf=='F' && preg_match('/{colsum([0-9]*)[_]*}/', $textbuffer[0][0], $m)) { $rep = sprintf("%01.".intval($m[1])."f", $this->colsums[$colctr-1]); $textbuffer[0][0] = preg_replace('/{colsum[0-9_]*}/', $rep ,$textbuffer[0][0]); } if ($R) { $cellPtSize = $textbuffer[0][11] / $this->shrin_k; if (!$cellPtSize) { $cellPtSize = $this->default_font_size; } $cellFontHeight = ($cellPtSize/_MPDFK); $opx = $this->x; $opy = $this->y; $angle = INTVAL($R); if ($angle > 90) { $angle = 90; } else if ($angle > 0 && (isset($va) && $va!='B')) { $angle = 90; } else if ($angle > 0 && $angle <45) { $angle = 45; } else if ($angle < 0) { $angle = -90; } $offset = ((sin(deg2rad($angle))) * 0.37 * $cellFontHeight); if (isset($align) && $align =='R') { $this->x += ($w) + ($offset) - ($cellFontHeight/3) - ($padding['R'] + $border_details['R']['w']); } else if (!isset($align ) || $align =='C') { $this->x += ($w/2) + ($offset); } else { $this->x += ($offset) + ($cellFontHeight/3)+($padding['L'] + $border_details['L']['w']); } $str = ''; foreach($tablehf['textbuffer'] AS $t) { $str .= $t[0].' '; } $str = trim($str); if (!isset($va) || $va=='M') { $this->y -= ($h-$mih)/2; if ($angle > 0) { $this->y += (($h-$mih)/2)+($padding['T'] + $border_details['T']['w']) + ($mih-($padding['T'] + $border_details['T']['w']+$border_details['B']['w']+$padding['B'])); } else if ($angle < 0) { $this->y += (($h-$mih)/2)+($padding['T'] + $border_details['T']['w']); } } else if (isset($va) && $va=='B') { $this->y -= $h-$mih; if ($angle > 0) { $this->y += $h-($border_details['B']['w']+$padding['B']); } else if ($angle < 0) { $this->y += $h-$mih+($padding['T'] + $border_details['T']['w']); } } else if (isset($va) && $va=='T') { if ($angle > 0) { $this->y += $mih-($border_details['B']['w']+$padding['B']); } else if ($angle < 0) { $this->y += ($padding['T'] + $border_details['T']['w']); } } $this->Rotate($angle,$this->x,$this->y); $s_fs = $this->FontSizePt; $s_f = $this->FontFamily; $s_st = $this->FontStyle; if (!empty($textbuffer[0][3])) { $cor = $textbuffer[0][3]; $this->SetTColor($cor); } $s_str = $this->strike; $this->strike = $textbuffer[0][8]; $this->SetFont($textbuffer[0][4],$textbuffer[0][2],$cellPtSize,true,true); $this->Text($this->x,$this->y,$str); $this->Rotate(0); $this->SetFont($s_f,$s_st,$s_fs,true,true); $this->SetTColor(0); $this->strike = $s_str; $this->x = $opx; $this->y = $opy; } else { if ($table['borders_separate']) { $xadj = $border_details['L']['w'] + $padding['L'] +($table['border_spacing_H']/2); $wadj = $border_details['L']['w'] + $border_details['R']['w'] + $padding['L'] +$padding['R'] + $table['border_spacing_H']; $yadj = $border_details['T']['w'] + $padding['T'] + ($table['border_spacing_H']/2); } else { $xadj = $border_details['L']['w']/2 + $padding['L']; $wadj = ($border_details['L']['w'] + $border_details['R']['w'])/2 + $padding['L'] + $padding['R']; $yadj = $border_details['T']['w']/2 + $padding['T']; } $this->divwidth=$w-($wadj); $this->x += $xadj; $this->y += $yadj; $this->printbuffer($textbuffer,'',true); } } $textbuffer = array(); if (!$this->ColActive) { if (isset($content[$i][0]['trgradients']) && ($colctr==1 || $table['borders_separate'])) { $g = $this->grad->parseBackgroundGradient($content[$i][0]['trgradients']); if ($g) { $gx = $x0; $gy = $y; $gh = $h; $gw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; if ($table['borders_separate']) { $gw -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['padding']['R'] + $table['border_details']['R']['w'] + $table['border_spacing_H']); $s = ''; $clx = $x+ ($table['border_spacing_H']/2); $cly = $y+ ($table['border_spacing_V']/2); $clw = $w- $table['border_spacing_H']; $clh = $h- $table['border_spacing_V']; $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= ' W n '; $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx + ($table['border_spacing_H']/2), 'y'=>$gy + ($table['border_spacing_V']/2), 'w'=>$gw - $table['border_spacing_V'], 'h'=>$gh - $table['border_spacing_H'], 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>$s); } else { $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx, 'y'=>$gy, 'w'=>$gw, 'h'=>$gh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } if (isset($content[$i][0]['trbackground-images']) && ($colctr==1 || $table['borders_separate'])) { if ($content[$i][0]['trbackground-images']['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $content[$i][0]['trbackground-images']['gradient'] )) { $g = $this->grad->parseMozGradient( $content[$i][0]['trbackground-images']['gradient'] ); if ($g) { $gx = $x0; $gy = $y; $gh = $h; $gw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; if ($table['borders_separate']) { $gw -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['padding']['R'] + $table['border_details']['R']['w'] + $table['border_spacing_H']); $s = ''; $clx = $x+ ($table['border_spacing_H']/2); $cly = $y+ ($table['border_spacing_V']/2); $clw = $w- $table['border_spacing_H']; $clh = $h- $table['border_spacing_V']; $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= ' W n '; $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx + ($table['border_spacing_H']/2), 'y'=>$gy + ($table['border_spacing_V']/2), 'w'=>$gw - $table['border_spacing_V'], 'h'=>$gh - $table['border_spacing_H'], 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>$s); } else { $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx, 'y'=>$gy, 'w'=>$gw, 'h'=>$gh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } else { $image_id = $content[$i][0]['trbackground-images']['image_id']; $orig_w = $content[$i][0]['trbackground-images']['orig_w']; $orig_h = $content[$i][0]['trbackground-images']['orig_h']; $x_pos = $content[$i][0]['trbackground-images']['x_pos']; $y_pos = $content[$i][0]['trbackground-images']['y_pos']; $x_repeat = $content[$i][0]['trbackground-images']['x_repeat']; $y_repeat = $content[$i][0]['trbackground-images']['y_repeat']; $resize = $content[$i][0]['trbackground-images']['resize']; $opacity = $content[$i][0]['trbackground-images']['opacity']; $itype = $content[$i][0]['trbackground-images']['itype']; $clippath = ''; $gx = $x0; $gy = $y; $gh = $h; $gw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; if ($table['borders_separate']) { $gw -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['padding']['R'] + $table['border_details']['R']['w'] + $table['border_spacing_H']); $s = ''; $clx = $x+ ($table['border_spacing_H']/2); $cly = $y+ ($table['border_spacing_V']/2); $clw = $w- $table['border_spacing_H']; $clh = $h- $table['border_spacing_V']; $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= ' W n '; $this->tableBackgrounds[$level*9+5][] = array('x'=>$gx + ($table['border_spacing_H']/2), 'y'=>$gy + ($table['border_spacing_V']/2), 'w'=>$gw - $table['border_spacing_V'], 'h'=>$gh - $table['border_spacing_H'], 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>$s, 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } else { $this->tableBackgrounds[$level*9+5][] = array('x'=>$gx, 'y'=>$gy, 'w'=>$gw, 'h'=>$gh, 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>'', 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } } } } if (($table['borders_separate'] || ($this->simpleTables && !$table['simple']['border'])) && $table['border']) { $halfspaceL = $table['padding']['L'] + ($table['border_spacing_H']/2); $halfspaceR = $table['padding']['R'] + ($table['border_spacing_H']/2); $halfspaceT = $table['padding']['T'] + ($table['border_spacing_V']/2); $halfspaceB = $table['padding']['B'] + ($table['border_spacing_V']/2); $tbx = $x; $tby = $y; $tbw = $w; $tbh = $h; $tab_bord = 0; $corner = ''; if ($i == $firstrow && $horf=='H') { $tby -= $halfspaceT + ($table['border_details']['T']['w']/2); $tbh += $halfspaceT + ($table['border_details']['T']['w']/2); $this->setBorder($tab_bord , _BORDER_TOP); $corner .= 'T'; } if (($i == ($lastrow) || (isset($tablehf['rowspan']) && ($i+$tablehf['rowspan']) == ($lastrow+1))) && $horf=='F') { $tbh += $halfspaceB + ($table['border_details']['B']['w']/2); $this->setBorder($tab_bord , _BORDER_BOTTOM); $corner .= 'B'; } if ($colctr == 1 && $firstSpread) { $tbx -= $halfspaceL + ($table['border_details']['L']['w']/2); $tbw += $halfspaceL + ($table['border_details']['L']['w']/2); $this->setBorder($tab_bord , _BORDER_LEFT); $corner .= 'L'; } if ($colctr == count($content[$i]) && $finalSpread) { $tbw += $halfspaceR + ($table['border_details']['R']['w']/2); $this->setBorder($tab_bord , _BORDER_RIGHT); $corner .= 'R'; } $this->_tableRect($tbx, $tby, $tbw, $tbh, $tab_bord , $table['border_details'], false, $table['borders_separate'], 'table', $corner, $table['border_spacing_V'], $table['border_spacing_H'] ); } } $this->y = $y + $h; } unset($table ); $this->colsums = array(); } } function SetHTMLHeader($header='',$OE='',$write=false) { $height = 0; if (is_array($header) && isset($header['html']) && $header['html']) { $Hhtml = $header['html']; if ($this->setAutoTopMargin) { if (isset($header['h'])) { $height = $header['h']; } else { $height = $this->_gethtmlheight($Hhtml); } } } else if (!is_array($header) && $header) { $Hhtml = $header; if ($this->setAutoTopMargin) { $height = $this->_gethtmlheight($Hhtml); } } else { $Hhtml = ''; } if ($OE != 'E') { $OE = 'O'; } if ($OE == 'E') { if ($Hhtml) { $this->HTMLHeaderE['html'] = $Hhtml; $this->HTMLHeaderE['h'] = $height; } else { $this->HTMLHeaderE = ''; } } else { if ($Hhtml) { $this->HTMLHeader['html'] = $Hhtml; $this->HTMLHeader['h'] = $height; } else { $this->HTMLHeader = ''; } } if (!$this->mirrorMargins && $OE == 'E') { return; } if ($Hhtml=='') { return; } if ($OE == 'E') { $this->headerDetails['even'] = array(); } else { $this->headerDetails['odd'] = array(); } if ($this->setAutoTopMargin=='pad') { $this->tMargin = $this->margin_header + $height + $this->orig_tMargin; if (isset($this->saveHTMLHeader[$this->page][$OE]['mt'])) { $this->saveHTMLHeader[$this->page][$OE]['mt'] = $this->tMargin; } } else if ($this->setAutoTopMargin=='stretch') { $this->tMargin = max($this->orig_tMargin, $this->margin_header + $height + $this->autoMarginPadding); if (isset($this->saveHTMLHeader[$this->page][$OE]['mt'])) { $this->saveHTMLHeader[$this->page][$OE]['mt'] = $this->tMargin; } } if ($write && $this->state!=0 && (($this->mirrorMargins && $OE == 'E' && ($this->page)%2==0) || ($this->mirrorMargins && $OE != 'E' && ($this->page)%2==1) || !$this->mirrorMargins)) { $this->writeHTMLHeaders(); } } function SetHTMLFooter($footer='',$OE='') { $height = 0; if (is_array($footer) && isset($footer['html']) && $footer['html']) { $Fhtml = $footer['html']; if ($this->setAutoBottomMargin) { if (isset($footer['h'])) { $height = $footer['h']; } else { $height = $this->_gethtmlheight($Fhtml); } } } else if (!is_array($footer) && $footer) { $Fhtml = $footer; if ($this->setAutoBottomMargin) { $height = $this->_gethtmlheight($Fhtml); } } else { $Fhtml = ''; } if ($OE != 'E') { $OE = 'O'; } if ($OE == 'E') { if ($Fhtml) { $this->HTMLFooterE['html'] = $Fhtml; $this->HTMLFooterE['h'] = $height; } else { $this->HTMLFooterE = ''; } } else { if ($Fhtml) { $this->HTMLFooter['html'] = $Fhtml; $this->HTMLFooter['h'] = $height; } else { $this->HTMLFooter = ''; } } if (!$this->mirrorMargins && $OE == 'E') { return; } if ($Fhtml=='') { return false; } if ($OE == 'E') { $this->footerDetails['even'] = array(); } else { $this->footerDetails['odd'] = array(); } if ($this->setAutoBottomMargin=='pad') { $this->bMargin = $this->margin_footer + $height + $this->orig_bMargin; $this->PageBreakTrigger=$this->h-$this->bMargin ; if (isset($this->saveHTMLHeader[$this->page][$OE]['mb'])) { $this->saveHTMLHeader[$this->page][$OE]['mb'] = $this->bMargin; } } else if ($this->setAutoBottomMargin=='stretch') { $this->bMargin = max($this->orig_bMargin, $this->margin_footer + $height + $this->autoMarginPadding); $this->PageBreakTrigger=$this->h-$this->bMargin ; if (isset($this->saveHTMLHeader[$this->page][$OE]['mb'])) { $this->saveHTMLHeader[$this->page][$OE]['mb'] = $this->bMargin; } } } function _getHtmlHeight($html) { $save_state = $this->state; if($this->state==0) { $this->AddPage($this->CurOrientation); } $this->state = 2; $this->Reset(); $this->pageoutput[$this->page] = array(); $save_x = $this->x; $save_y = $this->y; $this->x = $this->lMargin; $this->y = $this->margin_header; $html = str_replace('{PAGENO}',$this->pagenumPrefix.$this->docPageNum($this->page).$this->pagenumSuffix,$html); $html = str_replace($this->aliasNbPgGp,$this->nbpgPrefix.$this->docPageNumTotal($this->page).$this->nbpgSuffix,$html ); $html = str_replace($this->aliasNbPg,$this->page,$html ); $html = preg_replace('/\{DATE\s+(.*?)\}/e',"date('\\1')",$html ); $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $savepb = $this->pageBackgrounds; $this->writingHTMLheader = true; $this->WriteHTML($html , 4); $this->writingHTMLheader = false; $h = ($this->y - $this->margin_header); $this->Reset(); $this->pageoutput[$this->page] = array(); $this->headerbuffer = ''; $this->pageBackgrounds = $savepb; $this->x = $save_x; $this->y = $save_y; $this->state = $save_state; if($save_state==0) { unset($this->pages[1]); $this->page = 0; } return $h; } function writeHTMLHeaders() { if ($this->mirrorMargins && ($this->page)%2==0) { $OE = 'E'; } else { $OE = 'O'; } if ($OE == 'E') { $this->saveHTMLHeader[$this->page][$OE]['html'] = $this->HTMLHeaderE['html'] ; } else { $this->saveHTMLHeader[$this->page][$OE]['html'] = $this->HTMLHeader['html'] ; } if ($this->forcePortraitHeaders && $this->CurOrientation=='L' && $this->CurOrientation!=$this->DefOrientation) { $this->saveHTMLHeader[$this->page][$OE]['rotate'] = true; $this->saveHTMLHeader[$this->page][$OE]['ml'] = $this->tMargin; $this->saveHTMLHeader[$this->page][$OE]['mr'] = $this->bMargin; $this->saveHTMLHeader[$this->page][$OE]['mh'] = $this->margin_header; $this->saveHTMLHeader[$this->page][$OE]['mf'] = $this->margin_footer; $this->saveHTMLHeader[$this->page][$OE]['pw'] = $this->h; $this->saveHTMLHeader[$this->page][$OE]['ph'] = $this->w; } else { $this->saveHTMLHeader[$this->page][$OE]['ml'] = $this->lMargin; $this->saveHTMLHeader[$this->page][$OE]['mr'] = $this->rMargin; $this->saveHTMLHeader[$this->page][$OE]['mh'] = $this->margin_header; $this->saveHTMLHeader[$this->page][$OE]['mf'] = $this->margin_footer; $this->saveHTMLHeader[$this->page][$OE]['pw'] = $this->w; $this->saveHTMLHeader[$this->page][$OE]['ph'] = $this->h; } } function writeHTMLFooters() { if ($this->mirrorMargins && ($this->page)%2==0) { $OE = 'E'; } else { $OE = 'O'; } if ($OE == 'E') { $this->saveHTMLFooter[$this->page][$OE]['html'] = $this->HTMLFooterE['html'] ; } else { $this->saveHTMLFooter[$this->page][$OE]['html'] = $this->HTMLFooter['html'] ; } if ($this->forcePortraitHeaders && $this->CurOrientation=='L' && $this->CurOrientation!=$this->DefOrientation) { $this->saveHTMLFooter[$this->page][$OE]['rotate'] = true; $this->saveHTMLFooter[$this->page][$OE]['ml'] = $this->tMargin; $this->saveHTMLFooter[$this->page][$OE]['mr'] = $this->bMargin; $this->saveHTMLFooter[$this->page][$OE]['mt'] = $this->rMargin; $this->saveHTMLFooter[$this->page][$OE]['mb'] = $this->lMargin; $this->saveHTMLFooter[$this->page][$OE]['mh'] = $this->margin_header; $this->saveHTMLFooter[$this->page][$OE]['mf'] = $this->margin_footer; $this->saveHTMLFooter[$this->page][$OE]['pw'] = $this->h; $this->saveHTMLFooter[$this->page][$OE]['ph'] = $this->w; } else { $this->saveHTMLFooter[$this->page][$OE]['ml'] = $this->lMargin; $this->saveHTMLFooter[$this->page][$OE]['mr'] = $this->rMargin; $this->saveHTMLFooter[$this->page][$OE]['mt'] = $this->tMargin; $this->saveHTMLFooter[$this->page][$OE]['mb'] = $this->bMargin; $this->saveHTMLFooter[$this->page][$OE]['mh'] = $this->margin_header; $this->saveHTMLFooter[$this->page][$OE]['mf'] = $this->margin_footer; $this->saveHTMLFooter[$this->page][$OE]['pw'] = $this->w; $this->saveHTMLFooter[$this->page][$OE]['ph'] = $this->h; } } function DefHeaderByName($name,$arr) { if (!$name) { $name = '_default'; } $this->pageheaders[$name] = $arr; } function DefFooterByName($name,$arr) { if (!$name) { $name = '_default'; } $this->pagefooters[$name] = $arr; } function SetHeaderByName($name,$side='O',$write=false) { if (!$name) { $name = '_default'; } if ($side=='E') { $this->headerDetails['even'] = $this->pageheaders[$name]; } else { $this->headerDetails['odd'] = $this->pageheaders[$name]; } if ($write) { $this->Header(); } } function SetFooterByName($name,$side='O') { if (!$name) { $name = '_default'; } if ($side=='E') { $this->footerDetails['even'] = $this->pagefooters[$name]; } else { $this->footerDetails['odd'] = $this->pagefooters[$name]; } } function DefHTMLHeaderByName($name,$html) { if (!$name) { $name = '_default'; } $this->pageHTMLheaders[$name]['html'] = $html; $this->pageHTMLheaders[$name]['h'] = $this->_gethtmlheight($html); } function DefHTMLFooterByName($name,$html) { if (!$name) { $name = '_default'; } $this->pageHTMLfooters[$name]['html'] = $html; $this->pageHTMLfooters[$name]['h'] = $this->_gethtmlheight($html); } function SetHTMLHeaderByName($name,$side='O',$write=false) { if (!$name) { $name = '_default'; } $this->SetHTMLHeader($this->pageHTMLheaders[$name],$side,$write); } function SetHTMLFooterByName($name,$side='O') { if (!$name) { $name = '_default'; } $this->SetHTMLFooter($this->pageHTMLfooters[$name],$side,$write); } function SetHeader($Harray=array(),$side='',$write=false) { if (is_string($Harray)) { if (strlen($Harray)==0) { if ($side=='O') { $this->headerDetails['odd'] = array(); } else if ($side=='E') { $this->headerDetails['even'] = array(); } else { $this->headerDetails = array(); } } else if (strpos($Harray,'|') || strpos($Harray,'|')===0) { $hdet = explode('|',$Harray); $this->headerDetails = array ( 'odd' => array ( 'L' => array ('content' => $hdet[0], 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'C' => array ('content' => $hdet[1], 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'R' => array ('content' => $hdet[2], 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'line' => $this->defaultheaderline, ), 'even' => array ( 'R' => array ('content' => $hdet[0], 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'C' => array ('content' => $hdet[1], 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'L' => array ('content' => $hdet[2], 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'line' => $this->defaultheaderline, ) ); } else { $this->headerDetails = array ( 'odd' => array ( 'R' => array ('content' => $Harray, 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'line' => $this->defaultheaderline, ), 'even' => array ( 'L' => array ('content' => $Harray, 'font-size' => $this->defaultheaderfontsize, 'font-style' => $this->defaultheaderfontstyle), 'line' => $this->defaultheaderline, ) ); } } else if (is_array($Harray)) { if ($side=='O') { $this->headerDetails['odd'] = $Harray; } else if ($side=='E') { $this->headerDetails['even'] = $Harray; } else { $this->headerDetails = $Harray; } } if ($side=='E') { $this->SetHTMLHeader('','E'); } else if ($side=='O') { $this->SetHTMLHeader(''); } else { $this->SetHTMLHeader(''); $this->SetHTMLHeader('','E'); } if ($write) { $save_y = $this->y; $this->Header(); $this->SetY($save_y) ; } } function SetFooter($Farray=array(),$side='') { if (is_string($Farray)) { if (strlen($Farray)==0) { if ($side=='O') { $this->footerDetails['odd'] = array(); } else if ($side=='E') { $this->footerDetails['even'] = array(); } else { $this->footerDetails = array(); } } else if (strpos($Farray,'|') || strpos($Farray,'|')===0) { $fdet = explode('|',$Farray); $this->footerDetails = array ( 'odd' => array ( 'L' => array ('content' => $fdet[0], 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'C' => array ('content' => $fdet[1], 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'R' => array ('content' => $fdet[2], 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'line' => $this->defaultfooterline, ), 'even' => array ( 'R' => array ('content' => $fdet[0], 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'C' => array ('content' => $fdet[1], 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'L' => array ('content' => $fdet[2], 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'line' => $this->defaultfooterline, ) ); } else { $this->footerDetails = array ( 'odd' => array ( 'R' => array ('content' => $Farray, 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'line' => $this->defaultfooterline, ), 'even' => array ( 'L' => array ('content' => $Farray, 'font-size' => $this->defaultfooterfontsize, 'font-style' => $this->defaultfooterfontstyle), 'line' => $this->defaultfooterline, ) ); } } else if (is_array($Farray)) { if ($side=='O') { $this->footerDetails['odd'] = $Farray; } else if ($side=='E') { $this->footerDetails['even'] = $Farray; } else { $this->footerDetails = $Farray; } } if ($side=='E') { $this->SetHTMLFooter('','E'); } else if ($side=='O') { $this->SetHTMLFooter(''); } else { $this->SetHTMLFooter(''); $this->SetHTMLFooter('','E'); } } function setUnvalidatedText($txt='', $alpha=-1) { if ($alpha>=0) $this->watermarkTextAlpha = $alpha; $this->watermarkText = $txt; } function SetWatermarkText($txt='', $alpha=-1) { if ($alpha>=0) $this->watermarkTextAlpha = $alpha; $this->watermarkText = $txt; } function SetWatermarkImage($src, $alpha=-1, $size='D', $pos='F') { if ($alpha>=0) $this->watermarkImageAlpha = $alpha; $this->watermarkImage = $src; $this->watermark_size = $size; $this->watermark_pos = $pos; } function Footer() { if ($this->show_marks == 'CROP' || $this->show_marks == 'CROPCROSS') { $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $l = $this->cropMarkLength; $m = $this->cropMarkMargin; $b = $this->nonPrintMargin; $ax1 = $b; $bx = $this->page_box['outer_width_LR'] - $m; $ax = max($ax1, $bx-$l); $cx1 = $this->w - $b; $dx = $this->w - $this->page_box['outer_width_LR'] + $m; $cx = min($cx1, $dx+$l); $ay1 = $b; $by = $this->page_box['outer_width_TB'] - $m; $ay = max($ay1, $by-$l); $cy1 = $this->h - $b; $dy = $this->h - $this->page_box['outer_width_TB'] + $m; $cy = min($cy1, $dy+$l); $this->Line($ax, $this->page_box['outer_width_TB'], $bx, $this->page_box['outer_width_TB']); $this->Line($cx, $this->page_box['outer_width_TB'], $dx, $this->page_box['outer_width_TB']); $this->Line($ax, $this->h - $this->page_box['outer_width_TB'], $bx, $this->h - $this->page_box['outer_width_TB']); $this->Line($cx, $this->h - $this->page_box['outer_width_TB'], $dx, $this->h - $this->page_box['outer_width_TB']); $this->Line($this->page_box['outer_width_LR'], $ay, $this->page_box['outer_width_LR'], $by); $this->Line($this->page_box['outer_width_LR'], $cy, $this->page_box['outer_width_LR'], $dy); $this->Line($this->w - $this->page_box['outer_width_LR'], $ay, $this->w - $this->page_box['outer_width_LR'], $by); $this->Line($this->w - $this->page_box['outer_width_LR'], $cy, $this->w - $this->page_box['outer_width_LR'], $dy); if ($this->printers_info) { $hd = date('Y-m-d H:i').'  Page '.$this->page.' of {nb}'; $this->SetTColor($this->ConvertColor(0)); $this->SetFont('arial','',7.5,true,true); $this->x = $this->page_box['outer_width_LR'] + 1.5; $this->y = 1; $this->Cell($headerpgwidth ,$this->FontSize,$hd,0,0,'L',0,'',0,0,0,'M'); $this->SetFont($this->default_font,'',$this->original_default_font_size); } } if ($this->show_marks == 'CROSS' || $this->show_marks == 'CROPCROSS') { $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $l = 14 /2; $w = 6 /2; $r = 1.2; $m = $this->crossMarkMargin; $x1 = $this->page_box['outer_width_LR'] - $m; $x2 = $this->w - $this->page_box['outer_width_LR'] + $m; $y1 = $this->page_box['outer_width_TB'] - $m; $y2 = $this->h - $this->page_box['outer_width_TB'] + $m; $this->Circle($x1, $this->h/2, $r, 'S') ; $this->Line($x1-$w, $this->h/2, $x1+$w, $this->h/2); $this->Line($x1, $this->h/2-$l, $x1, $this->h/2+$l); $this->Circle($x2, $this->h/2, $r, 'S') ; $this->Line($x2-$w, $this->h/2, $x2+$w, $this->h/2); $this->Line($x2, $this->h/2-$l, $x2, $this->h/2+$l); $this->Circle($this->w/2, $y1, $r, 'S') ; $this->Line($this->w/2, $y1-$w, $this->w/2, $y1+$w); $this->Line($this->w/2-$l, $y1, $this->w/2+$l, $y1); $this->Circle($this->w/2, $y2, $r, 'S') ; $this->Line($this->w/2, $y2-$w, $this->w/2, $y2+$w); $this->Line($this->w/2-$l, $y2, $this->w/2+$l, $y2); } if ($this->page==1) { if ($this->firstPageBoxHeader) { $this->headerDetails['odd'] = $this->pageheaders[$this->firstPageBoxHeader]; $this->Header(); } if ($this->firstPageBoxFooter) { $this->footerDetails['odd'] = $this->pagefooters[$this->firstPageBoxFooter]; } $this->firstPageBoxHeader=''; $this->firstPageBoxFooter=''; } if (($this->mirrorMargins && ($this->page%2==0) && $this->HTMLFooterE) || ($this->mirrorMargins && ($this->page%2==1) && $this->HTMLFooter) || (!$this->mirrorMargins && $this->HTMLFooter)) { $this->writeHTMLFooters(); if (($this->watermarkText) && ($this->showWatermarkText)) { $this->watermark( $this->watermarkText, 45, 120, $this->watermarkTextAlpha); } if (($this->watermarkImage) && ($this->showWatermarkImage)) { $this->watermarkImg( $this->watermarkImage, $this->watermarkImageAlpha); } return; } $this->processingHeader=true; $this->ResetMargins(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; if (($this->watermarkText) && ($this->showWatermarkText)) { $this->watermark( $this->watermarkText, 45, 120, $this->watermarkTextAlpha); } if (($this->watermarkImage) && ($this->showWatermarkImage)) { $this->watermarkImg( $this->watermarkImage, $this->watermarkImageAlpha); } $h = $this->footerDetails; if(count($h)) { if ($this->forcePortraitHeaders && $this->CurOrientation=='L' && $this->CurOrientation!=$this->DefOrientation) { $this->_out(sprintf('q 0 -1 1 0 0 %.3F cm ',($this->h*_MPDFK))); $headerpgwidth = $this->h - $this->orig_lMargin - $this->orig_rMargin; if (($this->mirrorMargins) && (($this->page)%2==0)) { $headerlmargin = $this->orig_rMargin; } else { $headerlmargin = $this->orig_lMargin; } } else { $yadj = 0; $headerpgwidth = $this->pgwidth; $headerlmargin = $this->lMargin; } $this->SetY(-$this->margin_footer); $this->SetTColor($this->ConvertColor(0)); $this->SUP = false; $this->SUB = false; $this->bullet = false; $pgno = $this->docPageNum($this->page, true); if (($this->mirrorMargins) && (($this->page)%2==0)) { $side = 'even'; } else { $side = 'odd'; } $maxfontheight = 0; foreach(array('L','C','R') AS $pos) { if (isset($h[$side][$pos]['content']) && $h[$side][$pos]['content']) { if (isset($h[$side][$pos]['font-size']) && $h[$side][$pos]['font-size']) { $hfsz = $h[$side][$pos]['font-size']; } else { $hfsz = $this->default_font_size; } $maxfontheight = max($maxfontheight,$hfsz); } } foreach(array('L','C','R') AS $pos) { if (isset($h[$side][$pos]['content']) && $h[$side][$pos]['content']) { $hd = str_replace('{PAGENO}',$pgno,$h[$side][$pos]['content']); $hd = str_replace($this->aliasNbPgGp,$this->nbpgPrefix.$this->aliasNbPgGp.$this->nbpgSuffix,$hd); $hd = preg_replace('/\{DATE\s+(.*?)\}/e',"date('\\1')",$hd); if (isset($h[$side][$pos]['font-family']) && $h[$side][$pos]['font-family']) { $hff = $h[$side][$pos]['font-family']; } else { $hff = $this->original_default_font; } if (isset($h[$side][$pos]['font-size']) && $h[$side][$pos]['font-size']) { $hfsz = $h[$side][$pos]['font-size']; } else { $hfsz = $this->original_default_font_size; } $maxfontheight = max($maxfontheight,$hfsz); if (isset($h[$side][$pos]['font-style']) && $h[$side][$pos]['font-style']) { $hfst = $h[$side][$pos]['font-style']; } else { $hfst = ''; } if (isset($h[$side][$pos]['color']) && $h[$side][$pos]['color']) { $hfcol = $h[$side][$pos]['color']; $cor = $this->ConvertColor($hfcol); if ($cor) { $this->SetTColor($cor); } } else { $hfcol = ''; } $this->SetFont($hff,$hfst,$hfsz,true,true); $this->x = $headerlmargin ; $this->y = $this->h - $this->margin_footer - ($maxfontheight/_MPDFK); $hd = $this->purify_utf8_text($hd); if ($this->text_input_as_HTML) { $hd = $this->all_entities_to_utf8($hd); } if ($this->usingCoreFont) { $hd = mb_convert_encoding($hd,$this->mb_enc,'UTF-8'); } $this->magic_reverse_dir($hd, true, $this->directionality); if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($hd); $align = $pos; if ($this->directionality == 'rtl') { if ($pos == 'L') { $align = 'R'; } else if ($pos == 'R') { $align = 'L'; } } if ($pos!='L' && (strpos($hd,$this->aliasNbPg)!==false || strpos($hd,$this->aliasNbPgGp)!==false)) { if (strpos($hd,$this->aliasNbPgGp)!==false) { $type= 'nbpggp'; } else { $type= 'nbpg'; } $this->_out('{mpdfheader'.$type.' '.$pos.' ff='.$hff.' fs='.$hfst.' fz='.$hfsz.'}'); $this->Cell($headerpgwidth ,$maxfontheight/_MPDFK ,$hd,0,0,$align,0,'',0,0,0,'M'); $this->_out('Q'); } else { $this->Cell($headerpgwidth ,$maxfontheight/_MPDFK ,$hd,0,0,$align,0,'',0,0,0,'M'); } if ($hfcol) { $this->SetTColor($this->ConvertColor(0)); } } } $this->SetFont($this->default_font,'',$this->original_default_font_size); if (isset($h[$side]['line']) && $h[$side]['line']) { $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $this->Line($headerlmargin , $this->y-($maxfontheight*($this->footer_line_spacing)/_MPDFK), $headerlmargin +$headerpgwidth, $this->y-($maxfontheight*($this->footer_line_spacing)/_MPDFK)); } if ($this->forcePortraitHeaders && $this->CurOrientation=='L' && $this->CurOrientation!=$this->DefOrientation) { $this->_out('Q'); } } $this->processingHeader=false; } function hardHyphenate($word, $maxWidth) { if (preg_match('/^(http:|www\.)/',$word)) { return array(false,'','',''); } $poss = array(); $softhyphens = array(); $offset = 0; $p = true; if ($this->usingCoreFont) { $wl = strlen($word); } else { $wl = mb_strlen($word,'UTF-8'); } while($offset < $wl) { if (!$this->usingCoreFont) { $p = mb_strpos($word, "-", $offset, 'UTF-8'); } else if ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats') { $p = strpos($word, "-", $offset); } if ($p !== false) { $poss[] = $p - count($poss); } else { break; } $offset = $p+1; } $success = false; foreach($poss AS $i) { if ($this->usingCoreFont) { $a = substr($word,0,$i); if ($this->GetStringWidth($a.'-') > $maxWidth) { break ; } $pre = $a; $post = substr($word,$i,strlen($word)); $prelength = strlen($pre); } else { $a = mb_substr($word,0,$i,'UTF-8'); if ($this->GetStringWidth($a.'-') > $maxWidth) { break ; } $pre = $a; $post = mb_substr($word,$i,mb_strlen($word,'UTF-8'),'UTF-8'); $prelength = mb_strlen($pre, 'UTF-8'); } $success = true; } return array($success,$pre,$post,$prelength); } function softHyphenate($word, $maxWidth) { if (preg_match('/^(http:|www\.)/',$word)) { return array(false,'','',''); } $poss = array(); $softhyphens = array(); $offset = 0; $p = true; if ($this->usingCoreFont) { $wl = strlen($word); } else { $wl = mb_strlen($word,'UTF-8'); } while($offset < $wl) { if (!$this->usingCoreFont) { $p = mb_strpos($word, "\xc2\xad", $offset, 'UTF-8'); } else if ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats') { $p = strpos($word, chr(173), $offset); } if ($p !== false) { $poss[] = $p - count($poss); } else { break; } $offset = $p+1; } $success = false; foreach($poss AS $i) { if ($this->usingCoreFont) { $a = substr($word,0,$i); if ($this->GetStringWidth($a.'-') > $maxWidth) { break ; } $pre = $a; $post = substr($word,$i,strlen($word)); $prelength = strlen($pre); } else { $a = mb_substr($word,0,$i,'UTF-8'); if ($this->GetStringWidth($a.'-') > $maxWidth) { break ; } $pre = $a; $post = mb_substr($word,$i,mb_strlen($word,'UTF-8'),'UTF-8'); $prelength = mb_strlen($pre, 'UTF-8'); } $success = true; } return array($success,$pre,$post,$prelength); } function hyphenateWord($word, $maxWidth) { if (preg_match('/^(http:|www\.)/',$word)) { return array(false,'','',''); } if (!$this->loadedSHYdictionary) { if (file_exists(_MPDF_PATH.'patterns/dictionary.txt')) { $this->SHYdictionary = file(_MPDF_PATH.'patterns/dictionary.txt',FILE_SKIP_EMPTY_LINES); foreach($this->SHYdictionary as $entry) { $entry = trim($entry); $poss = array(); $offset = 0; $p = true; $wl = mb_strlen($entry ,'UTF-8'); while($offset < $wl) { $p = mb_strpos($entry, '/', $offset, 'UTF-8'); if ($p !== false) { $poss[] = $p - count($poss); } else { break; } $offset = $p+1; } if (count($poss)) { $this->SHYdictionaryWords[str_replace('/', '', mb_strtolower($entry))] = $poss; } } } $this->loadedSHYdictionary = true; } if (!in_array($this->SHYlang,$this->SHYlanguages)) { return array(false,'','',''); } if (count($this->SHYpatterns) < 1 || ($this->loadedSHYpatterns && $this->loadedSHYpatterns != $this->SHYlang)) { include(_MPDF_PATH."patterns/" . $this->SHYlang . ".php"); $patterns = explode(' ', $patterns); $new_patterns = array(); for($i = 0; $i < count($patterns); $i++) { $value = $patterns[$i]; $new_patterns[preg_replace('/[0-9]/', '', $value)] = $value; } $this->SHYpatterns = $new_patterns; $this->loadedSHYpatterns = $this->SHYlang; } if ($this->usingCoreFont) { $word = mb_convert_encoding($word,'UTF-8',$this->mb_enc); } $prepre = ''; $postpost = ''; $startpunctuation = "\xc2\xab\xc2\xbf\xe2\x80\x98\xe2\x80\x9b\xe2\x80\x9c\xe2\x80\x9f"; $endpunctuation = "\xe2\x80\x9e\xe2\x80\x9d\xe2\x80\x9a\xe2\x80\x99\xc2\xbb"; $pre = ''; $post = ''; if (preg_match('/^(["\''.$startpunctuation .'])+(.{'.$this->SHYcharmin.',})$/u',$word,$m)) { $prepre = $m[1]; $word = $m[2]; } if (preg_match('/^(.{'.$this->SHYcharmin.',})([\'\.,;:!?"'.$endpunctuation .']+)$/u',$word,$m)) { $word = $m[1]; $postpost = $m[2]; } if(mb_strlen($word,'UTF-8') < $this->SHYcharmin) { return array(false,'','',''); } $success = false; if(isset($this->SHYdictionaryWords[mb_strtolower($word)])) { foreach($this->SHYdictionaryWords[mb_strtolower($word)] AS $i) { $a = $prepre . mb_substr($word,0,$i,'UTF-8'); if ($this->usingCoreFont) { $testa = mb_convert_encoding($a,$this->mb_enc,'UTF-8'); } else { $testa = $a; } if ($this->GetStringWidth($testa.'-') > $maxWidth) { break ; } $pre = $a; $post = mb_substr($word,$i,mb_strlen($word,'UTF-8'),'UTF-8') . $postpost; $success = true; } } if (!$success) { $text_word = '_' . $word . '_'; $word_length = mb_strlen($text_word,'UTF-8'); $single_character = preg_split('//u', $text_word); $text_word = mb_strtolower($text_word,'UTF-8'); $hyphenated_word = array(); $numb3rs = array('0' => true, '1' => true, '2' => true, '3' => true, '4' => true, '5' => true, '6' => true, '7' => true, '8' => true, '9' => true); for($position = 0; $position <= ($word_length - $this->SHYcharmin); $position++) { $maxwins = min(($word_length - $position), $this->SHYcharmax); for($win = $this->SHYcharmin; $win <= $maxwins; $win++) { if(isset($this->SHYpatterns[mb_substr($text_word, $position, $win,'UTF-8')])) { $pattern = $this->SHYpatterns[mb_substr($text_word, $position, $win,'UTF-8')]; $digits = 1; $pattern_length = mb_strlen($pattern,'UTF-8'); for($i = 0; $i < $pattern_length; $i++) { $char = $pattern[$i]; if(isset($numb3rs[$char])) { $zero = ($i == 0) ? $position - 1 : $position + $i - $digits; if(!isset($hyphenated_word[$zero]) || $hyphenated_word[$zero] != $char) $hyphenated_word[$zero] = $char; $digits++; } } } } } for($i = $this->SHYleftmin; $i <= (mb_strlen($word,'UTF-8') - $this->SHYrightmin); $i++) { if(isset($hyphenated_word[$i]) && $hyphenated_word[$i] % 2 != 0) { $a = $prepre . mb_substr($word,0,$i,'UTF-8'); if ($this->usingCoreFont) { $testa = mb_convert_encoding($a,$this->mb_enc,'UTF-8'); } else { $testa = $a; } if ($this->GetStringWidth($testa.'-') > $maxWidth + 0.0001) { break ; } $pre = $a; $post = mb_substr($word,$i,mb_strlen($word,'UTF-8'),'UTF-8') . $postpost; $success = true; } } } if ($this->usingCoreFont) { $pre = mb_convert_encoding($pre,$this->mb_enc,'UTF-8'); $post = mb_convert_encoding($post,$this->mb_enc,'UTF-8'); $prelength = strlen($pre); } else { $prelength = mb_strlen($pre); } return array($success,$pre,$post,$prelength); } function WriteHTML($html,$sub=0,$init=true,$close=true) { if (empty($html)) { $html = ''; } if ($this->progressBar) { $this->UpdateProgressBar(1,0,'Parsing CSS & Headers'); } if ($init) { $this->headerbuffer=''; $this->textbuffer = array(); $this->fixedPosBlockSave = array(); } if ($sub == 1) { $html = '<style> '.$html.' </style>'; } if ($this->allow_charset_conversion) { if ($sub < 1) { $this->ReadCharset($html); } if ($this->charset_in && $sub!=4) { $success = iconv($this->charset_in,'UTF-8//TRANSLIT',$html); if ($success) { $html = $success; } } } $html = $this->purify_utf8($html,false); if ($init) { $this->blklvl = 0; $this->lastblocklevelchange = 0; $this->blk = array(); $this->initialiseBlock($this->blk[0]); $this->blk[0]['width'] =& $this->pgwidth; $this->blk[0]['inner_width'] =& $this->pgwidth; $this->blk[0]['blockContext'] = $this->blockContext; } $zproperties = array(); if ($sub < 2) { $this->ReadMetaTags($html); if (preg_match('/<base[^>]*href=["\']([^"\'>]*)["\']/i', $html, $m)) { $this->SetBasePath($m[1]); } $html = $this->cssmgr->ReadCSS($html); if ($this->useLang && !$this->usingCoreFont && preg_match('/<html [^>]*lang=[\'\"](.*?)[\'\"]/ism',$html,$m)) { $html_lang = $m[1]; } if (preg_match('/<html [^>]*dir=[\'\"]\s*rtl\s*[\'\"]/ism',$html)) { $zproperties['DIRECTION'] = 'rtl'; } if (preg_match('/<body([^>]*)>(.*?)<\/body>/ism',$html,$m) || preg_match('/<body([^>]*)>(.*)$/ism',$html,$m)) { $html = $m[2]; if (preg_match('/style=[\"](.*?)[\"]/ism',$m[1],$mm) || preg_match('/style=[\'](.*?)[\']/ism',$m[1],$mm)) { $zproperties = $this->cssmgr->readInlineCSS($mm[1]); } if (preg_match('/dir=[\'\"]\s*rtl\s*[\'\"]/ism',$m[1])) { $zproperties['DIRECTION'] = 'rtl'; } if (isset($html_lang) && $html_lang) { $zproperties['LANG'] = $html_lang; } if ($this->useLang && !$this->onlyCoreFonts && preg_match('/lang=[\'\"](.*?)[\'\"]/ism',$m[1],$mm)) { $zproperties['LANG'] = $mm[1]; } } } $properties = $this->cssmgr->MergeCSS('BLOCK','BODY',''); if ($zproperties) { $properties = $this->cssmgr->array_merge_recursive_unique($properties,$zproperties); } if (isset($properties['DIRECTION']) && $properties['DIRECTION']) { $this->cssmgr->CSS['BODY']['DIRECTION'] = $properties['DIRECTION']; } if (!isset($this->cssmgr->CSS['BODY']['DIRECTION'])) { $this->cssmgr->CSS['BODY']['DIRECTION'] = $this->directionality; } else { $this->SetDirectionality($this->cssmgr->CSS['BODY']['DIRECTION']); } $this->setCSS($properties,'','BODY'); $this->blk[0]['InlineProperties'] = $this->saveInlineProperties(); if ($sub == 1) { return ''; } if (!isset($this->cssmgr->CSS['BODY'])) { $this->cssmgr->CSS['BODY'] = array(); } if (isset($properties['BACKGROUND-GRADIENT'])) { $this->bodyBackgroundGradient = $properties['BACKGROUND-GRADIENT']; } if (isset($properties['BACKGROUND-IMAGE']) && $properties['BACKGROUND-IMAGE']) { $ret = $this->SetBackground($properties, $this->pgwidth); if ($ret) { $this->bodyBackgroundImage = $ret; } } if ($this->state==0 && isset($this->cssmgr->CSS['@PAGE']) && $this->cssmgr->CSS['@PAGE'] ) { $this->page_box['current'] = ''; $this->page_box['using'] = true; list($pborientation,$pbmgl,$pbmgr,$pbmgt,$pbmgb,$pbmgh,$pbmgf,$hname,$fname,$bg,$resetpagenum,$pagenumstyle,$suppress,$marks,$newformat) = $this->SetPagedMediaCSS('', false, 'O'); $this->DefOrientation = $this->CurOrientation = $pborientation; $this->orig_lMargin = $this->DeflMargin = $pbmgl; $this->orig_rMargin = $this->DefrMargin = $pbmgr; $this->orig_tMargin = $this->tMargin = $pbmgt; $this->orig_bMargin = $this->bMargin = $pbmgb; $this->orig_hMargin = $this->margin_header = $pbmgh; $this->orig_fMargin = $this->margin_footer = $pbmgf; list($pborientation,$pbmgl,$pbmgr,$pbmgt,$pbmgb,$pbmgh,$pbmgf,$hname,$fname,$bg,$resetpagenum,$pagenumstyle,$suppress,$marks,$newformat) = $this->SetPagedMediaCSS('', true, 'O'); $this->show_marks = $marks; if ($hname && !preg_match('/^html_(.*)$/i',$hname)) $this->firstPageBoxHeader = $hname; if ($fname && !preg_match('/^html_(.*)$/i',$fname)) $this->firstPageBoxFooter = $fname; } $parseonly = false; $this->bufferoutput = false; if ($sub == 3) { $parseonly = true; for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if (count($this->textbuffer)) { $this->printbuffer($this->textbuffer); } $this->textbuffer=array(); } else if ($sub == 4) { for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if (count($this->textbuffer)) { $this->printbuffer($this->textbuffer); } $this->bufferoutput = true; $this->textbuffer=array(); $this->headerbuffer=''; $properties = $this->cssmgr->MergeCSS('BLOCK','BODY',''); $this->setCSS($properties,'','BODY'); } mb_internal_encoding('UTF-8'); $html = $this->AdjustHTML($html, $this->tabSpaces); if ($this->autoFontGroups) { $html = $this->AutoFont($html); } preg_match_all('/<htmlpageheader([^>]*)>(.*?)<\/htmlpageheader>/si',$html,$h); for($i=0;$i<count($h[1]);$i++) { if (preg_match('/name=[\'|\"](.*?)[\'|\"]/',$h[1][$i],$n)) { $this->pageHTMLheaders[$n[1]]['html'] = $h[2][$i]; $this->pageHTMLheaders[$n[1]]['h'] = $this->_gethtmlheight($h[2][$i]); } } preg_match_all('/<htmlpagefooter([^>]*)>(.*?)<\/htmlpagefooter>/si',$html,$f); for($i=0;$i<count($f[1]);$i++) { if (preg_match('/name=[\'|\"](.*?)[\'|\"]/',$f[1][$i],$n)) { $this->pageHTMLfooters[$n[1]]['html'] = $f[2][$i]; $this->pageHTMLfooters[$n[1]]['h'] = $this->_gethtmlheight($f[2][$i]); } } $html = preg_replace('/<htmlpageheader.*?<\/htmlpageheader>/si','',$html); $html = preg_replace('/<htmlpagefooter.*?<\/htmlpagefooter>/si','',$html); if($this->state==0 && $sub!=1 && $sub!=3 && $sub!=4) { $this->AddPage($this->CurOrientation); } if (isset($hname) && preg_match('/^html_(.*)$/i',$hname,$n)) $this->SetHTMLHeader($this->pageHTMLheaders[$n[1]],'O',true); if (isset($fname) && preg_match('/^html_(.*)$/i',$fname,$n)) $this->SetHTMLFooter($this->pageHTMLfooters[$n[1]],'O'); $html=str_replace('<?','< ',$html); $this->checkSIP = false; $this->checkSMP = false; $this->checkCJK = false; if ($this->onlyCoreFonts) { $html = $this->SubstituteChars($html); } else { if (preg_match("/([".$this->pregRTLchars."])/u", $html)) { $this->biDirectional = true; } if (preg_match("/([\x{20000}-\x{2FFFF}])/u", $html)) { $this->checkSIP = true; } if (preg_match("/([\x{10000}-\x{1FFFF}])/u", $html)) { $this->checkSMP = true; } if (preg_match("/([".$this->pregCJKchars."])/u", $html)) { $this->checkCJK = true; } } $html = str_replace('<tta>160</tta>',chr(32),$html); $html = str_replace('</tta><tta>','|',$html); $html = str_replace('</tts><tts>','|',$html); $html = str_replace('</ttz><ttz>','|',$html); $html=strip_tags($html,$this->enabledtags); $a=preg_split('/<(.*?)>/ms',$html,-1,PREG_SPLIT_DELIM_CAPTURE); if ($this->mb_enc) { mb_internal_encoding($this->mb_enc); } $pbc = 0; if ($this->progressBar) { $this->UpdateProgressBar(1,0); } $this->subPos = -1; $cnt = count($a); for($i=0;$i<$cnt; $i++) { $e = $a[$i]; if($i%2==0) { if ($this->blk[$this->blklvl]['hide']) { continue; } if ($this->inlineDisplayOff) { continue; } if ($this->inMeter) { continue; } if ($this->inFixedPosBlock) { $this->fixedPosBlock .= $e; continue; } if (strlen($e) == 0) { continue; } $e = strcode2utf($e); $e = $this->lesser_entity_decode($e); if ($this->usingCoreFont) { if ($this->useSubstitutions && !$this->onlyCoreFonts && $this->subPos<$i && !$this->specialcontent) { $cnt += $this->SubstituteCharsNonCore($a, $i, $e); } $e = mb_convert_encoding($e,$this->mb_enc,'UTF-8'); if ($this->toupper) { $e = mb_strtoupper($e,$this->mb_enc); } if ($this->tolower) { $e = mb_strtolower($e,$this->mb_enc); } if ($this->capitalize) { $e = mb_convert_case($e, MB_CASE_TITLE, "UTF-8"); } } else { if ($this->checkSIP && $this->CurrentFont['sipext'] && $this->subPos<$i && !$this->specialcontent) { $cnt += $this->SubstituteCharsSIP($a, $i, $e); } if ($this->useSubstitutions && !$this->onlyCoreFonts && $this->CurrentFont['type']!='Type0' && $this->subPos<$i && !$this->specialcontent) { $e = preg_replace("/[\xe2\x80\x8c\xe2\x80\x8d\xe2\x80\x8e\xe2\x80\x8f]/u",'',$e); $cnt += $this->SubstituteCharsMB($a, $i, $e); } if ($this->biDirectional) { $e = preg_replace("/([".$this->pregRTLchars."]+)/ue", '$this->ArabJoin(stripslashes(\'\\1\'))', $e); } if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($e); $e = preg_replace("/[\xe2\x80\x8c\xe2\x80\x8d\xe2\x80\x8e\xe2\x80\x8f]/u",'',$e); if ($this->toupper) { $e = mb_strtoupper($e,$this->mb_enc); } if ($this->tolower) { $e = mb_strtolower($e,$this->mb_enc); } if ($this->capitalize) { $e = mb_convert_case($e, MB_CASE_TITLE, "UTF-8"); } } if (($this->tts) || ($this->ttz) || ($this->tta)) { $es = explode('|',$e); $e = ''; foreach($es AS $val) { $e .= chr($val); } } if ($this->specialcontent) { if ($this->specialcontent == "type=select") { $e = ltrim($e); $stringwidth = $this->GetStringWidth($e); if (!isset($this->selectoption['MAXWIDTH']) || $stringwidth > $this->selectoption['MAXWIDTH']) { $this->selectoption['MAXWIDTH'] = $stringwidth; } if (!isset($this->selectoption['SELECTED']) || $this->selectoption['SELECTED'] == '') { $this->selectoption['SELECTED'] = $e; } if (isset($this->selectoption['ACTIVE']) && $this->selectoption['ACTIVE']) { $this->selectoption['ITEMS'][]=array('exportValue'=>$this->selectoption['currentVAL'], 'content'=>$e, 'selected'=>$this->selectoption['currentSEL']); } } else { $objattr = unserialize($this->specialcontent); $objattr['text'] = $e; $te = "\xbb\xa4\xactype=textarea,objattr=".serialize($objattr)."\xbb\xa4\xac"; if ($this->tdbegin) { $this->_saveCellTextBuffer($te, $this->HREF); } else { $this->_saveTextBuffer($te, $this->HREF); } } } else if ($this->tableLevel) { if ($this->tdbegin) { if (($this->ignorefollowingspaces) && !$this->ispre) { $e = ltrim($e); } if ($e || $e==='0') { if (($this->blockjustfinished || $this->listjustfinished) && $this->cell[$this->row][$this->col]['s']>0) { $this->_saveCellTextBuffer("\n"); if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0; } $this->blockjustfinished=false; $this->listjustfinished=false; $this->_saveCellTextBuffer($e, $this->HREF); if (!isset($this->cell[$this->row][$this->col]['R']) || !$this->cell[$this->row][$this->col]['R']) { if (isset($this->cell[$this->row][$this->col]['s'])) { $this->cell[$this->row][$this->col]['s'] += $this->GetStringWidth($e, false); } else { $this->cell[$this->row][$this->col]['s'] = $this->GetStringWidth($e, false); } if (!empty($this->spanborddet)) { $this->cell[$this->row][$this->col]['s'] += $this->spanborddet['L']['w'] + $this->spanborddet['R']['w']; } } if ($this->checkCJK && preg_match("/([".$this->pregCJKchars."])/u", $e)) { $this->tableCJK = true; } if (substr($this->cell[$this->row][$this->col]['a'],0,1) == 'D') { $dp = $this->decimal_align[substr($this->cell[$this->row][$this->col]['a'],0,2)]; $s = preg_split('/'.preg_quote($dp,'/').'/', $e, 2); $s0 = $this->GetStringWidth($s[0], false); if ($s[1]) { $s1 = $this->GetStringWidth(($s[1].$dp), false); } else $s1 = 0; if (!isset($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs0'])) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs0'] = $s0; } else { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs0'] = max($s0, $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs0']); } if (!isset($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs1'])) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs1'] = $s1; } else { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs1'] = max($s1, $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['decimal_align'][$this->col]['maxs1']); } } if ($this->tableLevel==1 && $this->useGraphs) { $this->graphs[$this->currentGraphId]['data'][$this->row][$this->col] = $e; } $this->nestedtablejustfinished = false; $this->linebreakjustfinished=false; } } } else { if ($this->ignorefollowingspaces and !$this->ispre) { $e = ltrim($e); } if ($e || $e==='0') $this->_saveTextBuffer($e, $this->HREF); } } else { if($e[0]=='/') { if ($this->progressBar) { if (intval($i*10/$cnt) != $pbc) { $pbc = intval($i*10/$cnt); $this->UpdateProgressBar(1,$pbc*10,$tag); } } $endtag = trim(strtoupper(substr($e,1))); if($this->blk[$this->blklvl]['hide']) { if (in_array($endtag, $this->outerblocktags) || in_array($endtag, $this->innerblocktags)) { unset($this->blk[$this->blklvl]); $this->blklvl--; } continue; } if ($this->inFixedPosBlock) { if (in_array($endtag, $this->outerblocktags) || in_array($endtag, $this->innerblocktags)) { $this->fixedPosBlockDepth--; } if ($this->fixedPosBlockDepth == 0) { $this->fixedPosBlockSave[] = array($this->fixedPosBlock, $this->fixedPosBlockBBox, $this->page); $this->fixedPosBlock = ''; $this->inFixedPosBlock = false; continue; } $this->fixedPosBlock .= '<'.$e.'>'; continue; } if ($this->allow_html_optional_endtags && !$parseonly) { if (($endtag == 'DIV' || $endtag =='FORM' || $endtag =='CENTER') && $this->lastoptionaltag == 'P') { $this->CloseTag($this->lastoptionaltag ); } if ($this->lastoptionaltag == 'LI' && $endtag == 'OL') { $this->CloseTag($this->lastoptionaltag ); } if ($this->lastoptionaltag == 'LI' && $endtag == 'UL') { $this->CloseTag($this->lastoptionaltag ); } if ($this->lastoptionaltag == 'DD' && $endtag == 'DL') { $this->CloseTag($this->lastoptionaltag ); } if ($this->lastoptionaltag == 'DT' && $endtag == 'DL') { $this->CloseTag($this->lastoptionaltag ); } if ($this->lastoptionaltag == 'OPTION' && $endtag == 'SELECT') { $this->CloseTag($this->lastoptionaltag ); } if ($endtag == 'TABLE') { if ($this->lastoptionaltag == 'THEAD' || $this->lastoptionaltag == 'TBODY' || $this->lastoptionaltag == 'TFOOT') { $this->CloseTag($this->lastoptionaltag); } if ($this->lastoptionaltag == 'TR') { $this->CloseTag('TR'); } if ($this->lastoptionaltag == 'TD' || $this->lastoptionaltag == 'TH') { $this->CloseTag($this->lastoptionaltag ); $this->CloseTag('TR'); } } if ($endtag == 'THEAD' || $endtag == 'TBODY' || $endtag == 'TFOOT') { if ($this->lastoptionaltag == 'TR') { $this->CloseTag('TR'); } if ($this->lastoptionaltag == 'TD' || $this->lastoptionaltag == 'TH') { $this->CloseTag($this->lastoptionaltag ); $this->CloseTag('TR'); } } if ($endtag == 'TR') { if ($this->lastoptionaltag == 'TD' || $this->lastoptionaltag == 'TH') { $this->CloseTag($this->lastoptionaltag ); } } } $this->CloseTag($endtag); } else { if($this->blk[$this->blklvl]['hide']) { if (strpos($e,' ')) { $te = strtoupper(substr($e,0,strpos($e,' '))); } else { $te = strtoupper($e); } if (in_array($te, $this->outerblocktags) || in_array($te, $this->innerblocktags)) { $this->blklvl++; $this->blk[$this->blklvl]['hide']=true; } continue; } if ($this->inFixedPosBlock) { if (strpos($e,' ')) { $te = strtoupper(substr($e,0,strpos($e,' '))); } else { $te = strtoupper($e); } $this->fixedPosBlock .= '<'.$e.'>'; if (in_array($te, $this->outerblocktags) || in_array($te, $this->innerblocktags)) { $this->fixedPosBlockDepth++; } continue; } $regexp = '|=\'(.*?)\'|s'; $e = preg_replace($regexp,"=\"\$1\"",$e); if (substr($e,0,10)!='pageheader' && substr($e,0,10)!='pagefooter' && substr($e,0,12)!='tocpagebreak') { $regexp = '| (\\w+?)=([^\\s>"]+)|si'; $e = preg_replace($regexp," \$1=\"\$2\"",$e); } $e = preg_replace('/ (\\S+?)\s*=\s*"/i', " \\1=\"", $e); $orig_srcpath = ''; if ((stristr($e,"href=") !== false) or (stristr($e,"src=") !== false) ) { $regexp = '/ (href|src)\s*=\s*"(.*?)"/i'; preg_match($regexp,$e,$auxiliararray); if (isset($auxiliararray[2])) { $path = $auxiliararray[2]; } else { $path = ''; } if (trim($path) != '' && !(stristr($e,"src=") !== false && substr($path,0,4)=='var:')) { $orig_srcpath = $path; $this->GetFullPath($path); $regexp = '/ (href|src)="(.*?)"/i'; $e = preg_replace($regexp,' \\1="'.$path.'"',$e); } } $contents=array(); $contents1=array(); $contents2=array(); preg_match_all('/\\S{1,32}=["][^"]*["]/',$e,$contents1); preg_match_all('/\\S{1,32}=[\'][^\']*[\']/i',$e,$contents2); $contents = array_merge($contents1, $contents2); preg_match('/\\S+/',$e,$a2); $tag=strtoupper($a2[0]); $attr=array(); if ($orig_srcpath) { $attr['ORIG_SRC'] = $orig_srcpath; } if (!empty($contents)) { foreach($contents[0] as $v) { if(preg_match('/^([^=]*)=["]?([^"]*)["]?$/',$v,$a3) || preg_match('/^([^=]*)=[\']?([^\']*)[\']?$/',$v,$a3)) { if (strtoupper($a3[1])=='ID' || strtoupper($a3[1])=='CLASS') { $attr[strtoupper($a3[1])]=trim(strtoupper($a3[2])); } else if (preg_match('/^(HEADER|FOOTER)-STYLE/i',$a3[1])) { $attr[strtoupper($a3[1])]=trim(strtoupper($a3[2])); } else { $attr[strtoupper($a3[1])]=trim($a3[2]); } } } } $this->OpenTag($tag,$attr); if ($this->inFixedPosBlock) { $this->fixedPosBlockBBox = array($tag,$attr, $this->x, $this->y); $this->fixedPosBlock = ''; $this->fixedPosBlockDepth = 1; } if (preg_match('/\/$/',$e)) { $this->closeTag($tag); } } } } if ($close) { for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if (count($this->textbuffer) && !$parseonly) { $this->printbuffer($this->textbuffer); } if (!$parseonly) $this->textbuffer=array(); $currpos = $this->page*1000 + $this->y; if (isset($this->blk[$this->blklvl]['float_endpos']) && $this->blk[$this->blklvl]['float_endpos'] > $currpos) { $old_page = $this->page; $new_page = intval($this->blk[$this->blklvl]['float_endpos'] /1000); if ($old_page != $new_page) { $s = $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $this->page = $new_page; $this->ResetMargins(); $this->Reset(); $this->pageoutput[$this->page] = array(); } $this->y = (($this->blk[$this->blklvl]['float_endpos'] *1000) % 1000000)/1000; } $this->printfloatbuffer(); if (!empty($this->internallink) ) { foreach($this->internallink as $k=>$v) { if (strpos($k,"#") !== false ) { continue; } $ypos = $v['Y']; $pagenum = $v['PAGE']; $sharp = "#"; while (array_key_exists($sharp.$k,$this->internallink)) { $internallink = $this->internallink[$sharp.$k]; $this->SetLink($internallink,$ypos,$pagenum); $sharp .= "#"; } } } $this->linemaxfontsize = ''; $this->lineheight_correction = $this->default_lineheight_correction; $this->bufferoutput = false; if (count($this->fixedPosBlockSave) && $sub != 4) { foreach($this->fixedPosBlockSave AS $fpbs) { $old_page = $this->page; $this->page = $fpbs[2]; $this->WriteFixedPosHTML($fpbs[0], 0, 0, 100, 100,'auto', $fpbs[1]); $this->page = $old_page; } } } } function WriteFixedPosHTML($html='',$x, $y, $w, $h, $overflow='visible', $bounding=array()) { $overflow = strtolower($overflow); if($this->state==0) { $this->AddPage($this->CurOrientation); } $save_y = $this->y; $save_x = $this->x; $this->fullImageHeight = $this->h; $save_cols = false; if ($this->ColActive) { $save_cols = true; $save_nbcol = $this->NbCol; $this->SetColumns(0); } $save_annots = $this->title2annots; $this->writingHTMLheader = true; $this->writingHTMLfooter = true; $this->InFooter = true; $save_bgs = $this->pageBackgrounds; $checkinnerhtml = preg_replace('/\s/','',$html); if ($w > $this->w) { $x = 0; $w = $this->w; } if ($h > $this->h) { $y = 0; $h = $this->h; } if ($x > $this->w) { $x = $this->w - $w; } if ($y > $this->h) { $y = $this->h - $h; } if (!empty($bounding)) { $tag = $bounding[0]; $attr = $bounding[1]; $orig_x0 = $bounding[2]; $orig_y0 = $bounding[3]; $this->blklvl = 0; $this->lastblocklevelchange = 0; $this->blk = array(); $this->initialiseBlock($this->blk[0]); $this->blk[0]['width'] =& $this->pgwidth; $this->blk[0]['inner_width'] =& $this->pgwidth; $this->blk[0]['blockContext'] = $this->blockContext; $properties = $this->cssmgr->MergeCSS('BLOCK','BODY',''); $this->setCSS($properties,'','BODY'); $this->blklvl = 1; $this->initialiseBlock($this->blk[1]); $this->blk[1]['tag'] = $tag; $this->blk[1]['attr'] = $attr; $this->Reset(); $p = $this->cssmgr->MergeCSS('BLOCK',$tag,$attr); if (isset($p['ROTATE']) && ($p['ROTATE']==90 || $p['ROTATE']==-90)) { $rotate = $p['ROTATE']; } else { $rotate = 0; } if (isset($p['OVERFLOW'])) { $overflow = strtolower($p['OVERFLOW']); } if (strtolower($p['POSITION']) == 'fixed') { $cont_w = $this->pgwidth; $cont_h = $this->h - $this->tMargin - $this->bMargin; $cont_x = $this->lMargin; $cont_y = $this->tMargin; } else { $cont_w = $this->w; $cont_h = $this->h; $cont_x = 0; $cont_y = 0; } $css = ''; if (isset($p['TEXT-ALIGN'])) { $css .= 'text-align: '.strtolower($p['TEXT-ALIGN']).'; '; } if (isset($p['TEXT-TRANSFORM'])) { $css .= 'text-transform: '.strtolower($p['TEXT-TRANSFORM']).'; '; } if (isset($p['TEXT-INDENT'])) { $css .= 'text-indent: '.strtolower($p['TEXT-INDENT']).'; '; } if (isset($p['TEXT-DECORATION'])) { $css .= 'text-decoration: '.strtolower($p['TEXT-DECORATION']).'; '; } if (isset($p['FONT-FAMILY'])) { $css .= 'font-family: '.strtolower($p['FONT-FAMILY']).'; '; } if (isset($p['FONT-STYLE'])) { $css .= 'font-style: '.strtolower($p['FONT-STYLE']).'; '; } if (isset($p['FONT-WEIGHT'])) { $css .= 'font-weight: '.strtolower($p['FONT-WEIGHT']).'; '; } if (isset($p['FONT-SIZE'])) { $css .= 'font-size: '.strtolower($p['FONT-SIZE']).'; '; } if (isset($p['LINE-HEIGHT'])) { $css .= 'line-height: '.strtolower($p['LINE-HEIGHT']).'; '; } if (isset($p['TEXT-SHADOW'])) { $css .= 'text-shadow: '.strtolower($p['TEXT-SHADOW']).'; '; } if (isset($p['LETTER-SPACING'])) { $css .= 'letter-spacing: '.strtolower($p['LETTER-SPACING']).'; '; } if (isset($p['FONT-VARIANT'])) { $css .= 'font-variant: '.strtolower($p['FONT-VARIANT']).'; '; } if (isset($p['COLOR'])) { $css .= 'color: '.strtolower($p['COLOR']).'; '; } if (isset($p['Z-INDEX'])) { $css .= 'z-index: '.$p['Z-INDEX'].'; '; } if ($css) { $html = '<div style="'.$css.'">'.$html.'</div>'; } $pb = array(); $pb['MARGIN-TOP'] = $p['MARGIN-TOP']; $pb['MARGIN-RIGHT'] = $p['MARGIN-RIGHT']; $pb['MARGIN-BOTTOM'] = $p['MARGIN-BOTTOM']; $pb['MARGIN-LEFT'] = $p['MARGIN-LEFT']; $pb['PADDING-TOP'] = $p['PADDING-TOP']; $pb['PADDING-RIGHT'] = $p['PADDING-RIGHT']; $pb['PADDING-BOTTOM'] = $p['PADDING-BOTTOM']; $pb['PADDING-LEFT'] = $p['PADDING-LEFT']; $pb['BORDER-TOP'] = $p['BORDER-TOP']; $pb['BORDER-RIGHT'] = $p['BORDER-RIGHT']; $pb['BORDER-BOTTOM'] = $p['BORDER-BOTTOM']; $pb['BORDER-LEFT'] = $p['BORDER-LEFT']; $pb['BORDER-TOP-LEFT-RADIUS-H'] = $p['BORDER-TOP-LEFT-RADIUS-H']; $pb['BORDER-TOP-LEFT-RADIUS-V'] = $p['BORDER-TOP-LEFT-RADIUS-V']; $pb['BORDER-TOP-RIGHT-RADIUS-H'] = $p['BORDER-TOP-RIGHT-RADIUS-H']; $pb['BORDER-TOP-RIGHT-RADIUS-V'] = $p['BORDER-TOP-RIGHT-RADIUS-V']; $pb['BORDER-BOTTOM-LEFT-RADIUS-H'] = $p['BORDER-BOTTOM-LEFT-RADIUS-H']; $pb['BORDER-BOTTOM-LEFT-RADIUS-V'] = $p['BORDER-BOTTOM-LEFT-RADIUS-V']; $pb['BORDER-BOTTOM-RIGHT-RADIUS-H'] = $p['BORDER-BOTTOM-RIGHT-RADIUS-H']; $pb['BORDER-BOTTOM-RIGHT-RADIUS-V'] = $p['BORDER-BOTTOM-RIGHT-RADIUS-V']; if (isset($p['BACKGROUND-COLOR'])) { $pb['BACKGROUND-COLOR'] = $p['BACKGROUND-COLOR']; } if (isset($p['BOX-SHADOW'])) { $pb['BOX-SHADOW'] = $p['BOX-SHADOW']; } if (isset($p['BACKGROUND-IMAGE'])) { $pb['BACKGROUND-IMAGE'] = $p['BACKGROUND-IMAGE']; } if (isset($p['BACKGROUND-IMAGE-RESIZE'])) { $pb['BACKGROUND-IMAGE-RESIZE'] = $p['BACKGROUND-IMAGE-RESIZE']; } if (isset($p['BACKGROUND-IMAGE-OPACITY'])) { $pb['BACKGROUND-IMAGE-OPACITY'] = $p['BACKGROUND-IMAGE-OPACITY']; } if (isset($p['BACKGROUND-REPEAT'])) { $pb['BACKGROUND-REPEAT'] = $p['BACKGROUND-REPEAT']; } if (isset($p['BACKGROUND-POSITION'])) { $pb['BACKGROUND-POSITION'] = $p['BACKGROUND-POSITION']; } if (isset($p['BACKGROUND-GRADIENT'])) { $pb['BACKGROUND-GRADIENT'] = $p['BACKGROUND-GRADIENT']; } if (isset($p['BACKGROUND-SIZE'])) { $pb['BACKGROUND-SIZE'] = $p['BACKGROUND-SIZE']; } if (isset($p['BACKGROUND-ORIGIN'])) { $pb['BACKGROUND-ORIGIN'] = $p['BACKGROUND-ORIGIN']; } if (isset($p['BACKGROUND-CLIP'])) { $pb['BACKGROUND-CLIP'] = $p['BACKGROUND-CLIP']; } $this->setCSS($pb,'BLOCK',$tag); $bbox_br = $this->blk[1]['border_right']['w']; $bbox_bl = $this->blk[1]['border_left']['w']; $bbox_bt = $this->blk[1]['border_top']['w']; $bbox_bb = $this->blk[1]['border_bottom']['w']; $bbox_pr = $this->blk[1]['padding_right']; $bbox_pl = $this->blk[1]['padding_left']; $bbox_pt = $this->blk[1]['padding_top']; $bbox_pb = $this->blk[1]['padding_bottom']; $bbox_mr = $this->blk[1]['margin_right']; if (strtolower($p['MARGIN-RIGHT'])=='auto') { $bbox_mr = 'auto'; } $bbox_ml = $this->blk[1]['margin_left']; if (strtolower($p['MARGIN-LEFT'])=='auto') { $bbox_ml = 'auto'; } $bbox_mt = $this->blk[1]['margin_top']; if (strtolower($p['MARGIN-TOP'])=='auto') { $bbox_mt = 'auto'; } $bbox_mb = $this->blk[1]['margin_bottom']; if (strtolower($p['MARGIN-BOTTOM'])=='auto') { $bbox_mb = 'auto'; } if (isset($p['LEFT']) && strtolower($p['LEFT'])!='auto') { $bbox_left = $this->ConvertSize($p['LEFT'], $cont_w, $this->FontSize,false); } else { $bbox_left = 'auto'; } if (isset($p['TOP']) && strtolower($p['TOP'])!='auto') { $bbox_top = $this->ConvertSize($p['TOP'], $cont_h, $this->FontSize,false); } else { $bbox_top = 'auto'; } if (isset($p['RIGHT']) && strtolower($p['RIGHT'])!='auto') { $bbox_right = $this->ConvertSize($p['RIGHT'], $cont_w, $this->FontSize,false); } else { $bbox_right = 'auto'; } if (isset($p['BOTTOM']) && strtolower($p['BOTTOM'])!='auto') { $bbox_bottom = $this->ConvertSize($p['BOTTOM'], $cont_h, $this->FontSize,false); } else { $bbox_bottom = 'auto'; } if (isset($p['WIDTH']) && strtolower($p['WIDTH'])!='auto') { $inner_w = $this->ConvertSize($p['WIDTH'], $cont_w, $this->FontSize,false); } else { $inner_w = 'auto'; } if (isset($p['HEIGHT']) && strtolower($p['HEIGHT'])!='auto') { $inner_h = $this->ConvertSize($p['HEIGHT'], $cont_h, $this->FontSize,false); } else { $inner_h = 'auto'; } if ($rotate) { if ($bbox_left === 'auto' && $bbox_right !== 'auto') { $rot_rpos = $bbox_right; } else { $rot_rpos = false; } if ($bbox_top === 'auto' && $bbox_bottom !== 'auto') { $rot_bpos = $bbox_bottom; } else { $rot_bpos = false; } } if ($checkinnerhtml=='' && $inner_h==='auto') { $inner_h = 0.0001; } if ($checkinnerhtml=='' && $inner_w==='auto') { $inner_w = 2*$this->GetCharWidth('W',false); } if ($bbox_top==='auto' && $inner_h==='auto' && $bbox_bottom==='auto' && $bbox_mt==='auto' && $bbox_mb==='auto') { $bbox_top_orig = $bbox_top; if ($bbox_mt==='auto') { $bbox_mt = 0; } if ($bbox_mb==='auto') { $bbox_mb = 0; } $bbox_top = $orig_y0 - $bbox_mt - $cont_y; } else if ($bbox_top==='auto' && $inner_h==='auto' && $bbox_bottom==='auto') { $bbox_top_orig = $bbox_top = $orig_y0 - $cont_y; if ($bbox_mt==='auto') { $bbox_mt = 0; } if ($bbox_mb==='auto') { $bbox_mb = 0; } } else if ($bbox_top!=='auto' && $inner_h!=='auto' && $bbox_bottom!=='auto') { if ($bbox_mt==='auto' && $bbox_mb==='auto') { $x = $cont_h - $bbox_top - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_bottom; $bbox_mt = $bbox_mb = ($x/2); } else if ($bbox_mt==='auto') { $bbox_mt = $cont_h - $bbox_top - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mb - $bbox_bottom; } else if ($bbox_mb==='auto') { $bbox_mb = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_bottom; } else { $bbox_bottom = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mt; } } else { if ($bbox_mt==='auto') { $bbox_mt = 0; } if ($bbox_mb==='auto') { $bbox_mb = 0; } if ($bbox_top==='auto' && $inner_h==='auto' && $bbox_bottom!=='auto') { } else if ($bbox_top==='auto' && $bbox_bottom==='auto' && $inner_h!=='auto') { $bbox_top = $orig_y0 - $bbox_mt - $cont_y; $bbox_bottom = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mt; } else if ($inner_h==='auto' && $bbox_bottom==='auto' && $bbox_top!=='auto') { } else if ($bbox_top==='auto' && $inner_h!=='auto' && $bbox_bottom!=='auto') { $bbox_top = $cont_h - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mt - $bbox_bottom; } else if ($inner_h==='auto' && $bbox_top!=='auto' && $bbox_bottom!=='auto') { $inner_h = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $bbox_pb - $bbox_bb - $bbox_mt - $bbox_bottom; } else if ($bbox_bottom==='auto' && $bbox_top!=='auto' && $inner_h!=='auto') { $bbox_bottom = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mt; } } if ($bbox_left==='auto' && $inner_w==='auto' && $bbox_right==='auto') { if ($bbox_ml==='auto') { $bbox_ml = 0; } if ($bbox_mr==='auto') { $bbox_mr = 0; } $bbox_left = $orig_x0 - $bbox_ml - $cont_x; } else if ($bbox_left!=='auto' && $inner_w!=='auto' && $bbox_right!=='auto') { if ($bbox_ml==='auto' && $bbox_mr==='auto') { $x = $cont_w - $bbox_left - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_right; $bbox_ml = $bbox_mr = ($x/2); } else if ($bbox_ml==='auto') { $bbox_ml = $cont_w - $bbox_left - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_mr - $bbox_right; } else if ($bbox_mr==='auto') { $bbox_mr = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_right; } else { $bbox_right = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_ml; } } else { if ($bbox_ml==='auto') { $bbox_ml = 0; } if ($bbox_mr==='auto') { $bbox_mr = 0; } if ($bbox_left==='auto' && $inner_w==='auto' && $bbox_right!=='auto') { } else if ($bbox_left==='auto' && $bbox_right==='auto' && $inner_w!=='auto') { $bbox_left = $orig_x0 - $bbox_ml - $cont_x; $bbox_right = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_ml; } else if ($inner_w==='auto' && $bbox_right==='auto' && $bbox_left!=='auto') { } else if ($bbox_left==='auto' && $inner_w!=='auto' && $bbox_right!=='auto') { $bbox_left = $cont_w - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_ml - $bbox_right; } else if ($inner_w==='auto' && $bbox_left!=='auto' && $bbox_right!=='auto') { $inner_w = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $bbox_pr - $bbox_br - $bbox_ml - $bbox_right; } else if ($bbox_right==='auto' && $bbox_left!=='auto' && $inner_w!=='auto') { $bbox_right = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_ml; } } if (isset($pb['BACKGROUND-IMAGE']) && $pb['BACKGROUND-IMAGE']) { $ret = $this->SetBackground($pb, $this->blk[1]['inner_width']); if ($ret) { $this->blk[1]['background-image'] = $ret; } } $y = $cont_y + $bbox_top + $bbox_mt + $bbox_bt + $bbox_pt; $h = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $bbox_pb - $bbox_bb - $bbox_mb - $bbox_bottom; $x = $cont_x + $bbox_left + $bbox_ml + $bbox_bl + $bbox_pl; $w = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $bbox_pr - $bbox_br - $bbox_mr - $bbox_right; if ($inner_h==='auto' && $bbox_top==='auto') { $y = $cont_y + $bbox_mt + $bbox_bt + $bbox_pt; $h = $cont_h - ($bbox_bottom + $bbox_mt + $bbox_mb + $bbox_bt + $bbox_bb + $bbox_pt + $bbox_pb); } else if ($inner_h==='auto' && $bbox_bottom==='auto') { $y = $cont_y + $bbox_top + $bbox_mt + $bbox_bt + $bbox_pt; $h = $cont_h - ($bbox_top + $bbox_mt + $bbox_mb + $bbox_bt + $bbox_bb + $bbox_pt + $bbox_pb); } if ($inner_w==='auto' && $bbox_left==='auto') { $x = $cont_x + $bbox_ml + $bbox_bl + $bbox_pl; $w = $cont_w - ($bbox_right + $bbox_ml + $bbox_mr + $bbox_bl + $bbox_br + $bbox_pl + $bbox_pr); } else if ($inner_w==='auto' && $bbox_right==='auto') { $x = $cont_x + $bbox_left + $bbox_ml + $bbox_bl + $bbox_pl; $w = $cont_w - ($bbox_left + $bbox_ml + $bbox_mr + $bbox_bl + $bbox_br + $bbox_pl + $bbox_pr); } $bbox_y = $cont_y + $bbox_top + $bbox_mt; $bbox_x = $cont_x + $bbox_left + $bbox_ml; $saved_block1 = $this->blk[1]; unset($p); unset($pb); if ($inner_w==='auto') { $this->lMargin=$x; $this->rMargin=$this->w - $w - $x; $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->pageoutput[$this->page]=array(); $this->x = $x; $this->y = $y; $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = array(); $this->maxPosR = 0; $this->maxPosL = $this->w; $this->WriteHTML($html , 4); $inner_w = $this->maxPosR - $this->lMargin; if ($bbox_right==='auto') { $bbox_right = $cont_w - $bbox_left - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_ml; } else if ($bbox_left==='auto') { $bbox_left = $cont_w - $bbox_ml - $bbox_bl - $bbox_pl - $inner_w - $bbox_pr - $bbox_br - $bbox_ml - $bbox_right; $bbox_x = $cont_x + $bbox_left + $bbox_ml ; $inner_x = $bbox_x + $bbox_bl + $bbox_pl; $x = $inner_x; } $w = $inner_w; $bbox_y = $cont_y + $bbox_top + $bbox_mt; $bbox_x = $cont_x + $bbox_left + $bbox_ml; } if ($inner_h==='auto') { $this->lMargin=$x; $this->rMargin=$this->w - $w - $x; $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->pageoutput[$this->page]=array(); $this->x = $x; $this->y = $y; $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = array(); $this->WriteHTML($html , 4); $inner_h = $this->y - $y; if ($overflow!='hidden' && $overflow!='visible') { if (($this->y + $bbox_pb + $bbox_bb) > ($cont_y + $cont_h)) { $adj = ($this->y + $bbox_pb + $bbox_bb) - ($cont_y + $cont_h); $inner_h -= $adj; } } if ($bbox_bottom==='auto' && $bbox_top_orig==='auto') { $bbox_bottom = $bbox_top = ($cont_h - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mb)/2; if ($overflow!='hidden' && $overflow!='visible') { if ($bbox_top < 0) { $bbox_top = 0; $inner_h = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $bbox_pb - $bbox_bb - $bbox_mb - $bbox_bottom; } } $bbox_y = $cont_y + $bbox_top + $bbox_mt; $inner_y = $bbox_y + $bbox_bt + $bbox_pt; $y = $inner_y; } else if ($bbox_bottom==='auto') { $bbox_bottom = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mb; } else if ($bbox_top==='auto') { $bbox_top = $cont_h - $bbox_mt - $bbox_bt - $bbox_pt - $inner_h - $bbox_pb - $bbox_bb - $bbox_mb - $bbox_bottom; if ($overflow!='hidden' && $overflow!='visible') { if ($bbox_top < 0) { $bbox_top = 0; $inner_h = $cont_h - $bbox_top - $bbox_mt - $bbox_bt - $bbox_pt - $bbox_pb - $bbox_bb - $bbox_mb - $bbox_bottom; } } $bbox_y = $cont_y + $bbox_top + $bbox_mt; $inner_y = $bbox_y + $bbox_bt + $bbox_pt; $y = $inner_y; } $h = $inner_h; $bbox_y = $cont_y + $bbox_top + $bbox_mt; $bbox_x = $cont_x + $bbox_left + $bbox_ml; } $inner_w = $w; $inner_h = $h; } $this->lMargin=$x; $this->rMargin=$this->w - $w - $x; $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->pageoutput[$this->page]=array(); $this->x = $x; $this->y = $y; $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = array(); $this->WriteHTML($html , 4); $actual_h = $this->y - $y; $use_w = $w; $use_h = $h; $ratio = $actual_h / $use_w; if ($overflow!='hidden' && $overflow!='visible') { $target = $h/$w; if (($ratio / $target ) > 1) { $nl = CEIL($actual_h / $this->lineheight); $l = $use_w * $nl; $est_w = sqrt(($l * $this->lineheight) / $target) * 0.8; $use_w += ($est_w - $use_w) - ($w/100); } $bpcstart = ($ratio / $target); $bpcctr = 1; while(($ratio / $target ) > 1) { if ($this->progressBar) { $this->UpdateProgressBar(4,intval(100/($ratio/$target)),('Auto-sizing fixed-position block: '.$bpcctr++)); } $this->x = $x; $this->y = $y; if (($ratio / $target) > 1.5 || ($ratio / $target) < 0.6) { $use_w += ($w/$this->incrementFPR1); } else if (($ratio / $target) > 1.2 || ($ratio / $target) < 0.85) { $use_w += ($w/$this->incrementFPR2); } else if (($ratio / $target) > 1.1 || ($ratio / $target) < 0.91) { $use_w += ($w/$this->incrementFPR3); } else { $use_w += ($w/$this->incrementFPR4); } $use_h = $use_w * $target ; $this->rMargin=$this->w - $use_w - $x; $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = array(); $this->WriteHTML($html , 4); $actual_h = $this->y - $y; $ratio = $actual_h / $use_w; } if ($this->progressBar) { $this->UpdateProgressBar(4,'100',' '); } } $shrink_f = $w/$use_w; $this->pages[$this->page] .= '___BEFORE_BORDERS___'; $block_s = $this->PrintPageBackgrounds(); $this->pageBackgrounds = array(); if ($rotate) { $prerotw = $bbox_bl + $bbox_pl + $inner_w + $bbox_pr + $bbox_br; $preroth = $bbox_bt + $bbox_pt + $inner_h + $bbox_pb + $bbox_bb; $rot_start = " q\n"; if ($rotate == 90) { if ($rot_rpos !== false) { $adjw = $prerotw; } else { $adjw = $preroth; } if ($rot_bpos !== false) { $adjh = -$prerotw + $preroth; } else { $adjh = 0; } } else { if ($rot_rpos !== false) { $adjw = $prerotw - $preroth; } else { $adjw = 0; } if ($rot_bpos !== false) { $adjh = $preroth; } else { $adjh = $prerotw; } } $rot_start .= $this->transformTranslate($adjw, $adjh, true)."\n"; $rot_start .= $this->transformRotate($rotate, $bbox_x, $bbox_y, true)."\n"; $rot_end = " Q\n"; } else { $rot_start = ''; $rot_end = ''; } if (!empty($bounding)) { $this->blk[1] = $saved_block1; $this->blk[1]['width'] = $bbox_w = $cont_w - $bbox_left - $bbox_ml - $bbox_mr - $bbox_right; $this->blk[1]['x0'] = $bbox_x; $this->blk[1]['y0'] = $bbox_y; $this->blk[1]['startpage'] = $this->page; $this->blk[1]['y1'] = $bbox_y + $bbox_bt + $bbox_pt + $inner_h + $bbox_pb + $bbox_bb ; $this->_out($rot_start); $this->PaintDivBB('',0,1); $this->_out($rot_end); } $s = $this->PrintPageBackgrounds(); $s = $rot_start.$s.$rot_end; $this->pages[$this->page] = preg_replace('/___BEFORE_BORDERS___/', "\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $this->_out($rot_start); if ($overflow=='hidden') { $clip_y1 = $this->y; if (!empty($bounding) && ($this->y + $bbox_pb + $bbox_bb) > ($bbox_y + $bbox_bt + $bbox_pt + $inner_h + $bbox_pb + $bbox_bb )) { $clip_y1 = ($bbox_y + $bbox_bt + $bbox_pt + $inner_h + $bbox_pb + $bbox_bb ) - ($bbox_pb + $bbox_bb); } $op = 'W n'; $this->_out("q"); $ch = $clip_y1 - $y; $this->_out(sprintf('%.3F %.3F %.3F %.3F re %s',$x*_MPDFK,($this->h-$y)*_MPDFK,$w*_MPDFK,-$ch*_MPDFK,$op)); if (!empty($block_s)) { $tmp = "q\n".sprintf('%.3F %.3F %.3F %.3F re %s',$x*_MPDFK,($this->h-$y)*_MPDFK,$w*_MPDFK,-$ch*_MPDFK,$op); $tmp .= "\n".$block_s."\nQ"; $block_s = $tmp ; } } if (!empty($block_s)) { if ($shrink_f != 1) { $tmp = "q\n".$this->transformScale(($shrink_f*100),($shrink_f*100), $x, $y, true); $tmp .= "\n".$block_s."\nQ"; $block_s = $tmp ; } $this->_out($block_s); } if ($shrink_f != 1) { $this->StartTransform(); $this->transformScale(($shrink_f*100),($shrink_f*100), $x, $y); } $this->_out($this->headerbuffer); if ($shrink_f != 1) { $this->StopTransform(); } if ($overflow=='hidden') { $this->_out("Q"); } $this->_out($rot_end); foreach($this->HTMLheaderPageLinks AS $lk) { if ($rotate) { $tmp = $lk[2]; $lk[2] = $lk[3]; $lk[3] = $tmp; $lx1 = (($lk[0]/_MPDFK)); $ly1 = (($this->h-($lk[1]/_MPDFK))); if ($rotate == 90) { $adjx = -($lx1-$bbox_x) + ($preroth - ($ly1-$bbox_y)); $adjy = -($ly1-$bbox_y) + ($lx1-$bbox_x); $lk[2] = -$lk[2]; } else if ($rotate == -90) { $adjx = -($lx1-$bbox_x) + ($ly1-$bbox_y); $adjy = -($ly1-$bbox_y) - ($lx1-$bbox_x) + $prerotw; $lk[3] = -$lk[3]; } if ($rot_rpos !== false) { $adjx += $prerotw - $preroth; } if ($rot_bpos !== false) { $adjy += $preroth - $prerotw; } $lx1 += $adjx; $ly1 += $adjy; $lk[0] = $lx1*_MPDFK; $lk[1] = ($this->h-$ly1)*_MPDFK; } if ($shrink_f != 1) { $lx1 = (($lk[0]/_MPDFK)-$x); $lx2 = $x + ($lx1 * $shrink_f); $lk[0] = $lx2*_MPDFK; $ly1 = (($this->h-($lk[1]/_MPDFK))-$y); $ly2 = $y + ($ly1 * $shrink_f); $lk[1] = ($this->h-$ly2)*_MPDFK; $lk[2] *= $shrink_f; $lk[3] *= $shrink_f; } $this->PageLinks[$this->page][]=$lk; } foreach($this->HTMLheaderPageForms AS $n=>$f) { if ($shrink_f != 1) { $f['x'] = $x + (($f['x'] -$x) * $shrink_f); $f['y'] = $y + (($f['y'] -$y) * $shrink_f); $f['w'] *= $shrink_f; $f['h'] *= $shrink_f; $f['style']['fontsize'] *= $shrink_f; } $this->form->forms[$f['n']] = $f; } foreach($this->HTMLheaderPageAnnots AS $lk) { if ($rotate) { if ($rotate == 90) { $adjx = -($lk['x']-$bbox_x) + ($preroth - ($lk['y']-$bbox_y)); $adjy = -($lk['y']-$bbox_y) + ($lk['x']-$bbox_x); } else if ($rotate == -90) { $adjx = -($lk['x']-$bbox_x) + ($lk['y']-$bbox_y); $adjy = -($lk['y']-$bbox_y) - ($lk['x']-$bbox_x) + $prerotw; } if ($rot_rpos !== false) { $adjx += $prerotw - $preroth; } if ($rot_bpos !== false) { $adjy += $preroth - $prerotw; } $lk['x'] += $adjx; $lk['y'] += $adjy; } if ($shrink_f != 1) { $lk['x'] = $x + (($lk['x']-$x) * $shrink_f); $lk['y'] = $y + (($lk['y']-$y) * $shrink_f); } $this->PageAnnots[$this->page][]=$lk; } $this->headerbuffer = ''; $this->HTMLheaderPageLinks = array(); $this->HTMLheaderPageAnnots = array(); $this->HTMLheaderPageForms = array(); $this->pageBackgrounds = $save_bgs; $this->writingHTMLheader = false; $this->writingHTMLfooter = false; $this->fullImageHeight = false; $this->ResetMargins(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->SetXY($save_x,$save_y) ; $this->title2annots = $save_annots; $this->InFooter = false; $this->pageoutput[$this->page]=array(); $this->pageoutput[$this->page]['Font']=''; if ($save_cols) { $this->SetColumns($save_nbcol,$this->colvAlign,$this->ColGap); } } function initialiseBlock(&$blk) { $blk['margin_top'] = 0; $blk['margin_left'] = 0; $blk['margin_bottom'] = 0; $blk['margin_right'] = 0; $blk['padding_top'] = 0; $blk['padding_left'] = 0; $blk['padding_bottom'] = 0; $blk['padding_right'] = 0; $blk['border_top']['w'] = 0; $blk['border_left']['w'] = 0; $blk['border_bottom']['w'] = 0; $blk['border_right']['w'] = 0; $blk['hide'] = false; $blk['outer_left_margin'] = 0; $blk['outer_right_margin'] = 0; $blk['cascadeCSS'] = array(); $blk['block-align'] = false; $blk['bgcolor'] = false; $blk['page_break_after_avoid'] = false; $blk['keep_block_together'] = false; $blk['float'] = false; $blk['line_height'] = ''; $blk['margin_collapse'] = false; } function border_details($bd) { $prop = preg_split('/\s+/',trim($bd)); if (isset($this->blk[$this->blklvl]['inner_width'])) { $refw = $this->blk[$this->blklvl]['inner_width']; } else if (isset($this->blk[$this->blklvl-1]['inner_width'])) { $refw = $this->blk[$this->blklvl-1]['inner_width']; } else { $refw = $this->w; } if ( count($prop) == 1 ) { $bsize = $this->ConvertSize($prop[0],$refw,$this->FontSize,false); if ($bsize > 0) { return array('s' => 1, 'w' => $bsize, 'c' => $this->ConvertColor(0), 'style'=>'solid'); } else { return array('w' => 0, 's' => 0); } } else if (count($prop) == 2 ) { if (in_array($prop[1],$this->borderstyles) || $prop[1] == 'none' || $prop[1] == 'hidden' ) { $prop[2] = ''; } else if (in_array($prop[0],$this->borderstyles) || $prop[0] == 'none' || $prop[0] == 'hidden' ) { $prop[0] = ''; $prop[1] = $prop[0]; $prop[2] = $prop[1]; } else { $prop[1] = ''; $prop[2] = $prop[1]; } } else if ( count($prop) == 3 ) { if (substr($prop[0],0,1) == '#') { $tmp = $prop[0]; $prop[0] = $prop[1]; $prop[1] = $prop[2]; $prop[2] = $tmp; } else if (substr($prop[0],1,1) == '#') { $tmp = $prop[1]; $prop[0] = $prop[2]; $prop[1] = $prop[0]; $prop[2] = $tmp; } else if (in_array($prop[0],$this->borderstyles) || $prop[0] == 'none' || $prop[0] == 'hidden' ) { $tmp = $prop[0]; $prop[0] = $prop[1]; $prop[1] = $tmp; } } else { return array(); } $bsize = $this->ConvertSize($prop[0],$refw,$this->FontSize,false); $coul = $this->ConvertColor($prop[2]); $prop[1] = strtolower($prop[1]); if (in_array($prop[1],$this->borderstyles) && $bsize > 0) { $on = 1; } else if ($prop[1] == 'hidden') { $on = 1; $bsize = 0; $coul = ''; } else if ($prop[1] == 'none') { $on = 0; $bsize = 0; $coul = ''; } else { $on = 0; $bsize = 0; $coul = ''; $prop[1] = ''; } return array('s' => $on, 'w' => $bsize, 'c' => $coul, 'style'=> $prop[1] ); } function fixLineheight($v) { $lh = false; if (preg_match('/^[0-9\.,]*$/',$v) && $v >= 0) { return ($v + 0); } else if (strtoupper($v) == 'NORMAL') { return $this->normalLineheight; } else { $tlh = $this->ConvertSize($v,$this->FontSize,$this->FontSize,true); if ($tlh) { return ($tlh.'mm'); } } return $this->normalLineheight; } function _borderPadding($a, $b, &$px, &$py) { $added = 0; $x = $a-$px; $y = $b-$py; if ( ( (($x+$added)*($x+$added))/($a*$a) + (($y+$added)*($y+$added))/($b*$b) ) <=1 ) { return false; } $t = atan2($y,$x); $newx = $b / sqrt((($b*$b)/($a*$a)) + ( tan($t) * tan($t) ) ); $newy = $a / sqrt((($a*$a)/($b*$b)) + ( (1/tan($t)) * (1/tan($t)) ) ); $px = max($px, $a - $newx + $added); $py = max($py, $b - $newy + $added); } function SetPagedMediaCSS($name='', $first, $oddEven) { if ($oddEven == 'E') { if ($this->directionality=='rtl') { $side = 'R'; } else { $side = 'L'; } } else { if ($this->directionality=='rtl') { $side = 'L'; } else { $side = 'R'; } } $name = strtoupper($name); $p = array(); $p['SIZE'] = 'AUTO'; $p['MARGIN-RIGHT'] = strval($this->orig_rMargin).'mm'; $p['MARGIN-LEFT'] = strval($this->orig_lMargin).'mm'; $p['MARGIN-TOP'] = strval($this->orig_tMargin).'mm'; $p['MARGIN-BOTTOM'] = strval($this->orig_bMargin).'mm'; $p['MARGIN-HEADER'] = strval($this->orig_hMargin).'mm'; $p['MARGIN-FOOTER'] = strval($this->orig_fMargin).'mm'; if (isset($this->cssmgr->CSS['@PAGE'])) { $zp = $this->cssmgr->CSS['@PAGE']; } else { $zp = array(); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if (isset($p['EVEN-HEADER-NAME']) && $oddEven=='E') { $p['HEADER'] = $p['EVEN-HEADER-NAME']; unset($p['EVEN-HEADER-NAME']); } if (isset($p['ODD-HEADER-NAME']) && $oddEven!='E') { $p['HEADER'] = $p['ODD-HEADER-NAME']; unset($p['ODD-HEADER-NAME']); } if (isset($p['EVEN-FOOTER-NAME']) && $oddEven=='E') { $p['FOOTER'] = $p['EVEN-FOOTER-NAME']; unset($p['EVEN-FOOTER-NAME']); } if (isset($p['ODD-FOOTER-NAME']) && $oddEven!='E') { $p['FOOTER'] = $p['ODD-FOOTER-NAME']; unset($p['ODD-FOOTER-NAME']); } if (isset($this->cssmgr->CSS['@PAGE>>PSEUDO>>RIGHT']) && $side=='R') { $zp = $this->cssmgr->CSS['@PAGE>>PSEUDO>>RIGHT']; } else { $zp = array(); } if (isset($zp['SIZE'])) { unset($zp['SIZE']); } if (isset($zp['SHEET-SIZE'])) { unset($zp['SHEET-SIZE']); } if (isset($zp['MARGIN-LEFT'])) { unset($zp['MARGIN-LEFT']); } if (isset($zp['MARGIN-RIGHT'])) { unset($zp['MARGIN-RIGHT']); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if (isset($this->cssmgr->CSS['@PAGE>>PSEUDO>>LEFT']) && $side=='L') { $zp = $this->cssmgr->CSS['@PAGE>>PSEUDO>>LEFT']; } else { $zp = array(); } if (isset($zp['SIZE'])) { unset($zp['SIZE']); } if (isset($zp['SHEET-SIZE'])) { unset($zp['SHEET-SIZE']); } if (isset($zp['MARGIN-LEFT'])) { unset($zp['MARGIN-LEFT']); } if (isset($zp['MARGIN-RIGHT'])) { unset($zp['MARGIN-RIGHT']); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if (isset($this->cssmgr->CSS['@PAGE>>PSEUDO>>FIRST']) && $first) { $zp = $this->cssmgr->CSS['@PAGE>>PSEUDO>>FIRST']; } else { $zp = array(); } if (isset($zp['SIZE'])) { unset($zp['SIZE']); } if (isset($zp['SHEET-SIZE'])) { unset($zp['SHEET-SIZE']); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if ($name) { if (isset($this->cssmgr->CSS['@PAGE>>NAMED>>'.$name])) { $zp = $this->cssmgr->CSS['@PAGE>>NAMED>>'.$name]; } else { $zp = array(); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if (isset($p['EVEN-HEADER-NAME']) && $oddEven=='E') { $p['HEADER'] = $p['EVEN-HEADER-NAME']; unset($p['EVEN-HEADER-NAME']); } if (isset($p['ODD-HEADER-NAME']) && $oddEven!='E') { $p['HEADER'] = $p['ODD-HEADER-NAME']; unset($p['ODD-HEADER-NAME']); } if (isset($p['EVEN-FOOTER-NAME']) && $oddEven=='E') { $p['FOOTER'] = $p['EVEN-FOOTER-NAME']; unset($p['EVEN-FOOTER-NAME']); } if (isset($p['ODD-FOOTER-NAME']) && $oddEven!='E') { $p['FOOTER'] = $p['ODD-FOOTER-NAME']; unset($p['ODD-FOOTER-NAME']); } if (isset($this->cssmgr->CSS['@PAGE>>NAMED>>'.$name.'>>PSEUDO>>RIGHT']) && $side=='R') { $zp = $this->cssmgr->CSS['@PAGE>>NAMED>>'.$name.'>>PSEUDO>>RIGHT']; } else { $zp = array(); } if (isset($zp['SIZE'])) { unset($zp['SIZE']); } if (isset($zp['SHEET-SIZE'])) { unset($zp['SHEET-SIZE']); } if (isset($zp['MARGIN-LEFT'])) { unset($zp['MARGIN-LEFT']); } if (isset($zp['MARGIN-RIGHT'])) { unset($zp['MARGIN-RIGHT']); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if (isset($this->cssmgr->CSS['@PAGE>>NAMED>>'.$name.'>>PSEUDO>>LEFT']) && $side=='L') { $zp = $this->cssmgr->CSS['@PAGE>>NAMED>>'.$name.'>>PSEUDO>>LEFT']; } else { $zp = array(); } if (isset($zp['SIZE'])) { unset($zp['SIZE']); } if (isset($zp['SHEET-SIZE'])) { unset($zp['SHEET-SIZE']); } if (isset($zp['MARGIN-LEFT'])) { unset($zp['MARGIN-LEFT']); } if (isset($zp['MARGIN-RIGHT'])) { unset($zp['MARGIN-RIGHT']); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } if (isset($this->cssmgr->CSS['@PAGE>>NAMED>>'.$name.'>>PSEUDO>>FIRST']) && $first) { $zp = $this->cssmgr->CSS['@PAGE>>NAMED>>'.$name.'>>PSEUDO>>FIRST']; } else { $zp = array(); } if (isset($zp['SIZE'])) { unset($zp['SIZE']); } if (isset($zp['SHEET-SIZE'])) { unset($zp['SHEET-SIZE']); } if (is_array($zp) && !empty($zp)) { $p = array_merge($p,$zp); } } $orientation = $mgl = $mgr = $mgt = $mgb = $mgh = $mgf = ''; $header = $footer = ''; $resetpagenum = $pagenumstyle = $suppress = ''; $marks = ''; $bg = array(); $newformat = ''; if (isset($p['SHEET-SIZE']) && is_array($p['SHEET-SIZE'])) { $newformat = $p['SHEET-SIZE']; if ($newformat[0] > $newformat[1]) { $newformat = array_reverse($newformat); $p['ORIENTATION'] = 'L'; } else { $p['ORIENTATION'] = 'P'; } $this->_setPageSize($newformat, $p['ORIENTATION']); } if (isset($p['SIZE']) && is_array($p['SIZE']) && !$newformat) { if ($p['SIZE']['W'] > $p['SIZE']['H']) { $p['ORIENTATION'] = 'L'; } else { $p['ORIENTATION'] = 'P'; } } if (is_array($p['SIZE'])) { if ($p['SIZE']['W'] > $this->fw) { $p['SIZE']['W'] = $this->fw; } if ($p['SIZE']['H'] > $this->fh) { $p['SIZE']['H'] = $this->fh; } if (($p['ORIENTATION']==$this->DefOrientation && !$newformat) || ($newformat && $p['ORIENTATION']=='P')) { $outer_width_LR = ($this->fw - $p['SIZE']['W'])/2; $outer_width_TB = ($this->fh - $p['SIZE']['H'])/2; } else { $outer_width_LR = ($this->fh - $p['SIZE']['W'])/2; $outer_width_TB = ($this->fw - $p['SIZE']['H'])/2; } $pgw = $p['SIZE']['W']; $pgh = $p['SIZE']['H']; } else { $outer_width_LR = 0; $outer_width_TB = 0; if (!$newformat) { if (strtoupper($p['SIZE']) == 'AUTO') { $p['ORIENTATION']=$this->DefOrientation; } else if (strtoupper($p['SIZE']) == 'LANDSCAPE') { $p['ORIENTATION']='L'; } else { $p['ORIENTATION']='P'; } } if (($p['ORIENTATION']==$this->DefOrientation && !$newformat) || ($newformat && $p['ORIENTATION']=='P')) { $pgw = $this->fw; $pgh = $this->fh; } else { $pgw = $this->fh; $pgh = $this->fw; } } if (isset($p['HEADER']) && $p['HEADER']) { $header = $p['HEADER']; } if (isset($p['FOOTER']) && $p['FOOTER']) { $footer = $p['FOOTER']; } if (isset($p['RESETPAGENUM']) && $p['RESETPAGENUM']) { $resetpagenum = $p['RESETPAGENUM']; } if (isset($p['PAGENUMSTYLE']) && $p['PAGENUMSTYLE']) { $pagenumstyle = $p['PAGENUMSTYLE']; } if (isset($p['SUPPRESS']) && $p['SUPPRESS']) { $suppress = $p['SUPPRESS']; } if (preg_match('/cross/i', $p['MARKS']) && preg_match('/crop/i', $p['MARKS'])) { $marks = 'CROPCROSS'; } else if (strtoupper($p['MARKS']) == 'CROP') { $marks = 'CROP'; } else if (strtoupper($p['MARKS']) == 'CROSS') { $marks = 'CROSS'; } if (isset($p['BACKGROUND-COLOR']) && $p['BACKGROUND-COLOR']) { $bg['BACKGROUND-COLOR'] = $p['BACKGROUND-COLOR']; } if (isset($p['BACKGROUND-GRADIENT']) && $p['BACKGROUND-GRADIENT']) { $bg['BACKGROUND-GRADIENT'] = $p['BACKGROUND-GRADIENT']; } if (isset($p['BACKGROUND-IMAGE']) && $p['BACKGROUND-IMAGE']) { $bg['BACKGROUND-IMAGE'] = $p['BACKGROUND-IMAGE']; } if (isset($p['BACKGROUND-REPEAT']) && $p['BACKGROUND-REPEAT']) { $bg['BACKGROUND-REPEAT'] = $p['BACKGROUND-REPEAT']; } if (isset($p['BACKGROUND-POSITION']) && $p['BACKGROUND-POSITION']) { $bg['BACKGROUND-POSITION'] = $p['BACKGROUND-POSITION']; } if (isset($p['BACKGROUND-IMAGE-RESIZE']) && $p['BACKGROUND-IMAGE-RESIZE']) { $bg['BACKGROUND-IMAGE-RESIZE'] = $p['BACKGROUND-IMAGE-RESIZE']; } if (isset($p['BACKGROUND-IMAGE-OPACITY'])) { $bg['BACKGROUND-IMAGE-OPACITY'] = $p['BACKGROUND-IMAGE-OPACITY']; } if (isset($p['MARGIN-LEFT'])) { $mgl = $this->ConvertSize($p['MARGIN-LEFT'],$pgw) + $outer_width_LR; } if (isset($p['MARGIN-RIGHT'])) { $mgr = $this->ConvertSize($p['MARGIN-RIGHT'],$pgw) + $outer_width_LR; } if (isset($p['MARGIN-BOTTOM'])) { $mgb = $this->ConvertSize($p['MARGIN-BOTTOM'],$pgh) + $outer_width_TB; } if (isset($p['MARGIN-TOP'])) { $mgt = $this->ConvertSize($p['MARGIN-TOP'],$pgh) + $outer_width_TB; } if (isset($p['MARGIN-HEADER'])) { $mgh = $this->ConvertSize($p['MARGIN-HEADER'],$pgh) + $outer_width_TB; } if (isset($p['MARGIN-FOOTER'])) { $mgf = $this->ConvertSize($p['MARGIN-FOOTER'],$pgh) + $outer_width_TB; } if (isset($p['ORIENTATION']) && $p['ORIENTATION']) { $orientation = $p['ORIENTATION']; } $this->page_box['outer_width_LR'] = $outer_width_LR; $this->page_box['outer_width_TB'] = $outer_width_TB; return array($orientation,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$header,$footer,$bg,$resetpagenum,$pagenumstyle,$suppress,$marks,$newformat); } function ClearFloats($clear, $blklvl=0) { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($blklvl,true); $end = $currpos = ($this->page*1000 + $this->y); if ($clear == 'BOTH' && ($l_exists || $r_exists)) { $this->pageoutput[$this->page] = array(); $end = max($l_max, $r_max, $currpos); } else if ($clear == 'RIGHT' && $r_exists) { $this->pageoutput[$this->page] = array(); $end = max($r_max, $currpos); } else if ($clear == 'LEFT' && $l_exists ) { $this->pageoutput[$this->page] = array(); $end = max($l_max, $currpos); } else { return; } $old_page = $this->page; $new_page = intval($end/1000); if ($old_page != $new_page) { $s = $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $this->page = $new_page; } $this->ResetMargins(); $this->pageoutput[$this->page] = array(); $this->y = (($end*1000) % 1000000)/1000; } function GetFloatDivInfo($blklvl=0,$clear=false) { $l_exists = false; $r_exists = false; $l_max = 0; $r_max = 0; $l_width = 0; $r_width = 0; if (count($this->floatDivs)) { $currpos = ($this->page*1000 + $this->y); foreach($this->floatDivs AS $f) { if (($clear && $f['blockContext'] == $this->blk[$blklvl]['blockContext']) || (!$clear && $currpos >= $f['startpos'] && $currpos < ($f['endpos']-0.001) && $f['blklvl'] > $blklvl && $f['blockContext'] == $this->blk[$blklvl]['blockContext'])) { if ($f['side']=='L') { $l_exists= true; $l_max = max($l_max, $f['endpos']); $l_width = max($l_width , $f['w']); } if ($f['side']=='R') { $r_exists= true; $r_max = max($r_max, $f['endpos']); $r_width = max($r_width , $f['w']); } } } } return array($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width); } function OpenTag($tag,$attr) { if ($this->allow_html_optional_endtags) { if (($tag == 'P' || $tag == 'DIV' || $tag == 'H1' || $tag == 'H2' || $tag == 'H3' || $tag == 'H4' || $tag == 'H5' || $tag == 'H6' || $tag == 'UL' || $tag == 'OL' || $tag == 'TABLE' || $tag=='PRE' || $tag=='FORM' || $tag=='ADDRESS' || $tag=='BLOCKQUOTE' || $tag=='CENTER' || $tag=='DL' || $tag == 'HR' ) && $this->lastoptionaltag == 'P') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'DD' && $this->lastoptionaltag == 'DD') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'DD' && $this->lastoptionaltag == 'DT') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'DT' && $this->lastoptionaltag == 'DD') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'DT' && $this->lastoptionaltag == 'DT') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'LI' && $this->lastoptionaltag == 'LI') { $this->CloseTag($this->lastoptionaltag ); } if (($tag == 'TD' || $tag == 'TH') && $this->lastoptionaltag == 'TD') { $this->CloseTag($this->lastoptionaltag ); } if (($tag == 'TD' || $tag == 'TH') && $this->lastoptionaltag == 'TH') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'TR' && $this->lastoptionaltag == 'TR') { $this->CloseTag($this->lastoptionaltag ); } if ($tag == 'TR' && $this->lastoptionaltag == 'TD') { $this->CloseTag($this->lastoptionaltag ); $this->CloseTag('TR'); $this->CloseTag('THEAD'); } if ($tag == 'TR' && $this->lastoptionaltag == 'TH') { $this->CloseTag($this->lastoptionaltag ); $this->CloseTag('TR'); $this->CloseTag('THEAD'); } if ($tag == 'OPTION' && $this->lastoptionaltag == 'OPTION') { $this->CloseTag($this->lastoptionaltag ); } } $align = array('left'=>'L','center'=>'C','right'=>'R','top'=>'T','text-top'=>'TT','middle'=>'M','baseline'=>'BS','bottom'=>'B','text-bottom'=>'TB','justify'=>'J'); $this->ignorefollowingspaces=false; switch($tag){ case 'DOTTAB': $objattr = array(); $objattr['type'] = 'dottab'; $dots=str_repeat('.', 3)."  "; $objattr['width'] = $this->GetStringWidth($dots); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['height'] = 0; $objattr['colorarray'] = $this->colorarray; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $properties = $this->cssmgr->MergeCSS('INLINE',$tag,$attr); if (isset($properties['OUTDENT'])) { $objattr['outdent'] = $this->ConvertSize($properties['OUTDENT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } else if (isset($attr['OUTDENT'])) { $objattr['outdent'] = $this->ConvertSize($attr['OUTDENT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } else { $objattr['outdent'] = 0; } $objattr['fontfamily'] = $this->FontFamily; $objattr['fontsize'] = $this->FontSizePt; $e = "\xbb\xa4\xactype=dottab,objattr=".serialize($objattr)."\xbb\xa4\xac"; if ($this->tableLevel) { if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0 ; $this->_saveCellTextBuffer($e); } else { $this->_saveTextBuffer($e); } break; case 'PAGEHEADER': case 'PAGEFOOTER': $this->ignorefollowingspaces = true; if ($attr['NAME']) { $pname = $attr['NAME']; } else { $pname = '_default'; } if ($tag=='PAGEHEADER') { $p = &$this->pageheaders[$pname]; } else { $p = &$this->pagefooters[$pname]; } $p['L']=array(); $p['C']=array(); $p['R']=array(); $p['L']['font-style'] = ''; $p['C']['font-style'] = ''; $p['R']['font-style'] = ''; if (isset($attr['CONTENT-LEFT'])) { $p['L']['content'] = $attr['CONTENT-LEFT']; } if (isset($attr['CONTENT-CENTER'])) { $p['C']['content'] = $attr['CONTENT-CENTER']; } if (isset($attr['CONTENT-RIGHT'])) { $p['R']['content'] = $attr['CONTENT-RIGHT']; } if (isset($attr['HEADER-STYLE']) || isset($attr['FOOTER-STYLE'])) { if ($tag=='PAGEHEADER') { $properties = $this->cssmgr->readInlineCSS($attr['HEADER-STYLE']); } else { $properties = $this->cssmgr->readInlineCSS($attr['FOOTER-STYLE']); } if (isset($properties['FONT-FAMILY'])) { $p['L']['font-family'] = $properties['FONT-FAMILY']; $p['C']['font-family'] = $properties['FONT-FAMILY']; $p['R']['font-family'] = $properties['FONT-FAMILY']; } if (isset($properties['FONT-SIZE'])) { $p['L']['font-size'] = $this->ConvertSize($properties['FONT-SIZE']) * _MPDFK; $p['C']['font-size'] = $this->ConvertSize($properties['FONT-SIZE']) * _MPDFK; $p['R']['font-size'] = $this->ConvertSize($properties['FONT-SIZE']) * _MPDFK; } if (isset($properties['FONT-WEIGHT']) && $properties['FONT-WEIGHT']=='bold') { $p['L']['font-style'] = 'B'; $p['C']['font-style'] = 'B'; $p['R']['font-style'] = 'B'; } if (isset($properties['FONT-STYLE']) && $properties['FONT-STYLE']=='italic') { $p['L']['font-style'] .= 'I'; $p['C']['font-style'] .= 'I'; $p['R']['font-style'] .= 'I'; } if (isset($properties['COLOR'])) { $p['L']['color'] = $properties['COLOR']; $p['C']['color'] = $properties['COLOR']; $p['R']['color'] = $properties['COLOR']; } } if (isset($attr['HEADER-STYLE-LEFT']) || isset($attr['FOOTER-STYLE-LEFT'])) { if ($tag=='PAGEHEADER') { $properties = $this->cssmgr->readInlineCSS($attr['HEADER-STYLE-LEFT']); } else { $properties = $this->cssmgr->readInlineCSS($attr['FOOTER-STYLE-LEFT']); } if (isset($properties['FONT-FAMILY'])) { $p['L']['font-family'] = $properties['FONT-FAMILY']; } if (isset($properties['FONT-SIZE'])) { $p['L']['font-size'] = $this->ConvertSize($properties['FONT-SIZE']) * _MPDFK; } if (isset($properties['FONT-WEIGHT']) && $properties['FONT-WEIGHT']=='bold') { $p['L']['font-style'] ='B'; } if (isset($properties['FONT-STYLE']) && $properties['FONT-STYLE']=='italic') { $p['L']['font-style'] .='I'; } if (isset($properties['COLOR'])) { $p['L']['color'] = $properties['COLOR']; } } if (isset($attr['HEADER-STYLE-CENTER']) || isset($attr['FOOTER-STYLE-CENTER'])) { if ($tag=='PAGEHEADER') { $properties = $this->cssmgr->readInlineCSS($attr['HEADER-STYLE-CENTER']); } else { $properties = $this->cssmgr->readInlineCSS($attr['FOOTER-STYLE-CENTER']); } if (isset($properties['FONT-FAMILY'])) { $p['C']['font-family'] = $properties['FONT-FAMILY']; } if (isset($properties['FONT-SIZE'])) { $p['C']['font-size'] = $this->ConvertSize($properties['FONT-SIZE']) * _MPDFK; } if (isset($properties['FONT-WEIGHT']) && $properties['FONT-WEIGHT']=='bold') { $p['C']['font-style'] = 'B'; } if (isset($properties['FONT-STYLE']) && $properties['FONT-STYLE']=='italic') { $p['C']['font-style'] .= 'I'; } if (isset($properties['COLOR'])) { $p['C']['color'] = $properties['COLOR']; } } if (isset($attr['HEADER-STYLE-RIGHT']) || isset($attr['FOOTER-STYLE-RIGHT'])) { if ($tag=='PAGEHEADER') { $properties = $this->cssmgr->readInlineCSS($attr['HEADER-STYLE-RIGHT']); } else { $properties = $this->cssmgr->readInlineCSS($attr['FOOTER-STYLE-RIGHT']); } if (isset($properties['FONT-FAMILY'])) { $p['R']['font-family'] = $properties['FONT-FAMILY']; } if (isset($properties['FONT-SIZE'])) { $p['R']['font-size'] = $this->ConvertSize($properties['FONT-SIZE']) * _MPDFK; } if (isset($properties['FONT-WEIGHT']) && $properties['FONT-WEIGHT']=='bold') { $p['R']['font-style'] = 'B'; } if (isset($properties['FONT-STYLE']) && $properties['FONT-STYLE']=='italic') { $p['R']['font-style'] .= 'I'; } if (isset($properties['COLOR'])) { $p['R']['color'] = $properties['COLOR']; } } if (isset($attr['LINE']) && $attr['LINE']) { if ($attr['LINE']=='1' || strtoupper($attr['LINE'])=='ON') { $lineset=1; } else { $lineset=0; } $p['line'] = $lineset; } break; case 'SETHTMLPAGEHEADER': case 'SETHTMLPAGEFOOTER': $this->ignorefollowingspaces = true; if (isset($attr['NAME']) && $attr['NAME']) { $pname = $attr['NAME']; } else { $pname = '_default'; } if (isset($attr['PAGE']) && $attr['PAGE']) { if (strtoupper($attr['PAGE'])=='O' || strtoupper($attr['PAGE'])=='ODD') { $side='odd'; } else if (strtoupper($attr['PAGE'])=='E' || strtoupper($attr['PAGE'])=='EVEN') { $side='even'; } else if (strtoupper($attr['PAGE'])=='ALL') { $side='both'; } else { $side='odd'; } } else { $side='odd'; } if (isset($attr['VALUE']) && $attr['VALUE']) { if ($attr['VALUE']=='1' || strtoupper($attr['VALUE'])=='ON') { $set=1; } else if ($attr['VALUE']=='-1' || strtoupper($attr['VALUE'])=='OFF') { $set=0; } else { $set=1; } } else { $set=1; } if (isset($attr['SHOW-THIS-PAGE']) && $attr['SHOW-THIS-PAGE'] && $tag=='SETHTMLPAGEHEADER') { $write = 1; } else { $write = 0; } if ($side=='odd' || $side=='both') { if ($set && $tag=='SETHTMLPAGEHEADER') { $this->SetHTMLHeader($this->pageHTMLheaders[$pname],'O',$write); } else if ($set && $tag=='SETHTMLPAGEFOOTER') { $this->SetHTMLFooter($this->pageHTMLfooters[$pname],'O'); } else if ($tag=='SETHTMLPAGEHEADER') { $this->SetHTMLHeader('','O'); } else { $this->SetHTMLFooter('','O'); } } if ($side=='even' || $side=='both') { if ($set && $tag=='SETHTMLPAGEHEADER') { $this->SetHTMLHeader($this->pageHTMLheaders[$pname],'E',$write); } else if ($set && $tag=='SETHTMLPAGEFOOTER') { $this->SetHTMLFooter($this->pageHTMLfooters[$pname],'E'); } else if ($tag=='SETHTMLPAGEHEADER') { $this->SetHTMLHeader('','E'); } else { $this->SetHTMLFooter('','E'); } } break; case 'SETPAGEHEADER': case 'SETPAGEFOOTER': $this->ignorefollowingspaces = true; if (isset($attr['NAME']) && $attr['NAME']) { $pname = $attr['NAME']; } else { $pname = '_default'; } if (isset($attr['PAGE']) && $attr['PAGE']) { if (strtoupper($attr['PAGE'])=='O' || strtoupper($attr['PAGE'])=='ODD') { $side='odd'; } else if (strtoupper($attr['PAGE'])=='E' || strtoupper($attr['PAGE'])=='EVEN') { $side='even'; } else if (strtoupper($attr['PAGE'])=='ALL') { $side='both'; } else { $side='odd'; } } else { $side='odd'; } if (isset($attr['VALUE']) && $attr['VALUE']) { if ($attr['VALUE']=='1' || strtoupper($attr['VALUE'])=='ON') { $set=1; } else if ($attr['VALUE']=='-1' || strtoupper($attr['VALUE'])=='OFF') { $set=0; } else { $set=1; } } else { $set=1; } if ($side=='odd' || $side=='both') { if ($set && $tag=='SETPAGEHEADER') { $this->headerDetails['odd'] = $this->pageheaders[$pname]; } else if ($set && $tag=='SETPAGEFOOTER') { $this->footerDetails['odd'] = $this->pagefooters[$pname]; } else if ($tag=='SETPAGEHEADER') { $this->headerDetails['odd'] = array(); } else { $this->footerDetails['odd'] = array(); } if (!$this->mirrorMargins || ($this->page)%2!=0) { if ($tag=='SETPAGEHEADER') { $this->_setAutoHeaderHeight($this->headerDetails['odd'],$this->HTMLHeader); } if ($tag=='SETPAGEFOOTER') { $this->_setAutoFooterHeight($this->footerDetails['odd'],$this->HTMLFooter); } } } if ($side=='even' || $side=='both') { if ($set && $tag=='SETPAGEHEADER') { $this->headerDetails['even'] = $this->pageheaders[$pname]; } else if ($set && $tag=='SETPAGEFOOTER') { $this->footerDetails['even'] = $this->pagefooters[$pname]; } else if ($tag=='SETPAGEHEADER') { $this->headerDetails['even'] = array(); } else { $this->footerDetails['even'] = array(); } if ($this->mirrorMargins && ($this->page)%2==0) { if ($tag=='SETPAGEHEADER') { $this->_setAutoHeaderHeight($this->headerDetails['even'],$this->HTMLHeaderE); } if ($tag=='SETPAGEFOOTER') { $this->_setAutoFooterHeight($this->footerDetails['even'],$this->HTMLFooterE); } } } if (isset($attr['SHOW-THIS-PAGE']) && $attr['SHOW-THIS-PAGE'] && $tag=='SETPAGEHEADER') { $this->Header(); } break; case 'TOC': if (!class_exists('tocontents', false)) { include(_MPDF_PATH.'classes/tocontents.php'); } if (empty($this->tocontents)) { $this->tocontents = new tocontents($this); } $this->tocontents->openTagTOC($attr); break; case 'TOCPAGEBREAK': if (!class_exists('tocontents', false)) { include(_MPDF_PATH.'classes/tocontents.php'); } if (empty($this->tocontents)) { $this->tocontents = new tocontents($this); } list($isbreak,$toc_id) = $this->tocontents->openTagTOCPAGEBREAK($attr); if ($isbreak) break; case 'PAGE_BREAK': case 'PAGEBREAK': case 'NEWPAGE': case 'FORMFEED': $save_blklvl = $this->blklvl; $save_blk = $this->blk; $save_silp = $this->saveInlineProperties(); $save_spanlvl = $this->spanlvl; $save_ilp = $this->InlineProperties; for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if(!empty($this->textbuffer)) { $this->printbuffer($this->textbuffer); $this->textbuffer=array(); } $this->ignorefollowingspaces = true; $save_cols = false; if ($this->ColActive) { $save_cols = true; $save_nbcol = $this->NbCol; $this->SetColumns(0); } if (isset($attr['SHEET-SIZE']) && $tag != 'FORMFEED' && !$this->restoreBlockPageBreaks) { $prop = preg_split('/\s+/',trim($attr['SHEET-SIZE'])); if (count($prop) == 2 ) { $newformat = array($this->ConvertSize($prop[0]), $this->ConvertSize($prop[1])); } else { $newformat = $attr['SHEET-SIZE']; } } else { $newformat = ''; } $mgr = $mgl = $mgt = $mgb = $mgh = $mgf = ''; if (isset($attr['MARGIN-RIGHT'])) { $mgr = $this->ConvertSize($attr['MARGIN-RIGHT'],$this->w,$this->FontSize,false); } if (isset($attr['MARGIN-LEFT'])) { $mgl = $this->ConvertSize($attr['MARGIN-LEFT'],$this->w,$this->FontSize,false); } if (isset($attr['MARGIN-TOP'])) { $mgt = $this->ConvertSize($attr['MARGIN-TOP'],$this->w,$this->FontSize,false); } if (isset($attr['MARGIN-BOTTOM'])) { $mgb = $this->ConvertSize($attr['MARGIN-BOTTOM'],$this->w,$this->FontSize,false); } if (isset($attr['MARGIN-HEADER'])) { $mgh = $this->ConvertSize($attr['MARGIN-HEADER'],$this->w,$this->FontSize,false); } if (isset($attr['MARGIN-FOOTER'])) { $mgf = $this->ConvertSize($attr['MARGIN-FOOTER'],$this->w,$this->FontSize,false); } $ohname = $ehname = $ofname = $efname = ''; if (isset($attr['ODD-HEADER-NAME'])) { $ohname = $attr['ODD-HEADER-NAME']; } if (isset($attr['EVEN-HEADER-NAME'])) { $ehname = $attr['EVEN-HEADER-NAME']; } if (isset($attr['ODD-FOOTER-NAME'])) { $ofname = $attr['ODD-FOOTER-NAME']; } if (isset($attr['EVEN-FOOTER-NAME'])) { $efname = $attr['EVEN-FOOTER-NAME']; } $ohvalue = $ehvalue = $ofvalue = $efvalue = 0; if (isset($attr['ODD-HEADER-VALUE']) && ($attr['ODD-HEADER-VALUE']=='1' || strtoupper($attr['ODD-HEADER-VALUE'])=='ON')) { $ohvalue = 1; } else if (isset($attr['ODD-HEADER-VALUE']) && ($attr['ODD-HEADER-VALUE']=='-1' || strtoupper($attr['ODD-HEADER-VALUE'])=='OFF')) { $ohvalue = -1; } if (isset($attr['EVEN-HEADER-VALUE']) && ($attr['EVEN-HEADER-VALUE']=='1' || strtoupper($attr['EVEN-HEADER-VALUE'])=='ON')) { $ehvalue = 1; } else if (isset($attr['EVEN-HEADER-VALUE']) && ($attr['EVEN-HEADER-VALUE']=='-1' || strtoupper($attr['EVEN-HEADER-VALUE'])=='OFF')) { $ehvalue = -1; } if (isset($attr['ODD-FOOTER-VALUE']) && ($attr['ODD-FOOTER-VALUE']=='1' || strtoupper($attr['ODD-FOOTER-VALUE'])=='ON')) { $ofvalue = 1; } else if (isset($attr['ODD-FOOTER-VALUE']) && ($attr['ODD-FOOTER-VALUE']=='-1' || strtoupper($attr['ODD-FOOTER-VALUE'])=='OFF')) { $ofvalue = -1; } if (isset($attr['EVEN-FOOTER-VALUE']) && ($attr['EVEN-FOOTER-VALUE']=='1' || strtoupper($attr['EVEN-FOOTER-VALUE'])=='ON')) { $efvalue = 1; } else if (isset($attr['EVEN-FOOTER-VALUE']) && ($attr['EVEN-FOOTER-VALUE']=='-1' || strtoupper($attr['EVEN-FOOTER-VALUE'])=='OFF')) { $efvalue = -1; } if (isset($attr['ORIENTATION']) && (strtoupper($attr['ORIENTATION'])=='L' || strtoupper($attr['ORIENTATION'])=='LANDSCAPE')) { $orient = 'L'; } else if (isset($attr['ORIENTATION']) && (strtoupper($attr['ORIENTATION'])=='P' || strtoupper($attr['ORIENTATION'])=='PORTRAIT')) { $orient = 'P'; } else { $orient = $this->CurOrientation; } if (isset($attr['PAGE-SELECTOR']) && $attr['PAGE-SELECTOR']) { $pagesel = $attr['PAGE-SELECTOR']; } else { $pagesel = ''; } $resetpagenum = ''; $pagenumstyle = ''; $suppress = ''; if (isset($attr['RESETPAGENUM'])) { $resetpagenum = $attr['RESETPAGENUM']; } if (isset($attr['PAGENUMSTYLE'])) { $pagenumstyle = $attr['PAGENUMSTYLE']; } if (isset($attr['SUPPRESS'])) { $suppress = $attr['SUPPRESS']; } if ($tag == 'TOCPAGEBREAK') { $type = 'NEXT-ODD'; } else if(isset($attr['TYPE'])) { $type = strtoupper($attr['TYPE']); } else { $type = ''; } if ($type == 'E' || $type == 'EVEN') { $this->AddPage($orient,'E', $resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$newformat); } else if ($type == 'O' || $type == 'ODD') { $this->AddPage($orient,'O', $resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$newformat); } else if ($type == 'NEXT-ODD') { $this->AddPage($orient,'NEXT-ODD', $resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$newformat); } else if ($type == 'NEXT-EVEN') { $this->AddPage($orient,'NEXT-EVEN', $resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$newformat); } else { $this->AddPage($orient,'', $resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$newformat); } if ($tag == 'TOCPAGEBREAK') { if ($toc_id) { $this->tocontents->m_TOC[$toc_id]['TOCmark'] = $this->page; } else { $this->tocontents->TOCmark = $this->page; } } if ($save_cols) { $this->SetColumns($save_nbcol,$this->colvAlign,$this->ColGap); } if (($tag == 'FORMFEED' || $this->restoreBlockPagebreaks) && !$this->tableLevel && !$this->listlvl) { $this->blk = $save_blk; $t = $this->blk[0]['tag']; $a = $this->blk[0]['attr']; $this->blklvl = 0; for ($b=0; $b<=$save_blklvl;$b++) { $tc = $t; $ac = $a; $t = $this->blk[$b+1]['tag']; $a = $this->blk[$b+1]['attr']; unset($this->blk[$b+1]); $this->OpenTag($tc,$ac); } $this->spanlvl = $save_spanlvl; $this->InlineProperties = $save_ilp; $this->restoreInlineProperties($save_silp); } break; case 'TOCENTRY': if (isset($attr['CONTENT']) && $attr['CONTENT']) { $objattr = array(); $objattr['CONTENT'] = htmlspecialchars_decode($attr['CONTENT'],ENT_QUOTES); $objattr['type'] = 'toc'; if (isset($attr['LEVEL']) && $attr['LEVEL']) { $objattr['toclevel'] = $attr['LEVEL']; } else { $objattr['toclevel'] = 0; } if (isset($attr['NAME']) && $attr['NAME']) { $objattr['toc_id'] = $attr['NAME']; } else { $objattr['toc_id'] = 0; } $e = "\xbb\xa4\xactype=toc,objattr=".serialize($objattr)."\xbb\xa4\xac"; if($this->tableLevel) { $this->cell[$this->row][$this->col]['textbuffer'][] = array($e); } else { $this->textbuffer[] = array($e); } } break; case 'INDEXENTRY': if (isset($attr['CONTENT']) && $attr['CONTENT']) { if (isset($attr['XREF']) && $attr['XREF']) { $this->IndexEntry(htmlspecialchars_decode($attr['CONTENT'],ENT_QUOTES),$attr['XREF']); break; } $objattr = array(); $objattr['CONTENT'] = htmlspecialchars_decode($attr['CONTENT'],ENT_QUOTES); $objattr['type'] = 'indexentry'; $e = "\xbb\xa4\xactype=indexentry,objattr=".serialize($objattr)."\xbb\xa4\xac"; if($this->tableLevel) { $this->cell[$this->row][$this->col]['textbuffer'][] = array($e); } else { $this->textbuffer[] = array($e); } } break; case 'INDEXINSERT': if (isset($attr['FONT-SIZE'])) { $reffontsize = $attr['FONT-SIZE']; } else { $reffontsize = ''; } if (isset($attr['LINE-SPACING']) && $attr['LINE-SPACING']) { $linespacing = $attr['LINE-SPACING']; } else { $linespacing = ''; } if (isset($attr['DIV-FONT-SIZE']) && $attr['DIV-FONT-SIZE']) { $divlettfontsize = $attr['DIV-FONT-SIZE']; } else { $divlettfontsize = ''; } if (isset($attr['FONT']) && $attr['FONT']) { $reffont = $attr['FONT']; } else { $reffont = ''; } if (isset($attr['DIV-FONT']) && $attr['DIV-FONT']) { $divlettfont = $attr['DIV-FONT']; } else { $divlettfont = ''; } if (isset($attr['COLS']) && $attr['COLS']) { $cols = $attr['COLS']; } else { $cols = 1; } if (isset($attr['OFFSET']) && $attr['OFFSET']) { $offset = $attr['OFFSET']; } else { $offset = 3; } if (isset($attr['GAP']) && $attr['GAP']) { $gap = $attr['GAP']; } else { $gap = 5; } if (isset($attr['USEDIVLETTERS']) && (strtoupper($attr['USEDIVLETTERS'])=='OFF' || $attr['USEDIVLETTERS']==-1 || $attr['USEDIVLETTERS']==='0')) { $usedivletters = 0; } else { $usedivletters = 1; } if (isset($attr['LINKS']) && (strtoupper($attr['LINKS'])=='ON' || $attr['LINKS']==1)) { $links = true; } else { $links = false; } $this->CreateIndex($cols, $reffontsize, $linespacing, $offset, $usedivletters, $divlettfontsize, $gap, $reffont,$divlettfont, $links); break; case 'WATERMARKTEXT': if (isset($attr['CONTENT']) && $attr['CONTENT']) { $txt = htmlspecialchars_decode($attr['CONTENT'],ENT_QUOTES); } else { $txt = ''; } if (isset($attr['ALPHA']) && $attr['ALPHA']>0) { $alpha = $attr['ALPHA']; } else { $alpha = -1; } $this->SetWatermarkText($txt, $alpha); break; case 'WATERMARKIMAGE': if (isset($attr['SRC'])) { $src = $attr['SRC']; } else { $src = ''; } if (isset($attr['ALPHA']) && $attr['ALPHA']>0) { $alpha = $attr['ALPHA']; } else { $alpha = -1; } if (isset($attr['SIZE']) && $attr['SIZE']) { $size = $attr['SIZE']; if (strpos($size,',')) { $size = explode(',',$size); } } else { $size = 'D'; } if (isset($attr['POS']) && $attr['POS']) { $pos = $attr['POS']; if (strpos($pos,',')) { $pos = explode(',',$pos); } } else { $pos = 'P'; } $this->SetWatermarkImage($src, $alpha, $size, $pos); break; case 'BOOKMARK': if (isset($attr['CONTENT'])) { $objattr = array(); $objattr['CONTENT'] = htmlspecialchars_decode($attr['CONTENT'],ENT_QUOTES); $objattr['type'] = 'bookmark'; if (isset($attr['LEVEL']) && $attr['LEVEL']) { $objattr['bklevel'] = $attr['LEVEL']; } else { $objattr['bklevel'] = 0; } $e = "\xbb\xa4\xactype=bookmark,objattr=".serialize($objattr)."\xbb\xa4\xac"; if($this->tableLevel) { $this->cell[$this->row][$this->col]['textbuffer'][] = array($e); } else { $this->textbuffer[] = array($e); } } break; case 'ANNOTATION': if (isset($attr['CONTENT'])) { $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $objattr['CONTENT'] = htmlspecialchars_decode($attr['CONTENT'],ENT_QUOTES); $objattr['type'] = 'annot'; $objattr['POPUP'] = ''; } else { break; } if (isset($attr['POS-X'])) { $objattr['POS-X'] = $attr['POS-X']; } else { $objattr['POS-X'] = 0; } if (isset($attr['POS-Y'])) { $objattr['POS-Y'] = $attr['POS-Y']; } else { $objattr['POS-Y'] = 0; } if (isset($attr['ICON'])) { $objattr['ICON'] = $attr['ICON']; } else { $objattr['ICON'] = 'Note'; } if (isset($attr['AUTHOR'])) { $objattr['AUTHOR'] = $attr['AUTHOR']; } else if (isset($attr['TITLE'])) { $objattr['AUTHOR'] = $attr['TITLE']; } else { $objattr['AUTHOR'] = ''; } if (isset($attr['FILE'])) { $objattr['FILE'] = $attr['FILE']; } else { $objattr['FILE'] = ''; } if (isset($attr['SUBJECT'])) { $objattr['SUBJECT'] = $attr['SUBJECT']; } else { $objattr['SUBJECT'] = ''; } if (isset($attr['OPACITY']) && $attr['OPACITY']>0 && $attr['OPACITY']<=1) { $objattr['OPACITY'] = $attr['OPACITY']; } else if ($this->annotMargin) { $objattr['OPACITY'] = 1; } else { $objattr['OPACITY'] = $this->annotOpacity; } if (isset($attr['COLOR'])) { $cor = $this->ConvertColor($attr['COLOR']); if ($cor) { $objattr['COLOR'] = $cor; } else { $objattr['COLOR'] = $this->ConvertColor('yellow'); } } else { $objattr['COLOR'] = $this->ConvertColor('yellow'); } if (isset($attr['POPUP']) && !empty($attr['POPUP'])) { $pop = preg_split('/\s+/',trim($attr['POPUP'])); if (count($pop)>1) { $objattr['POPUP'] = $pop; } else { $objattr['POPUP'] = true; } } $e = "\xbb\xa4\xactype=annot,objattr=".serialize($objattr)."\xbb\xa4\xac"; if($this->tableLevel) { $this->cell[$this->row][$this->col]['textbuffer'][] = array($e); } else { $this->textbuffer[] = array($e); } break; case 'COLUMNS': if (isset($attr['COLUMN-COUNT']) && ($attr['COLUMN-COUNT'] || $attr['COLUMN-COUNT']==='0')) { for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if(!empty($this->textbuffer)) { $this->printbuffer($this->textbuffer); $this->textbuffer=array(); } if (isset($attr['VALIGN']) && $attr['VALIGN']) { if ($attr['VALIGN'] == 'J') { $valign = 'J'; } else { $valign = $align[$attr['VALIGN']]; } } else { $valign = ''; } if (isset($attr['COLUMN-GAP']) && $attr['COLUMN-GAP']) { $this->SetColumns($attr['COLUMN-COUNT'],$valign,$attr['COLUMN-GAP']); } else { $this->SetColumns($attr['COLUMN-COUNT'],$valign); } } $this->ignorefollowingspaces = true; break; case 'COLUMN_BREAK': case 'COLUMNBREAK': case 'NEWCOLUMN': $this->ignorefollowingspaces = true; $this->NewColumn(); $this->ColumnAdjust = false; break; case 'BDO': break; case 'TTZ': $this->ttz = true; $this->InlineProperties[$tag] = $this->saveInlineProperties(); $this->setCSS(array('FONT-FAMILY'=>'czapfdingbats','FONT-WEIGHT'=>'normal','FONT-STYLE'=>'normal'),'INLINE'); break; case 'TTS': $this->tts = true; $this->InlineProperties[$tag] = $this->saveInlineProperties(); $this->setCSS(array('FONT-FAMILY'=>'csymbol','FONT-WEIGHT'=>'normal','FONT-STYLE'=>'normal'),'INLINE'); break; case 'TTA': $this->tta = true; $this->InlineProperties[$tag] = $this->saveInlineProperties(); if (in_array($this->FontFamily,$this->mono_fonts)) { $this->setCSS(array('FONT-FAMILY'=>'ccourier'),'INLINE'); } else if (in_array($this->FontFamily,$this->serif_fonts)) { $this->setCSS(array('FONT-FAMILY'=>'ctimes'),'INLINE'); } else { $this->setCSS(array('FONT-FAMILY'=>'chelvetica'),'INLINE'); } break; case 'SUB': case 'SUP': case 'ACRONYM': case 'BIG': case 'SMALL': case 'INS': case 'S': case 'STRIKE': case 'DEL': case 'STRONG': case 'CITE': case 'Q': case 'EM': case 'B': case 'I': case 'U': case 'SAMP': case 'CODE': case 'KBD': case 'TT': case 'VAR': case 'FONT': case 'MARK': case 'TIME': case 'SPAN': if ($this->title2annots && isset($attr['TITLE'])) { $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $objattr['CONTENT'] = $attr['TITLE']; $objattr['type'] = 'annot'; $objattr['POS-X'] = 0; $objattr['POS-Y'] = 0; $objattr['ICON'] = 'Comment'; $objattr['AUTHOR'] = ''; $objattr['SUBJECT'] = ''; $objattr['OPACITY'] = $this->annotOpacity; $objattr['COLOR'] = $this->ConvertColor('yellow'); $annot = "\xbb\xa4\xactype=annot,objattr=".serialize($objattr)."\xbb\xa4\xac"; } if ($tag == 'SPAN') { $this->spanlvl++; $this->InlineProperties['SPAN'][$this->spanlvl] = $this->saveInlineProperties(); if (isset($annot)) { $this->InlineAnnots[$tag][$this->spanlvl] = $annot; } } else { if (!isset($this->InlineProperties[$tag])) $this->InlineProperties[$tag] = $this->saveInlineProperties(); if (isset($annot)) { $this->InlineAnnots[$tag] = $annot; } } $properties = $this->cssmgr->MergeCSS('INLINE',$tag,$attr); if (!empty($properties)) $this->setCSS($properties,'INLINE'); break; case 'A': if (isset($attr['NAME']) and $attr['NAME'] != '') { $e = ''; if ($this->anchor2Bookmark) { $objattr = array(); $objattr['CONTENT'] = htmlspecialchars_decode($attr['NAME'],ENT_QUOTES); $objattr['type'] = 'bookmark'; if (isset($attr['LEVEL']) && $attr['LEVEL']) { $objattr['bklevel'] = $attr['LEVEL']; } else { $objattr['bklevel'] = 0; } $e = "\xbb\xa4\xactype=bookmark,objattr=".serialize($objattr)."\xbb\xa4\xac"; } if($this->tableLevel) { $this->_saveCellTextBuffer($e, '', $attr['NAME']); } else { $this->_saveTextBuffer($e, '', $attr['NAME']); } } if (isset($attr['HREF'])) { $this->InlineProperties['A'] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if (!empty($properties)) $this->setCSS($properties,'INLINE'); $this->HREF=htmlspecialchars_decode(urldecode($attr['HREF'])); } break; case 'LEGEND': $this->InlineProperties['LEGEND'] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if (!empty($properties)) $this->setCSS($properties,'INLINE'); break; case 'PROGRESS': case 'METER': $this->inMeter = true; if (isset($attr['MAX']) && $attr['MAX']) { $max = $attr['MAX']; } else { $max = 1; } if (isset($attr['MIN']) && $attr['MIN'] && $tag=='METER') { $min = $attr['MIN']; } else { $min = 0; } if ($max < $min) { $max = $min; } if (isset($attr['VALUE']) && ($attr['VALUE'] || $attr['VALUE']==='0')) { $value = $attr['VALUE']; if ($value < $min) { $value = $min; } else if ($value > $max) { $value = $max; } } else { $value = ''; } if (isset($attr['LOW']) && $attr['LOW']) { $low = $attr['LOW']; } else { $low = $min; } if ($low < $min) { $low = $min; } else if ($low > $max) { $low = $max; } if (isset($attr['HIGH']) && $attr['HIGH']) { $high = $attr['HIGH']; } else { $high = $max; } if ($high < $low) { $high = $low; } else if ($high > $max) { $high = $max; } if (isset($attr['OPTIMUM']) && $attr['OPTIMUM']) { $optimum = $attr['OPTIMUM']; } else { $optimum = $min + (($max-$min)/2); } if ($optimum < $min) { $optimum = $min; } else if ($optimum > $max) { $optimum = $max; } if (isset($attr['TYPE']) && $attr['TYPE']) { $type = $attr['TYPE']; } else { $type = ''; } $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['padding_top'] = 0; $objattr['padding_bottom'] = 0; $objattr['padding_left'] = 0; $objattr['padding_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if(isset($properties ['DISPLAY']) && strtolower($properties ['DISPLAY'])=='none') { return; } $objattr['visibility'] = 'visible'; if (isset($properties['VISIBILITY'])) { $v = strtolower($properties['VISIBILITY']); if (($v == 'hidden' || $v == 'printonly' || $v == 'screenonly') && $this->visibility=='visible') { $objattr['visibility'] = $v; } } if (isset($properties['MARGIN-TOP'])) { $objattr['margin_top']=$this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $objattr['margin_bottom'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT'])) { $objattr['margin_left'] = $this->ConvertSize($properties['MARGIN-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-RIGHT'])) { $objattr['margin_right'] = $this->ConvertSize($properties['MARGIN-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-TOP'])) { $objattr['padding_top']=$this->ConvertSize($properties['PADDING-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-BOTTOM'])) { $objattr['padding_bottom'] = $this->ConvertSize($properties['PADDING-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-LEFT'])) { $objattr['padding_left'] = $this->ConvertSize($properties['PADDING-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-RIGHT'])) { $objattr['padding_right'] = $this->ConvertSize($properties['PADDING-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['BORDER-TOP'])) { $objattr['border_top'] = $this->border_details($properties['BORDER-TOP']); } if (isset($properties['BORDER-BOTTOM'])) { $objattr['border_bottom'] = $this->border_details($properties['BORDER-BOTTOM']); } if (isset($properties['BORDER-LEFT'])) { $objattr['border_left'] = $this->border_details($properties['BORDER-LEFT']); } if (isset($properties['BORDER-RIGHT'])) { $objattr['border_right'] = $this->border_details($properties['BORDER-RIGHT']); } if (isset($properties['VERTICAL-ALIGN'])) { $objattr['vertical-align'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } $w = 0; $h = 0; if(isset($properties['WIDTH'])) $w = $this->ConvertSize($properties['WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['WIDTH'])) $w = $this->ConvertSize($attr['WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if(isset($properties['HEIGHT'])) $h = $this->ConvertSize($properties['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['HEIGHT'])) $h = $this->ConvertSize($attr['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if (isset($properties['OPACITY']) && $properties['OPACITY'] > 0 && $properties['OPACITY'] <= 1) { $objattr['opacity'] = $properties['OPACITY']; } if ($this->HREF) { if (strpos($this->HREF,".") === false && strpos($this->HREF,"@") !== 0) { $href = $this->HREF; while(array_key_exists($href,$this->internallink)) $href="#".$href; $this->internallink[$href] = $this->AddLink(); $objattr['link'] = $this->internallink[$href]; } else { $objattr['link'] = $this->HREF; } } $extraheight = $objattr['padding_top'] + $objattr['padding_bottom'] + $objattr['margin_top'] + $objattr['margin_bottom'] + $objattr['border_top']['w'] + $objattr['border_bottom']['w']; $extrawidth = $objattr['padding_left'] + $objattr['padding_right'] + $objattr['margin_left'] + $objattr['margin_right'] + $objattr['border_left']['w'] + $objattr['border_right']['w']; if (!class_exists('meter', false)) { include(_MPDF_PATH.'classes/meter.php'); } $this->meter = new meter(); $svg = $this->meter->makeSVG(strtolower($tag), $type, $value, $max, $min, $optimum, $low, $high); $srcpath= _MPDF_TEMP_PATH.'_tempSVG'.RAND(1,10000).'_'.strtolower($tag).'.svg'; file_put_contents($srcpath, $svg); $orig_srcpath = $srcpath; $this->GetFullPath($srcpath); $info=$this->_getImage($srcpath, true, true, $orig_srcpath); if(!$info) { $info = $this->_getImage($this->noImageFile); if ($info) { $srcpath = $this->noImageFile; $w = ($info['w'] * (25.4/$this->dpi)); $h = ($info['h'] * (25.4/$this->dpi)); } } if(!$info) break; $objattr['file'] = $srcpath; if($w==0 and $h==0) { $w = $this->FontSize/(10/_MPDFK) * abs($info['w'])/_MPDFK; $h = $this->FontSize/(10/_MPDFK) * abs($info['h'])/_MPDFK; } if($w==0) $w=abs($h*$info['w']/$info['h']); if($h==0) $h=abs($w*$info['h']/$info['w']); $maxWidth = $this->blk[$this->blklvl]['inner_width']; $maxHeight = $this->h - ($this->tMargin + $this->bMargin + 1) ; if ($this->fullImageHeight) { $maxHeight = $this->fullImageHeight; } if ($w + $extrawidth > $maxWidth ) { $w = $maxWidth - $extrawidth; $h=abs($w*$info['h']/$info['w']); } if ($h + $extraheight > $maxHeight ) { $h = $maxHeight - $extraheight; $w=abs($h*$info['w']/$info['h']); } $objattr['type'] = 'image'; $objattr['itype'] = $info['type']; $objattr['orig_h'] = $info['h']; $objattr['orig_w'] = $info['w']; $objattr['wmf_x'] = $info['x']; $objattr['wmf_y'] = $info['y']; $objattr['height'] = $h + $extraheight; $objattr['width'] = $w + $extrawidth; $objattr['image_height'] = $h; $objattr['image_width'] = $w; $e = "\xbb\xa4\xactype=image,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { $this->_saveCellTextBuffer($e, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } else { $this->_saveTextBuffer($e, $this->HREF); } break; case 'BR': if (isset($attr['STYLE'])) { $properties = $this->cssmgr->readInlineCSS($attr['STYLE']); if (isset($properties['CLEAR'])) { $this->ClearFloats(strtoupper($properties['CLEAR']),$this->blklvl); } } if($this->tableLevel) { if ($this->blockjustfinished || $this->listjustfinished) { $this->_saveCellTextBuffer("\n"); } $this->_saveCellTextBuffer("\n"); if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0 ; } else { if (count($this->textbuffer)) { $this->textbuffer[count($this->textbuffer)-1][0] = preg_replace('/ $/','',$this->textbuffer[count($this->textbuffer)-1][0]); } $this->_saveTextBuffer("\n"); } $this->ignorefollowingspaces = true; $this->blockjustfinished=false; $this->listjustfinished=false; $this->linebreakjustfinished=true; break; case 'PRE': $this->ispre=true; case 'DIV': case 'FORM': case 'CENTER': case 'BLOCKQUOTE': case 'ADDRESS': case 'CAPTION': case 'P': case 'H1': case 'H2': case 'H3': case 'H4': case 'H5': case 'H6': case 'DL': case 'DT': case 'DD': case 'FIELDSET': case 'DETAILS': case 'SUMMARY': case 'ARTICLE': case 'ASIDE': case 'FIGURE': case 'FIGCAPTION': case 'FOOTER': case 'HEADER': case 'HGROUP': case 'NAV': case 'SECTION': $p = $this->cssmgr->PreviewBlockCSS($tag,$attr); if(isset($p['DISPLAY']) && strtolower($p['DISPLAY'])=='none') { $this->blklvl++; $this->blk[$this->blklvl]['hide'] = true; return; } if($tag == 'CAPTION') { if (isset($attr['POSITION']) && strtolower($attr['POSITION'])=='bottom') { $divpos = 'B'; } else { $divpos = 'T'; } if (isset($attr['ALIGN']) && strtolower($attr['ALIGN'])=='bottom') { $cappos = 'B'; } else if (isset($p['CAPTION-SIDE']) && strtolower($p['CAPTION-SIDE'])=='bottom') { $cappos = 'B'; } else { $cappos = 'T'; } if (isset($attr['ALIGN'])) { unset($attr['ALIGN']); } if ($cappos != $divpos) { $this->blklvl++; $this->blk[$this->blklvl]['hide'] = true; return; } } if($tag == 'FORM') { if (isset($attr['METHOD']) && strtolower($attr['METHOD'])=='get') { $this->form->formMethod = 'GET'; } else { $this->form->formMethod = 'POST'; } if (isset($attr['ACTION'])) { $this->form->formAction = $attr['ACTION']; } else { $this->form->formAction = ''; } } if ((isset($p['POSITION']) && (strtolower($p['POSITION'])=='fixed' || strtolower($p['POSITION'])=='absolute')) && $this->blklvl==0) { if ($this->inFixedPosBlock) { $this->Error("Cannot nest block with position:fixed or position:absolute"); } $this->inFixedPosBlock = true; return; } $this->ignorefollowingspaces = true; if ($this->blockjustfinished && !count($this->textbuffer) && $this->y != $this->tMargin && $this->collapseBlockMargins) { $lastbottommargin = $this->lastblockbottommargin; } else { $lastbottommargin = 0; } $this->lastblockbottommargin = 0; $this->blockjustfinished=false; if ($this->listlvl>0) { return; } $this->InlineProperties = array(); $this->spanlvl = 0; $this->listjustfinished=false; $this->divbegin=true; $this->linebreakjustfinished=false; if ($this->tableLevel) { if ($this->cell[$this->row][$this->col]['s'] > 0 && !$this->nestedtablejustfinished ) { $this->_saveCellTextBuffer("\n"); if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0 ; } if ($tag == 'CENTER' && $this->tdbegin) { $this->cell[$this->row][$this->col]['a'] = $align['center']; } $this->InlineProperties['BLOCKINTABLE'] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if (!empty($properties)) $this->setCSS($properties,'INLINE'); break; } if ($tag == 'P' || $tag == 'DT' || $tag == 'DD') { $this->lastoptionaltag = $tag; } else { $this->lastoptionaltag = ''; } if ($this->lastblocklevelchange == 1) { $blockstate = 1; } else if ($this->lastblocklevelchange < 1) { $blockstate = 0; } $this->printbuffer($this->textbuffer,$blockstate); $this->textbuffer=array(); $save_blklvl = $this->blklvl; $save_blk = $this->blk; $save_silp = $this->saveInlineProperties(); $save_spanlvl = $this->spanlvl; $save_ilp = $this->InlineProperties; $this->blklvl++; $currblk =& $this->blk[$this->blklvl]; $this->initialiseBlock($currblk); $prevblk =& $this->blk[$this->blklvl-1]; $currblk['tag'] = $tag; $currblk['attr'] = $attr; $this->Reset(); $properties = $this->cssmgr->MergeCSS('BLOCK',$tag,$attr); $pagesel = ''; if (isset($properties['PAGE'])) { $pagesel = $properties['PAGE']; } $save_cols = false; if (($pagesel && $pagesel != $this->page_box['current']) || (isset($properties['PAGE-BREAK-BEFORE']) && $properties['PAGE-BREAK-BEFORE'])) { if ($this->blklvl>1) { for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if (count($this->textbuffer)) { $this->printbuffer($this->textbuffer); $this->textbuffer=array(); } } if ($this->ColActive) { $save_cols = true; $save_nbcol = $this->NbCol; $this->SetColumns(0); } if (isset($properties['PAGE-BREAK-BEFORE'])) { if (strtoupper($properties['PAGE-BREAK-BEFORE']) == 'RIGHT') { $this->AddPage($this->CurOrientation,'NEXT-ODD','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else if (strtoupper($properties['PAGE-BREAK-BEFORE']) == 'LEFT') { $this->AddPage($this->CurOrientation,'NEXT-EVEN','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else if (strtoupper($properties['PAGE-BREAK-BEFORE']) == 'ALWAYS') { $this->AddPage($this->CurOrientation,'','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else if ($this->page_box['current'] != $pagesel) { $this->AddPage($this->CurOrientation,'','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } } else if ($pagesel != $this->page_box['current']) { $this->AddPage($this->CurOrientation,'','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } if (!($this->restoreBlockPagebreaks && isset($properties['PAGE-BREAK-BEFORE']) && $properties['PAGE-BREAK-BEFORE'])) { $this->blklvl = 0; $this->lastblocklevelchange = 0; $this->blk = array(); $this->initialiseBlock($this->blk[0]); $this->blk[0]['width'] =& $this->pgwidth; $this->blk[0]['inner_width'] =& $this->pgwidth; $this->blk[0]['blockContext'] = $this->blockContext; $properties = $this->cssmgr->MergeCSS('BLOCK','BODY',''); $this->setCSS($properties,'','BODY'); $this->blklvl++; $currblk =& $this->blk[$this->blklvl]; $prevblk =& $this->blk[$this->blklvl-1]; $this->initialiseBlock($currblk); $currblk['tag'] = $tag; $currblk['attr'] = $attr; $this->Reset(); $properties = $this->cssmgr->MergeCSS('BLOCK',$tag,$attr); } if ($save_cols) { $this->SetColumns($save_nbcol,$this->colvAlign,$this->ColGap); } if ($this->restoreBlockPagebreaks && isset($properties['PAGE-BREAK-BEFORE']) && $properties['PAGE-BREAK-BEFORE']) { $this->blk = $save_blk; $t = $this->blk[0]['tag']; $a = $this->blk[0]['attr']; $this->blklvl = 0; for ($b=0; $b<=$save_blklvl;$b++) { $tc = $t; $ac = $a; $t = $this->blk[$b+1]['tag']; $a = $this->blk[$b+1]['attr']; unset($this->blk[$b+1]); $this->OpenTag($tc,$ac); } $this->spanlvl = $save_spanlvl; $this->InlineProperties = $save_ilp; $this->restoreInlineProperties($save_silp); } } if (isset($properties['PAGE-BREAK-INSIDE']) && strtoupper($properties['PAGE-BREAK-INSIDE']) == 'AVOID' && !$this->ColActive && !$this->keep_block_together) { $currblk['keep_block_together'] = 1; $this->kt_y00 = $this->y; $this->kt_p00 = $this->page; $this->keep_block_together = 1; $this->divbuffer = array(); $this->ktLinks = array(); $this->ktAnnots = array(); $this->ktForms = array(); $this->ktBlock = array(); $this->ktReference = array(); $this->ktBMoutlines = array(); $this->_kttoc = array(); } if ($lastbottommargin && isset($properties['MARGIN-TOP']) && $properties['MARGIN-TOP'] && empty($properties['FLOAT'])) { $currblk['lastbottommargin'] = $lastbottommargin; } if (isset($properties['Z-INDEX']) && $this->currentlayer==0) { $v = intval($properties['Z-INDEX']); if ($v > 0) { $currblk['z-index'] = $v; $this->BeginLayer($v); } } $this->setCSS($properties,'BLOCK',$tag); $currblk['InlineProperties'] = $this->saveInlineProperties(); if (isset($properties['VISIBILITY'])) { $v = strtolower($properties['VISIBILITY']); if (($v == 'hidden' || $v == 'printonly' || $v == 'screenonly') && $this->visibility=='visible' && !$this->tableLevel) { $currblk['visibility'] = $v; $this->SetVisibility($v); } } if(isset($attr['DIR']) && $attr['DIR']) { $currblk['direction'] = strtolower($attr['DIR']); } if(isset($attr['ALIGN']) && $attr['ALIGN']) { $currblk['block-align'] = $align[strtolower($attr['ALIGN'])]; } if (isset($properties['HEIGHT'])) { $currblk['css_set_height'] = $this->ConvertSize($properties['HEIGHT'],($this->h - $this->tMargin - $this->bMargin),$this->FontSize,false); if (($currblk['css_set_height'] + $this->y) > $this->PageBreakTrigger && $this->y > $this->tMargin+5 && $currblk['css_set_height'] < ($this->h - ($this->tMargin + $this->bMargin))) { $this->AddPage($this->CurOrientation); } } else { $currblk['css_set_height'] = false; } if (isset($prevblk['blockContext'])) { $currblk['blockContext'] = $prevblk['blockContext'] ; } if (isset($properties['CLEAR'])) { $this->ClearFloats(strtoupper($properties['CLEAR']), $this->blklvl-1); } $container_w = $prevblk['inner_width']; $bdr = $currblk['border_right']['w']; $bdl = $currblk['border_left']['w']; $pdr = $currblk['padding_right']; $pdl = $currblk['padding_left']; if (isset($currblk['css_set_width'])) { $setwidth = $currblk['css_set_width']; } else { $setwidth = 0; } if (isset($properties['FLOAT']) && strtoupper($properties['FLOAT']) == 'RIGHT' && !$this->ColActive) { $currblk['keep_block_together'] = false; $this->kt_y00 = ''; $this->keep_block_together = 0; $this->blockContext++; $currblk['blockContext'] = $this->blockContext; list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl-1); $maxw = $container_w - $l_width - $r_width; if (($setwidth + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) > $maxw || ($maxw - ($currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr)) < (2*$this->GetCharWidth('W',false))) { if ($l_max < $r_max && ($setwidth + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) <= ($container_w - $r_width) && (($container_w - $r_width) - ($currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr)) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('LEFT', $this->blklvl-1); } else if ($r_max < $l_max && ($setwidth + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) <= ($container_w - $l_width) && (($container_w - $l_width) - ($currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr)) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('RIGHT', $this->blklvl-1); } else { $this->ClearFloats('BOTH', $this->blklvl-1); } list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl-1); } if ($r_exists) { $currblk['margin_right'] += $r_width; } $currblk['float'] = 'R'; $currblk['float_start_y'] = $this->y; if ($currblk['css_set_width']) { $currblk['margin_left'] = $container_w - ($setwidth + $bdl + $pdl + $bdr + $pdr + $currblk['margin_right']); $currblk['float_width'] = ($setwidth + $bdl + $pdl + $bdr + $pdr + $currblk['margin_right']); } else { if ($l_exists) { $currblk['margin_left'] += $l_width; } $currblk['css_set_width'] = $container_w - ($currblk['margin_left'] + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr); $currblk['float_width'] = ($currblk['css_set_width'] + $bdl + $pdl + $bdr + $pdr + $currblk['margin_right']); } } else if (isset($properties['FLOAT']) && strtoupper($properties['FLOAT']) == 'LEFT' && !$this->ColActive) { $currblk['keep_block_together'] = false; $this->kt_y00 = ''; $this->keep_block_together = 0; $this->blockContext++; $currblk['blockContext'] = $this->blockContext; list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl-1); $maxw = $container_w - $l_width - $r_width; if (($setwidth + $currblk['margin_left'] + $bdl + $pdl + $bdr + $pdr) > $maxw || ($maxw - ($currblk['margin_left'] + $bdl + $pdl + $bdr + $pdr)) < (2*$this->GetCharWidth('W',false))) { if ($l_max < $r_max && ($setwidth + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) <= ($container_w - $r_width) && (($container_w - $r_width) - ($currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr)) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('LEFT', $this->blklvl-1); } else if ($r_max < $l_max && ($setwidth + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) <= ($container_w - $l_width) && (($container_w - $l_width) - ($currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr)) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('RIGHT', $this->blklvl-1); } else { $this->ClearFloats('BOTH', $this->blklvl-1); } list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl-1); } if ($l_exists) { $currblk['margin_left'] += $l_width; } $currblk['float'] = 'L'; $currblk['float_start_y'] = $this->y; if ($setwidth) { $currblk['margin_right'] = $container_w - ($setwidth + $bdl + $pdl + $bdr + $pdr + $currblk['margin_left']); $currblk['float_width'] = ($setwidth + $bdl + $pdl + $bdr + $pdr + $currblk['margin_left']); } else { if ($r_exists) { $currblk['margin_right'] += $r_width; } $currblk['css_set_width'] = $container_w - ($currblk['margin_left'] + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr); $currblk['float_width'] = ($currblk['css_set_width'] + $bdl + $pdl + $bdr + $pdr + $currblk['margin_left']); } } else { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl-1); $maxw = $container_w - $l_width - $r_width; if (($setwidth + $currblk['margin_left'] + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) > $maxw || ($maxw - ($currblk['margin_right'] + $currblk['margin_left'] + $bdl + $pdl + $bdr + $pdr)) < (2*$this->GetCharWidth('W',false))) { if ($l_max < $r_max && ($setwidth + $currblk['margin_left'] + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) <= ($container_w - $r_width) && (($container_w - $r_width) - ($currblk['margin_right'] + $currblk['margin_left'] + $bdl + $pdl + $bdr + $pdr)) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('LEFT', $this->blklvl-1); } else if ($r_max < $l_max && ($setwidth + $currblk['margin_left'] + $currblk['margin_right'] + $bdl + $pdl + $bdr + $pdr) <= ($container_w - $l_width) && (($container_w - $l_width) - ($currblk['margin_right'] + $currblk['margin_left'] + $bdl + $pdl + $bdr + $pdr)) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('RIGHT', $this->blklvl-1); } else { $this->ClearFloats('BOTH', $this->blklvl-1); } list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl-1); } if ($r_exists) { $currblk['padding_right'] = max(($r_width-$currblk['margin_right']-$bdr), $pdr); } if ($l_exists) { $currblk['padding_left'] = max(($l_width-$currblk['margin_left']-$bdl), $pdl); } } if ($this->autoPadding && !$this->ColActive && !$this->keep_block_together) { if ($currblk['border_radius_TL_H']>$currblk['padding_left'] && $currblk['border_radius_TL_V']>$currblk['padding_top']) { if ($currblk['border_radius_TL_H']>$currblk['border_radius_TL_V']) { $this->_borderPadding($currblk['border_radius_TL_H'],$currblk['border_radius_TL_V'], $currblk['padding_left'], $currblk['padding_top']); } else { $this->_borderPadding($currblk['border_radius_TL_V'],$currblk['border_radius_TL_H'], $currblk['padding_top'], $currblk['padding_left']); } } if ($currblk['border_radius_TR_H']>$currblk['padding_right'] && $currblk['border_radius_TR_V']>$currblk['padding_top']) { if ($currblk['border_radius_TR_H']>$currblk['border_radius_TR_V']) { $this->_borderPadding($currblk['border_radius_TR_H'],$currblk['border_radius_TR_V'], $currblk['padding_right'], $currblk['padding_top']); } else { $this->_borderPadding($currblk['border_radius_TR_V'],$currblk['border_radius_TR_H'], $currblk['padding_top'], $currblk['padding_right']); } } if ($currblk['border_radius_BL_H']>$currblk['padding_left'] && $currblk['border_radius_BL_V']>$currblk['padding_bottom']) { if ($currblk['border_radius_BL_H']>$currblk['border_radius_BL_V']) { $this->_borderPadding($currblk['border_radius_BL_H'],$currblk['border_radius_BL_V'], $currblk['padding_left'], $currblk['padding_bottom']); } else { $this->_borderPadding($currblk['border_radius_BL_V'],$currblk['border_radius_BL_H'], $currblk['padding_bottom'], $currblk['padding_left']); } } if ($currblk['border_radius_BR_H']>$currblk['padding_right'] && $currblk['border_radius_BR_V']>$currblk['padding_bottom']) { if ($currblk['border_radius_BR_H']>$currblk['border_radius_BR_V']) { $this->_borderPadding($currblk['border_radius_BR_H'],$currblk['border_radius_BR_V'], $currblk['padding_right'], $currblk['padding_bottom']); } else { $this->_borderPadding($currblk['border_radius_BR_V'],$currblk['border_radius_BR_H'], $currblk['padding_bottom'], $currblk['padding_right']); } } } if(!isset($currblk['text_indent'])) { $currblk['text_indent'] = null; } if(!isset($currblk['inner_width'])) { $currblk['inner_width'] = null; } $cbti = $this->ConvertSize($currblk['text_indent'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if ($cbti < 0) { $hangind = -($cbti); if ($currblk['direction'] == 'rtl') { $currblk['padding_right'] = max($currblk['padding_right'],$hangind); } else { $currblk['padding_left'] = max($currblk['padding_left'],$hangind); } } if (isset($currblk['css_set_width'])) { if (isset($properties['MARGIN-LEFT']) && isset($properties['MARGIN-RIGHT']) && strtolower($properties['MARGIN-LEFT'])=='auto' && strtolower($properties['MARGIN-RIGHT'])=='auto') { $anyextra = $prevblk['inner_width'] - ($currblk['css_set_width'] + $currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right']); if ($anyextra>0) { $currblk['margin_left'] = $currblk['margin_right'] = $anyextra /2; } else { $currblk['margin_left'] = $currblk['margin_right'] = 0; } } else if (isset($properties['MARGIN-LEFT']) && strtolower($properties['MARGIN-LEFT'])=='auto') { $currblk['margin_left'] = $prevblk['inner_width'] - ($currblk['css_set_width'] + $currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right'] + $currblk['margin_right']); if ($currblk['margin_left'] < 0) { $currblk['margin_left'] = 0; } } else if (isset($properties['MARGIN-RIGHT']) && strtolower($properties['MARGIN-RIGHT'])=='auto') { $currblk['margin_right'] = $prevblk['inner_width'] - ($currblk['css_set_width'] + $currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right'] + $currblk['margin_left']); if ($currblk['margin_right'] < 0) { $currblk['margin_right'] = 0; } } else { if ($currblk['direction'] == 'rtl') { $currblk['margin_left'] = $prevblk['inner_width'] - ($currblk['css_set_width'] + $currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right'] + $currblk['margin_right']); if ($currblk['margin_left'] < 0) { $currblk['margin_left'] = 0; } } else { $currblk['margin_right'] = $prevblk['inner_width'] - ($currblk['css_set_width'] + $currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right'] + $currblk['margin_left']); if ($currblk['margin_right'] < 0) { $currblk['margin_right'] = 0; } } } } $currblk['outer_left_margin'] = $prevblk['outer_left_margin'] + $currblk['margin_left'] + $prevblk['border_left']['w'] + $prevblk['padding_left']; $currblk['outer_right_margin'] = $prevblk['outer_right_margin'] + $currblk['margin_right'] + $prevblk['border_right']['w'] + $prevblk['padding_right']; $currblk['width'] = $this->pgwidth - ($currblk['outer_right_margin'] + $currblk['outer_left_margin']); $currblk['inner_width'] = $currblk['width'] - ($currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right']); $mw = 2*$this->GetCharWidth('W',false); if ($currblk['inner_width'] < $mw) { $currblk['padding_left'] = 0; $currblk['padding_right'] = 0; $currblk['border_left']['w'] = 0.2; $currblk['border_right']['w'] = 0.2; $currblk['margin_left'] = 0; $currblk['margin_right'] = 0; $currblk['outer_left_margin'] = $prevblk['outer_left_margin'] + $currblk['margin_left'] + $prevblk['border_left']['w'] + $prevblk['padding_left']; $currblk['outer_right_margin'] = $prevblk['outer_right_margin'] + $currblk['margin_right'] + $prevblk['border_right']['w'] + $prevblk['padding_right']; $currblk['width'] = $this->pgwidth - ($currblk['outer_right_margin'] + $currblk['outer_left_margin']); $currblk['inner_width'] = $this->pgwidth - ($currblk['outer_right_margin'] + $currblk['outer_left_margin'] + $currblk['border_left']['w'] + $currblk['padding_left'] + $currblk['border_right']['w'] + $currblk['padding_right']); } $this->x = $this->lMargin + $currblk['outer_left_margin']; if (isset($properties['BACKGROUND-IMAGE']) && $properties['BACKGROUND-IMAGE'] && !$this->kwt && !$this->ColActive && !$this->keep_block_together) { $ret = $this->SetBackground($properties, $currblk['inner_width']); if ($ret) { $currblk['background-image'] = $ret; } } if ($this->use_kwt && isset($attr['KEEP-WITH-TABLE']) && !$this->ColActive && !$this->keep_block_together) { $this->kwt = true; $this->kwt_y0 = $this->y; $this->kwt_x0 = $this->x; $this->kwt_height = 0; $this->kwt_buffer = array(); $this->kwt_Links = array(); $this->kwt_Annots = array(); $this->kwt_moved = false; $this->kwt_saved = false; $this->kwt_Reference = array(); $this->kwt_BMoutlines = array(); $this->kwt_toc = array(); } else { $this->kwt = false; } $currblk['y0'] = $this->y; $currblk['x0'] = $this->x; $currblk['startpage'] = $this->page; $this->oldy = $this->y; $this->lastblocklevelchange = 1 ; break; case 'HR': if (isset($attr['STYLE'])) { $properties = $this->cssmgr->readInlineCSS($attr['STYLE']); if (isset($properties['CLEAR'])) { $this->ClearFloats(strtoupper($properties['CLEAR']),$this->blklvl); } } $this->ignorefollowingspaces = true; $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if (isset($properties['MARGIN-TOP'])) { $objattr['margin_top'] = $this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $objattr['margin_bottom'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['WIDTH'])) { $objattr['width'] = $this->ConvertSize($properties['WIDTH'],$this->blk[$this->blklvl]['inner_width']); } else if(isset($attr['WIDTH']) && $attr['WIDTH'] != '') $objattr['width'] = $this->ConvertSize($attr['WIDTH'],$this->blk[$this->blklvl]['inner_width']); if (isset($properties['TEXT-ALIGN'])) { $objattr['align'] = $align[strtolower($properties['TEXT-ALIGN'])]; } else if(isset($attr['ALIGN']) && $attr['ALIGN'] != '') $objattr['align'] = $align[strtolower($attr['ALIGN'])]; if (isset($properties['MARGIN-LEFT']) && strtolower($properties['MARGIN-LEFT'])=='auto') { $objattr['align'] = 'R'; } if (isset($properties['MARGIN-RIGHT']) && strtolower($properties['MARGIN-RIGHT'])=='auto') { $objattr['align'] = 'L'; if (isset($properties['MARGIN-RIGHT']) && strtolower($properties['MARGIN-RIGHT'])=='auto' && isset($properties['MARGIN-LEFT']) && strtolower($properties['MARGIN-LEFT'])=='auto') { $objattr['align'] = 'C'; } } if (isset($properties['COLOR'])) { $objattr['color'] = $this->ConvertColor($properties['COLOR']); } else if(isset($attr['COLOR']) && $attr['COLOR'] != '') $objattr['color'] = $this->ConvertColor($attr['COLOR']); if (isset($properties['HEIGHT'])) { $objattr['linewidth'] = $this->ConvertSize($properties['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if ($this->tableLevel) { $objattr['W-PERCENT'] = 100; if (isset($properties['WIDTH']) && stristr($properties['WIDTH'],'%')) { $properties['WIDTH'] += 0; $objattr['W-PERCENT'] = $properties['WIDTH']; } if (isset($attr['WIDTH']) && stristr($attr['WIDTH'],'%')) { $attr['WIDTH'] += 0; $objattr['W-PERCENT'] = $attr['WIDTH']; } } $objattr['type'] = 'hr'; $objattr['height'] = $objattr['linewidth'] + $objattr['margin_top'] + $objattr['margin_bottom']; $e = "\xbb\xa4\xactype=image,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0 ; $this->_saveCellTextBuffer($e, $this->HREF); } else { $this->_saveTextBuffer($e, $this->HREF); } break; case 'BARCODE': if(isset($attr['CODE']) && $attr['CODE']) { $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['padding_top'] = 0; $objattr['padding_bottom'] = 0; $objattr['padding_left'] = 0; $objattr['padding_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $objattr['code'] = $attr['CODE']; if(isset($attr['TYPE'])) { $objattr['btype'] = trim(strtoupper($attr['TYPE'])); } else { $objattr['btype'] = 'EAN13'; } if (preg_match('/^(EAN13|ISBN|ISSN|EAN8|UPCA|UPCE)P([25])$/',$objattr['btype'],$m)) { $objattr['btype'] = $m[1]; $objattr['bsupp'] = $m[2]; if (preg_match('/^(\S+)\s+(.*)$/',$objattr['code'],$mm)) { $objattr['code'] = $mm[1]; $objattr['bsupp_code'] = $mm[2]; } } else { $objattr['bsupp'] = 0; } if(isset($attr['TEXT']) && $attr['TEXT']==1) { $objattr['showtext'] = 1; } else { $objattr['showtext'] = 0; } if(isset($attr['SIZE']) && $attr['SIZE']>0) { $objattr['bsize'] = $attr['SIZE']; } else { $objattr['bsize'] = 1; } if(isset($attr['HEIGHT']) && $attr['HEIGHT']>0) { $objattr['bheight'] = $attr['HEIGHT']; } else { $objattr['bheight'] = 1; } if(isset($attr['PR']) && $attr['PR']>0) { $objattr['pr_ratio'] = $attr['PR']; } else { $objattr['pr_ratio'] = ''; } $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if(isset($properties ['DISPLAY']) && strtolower($properties ['DISPLAY'])=='none') { return; } if (isset($properties['MARGIN-TOP'])) { $objattr['margin_top']=$this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $objattr['margin_bottom'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT'])) { $objattr['margin_left'] = $this->ConvertSize($properties['MARGIN-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-RIGHT'])) { $objattr['margin_right'] = $this->ConvertSize($properties['MARGIN-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-TOP'])) { $objattr['padding_top']=$this->ConvertSize($properties['PADDING-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-BOTTOM'])) { $objattr['padding_bottom'] = $this->ConvertSize($properties['PADDING-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-LEFT'])) { $objattr['padding_left'] = $this->ConvertSize($properties['PADDING-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-RIGHT'])) { $objattr['padding_right'] = $this->ConvertSize($properties['PADDING-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['BORDER-TOP'])) { $objattr['border_top'] = $this->border_details($properties['BORDER-TOP']); } if (isset($properties['BORDER-BOTTOM'])) { $objattr['border_bottom'] = $this->border_details($properties['BORDER-BOTTOM']); } if (isset($properties['BORDER-LEFT'])) { $objattr['border_left'] = $this->border_details($properties['BORDER-LEFT']); } if (isset($properties['BORDER-RIGHT'])) { $objattr['border_right'] = $this->border_details($properties['BORDER-RIGHT']); } if (isset($properties['VERTICAL-ALIGN'])) { $objattr['vertical-align'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } if (isset($properties['COLOR']) && $properties['COLOR'] != '') { $objattr['color'] = $this->ConvertColor($properties['COLOR']); } else { $objattr['color'] = false; } if (isset($properties['BACKGROUND-COLOR']) && $properties['BACKGROUND-COLOR'] != '') { $objattr['bgcolor'] = $this->ConvertColor($properties['BACKGROUND-COLOR']); } else { $objattr['bgcolor'] = false; } if (!class_exists('PDFBarcode', false)) { include(_MPDF_PATH.'classes/barcode.php'); } $this->barcode = new PDFBarcode(); if ($objattr['btype'] == 'EAN13' || $objattr['btype'] == 'ISBN' || $objattr['btype'] == 'ISSN' || $objattr['btype'] == 'UPCA' || $objattr['btype'] == 'UPCE' || $objattr['btype'] == 'EAN8') { $code = preg_replace('/\-/','',$objattr['code']); if ($objattr['btype'] == 'ISSN' || $objattr['btype'] == 'ISBN') { $arrcode = $this->barcode->getBarcodeArray($code, 'EAN13'); } else { $arrcode = $this->barcode->getBarcodeArray($code, $objattr['btype'] ); } if ($arrcode === false) { $this->Error('Error in barcode string.'); } if ($objattr['bsupp'] == 2 || $objattr['bsupp'] == 5) { $supparrcode = $this->barcode->getBarcodeArray($objattr['bsupp_code'], 'EAN'.$objattr['bsupp'] ); $w = ($arrcode["maxw"] + $arrcode['lightmL'] + $arrcode['lightmR'] + $supparrcode["maxw"] + $supparrcode['sepM']) * $arrcode['nom-X'] * $objattr['bsize']; } else { $w = ($arrcode["maxw"] + $arrcode['lightmL'] + $arrcode['lightmR']) * $arrcode['nom-X'] * $objattr['bsize']; } $h = $arrcode['nom-H'] * $objattr['bsize'] * $objattr['bheight']; if (($objattr['showtext'] && $objattr['btype'] == 'EAN13') || $objattr['btype'] == 'ISBN' || $objattr['btype'] == 'ISSN') { $tisbnm = 1.5 * $objattr['bsize']; $isbn_fontsize = 2.1 * $objattr['bsize']; $h += $isbn_fontsize + $tisbnm ; } } else if ($objattr['btype'] == 'QR') { $w = $h = $objattr['bsize']*25; $objattr['errorlevel'] = 'L'; if (isset($attr['ERROR'])) { $objattr['errorlevel'] = $attr['ERROR']; } } else if ($objattr['btype'] == 'IMB' || $objattr['btype'] == 'RM4SCC' || $objattr['btype'] == 'KIX' || $objattr['btype'] == 'POSTNET' || $objattr['btype'] == 'PLANET') { $arrcode = $this->barcode->getBarcodeArray($objattr['code'], $objattr['btype'] ); if ($arrcode === false) { $this->Error('Error in barcode string.'); } $w = ($arrcode["maxw"] * $arrcode['nom-X'] * $objattr['bsize']) + $arrcode['quietL'] + $arrcode['quietR']; $h = ($arrcode['nom-H'] * $objattr['bsize']) + (2*$arrcode['quietTB']); } else if (in_array($objattr['btype'], array('C128A','C128B','C128C','EAN128A','EAN128B','EAN128C','C39','C39+','C39E','C39E+','S25','S25+','I25','I25+','I25B','I25B+','C93','MSI','MSI+','CODABAR','CODE11'))) { $arrcode = $this->barcode->getBarcodeArray($objattr['code'], $objattr['btype'], $objattr['pr_ratio'] ); if ($arrcode === false) { $this->Error('Error in barcode string.'); } $w = ($arrcode["maxw"] + $arrcode['lightmL'] + $arrcode['lightmR']) * $arrcode['nom-X'] * $objattr['bsize']; $h = ((2*$arrcode['lightTB'] * $arrcode['nom-X']) + $arrcode['nom-H']) * $objattr['bsize'] * $objattr['bheight']; } else { break; } $extraheight = $objattr['padding_top'] + $objattr['padding_bottom'] + $objattr['margin_top'] + $objattr['margin_bottom'] + $objattr['border_top']['w'] + $objattr['border_bottom']['w']; $extrawidth = $objattr['padding_left'] + $objattr['padding_right'] + $objattr['margin_left'] + $objattr['margin_right'] + $objattr['border_left']['w'] + $objattr['border_right']['w']; $objattr['type'] = 'barcode'; $objattr['height'] = $h + $extraheight; $objattr['width'] = $w + $extrawidth; $objattr['barcode_height'] = $h; $objattr['barcode_width'] = $w; if (!$this->ColActive && !$this->tableLevel && !$this->listlvl && !$this->kwt && !$this->keep_block_together) { if (isset($properties['FLOAT']) && (strtoupper($properties['FLOAT']) == 'RIGHT' || strtoupper($properties['FLOAT']) == 'LEFT')) { $objattr['float'] = substr(strtoupper($properties['FLOAT']),0,1); } } $e = "\xbb\xa4\xactype=barcode,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { $this->_saveCellTextBuffer($e, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } else { $this->_saveTextBuffer($e, $this->HREF); } } break; case 'SELECT': $this->lastoptionaltag = ''; $this->InlineProperties[$tag] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if (isset($properties['FONT-FAMILY'])) { $this->SetFont($properties['FONT-FAMILY'],$this->FontStyle,0,false); } if (isset($properties['FONT-SIZE'])) { $mmsize = $this->ConvertSize($properties['FONT-SIZE'],$this->default_font_size/_MPDFK); $this->SetFontSize($mmsize*_MPDFK,false); } if (isset($attr['SPELLCHECK']) && strtolower($attr['SPELLCHECK'])=='true') { $this->selectoption['SPELLCHECK'] = true; } if (isset($properties['COLOR'])) { $this->selectoption['COLOR'] = $this->ConvertColor($properties['COLOR']); } $this->specialcontent = "type=select"; if(isset($attr['DISABLED'])) { $this->selectoption['DISABLED'] = $attr['DISABLED']; } if(isset($attr['READONLY'])) { $this->selectoption['READONLY'] = $attr['READONLY']; } if(isset($attr['REQUIRED'])) { $this->selectoption['REQUIRED'] = $attr['REQUIRED']; } if(isset($attr['EDITABLE'])) { $this->selectoption['EDITABLE'] = $attr['EDITABLE']; } if(isset($attr['TITLE'])) { $this->selectoption['TITLE'] = $attr['TITLE']; } if(isset($attr['MULTIPLE'])) { $this->selectoption['MULTIPLE'] = $attr['MULTIPLE']; } if(isset($attr['SIZE']) && $attr['SIZE']>1) { $this->selectoption['SIZE'] = $attr['SIZE']; } if ($this->useActiveForms) { if(isset($attr['NAME'])) { $this->selectoption['NAME'] = $attr['NAME']; } if (isset($attr['ONCHANGE'])) { $this->selectoption['ONCHANGE'] = $attr['ONCHANGE']; } } $properties = array(); break; case 'OPTION': $this->lastoptionaltag = 'OPTION'; $this->selectoption['ACTIVE'] = true; $this->selectoption['currentSEL'] = false; if (empty($this->selectoption)) { $this->selectoption['MAXWIDTH'] = ''; $this->selectoption['SELECTED'] = ''; } if (isset($attr['SELECTED'])) { $this->selectoption['SELECTED'] = ''; $this->selectoption['currentSEL'] = true; } if(isset($attr['VALUE'])) { $attr['VALUE'] = strcode2utf($attr['VALUE']); $attr['VALUE'] = $this->lesser_entity_decode($attr['VALUE']); if ($this->onlyCoreFonts) $attr['VALUE'] = mb_convert_encoding($attr['VALUE'], $this->mb_enc,'UTF-8'); } $this->selectoption['currentVAL'] = $attr['VALUE']; break; case 'TEXTAREA': $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; if(isset($attr['DISABLED'])) { $objattr['disabled'] = true; } if(isset($attr['READONLY'])) { $objattr['readonly'] = true; } if(isset($attr['REQUIRED'])) { $objattr['required'] = true; } if(isset($attr['SPELLCHECK']) && strtolower($attr['SPELLCHECK'])=='true') { $objattr['spellcheck'] = true; } if(isset($attr['TITLE'])) { $objattr['title'] = $attr['TITLE']; } if ($this->onlyCoreFonts) $objattr['title'] = mb_convert_encoding($objattr['title'], $this->mb_enc,'UTF-8'); if ($this->useActiveForms) { if(isset($attr['NAME'])) { $objattr['fieldname'] = $attr['NAME']; } $this->form->form_element_spacing['textarea']['outer']['v'] = 0; $this->form->form_element_spacing['textarea']['inner']['v'] = 0; if (isset($attr['ONCALCULATE'])) { $objattr['onCalculate'] = $attr['ONCALCULATE']; } else if (isset($attr['ONCHANGE'])) { $objattr['onCalculate'] = $attr['ONCHANGE']; } if (isset($attr['ONVALIDATE'])) { $objattr['onValidate'] = $attr['ONVALIDATE']; } if (isset($attr['ONKEYSTROKE'])) { $objattr['onKeystroke'] = $attr['ONKEYSTROKE']; } if (isset($attr['ONFORMAT'])) { $objattr['onFormat'] = $attr['ONFORMAT']; } } $this->InlineProperties[$tag] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if (isset($properties['FONT-FAMILY'])) { $this->SetFont($properties['FONT-FAMILY'],'',0,false); } if (isset($properties['FONT-SIZE'])) { $mmsize = $this->ConvertSize($properties['FONT-SIZE'],$this->default_font_size/_MPDFK); $this->SetFontSize($mmsize*_MPDFK,false); } if (isset($properties['COLOR'])) { $objattr['color'] = $this->ConvertColor($properties['COLOR']); } $objattr['fontfamily'] = $this->FontFamily; $objattr['fontsize'] = $this->FontSizePt; if ($this->useActiveForms) { if(isset($properties['TEXT-ALIGN'])) { $objattr['text_align'] = $align[strtolower($properties['TEXT-ALIGN'])]; } else if(isset($attr['ALIGN'])) { $objattr['text_align'] = $align[strtolower($attr['ALIGN'])]; } if (isset($properties['OVERFLOW']) && strtolower($properties['OVERFLOW'])=='hidden') { $objattr['donotscroll'] = true; } if (isset($properties['BORDER-TOP-COLOR'])) { $objattr['border-col'] = $this->ConvertColor($properties['BORDER-TOP-COLOR']); } if (isset($properties['BACKGROUND-COLOR'])) { $objattr['background-col'] = $this->ConvertColor($properties['BACKGROUND-COLOR']); } } $this->SetLineHeight('',$this->form->textarea_lineheight); $formLineHeight = $this->lineheight; $w = 0; $h = 0; if(isset($properties['WIDTH'])) $w = $this->ConvertSize($properties['WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if(isset($properties['HEIGHT'])) $h = $this->ConvertSize($properties['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if ($properties['VERTICAL-ALIGN']) { $objattr['vertical-align'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } $colsize = 20; $rowsize = 2; if (isset($attr['COLS'])) $colsize = intval($attr['COLS']); if (isset($attr['ROWS'])) $rowsize = intval($attr['ROWS']); $charsize = $this->GetCharWidth('w',false); if ($w) { $colsize = round(($w-($this->form->form_element_spacing['textarea']['outer']['h']*2)-($this->form->form_element_spacing['textarea']['inner']['h']*2))/$charsize); } if ($h) { $rowsize = round(($h-($this->form->form_element_spacing['textarea']['outer']['v']*2)-($this->form->form_element_spacing['textarea']['inner']['v']*2))/$formLineHeight); } $objattr['type'] = 'textarea'; $objattr['width'] = ($colsize * $charsize) + ($this->form->form_element_spacing['textarea']['outer']['h']*2)+($this->form->form_element_spacing['textarea']['inner']['h']*2); $objattr['height'] = ($rowsize * $formLineHeight) + ($this->form->form_element_spacing['textarea']['outer']['v']*2)+($this->form->form_element_spacing['textarea']['inner']['v']*2); $objattr['rows'] = $rowsize; $objattr['cols'] = $colsize; $this->specialcontent = serialize($objattr); if ($this->tableLevel) { $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } $properties = array(); break; case 'INPUT': if (!isset($attr['TYPE'])) $attr['TYPE'] == 'TEXT'; $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $objattr['type'] = 'input'; if(isset($attr['DISABLED'])) { $objattr['disabled'] = true; } if(isset($attr['READONLY'])) { $objattr['readonly'] = true; } if(isset($attr['REQUIRED'])) { $objattr['required'] = true; } if(isset($attr['SPELLCHECK']) && strtolower($attr['SPELLCHECK'])=='true') { $objattr['spellcheck'] = true; } if(isset($attr['TITLE'])) { $objattr['title'] = $attr['TITLE']; } else if(isset($attr['ALT'])) { $objattr['title'] = $attr['ALT']; } else $objattr['title'] = ''; $objattr['title'] = strcode2utf($objattr['title']); $objattr['title'] = $this->lesser_entity_decode($objattr['title']); if ($this->onlyCoreFonts) $objattr['title'] = mb_convert_encoding($objattr['title'], $this->mb_enc,'UTF-8'); if ($this->useActiveForms) { if(isset($attr['NAME'])) { $objattr['fieldname'] = $attr['NAME']; } } if(isset($attr['VALUE'])) { $attr['VALUE'] = strcode2utf($attr['VALUE']); $attr['VALUE'] = $this->lesser_entity_decode($attr['VALUE']); if ($this->onlyCoreFonts) $attr['VALUE'] = mb_convert_encoding($attr['VALUE'], $this->mb_enc,'UTF-8'); $objattr['value'] = $attr['VALUE']; } $this->InlineProperties[$tag] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('',$tag,$attr); $objattr['vertical-align'] = ''; if (isset($properties['FONT-FAMILY'])) { $this->SetFont($properties['FONT-FAMILY'],$this->FontStyle,0,false); } if (isset($properties['FONT-SIZE'])) { $mmsize = $this->ConvertSize($properties['FONT-SIZE'],($this->default_font_size/_MPDFK)); $this->SetFontSize($mmsize*_MPDFK,false); } if (isset($properties['COLOR'])) { $objattr['color'] = $this->ConvertColor($properties['COLOR']); } $objattr['fontfamily'] = $this->FontFamily; $objattr['fontsize'] = $this->FontSizePt; if ($this->useActiveForms) { if(isset($attr['ALIGN'])) { $objattr['text_align'] = $align[strtolower($attr['ALIGN'])]; } else if(isset($properties['TEXT-ALIGN'])) { $objattr['text_align'] = $align[strtolower($properties['TEXT-ALIGN'])]; } if (isset($properties['BORDER-TOP-COLOR'])) { $objattr['border-col'] = $this->ConvertColor($properties['BORDER-TOP-COLOR']); } if (isset($properties['BACKGROUND-COLOR'])) { $objattr['background-col'] = $this->ConvertColor($properties['BACKGROUND-COLOR']); } } $type = ''; $texto=''; $height = $this->FontSize; $width = 0; $spacesize = $this->GetCharWidth(' ',false); $w = 0; if(isset($properties['WIDTH'])) $w = $this->ConvertSize($properties['WIDTH'],$this->blk[$this->blklvl]['inner_width']); if ($properties['VERTICAL-ALIGN']) { $objattr['vertical-align'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } switch(strtoupper($attr['TYPE'])){ case 'HIDDEN': $this->ignorefollowingspaces = true; if ($this->useActiveForms) { $this->form->SetFormText( 0, 0, $objattr['fieldname'], $objattr['value'], $objattr['value'], '', 0, '', true ); } if ($this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); break 2; case 'CHECKBOX': $type = 'CHECKBOX'; if (isset($attr['CHECKED'])) { $objattr['checked'] = true; } else { $objattr['checked'] = false; } $width = $this->FontSize; $height = $this->FontSize; break; case 'RADIO': $type = 'RADIO'; if (isset($attr['CHECKED'])) $objattr['checked'] = true; $width = $this->FontSize; $height = $this->FontSize; break; case 'IMAGE': if(isset($attr['SRC'])) { $type = 'IMAGE'; $srcpath = $attr['SRC']; $orig_srcpath = $attr['ORIG_SRC']; if (isset($properties['MARGIN-TOP'])) { $objattr['margin_top']=$this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $objattr['margin_bottom'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT'])) { $objattr['margin_left'] = $this->ConvertSize($properties['MARGIN-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-RIGHT'])) { $objattr['margin_right'] = $this->ConvertSize($properties['MARGIN-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['BORDER-TOP'])) { $objattr['border_top'] = $this->border_details($properties['BORDER-TOP']); } if (isset($properties['BORDER-BOTTOM'])) { $objattr['border_bottom'] = $this->border_details($properties['BORDER-BOTTOM']); } if (isset($properties['BORDER-LEFT'])) { $objattr['border_left'] = $this->border_details($properties['BORDER-LEFT']); } if (isset($properties['BORDER-RIGHT'])) { $objattr['border_right'] = $this->border_details($properties['BORDER-RIGHT']); } $objattr['padding_top'] = 0; $objattr['padding_bottom'] = 0; $objattr['padding_left'] = 0; $objattr['padding_right'] = 0; if (isset($properties['VERTICAL-ALIGN'])) { $objattr['vertical-align'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } $w = 0; $h = 0; if(isset($properties['WIDTH'])) $w = $this->ConvertSize($properties['WIDTH'],$this->blk[$this->blklvl]['inner_width']); if(isset($properties['HEIGHT'])) $h = $this->ConvertSize($properties['HEIGHT'],$this->blk[$this->blklvl]['inner_width']); $extraheight = $objattr['margin_top'] + $objattr['margin_bottom'] + $objattr['border_top']['w'] + $objattr['border_bottom']['w']; $extrawidth = $objattr['margin_left'] + $objattr['margin_right'] + $objattr['border_left']['w'] + $objattr['border_right']['w']; $info=$this->_getImage($srcpath, true, true, $orig_srcpath); if(!$info) { $info = $this->_getImage($this->noImageFile); if ($info) { $srcpath = $this->noImageFile; $w = ($info['w'] * (25.4/$this->dpi)); $h = ($info['h'] * (25.4/$this->dpi)); } } if(!$info) break; if ($info['cs']=='Indexed') { $objattr['Indexed'] = true; } $objattr['file'] = $srcpath; if($w==0 and $h==0) { if ($info['type']=='wmf') { $w = abs($info['w'])/(20*_MPDFK); $h = abs($info['h']) / (20*_MPDFK); } else if ($info['type']=='svg') { $w = abs($info['w'])/_MPDFK; $h = abs($info['h'])/_MPDFK; } else { $w=($info['w']/_MPDFK) * (72/$this->img_dpi); $h=($info['h']/_MPDFK) * (72/$this->img_dpi); } if (isset($properties['IMAGE-RESOLUTION'])) { if (preg_match('/from-image/i', $properties['IMAGE-RESOLUTION']) && isset($info['set-dpi']) && $info['set-dpi']>0) { $w *= $this->img_dpi / $info['set-dpi']; $h *= $this->img_dpi / $info['set-dpi']; } else if (preg_match('/(\d+)dpi/i', $properties['IMAGE-RESOLUTION'], $m)) { $dpi = $m[1]; if ($dpi > 0) { $w *= $this->img_dpi / $dpi; $h *= $this->img_dpi / $dpi; } } } } if($w==0) $w=$h*$info['w']/$info['h']; if($h==0) $h=$w*$info['h']/$info['w']; $maxWidth = $this->blk[$this->blklvl]['inner_width']; $maxHeight = $this->h - ($this->tMargin + $this->bMargin + 10) ; if ($this->fullImageHeight) { $maxHeight = $this->fullImageHeight; } if ($w + $extrawidth > $maxWidth ) { $w = $maxWidth - $extrawidth; $h=$w*$info['h']/$info['w']; } if ($h + $extraheight > $maxHeight ) { $h = $maxHeight - $extraheight; $w=$h*$info['w']/$info['h']; } $height = $h + $extraheight; $width = $w + $extrawidth; $objattr['type'] = 'image'; $objattr['itype'] = $info['type']; $objattr['orig_h'] = $info['h']; $objattr['orig_w'] = $info['w']; if ($info['type']=='wmf') { $objattr['wmf_x'] = $info['x']; $objattr['wmf_y'] = $info['y']; } else if ($info['type']=='svg') { $objattr['wmf_x'] = $info['x']; $objattr['wmf_y'] = $info['y']; } $objattr['height'] = $h + $extraheight; $objattr['width'] = $w + $extrawidth; $objattr['image_height'] = $h; $objattr['image_width'] = $w; $objattr['ID'] = $info['i']; $texto = 'X'; if ($this->useActiveForms) { if (isset($attr['ONCLICK'])) { $objattr['onClick'] = $attr['ONCLICK']; } $objattr['type'] = 'input'; $type = 'IMAGE'; } break; } case 'BUTTON': case 'SUBMIT': case 'RESET': $type = strtoupper($attr['TYPE']); if ($type=='IMAGE') { $type = 'BUTTON'; } if(isset($attr['NOPRINT'])) { $objattr['noprint'] = true; } if (!isset($attr['VALUE'])) { $objattr['value'] = ucfirst(strtolower($type)); } $texto = " " . $objattr['value'] . " "; $width = $this->GetStringWidth($texto) + ($this->form->form_element_spacing['button']['outer']['h']*2)+($this->form->form_element_spacing['button']['inner']['h']*2); $height = $this->FontSize + ($this->form->form_element_spacing['button']['outer']['v']*2)+($this->form->form_element_spacing['button']['inner']['v']*2); if ($this->useActiveForms) { if (isset($attr['ONCLICK'])) { $objattr['onClick'] = $attr['ONCLICK']; } } break; case 'PASSWORD': case 'TEXT': default: if ($type == '') { $type = 'TEXT'; } if(strtoupper($attr['TYPE'])=='PASSWORD') { $type = 'PASSWORD'; } if (isset($attr['VALUE'])) { if ($type == 'PASSWORD') { $num_stars = mb_strlen($attr['VALUE'],$this->mb_enc ); $texto = str_repeat('*',$num_stars); } else { $texto = $attr['VALUE']; } } $xw = ($this->form->form_element_spacing['input']['outer']['h']*2)+($this->form->form_element_spacing['input']['inner']['h']*2); $xh = ($this->form->form_element_spacing['input']['outer']['v']*2)+($this->form->form_element_spacing['input']['inner']['v']*2); if ($w) { $width = $w + $xw; } else { $width = (20 * $spacesize) + $xw; } if (isset($attr['SIZE']) and ctype_digit($attr['SIZE']) ) $width = ($attr['SIZE'] * $spacesize) + $xw; $height = $this->FontSize + $xh; if (isset($attr['MAXLENGTH']) and ctype_digit($attr['MAXLENGTH']) ) $objattr['maxlength'] = $attr['MAXLENGTH']; if ($this->useActiveForms) { if (isset($attr['ONCALCULATE'])) { $objattr['onCalculate'] = $attr['ONCALCULATE']; } else if (isset($attr['ONCHANGE'])) { $objattr['onCalculate'] = $attr['ONCHANGE']; } if (isset($attr['ONVALIDATE'])) { $objattr['onValidate'] = $attr['ONVALIDATE']; } if (isset($attr['ONKEYSTROKE'])) { $objattr['onKeystroke'] = $attr['ONKEYSTROKE']; } if (isset($attr['ONFORMAT'])) { $objattr['onFormat'] = $attr['ONFORMAT']; } } break; } $objattr['subtype'] = $type; $objattr['text'] = $texto; $objattr['width'] = $width; $objattr['height'] = $height; $e = "\xbb\xa4\xactype=input,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { $this->_saveCellTextBuffer($e, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } else { $this->_saveTextBuffer($e, $this->HREF); } if ($this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); break; case 'JPGRAPH': if (!$this->useGraphs) { break; } if ($attr['TABLE']) { $gid = strtoupper($attr['TABLE']); } else { $gid = '0'; } if (!is_array($this->graphs[$gid]) || count($this->graphs[$gid])==0 ) { break; } include_once(_MPDF_PATH.'graph.php'); $this->graphs[$gid]['attr'] = $attr; if (isset($this->graphs[$gid]['attr']['WIDTH']) && $this->graphs[$gid]['attr']['WIDTH']) { $this->graphs[$gid]['attr']['cWIDTH']=$this->ConvertSize($this->graphs[$gid]['attr']['WIDTH'],$pgwidth); } if (isset($this->graphs[$gid]['attr']['HEIGHT']) && $this->graphs[$gid]['attr']['HEIGHT']) { $this->graphs[$gid]['attr']['cHEIGHT']=$this->ConvertSize($this->graphs[$gid]['attr']['HEIGHT'],$pgwidth); } $graph_img = print_graph($this->graphs[$gid],$this->blk[$this->blklvl]['inner_width']); if ($graph_img) { if(isset($attr['ROTATE'])) { if ($attr['ROTATE']==90 || $attr['ROTATE']==-90) { $tmpw = $graph_img['w']; $graph_img['w']= $graph_img['h']; $graph_img['h']= $tmpw; } } $attr['SRC'] = $graph_img['file']; $attr['WIDTH'] = $graph_img['w']; $attr['HEIGHT'] = $graph_img['h']; } else { break; } case 'IMG': if ($this->progressBar) { $this->UpdateProgressBar(1,'','IMG'); } $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['padding_top'] = 0; $objattr['padding_bottom'] = 0; $objattr['padding_left'] = 0; $objattr['padding_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; if(isset($attr['SRC'])) { $srcpath = $attr['SRC']; $orig_srcpath = $attr['ORIG_SRC']; $properties = $this->cssmgr->MergeCSS('',$tag,$attr); if(isset($properties ['DISPLAY']) && strtolower($properties ['DISPLAY'])=='none') { return; } if (isset($properties['Z-INDEX']) && $this->currentlayer==0) { $v = intval($properties['Z-INDEX']); if ($v > 0) { $objattr['z-index'] = $v; } } $objattr['visibility'] = 'visible'; if (isset($properties['VISIBILITY'])) { $v = strtolower($properties['VISIBILITY']); if (($v == 'hidden' || $v == 'printonly' || $v == 'screenonly') && $this->visibility=='visible') { $objattr['visibility'] = $v; } } if (isset($properties['MARGIN-TOP'])) { $objattr['margin_top']=$this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $objattr['margin_bottom'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT'])) { $objattr['margin_left'] = $this->ConvertSize($properties['MARGIN-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-RIGHT'])) { $objattr['margin_right'] = $this->ConvertSize($properties['MARGIN-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-TOP'])) { $objattr['padding_top']=$this->ConvertSize($properties['PADDING-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-BOTTOM'])) { $objattr['padding_bottom'] = $this->ConvertSize($properties['PADDING-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-LEFT'])) { $objattr['padding_left'] = $this->ConvertSize($properties['PADDING-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-RIGHT'])) { $objattr['padding_right'] = $this->ConvertSize($properties['PADDING-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['BORDER-TOP'])) { $objattr['border_top'] = $this->border_details($properties['BORDER-TOP']); } if (isset($properties['BORDER-BOTTOM'])) { $objattr['border_bottom'] = $this->border_details($properties['BORDER-BOTTOM']); } if (isset($properties['BORDER-LEFT'])) { $objattr['border_left'] = $this->border_details($properties['BORDER-LEFT']); } if (isset($properties['BORDER-RIGHT'])) { $objattr['border_right'] = $this->border_details($properties['BORDER-RIGHT']); } if (isset($properties['VERTICAL-ALIGN'])) { $objattr['vertical-align'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } $w = 0; $h = 0; if(isset($properties['WIDTH'])) $w = $this->ConvertSize($properties['WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['WIDTH'])) $w = $this->ConvertSize($attr['WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if(isset($properties['HEIGHT'])) $h = $this->ConvertSize($properties['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['HEIGHT'])) $h = $this->ConvertSize($attr['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); $maxw=$maxh=$minw=$minh=false; if(isset($properties['MAX-WIDTH'])) $maxw = $this->ConvertSize($properties['MAX-WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['MAX-WIDTH'])) $maxw = $this->ConvertSize($attr['MAX-WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if(isset($properties['MAX-HEIGHT'])) $maxh = $this->ConvertSize($properties['MAX-HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['MAX-HEIGHT'])) $maxh = $this->ConvertSize($attr['MAX-HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if(isset($properties['MIN-WIDTH'])) $minw = $this->ConvertSize($properties['MIN-WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['MIN-WIDTH'])) $minw = $this->ConvertSize($attr['MIN-WIDTH'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if(isset($properties['MIN-HEIGHT'])) $minh = $this->ConvertSize($properties['MIN-HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); else if(isset($attr['MIN-HEIGHT'])) $minh = $this->ConvertSize($attr['MIN-HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if (isset($properties['OPACITY']) && $properties['OPACITY'] > 0 && $properties['OPACITY'] <= 1) { $objattr['opacity'] = $properties['OPACITY']; } if ($this->HREF) { if (strpos($this->HREF,".") === false && strpos($this->HREF,"@") !== 0) { $href = $this->HREF; while(array_key_exists($href,$this->internallink)) $href="#".$href; $this->internallink[$href] = $this->AddLink(); $objattr['link'] = $this->internallink[$href]; } else { $objattr['link'] = $this->HREF; } } $extraheight = $objattr['padding_top'] + $objattr['padding_bottom'] + $objattr['margin_top'] + $objattr['margin_bottom'] + $objattr['border_top']['w'] + $objattr['border_bottom']['w']; $extrawidth = $objattr['padding_left'] + $objattr['padding_right'] + $objattr['margin_left'] + $objattr['margin_right'] + $objattr['border_left']['w'] + $objattr['border_right']['w']; if(isset($properties['GRADIENT-MASK']) && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/',$properties['GRADIENT-MASK'])) { $objattr['GRADIENT-MASK'] = $properties['GRADIENT-MASK']; } $info=$this->_getImage($srcpath, true, true, $orig_srcpath); if(!$info) { $info = $this->_getImage($this->noImageFile); if ($info) { $srcpath = $this->noImageFile; $w = ($info['w'] * (25.4/$this->dpi)); $h = ($info['h'] * (25.4/$this->dpi)); } } if(!$info) break; if(isset($attr['ROTATE'])) { $image_orientation = $attr['ROTATE']; } else if(isset($properties['IMAGE-ORIENTATION'])) { $image_orientation = $properties['IMAGE-ORIENTATION']; } else { $image_orientation = 0; } if($image_orientation) { if ($image_orientation==90 || $image_orientation==-90 || $image_orientation==270) { $tmpw = $info['w']; $info['w'] = $info['h']; $info['h'] = $tmpw; } $objattr['ROTATE'] = $image_orientation; } $objattr['file'] = $srcpath; if($w==0 and $h==0) { if ($info['type']=='wmf') { $w = abs($info['w'])/(20*_MPDFK); $h = abs($info['h']) / (20*_MPDFK); } else if ($info['type']=='svg') { $w = abs($info['w'])/_MPDFK; $h = abs($info['h'])/_MPDFK; } else { $w=($info['w']/_MPDFK) * (72/$this->img_dpi); $h=($info['h']/_MPDFK) * (72/$this->img_dpi); } if (isset($properties['IMAGE-RESOLUTION'])) { if (preg_match('/from-image/i', $properties['IMAGE-RESOLUTION']) && isset($info['set-dpi']) && $info['set-dpi']>0) { $w *= $this->img_dpi / $info['set-dpi']; $h *= $this->img_dpi / $info['set-dpi']; } else if (preg_match('/(\d+)dpi/i', $properties['IMAGE-RESOLUTION'], $m)) { $dpi = $m[1]; if ($dpi > 0) { $w *= $this->img_dpi / $dpi; $h *= $this->img_dpi / $dpi; } } } } if($w==0) $w=abs($h*$info['w']/$info['h']); if($h==0) $h=abs($w*$info['h']/$info['w']); if ($minw && $w<$minw) { $w = $minw; $h=abs($w*$info['h']/$info['w']); } if ($maxw && $w>$maxw) { $w = $maxw; $h=abs($w*$info['h']/$info['w']); } if ($minh && $h<$minh) { $h = $minh; $w=abs($h*$info['w']/$info['h']); } if ($maxh && $h>$maxh) { $h = $maxh; $w=abs($h*$info['w']/$info['h']); } $maxWidth = $this->blk[$this->blklvl]['inner_width']; $maxHeight = $this->h - ($this->tMargin + $this->bMargin + 1) ; if ($this->fullImageHeight) { $maxHeight = $this->fullImageHeight; } if ($w + $extrawidth > $maxWidth ) { $w = $maxWidth - $extrawidth; $h=abs($w*$info['h']/$info['w']); } if ($h + $extraheight > $maxHeight ) { $h = $maxHeight - $extraheight; $w=abs($h*$info['w']/$info['h']); } $objattr['type'] = 'image'; $objattr['itype'] = $info['type']; $objattr['orig_h'] = $info['h']; $objattr['orig_w'] = $info['w']; if ($info['type']=='wmf') { $objattr['wmf_x'] = $info['x']; $objattr['wmf_y'] = $info['y']; } else if ($info['type']=='svg') { $objattr['wmf_x'] = $info['x']; $objattr['wmf_y'] = $info['y']; } $objattr['height'] = $h + $extraheight; $objattr['width'] = $w + $extrawidth; $objattr['image_height'] = $h; $objattr['image_width'] = $w; if (!$this->ColActive && !$this->tableLevel && !$this->listlvl && !$this->kwt && !$this->keep_block_together) { if (isset($properties['FLOAT']) && (strtoupper($properties['FLOAT']) == 'RIGHT' || strtoupper($properties['FLOAT']) == 'LEFT')) { $objattr['float'] = substr(strtoupper($properties['FLOAT']),0,1); } } $e = "\xbb\xa4\xactype=image,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { $this->_saveCellTextBuffer($e, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } else { $this->_saveTextBuffer($e, $this->HREF); } if ($this->title2annots && isset($attr['TITLE'])) { $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $objattr['CONTENT'] = $attr['TITLE']; $objattr['type'] = 'annot'; $objattr['POS-X'] = 0; $objattr['POS-Y'] = 0; $objattr['ICON'] = 'Comment'; $objattr['AUTHOR'] = ''; $objattr['SUBJECT'] = ''; $objattr['OPACITY'] = $this->annotOpacity; $objattr['COLOR'] = $this->ConvertColor('yellow'); $e = "\xbb\xa4\xactype=annot,objattr=".serialize($objattr)."\xbb\xa4\xac"; if($this->tableLevel) { $this->cell[$this->row][$this->col]['textbuffer'][] = array($e); } else { $this->textbuffer[] = array($e); } } } break; case 'TEXTCIRCLE': $objattr = array(); $objattr['margin_top'] = 0; $objattr['margin_bottom'] = 0; $objattr['margin_left'] = 0; $objattr['margin_right'] = 0; $objattr['padding_top'] = 0; $objattr['padding_bottom'] = 0; $objattr['padding_left'] = 0; $objattr['padding_right'] = 0; $objattr['width'] = 0; $objattr['height'] = 0; $objattr['border_top']['w'] = 0; $objattr['border_bottom']['w'] = 0; $objattr['border_left']['w'] = 0; $objattr['border_right']['w'] = 0; $objattr['top-text'] = ''; $objattr['bottom-text'] = ''; $objattr['r'] = 20; $objattr['space-width'] = 120; $objattr['char-width'] = 100; $this->InlineProperties[$tag] = $this->saveInlineProperties(); $properties = $this->cssmgr->MergeCSS('INLINE',$tag,$attr); if(isset($properties ['DISPLAY']) && strtolower($properties ['DISPLAY'])=='none') { return; } if (isset($attr['R'])) { $objattr['r']=$this->ConvertSize($attr['R'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if(isset($attr['TOP-TEXT'])) { $objattr['top-text'] = strcode2utf($attr['TOP-TEXT']); $objattr['top-text'] = $this->lesser_entity_decode($objattr['top-text']); if ($this->onlyCoreFonts) $objattr['top-text'] = mb_convert_encoding($objattr['top-text'], $this->mb_enc,'UTF-8'); } if(isset($attr['BOTTOM-TEXT'])) { $objattr['bottom-text'] = strcode2utf($attr['BOTTOM-TEXT']); $objattr['bottom-text'] = $this->lesser_entity_decode($objattr['bottom-text']); if ($this->onlyCoreFonts) $objattr['bottom-text'] = mb_convert_encoding($objattr['bottom-text'], $this->mb_enc,'UTF-8'); } if(isset($attr['SPACE-WIDTH']) && $attr['SPACE-WIDTH']) { $objattr['space-width'] = $attr['SPACE-WIDTH']; } if(isset($attr['CHAR-WIDTH']) && $attr['CHAR-WIDTH']) { $objattr['char-width'] = $attr['CHAR-WIDTH']; } $objattr['visibility'] = 'visible'; if (isset($properties['VISIBILITY'])) { $v = strtolower($properties['VISIBILITY']); if (($v == 'hidden' || $v == 'printonly' || $v == 'screenonly') && $this->visibility=='visible') { $objattr['visibility'] = $v; } } if (isset($properties['FONT-SIZE'])) { if (strtolower($properties['FONT-SIZE'])=='auto') { if ($objattr['top-text'] && $objattr['bottom-text']) { $objattr['fontsize'] = -2; } else { $objattr['fontsize'] = -1; } } else { $mmsize = $this->ConvertSize($properties['FONT-SIZE'],($this->default_font_size/_MPDFK)); $this->SetFontSize($mmsize*_MPDFK,false); $objattr['fontsize'] = $this->FontSizePt; } } if(isset($attr['DIVIDER'])) { $objattr['divider'] = strcode2utf($attr['DIVIDER']); $objattr['divider'] = $this->lesser_entity_decode($objattr['divider']); if ($this->onlyCoreFonts) $objattr['divider'] = mb_convert_encoding($objattr['divider'], $this->mb_enc,'UTF-8'); } if (isset($properties['COLOR'])) { $objattr['color'] = $this->ConvertColor($properties['COLOR']); } $objattr['fontstyle'] = ''; if (isset($properties['FONT-WEIGHT'])) { if (strtoupper($properties['FONT-WEIGHT']) == 'BOLD') { $objattr['fontstyle'] .= 'B'; } } if (isset($properties['FONT-STYLE'])) { if (strtoupper($properties['FONT-STYLE']) == 'ITALIC') { $objattr['fontstyle'] .= 'I'; } } if (isset($properties['FONT-FAMILY'])) { $this->SetFont($properties['FONT-FAMILY'],$this->FontStyle,0,false); } $objattr['fontfamily'] = $this->FontFamily; if (isset($properties['MARGIN-TOP'])) { $objattr['margin_top']=$this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $objattr['margin_bottom'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT'])) { $objattr['margin_left'] = $this->ConvertSize($properties['MARGIN-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-RIGHT'])) { $objattr['margin_right'] = $this->ConvertSize($properties['MARGIN-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-TOP'])) { $objattr['padding_top']=$this->ConvertSize($properties['PADDING-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-BOTTOM'])) { $objattr['padding_bottom'] = $this->ConvertSize($properties['PADDING-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-LEFT'])) { $objattr['padding_left'] = $this->ConvertSize($properties['PADDING-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-RIGHT'])) { $objattr['padding_right'] = $this->ConvertSize($properties['PADDING-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['BORDER-TOP'])) { $objattr['border_top'] = $this->border_details($properties['BORDER-TOP']); } if (isset($properties['BORDER-BOTTOM'])) { $objattr['border_bottom'] = $this->border_details($properties['BORDER-BOTTOM']); } if (isset($properties['BORDER-LEFT'])) { $objattr['border_left'] = $this->border_details($properties['BORDER-LEFT']); } if (isset($properties['BORDER-RIGHT'])) { $objattr['border_right'] = $this->border_details($properties['BORDER-RIGHT']); } if (isset($properties['OPACITY']) && $properties['OPACITY'] > 0 && $properties['OPACITY'] <= 1) { $objattr['opacity'] = $properties['OPACITY']; } if (isset($properties['BACKGROUND-COLOR']) && $properties['BACKGROUND-COLOR'] != '') { $objattr['bgcolor'] = $this->ConvertColor($properties['BACKGROUND-COLOR']); } else { $objattr['bgcolor'] = false; } if ($this->HREF) { if (strpos($this->HREF,".") === false && strpos($this->HREF,"@") !== 0) { $href = $this->HREF; while(array_key_exists($href,$this->internallink)) $href="#".$href; $this->internallink[$href] = $this->AddLink(); $objattr['link'] = $this->internallink[$href]; } else { $objattr['link'] = $this->HREF; } } $extraheight = $objattr['padding_top'] + $objattr['padding_bottom'] + $objattr['margin_top'] + $objattr['margin_bottom'] + $objattr['border_top']['w'] + $objattr['border_bottom']['w']; $extrawidth = $objattr['padding_left'] + $objattr['padding_right'] + $objattr['margin_left'] + $objattr['margin_right'] + $objattr['border_left']['w'] + $objattr['border_right']['w']; $w = $objattr['r']*2; $h = $w; $objattr['height'] = $h + $extraheight; $objattr['width'] = $w + $extrawidth; $objattr['type'] = 'textcircle'; $e = "\xbb\xa4\xactype=image,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { $this->_saveCellTextBuffer($e, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } else { $this->_saveTextBuffer($e, $this->HREF); } if ($this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); break; case 'TABLE': $this->tdbegin = false; $this->lastoptionaltag = ''; if ($this->ColActive) { $this->colvAlign = ''; } if ($this->lastblocklevelchange == 1) { $blockstate = 1; } else if ($this->lastblocklevelchange < 1) { $blockstate = 0; } if (count($this->textbuffer) == 0 && $this->lastblocklevelchange == 1 && !$this->tableLevel && !$this->kwt) { $this->newFlowingBlock( $this->blk[$this->blklvl]['width'],$this->lineheight,'',false,false,1,true, $this->blk[$this->blklvl]['direction']); $this->finishFlowingBlock(true); } else if (!$this->tableLevel && count($this->textbuffer)) { $this->printbuffer($this->textbuffer,$blockstate); } $this->textbuffer=array(); $this->lastblocklevelchange = -1; if ($this->tableLevel) { $this->cell['PARENTCELL'] = $this->saveInlineProperties(); $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['baseProperties']= $this->base_table_properties; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cells'] = $this->cell; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['currrow'] = $this->row; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['currcol'] = $this->col; } $this->tableLevel++; $this->cssmgr->tbCSSlvl++; if ($this->tableLevel>1) { $this->base_table_properties['FONT-KERNING'] = $this->kerning ; $this->base_table_properties['LETTER-SPACING'] = $this->lSpacingCSS ; $this->base_table_properties['WORD-SPACING'] = $this->wSpacingCSS ; } if (isset($this->tbctr[$this->tableLevel])) { $this->tbctr[$this->tableLevel]++; } else { $this->tbctr[$this->tableLevel] = 1; } $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['level'] = $this->tableLevel; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['levelid'] = $this->tbctr[$this->tableLevel]; if ($this->tableLevel > $this->innermostTableLevel) { $this->innermostTableLevel = $this->tableLevel; } if ($this->tableLevel > 1) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nestedpos'] = array($this->row,$this->col,$this->tbctr[($this->tableLevel-1)]); } $this->cell = array(); $this->col=-1; $this->row=-1; $table = &$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]; if ($this->cacheTables) { $this->packTableData = true; $this->simpleTables = false; $table['cache'] = _MPDF_TEMP_PATH.'_tempTblCache'.RAND(1,1000000).'.dat'; $fh = fopen($table['cache'] , "wb") or $this->Error("When using cacheTables, you must have read/write access to cache files (".$table['cache'] .")"); fwrite($fh, "\x00"); fclose($fh); $table['ptr'] = 1 ; } $table['direction'] = $this->directionality; $table['bgcolor'] = false; $table['va'] = false; $table['txta'] = false; $table['topntail'] = false; $table['thead-underline'] = false; $table['border'] = false; $table['border_details']['R']['w'] = 0; $table['border_details']['L']['w'] = 0; $table['border_details']['T']['w'] = 0; $table['border_details']['B']['w'] = 0; $table['border_details']['R']['style'] = ''; $table['border_details']['L']['style'] = ''; $table['border_details']['T']['style'] = ''; $table['border_details']['B']['style'] = ''; $table['max_cell_border_width']['R'] = 0; $table['max_cell_border_width']['L'] = 0; $table['max_cell_border_width']['T'] = 0; $table['max_cell_border_width']['B'] = 0; $table['padding']['L'] = false; $table['padding']['R'] = false; $table['padding']['T'] = false; $table['padding']['B'] = false; $table['margin']['L'] = false; $table['margin']['R'] = false; $table['margin']['T'] = false; $table['margin']['B'] = false; $table['a'] = false; $table['border_spacing_H'] = false; $table['border_spacing_V'] = false; $table['decimal_align'] = false; $this->Reset(); $this->InlineProperties = array(); $this->spanlvl = 0; $table['nc'] = $table['nr'] = 0; $this->tablethead = 0; $this->tabletfoot = 0; $this->tabletheadjustfinished = false; if ($this->blockjustfinished && !count($this->textbuffer) && $this->y != $this->tMargin && $this->collapseBlockMargins && $this->tableLevel==1) { $lastbottommargin = $this->lastblockbottommargin; } else { $lastbottommargin = 0; } $this->lastblockbottommargin = 0; $this->blockjustfinished=false; if ($this->tableLevel==1) { $this->tableCJK = false; $this->table_lineheight = $this->normalLineheight; $table['headernrows'] = 0; $table['footernrows'] = 0; $this->base_table_properties = array(); } if ($this->cssmgr->tbCSSlvl==1) { $properties = $this->cssmgr->MergeCSS('TOPTABLE',$tag,$attr); } else { $properties = $this->cssmgr->MergeCSS('TABLE',$tag,$attr); } $w = ''; if (isset($properties['WIDTH'])) { $w = $properties['WIDTH']; } else if (isset($attr['WIDTH']) && $attr['WIDTH']) { $w = $attr['WIDTH']; } if(isset($properties['DIRECTION']) && $properties['DIRECTION']) { $table['direction'] = strtolower($properties['DIRECTION']); } else if(isset($attr['DIR']) && $attr['DIR']) { $table['direction'] = strtolower($attr['DIR']); } else if (!isset($table['direction'])){ $table['direction'] = $this->blk[$this->blklvl]['direction']; } if (isset($properties['BACKGROUND-COLOR'])) { $table['bgcolor'][-1] = $properties['BACKGROUND-COLOR']; } else if (isset($properties['BACKGROUND'])) { $table['bgcolor'][-1] = $properties['BACKGROUND']; } else if (isset($attr['BGCOLOR'])) { $table['bgcolor'][-1] = $attr['BGCOLOR']; } if (isset($properties['VERTICAL-ALIGN'])) { $table['va'] = $align[strtolower($properties['VERTICAL-ALIGN'])]; } if (isset($properties['TEXT-ALIGN'])) { $table['txta'] = $align[strtolower($properties['TEXT-ALIGN'])]; } if (isset($attr['ALIGN'])) { $table['a'] = $align[strtolower($attr['ALIGN'])]; } if (!$table['a']) { if ($table['direction'] == 'rtl' ) { $table['a'] = 'R'; } else { $table['a'] = 'L'; } } if (isset($properties['AUTOSIZE']) && $properties['AUTOSIZE'] && $this->tableLevel ==1) { $this->shrink_this_table_to_fit = $properties['AUTOSIZE']; if ($this->shrink_this_table_to_fit < 1) { $this->shrink_this_table_to_fit = 0; } } if (isset($properties['ROTATE']) && $properties['ROTATE'] && $this->tableLevel ==1) { $this->table_rotate = $properties['ROTATE']; } if (isset($properties['TOPNTAIL'])) { $table['topntail'] = $properties['TOPNTAIL']; } if (isset($properties['THEAD-UNDERLINE'])) { $table['thead-underline'] = $properties['THEAD-UNDERLINE']; } if (isset($properties['BORDER'])) { $bord = $this->border_details($properties['BORDER']); if ($bord['s']) { $table['border'] = _BORDER_ALL; $table['border_details']['R'] = $bord; $table['border_details']['L'] = $bord; $table['border_details']['T'] = $bord; $table['border_details']['B'] = $bord; } } if (isset($properties['BORDER-RIGHT'])) { if ($table['direction'] == 'rtl') { $table['border_details']['R'] = $this->border_details($properties['BORDER-LEFT']); } else { $table['border_details']['R'] = $this->border_details($properties['BORDER-RIGHT']); } $this->setBorder($table['border'], _BORDER_RIGHT, $table['border_details']['R']['s']); } if (isset($properties['BORDER-LEFT'])) { if ($table['direction'] == 'rtl') { $table['border_details']['L'] = $this->border_details($properties['BORDER-RIGHT']); } else { $table['border_details']['L'] = $this->border_details($properties['BORDER-LEFT']); } $this->setBorder($table['border'], _BORDER_LEFT, $table['border_details']['L']['s']); } if (isset($properties['BORDER-BOTTOM'])) { $table['border_details']['B'] = $this->border_details($properties['BORDER-BOTTOM']); $this->setBorder($table['border'], _BORDER_BOTTOM, $table['border_details']['B']['s']); } if (isset($properties['BORDER-TOP'])) { $table['border_details']['T'] = $this->border_details($properties['BORDER-TOP']); $this->setBorder($table['border'], _BORDER_TOP, $table['border_details']['T']['s']); } if ($table['border']){ $this->table_border_css_set = 1; } else { $this->table_border_css_set = 0; } if (isset($properties['FONT-FAMILY'])) { $this->default_font = $properties['FONT-FAMILY']; $this->SetFont($this->default_font,'',0,false); } $this->base_table_properties['FONT-FAMILY'] = $this->FontFamily; if (isset($properties['FONT-SIZE'])) { if ($this->tableLevel>1) { $mmsize = $this->ConvertSize($properties['FONT-SIZE'], $this->base_table_properties['FONT-SIZE']); } else { $mmsize = $this->ConvertSize($properties['FONT-SIZE'],$this->default_font_size/_MPDFK); } if ($mmsize) { $this->default_font_size = $mmsize*(_MPDFK); $this->SetFontSize($this->default_font_size,false); } } $this->base_table_properties['FONT-SIZE'] = $this->FontSize.'mm'; if (isset($properties['FONT-WEIGHT'])) { if (strtoupper($properties['FONT-WEIGHT']) == 'BOLD') { $this->base_table_properties['FONT-WEIGHT'] = 'BOLD'; } } if (isset($properties['FONT-STYLE'])) { if (strtoupper($properties['FONT-STYLE']) == 'ITALIC') { $this->base_table_properties['FONT-STYLE'] = 'ITALIC'; } } if (isset($properties['COLOR'])) { $this->base_table_properties['COLOR'] = $properties['COLOR']; } if (isset($properties['FONT-KERNING'])) { $this->base_table_properties['FONT-KERNING'] = $properties['FONT-KERNING']; } if (isset($properties['LETTER-SPACING'])) { $this->base_table_properties['LETTER-SPACING'] = $properties['LETTER-SPACING']; } if (isset($properties['WORD-SPACING'])) { $this->base_table_properties['WORD-SPACING'] = $properties['WORD-SPACING']; } if (isset($properties['PADDING-LEFT'])) { $table['padding']['L'] = $this->ConvertSize($properties['PADDING-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-RIGHT'])) { $table['padding']['R'] = $this->ConvertSize($properties['PADDING-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-TOP'])) { $table['padding']['T'] = $this->ConvertSize($properties['PADDING-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-BOTTOM'])) { $table['padding']['B'] = $this->ConvertSize($properties['PADDING-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-TOP'])) { if ($lastbottommargin) { $tmp = $this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if ($tmp > $lastbottommargin) { $properties['MARGIN-TOP'] -= $lastbottommargin; } else { $properties['MARGIN-TOP'] = 0; } } $table['margin']['T'] = $this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-BOTTOM'])) { $table['margin']['B'] = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT'])) { $table['margin']['L'] = $this->ConvertSize($properties['MARGIN-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-RIGHT'])) { $table['margin']['R'] = $this->ConvertSize($properties['MARGIN-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['MARGIN-LEFT']) && isset($properties['MARGIN-RIGHT']) && strtolower($properties['MARGIN-LEFT'])=='auto' && strtolower($properties['MARGIN-RIGHT'])=='auto') { $table['a'] = 'C'; } else if (isset($properties['MARGIN-LEFT']) && strtolower($properties['MARGIN-LEFT'])=='auto') { $table['a'] = 'R'; } else if (isset($properties['MARGIN-RIGHT']) && strtolower($properties['MARGIN-RIGHT'])=='auto') { $table['a'] = 'L'; } if (isset($properties['LINE-HEIGHT']) && $this->tableLevel==1) { $this->table_lineheight = $this->fixLineheight($properties['LINE-HEIGHT']); if (!$this->table_lineheight) { $this->table_lineheight = $this->normalLineheight; } } if (isset($properties['BORDER-COLLAPSE']) && strtoupper($properties['BORDER-COLLAPSE'])=='SEPARATE') { $table['borders_separate'] = true; } else { $table['borders_separate'] = false; } if (!$table['borders_separate']) { $table['border_spacing_H'] = $table['border_spacing_V'] = 0; } else if (isset($attr['CELLSPACING'])) { $table['border_spacing_H'] = $table['border_spacing_V'] = $this->ConvertSize($attr['CELLSPACING'],$this->blk[$this->blklvl]['inner_width']); } if (isset($properties['BORDER-SPACING-H'])) { $table['border_spacing_H'] = $this->ConvertSize($properties['BORDER-SPACING-H'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['BORDER-SPACING-V'])) { $table['border_spacing_V'] = $this->ConvertSize($properties['BORDER-SPACING-V'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['EMPTY-CELLS'])) { $table['empty_cells'] = strtolower($properties['EMPTY-CELLS']); } else { $table['empty_cells'] = ''; } if (isset($properties['PAGE-BREAK-INSIDE']) && strtoupper($properties['PAGE-BREAK-INSIDE'])=='AVOID' && $this->tableLevel==1 && !$this->writingHTMLfooter) { $this->table_keep_together = true; } else if ($this->tableLevel==1) { $this->table_keep_together = false; } if (isset($properties['PAGE-BREAK-AFTER']) && $this->tableLevel==1) { $table['page_break_after'] = strtoupper($properties['PAGE-BREAK-AFTER']); } if (isset($properties['BACKGROUND-GRADIENT']) && !$this->kwt && !$this->ColActive) { $table['gradient'] = $properties['BACKGROUND-GRADIENT']; } if (isset($properties['BACKGROUND-IMAGE']) && $properties['BACKGROUND-IMAGE'] && !$this->kwt && !$this->ColActive) { $ret = $this->SetBackground($properties, $currblk['inner_width']); if ($ret) { $table['background-image'] = $ret; } } if (isset($properties['OVERFLOW'])) { $table['overflow'] = strtolower($properties['OVERFLOW']); if (($this->ColActive || $this->tableLevel>1) && $table['overflow']=='visible') { unset($table['overflow']); } } $properties = array(); if (isset($attr['CELLPADDING'])) { $table['cell_padding'] = $attr['CELLPADDING']; } else { $table['cell_padding'] = false; } if (isset($attr['BORDER']) && $attr['BORDER']=='1') { $this->table_border_attr_set = 1; $bord = $this->border_details('#000000 1px solid'); if ($bord['s']) { $table['border'] = _BORDER_ALL; $table['border_details']['R'] = $bord; $table['border_details']['L'] = $bord; $table['border_details']['T'] = $bord; $table['border_details']['B'] = $bord; } } else { $this->table_border_attr_set = 0; } if ($w) { $maxwidth = $this->blk[$this->blklvl]['inner_width']; if ($table['borders_separate']) { $tblblw = $table['margin']['L'] + $table['margin']['R'] + $table['border_details']['L']['w']/2 + $table['border_details']['R']['w']/2; } else { $tblblw = $table['margin']['L'] + $table['margin']['R'] + $table['max_cell_border_width']['L']/2 + $table['max_cell_border_width']['R']/2; } if (strpos($w,'%') && $this->tableLevel == 1 && !$this->ignore_table_percents ) { $maxwidth -= $tblblw ; $wmm = $this->ConvertSize($w,$maxwidth,$this->FontSize,false); $table['w'] = $wmm + $tblblw ; } if (strpos($w,'%') && $this->tableLevel > 1 && !$this->ignore_table_percents && $this->keep_table_proportions) { $table['wpercent'] = $w + 0; } if (!strpos($w,'%') && !$this->ignore_table_widths ) { $wmm = $this->ConvertSize($w,$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); $table['w'] = $wmm + $tblblw ; } if (!$this->keep_table_proportions) { if (isset($table['w']) && $table['w'] > $this->blk[$this->blklvl]['inner_width']) { $table['w'] = $this->blk[$this->blklvl]['inner_width']; } } } if (isset($attr['AUTOSIZE']) && $this->tableLevel==1) { $this->shrink_this_table_to_fit = $attr['AUTOSIZE']; if ($this->shrink_this_table_to_fit < 1) { $this->shrink_this_table_to_fit = 1; } } if (isset($attr['ROTATE']) && $this->tableLevel==1) { $this->table_rotate = $attr['ROTATE']; } if ($this->keep_block_together) { $this->keep_block_together = 0; $this->printdivbuffer(); $this->blk[$this->blklvl]['keep_block_together'] = 0; } if ($this->table_rotate) { $this->tbrot_Links = array(); $this->tbrot_Annots = array(); $this->tbrotForms = array(); $this->tbrot_Reference = array(); $this->tbrot_BMoutlines = array(); $this->tbrot_toc = array(); } if ($this->kwt) { if ($this->table_rotate) { $this->table_keep_together = true; } $this->kwt = false; $this->kwt_saved = true; } if ($this->tableLevel==1 && $this->useGraphs) { if (isset($attr['ID']) && $attr['ID']) { $this->currentGraphId = strtoupper($attr['ID']); } else { $this->currentGraphId = '0'; } $this->graphs[$this->currentGraphId] = array(); } $this->plainCell_properties = array(); unset($table); break; case 'THEAD': $this->lastoptionaltag = $tag; $this->cssmgr->tbCSSlvl++; $this->tablethead = 1; $this->tabletfoot = 0; $properties = $this->cssmgr->MergeCSS('TABLE',$tag,$attr); if (isset($properties['FONT-WEIGHT'])) { if (strtoupper($properties['FONT-WEIGHT']) == 'BOLD') { $this->thead_font_weight = 'B'; } else { $this->thead_font_weight = ''; } } if (isset($properties['FONT-STYLE'])) { if (strtoupper($properties['FONT-STYLE']) == 'ITALIC') { $this->thead_font_style = 'I'; } else { $this->thead_font_style = ''; } } if (isset($properties['FONT-VARIANT'])) { if (strtoupper($properties['FONT-VARIANT']) == 'SMALL-CAPS') { $this->thead_font_smCaps = 'S'; } else { $this->thead_font_smCaps = ''; } } if (isset($properties['VERTICAL-ALIGN'])) { $this->thead_valign_default = $properties['VERTICAL-ALIGN']; } if (isset($properties['TEXT-ALIGN'])) { $this->thead_textalign_default = $properties['TEXT-ALIGN']; } $properties = array(); break; case 'TFOOT': $this->lastoptionaltag = $tag; $this->cssmgr->tbCSSlvl++; $this->tabletfoot = 1; $this->tablethead = 0; $properties = $this->cssmgr->MergeCSS('TABLE',$tag,$attr); if (isset($properties['FONT-WEIGHT'])) { if (strtoupper($properties['FONT-WEIGHT']) == 'BOLD') { $this->tfoot_font_weight = 'B'; } else { $this->tfoot_font_weight = ''; } } if (isset($properties['FONT-STYLE'])) { if (strtoupper($properties['FONT-STYLE']) == 'ITALIC') { $this->tfoot_font_style = 'I'; } else { $this->tfoot_font_style = ''; } } if (isset($properties['FONT-VARIANT'])) { if (strtoupper($properties['FONT-VARIANT']) == 'SMALL-CAPS') { $this->tfoot_font_smCaps = 'S'; } else { $this->tfoot_font_smCaps = ''; } } if (isset($properties['VERTICAL-ALIGN'])) { $this->tfoot_valign_default = $properties['VERTICAL-ALIGN']; } if (isset($properties['TEXT-ALIGN'])) { $this->tfoot_textalign_default = $properties['TEXT-ALIGN']; } $properties = array(); break; case 'TBODY': $this->tablethead = 0; $this->tabletfoot = 0; $this->lastoptionaltag = $tag; $this->cssmgr->tbCSSlvl++; $this->cssmgr->MergeCSS('TABLE',$tag,$attr); break; case 'TR': $this->lastoptionaltag = $tag; $this->cssmgr->tbCSSlvl++; $this->row++; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nr']++; $this->col = -1; $properties = $this->cssmgr->MergeCSS('TABLE',$tag,$attr); if (!$this->simpleTables && (!isset($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['borders_separate']) || !$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['borders_separate'])) { if (isset($properties['BORDER-LEFT']) && $properties['BORDER-LEFT']) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trborder-left'][$this->row] = $properties['BORDER-LEFT']; } if (isset($properties['BORDER-RIGHT']) && $properties['BORDER-RIGHT']) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trborder-right'][$this->row] = $properties['BORDER-RIGHT']; } if (isset($properties['BORDER-TOP']) && $properties['BORDER-TOP']) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trborder-top'][$this->row] = $properties['BORDER-TOP']; } if (isset($properties['BORDER-BOTTOM']) && $properties['BORDER-BOTTOM']) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trborder-bottom'][$this->row] = $properties['BORDER-BOTTOM']; } } if (isset($properties['BACKGROUND-COLOR'])) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['bgcolor'][$this->row] = $properties['BACKGROUND-COLOR']; } else if (isset($attr['BGCOLOR'])) $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['bgcolor'][$this->row] = $attr['BGCOLOR']; if (isset($properties['BACKGROUND-GRADIENT']) && !$this->kwt && !$this->ColActive) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trgradients'][$this->row] = $properties['BACKGROUND-GRADIENT']; } if (isset($properties['BACKGROUND-IMAGE']) && $properties['BACKGROUND-IMAGE'] && !$this->kwt && !$this->ColActive) { $ret = $this->SetBackground($properties, $currblk['inner_width']); if ($ret) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trbackground-images'][$this->row] = $ret; } } if (isset($properties['TEXT-ROTATE'])) { $this->trow_text_rotate = $properties['TEXT-ROTATE']; } if (isset($attr['TEXT-ROTATE'])) $this->trow_text_rotate = $attr['TEXT-ROTATE']; if ($this->tablethead) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_thead'][$this->row] = true; } if ($this->tabletfoot) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot'][$this->row] = true; } $properties = array(); break; case 'TH': case 'TD': $this->ignorefollowingspaces = true; $this->lastoptionaltag = $tag; $this->cssmgr->tbCSSlvl++; $this->InlineProperties = array(); $this->spanlvl = 0; $this->tdbegin = true; $this->col++; while (isset($this->cell[$this->row][$this->col])) { $this->col++; } if ($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nc'] < $this->col+1) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nc'] = $this->col+1; } $table = &$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]; $c = array('a' => false, 'R' => false, 'nowrap' => false, 'bgcolor' => false, 'padding' => array('L' => false, 'R' => false, 'T' => false, 'B' => false ) ); if ($this->simpleTables && $this->row==0 && $this->col==0){ $table['simple']['border'] = false; $table['simple']['border_details']['R']['w'] = 0; $table['simple']['border_details']['L']['w'] = 0; $table['simple']['border_details']['T']['w'] = 0; $table['simple']['border_details']['B']['w'] = 0; $table['simple']['border_details']['R']['style'] = ''; $table['simple']['border_details']['L']['style'] = ''; $table['simple']['border_details']['T']['style'] = ''; $table['simple']['border_details']['B']['style'] = ''; } else if (!$this->simpleTables) { $c['border'] = false; $c['border_details']['R']['w'] = 0; $c['border_details']['L']['w'] = 0; $c['border_details']['T']['w'] = 0; $c['border_details']['B']['w'] = 0; $c['border_details']['mbw']['BL'] = 0; $c['border_details']['mbw']['BR'] = 0; $c['border_details']['mbw']['RT'] = 0; $c['border_details']['mbw']['RB'] = 0; $c['border_details']['mbw']['TL'] = 0; $c['border_details']['mbw']['TR'] = 0; $c['border_details']['mbw']['LT'] = 0; $c['border_details']['mbw']['LB'] = 0; $c['border_details']['R']['style'] = ''; $c['border_details']['L']['style'] = ''; $c['border_details']['T']['style'] = ''; $c['border_details']['B']['style'] = ''; $c['border_details']['R']['s'] = 0; $c['border_details']['L']['s'] = 0; $c['border_details']['T']['s'] = 0; $c['border_details']['B']['s'] = 0; $c['border_details']['R']['c'] = $this->ConvertColor(0); $c['border_details']['L']['c'] = $this->ConvertColor(0); $c['border_details']['T']['c'] = $this->ConvertColor(0); $c['border_details']['B']['c'] = $this->ConvertColor(0); $c['border_details']['R']['dom'] = 0; $c['border_details']['L']['dom'] = 0; $c['border_details']['T']['dom'] = 0; $c['border_details']['B']['dom'] = 0; } if ($table['va']) { $c['va'] = $table['va']; } if ($table['txta']) { $c['a'] = $table['txta']; } if ($this->table_border_attr_set) { if ($table['border_details']) { if (!$this->simpleTables){ $c['border_details']['R'] = $table['border_details']['R']; $c['border_details']['L'] = $table['border_details']['L']; $c['border_details']['T'] = $table['border_details']['T']; $c['border_details']['B'] = $table['border_details']['B']; $c['border'] = $table['border']; $c['border_details']['L']['dom'] = 1; $c['border_details']['R']['dom'] = 1; $c['border_details']['T']['dom'] = 1; $c['border_details']['B']['dom'] = 1; } else if ($this->simpleTables && $this->row==0 && $this->col==0){ $table['simple']['border_details']['R'] = $table['border_details']['R']; $table['simple']['border_details']['L'] = $table['border_details']['L']; $table['simple']['border_details']['T'] = $table['border_details']['T']; $table['simple']['border_details']['B'] = $table['border_details']['B']; $table['simple']['border'] = $table['border']; } } } if ($this->tablethead) { if ($this->thead_valign_default) $c['va'] = $align[strtolower($this->thead_valign_default)]; if ($this->thead_textalign_default) $c['a'] = $align[strtolower($this->thead_textalign_default)]; if ($this->thead_font_weight == 'B') { $this->SetStyle('B',true); } if ($this->thead_font_style == 'I') { $this->SetStyle('I',true); } if ($this->thead_font_smCaps == 'S') { $this->SetStyle('S',true); } } if ($this->tabletfoot) { if ($this->tfoot_valign_default) $c['va'] = $align[strtolower($this->tfoot_valign_default)]; if ($this->tfoot_textalign_default) $c['a'] = $align[strtolower($this->tfoot_textalign_default)]; if ($this->tfoot_font_weight == 'B') { $this->SetStyle('B',true); } if ($this->tfoot_font_style == 'I') { $this->SetStyle('I',true); } if ($this->tfoot_font_style == 'S') { $this->SetStyle('S',true); } } if ($this->trow_text_rotate){ $c['R'] = $this->trow_text_rotate; } $this->cell_border_dominance_L = 0; $this->cell_border_dominance_R = 0; $this->cell_border_dominance_T = 0; $this->cell_border_dominance_B = 0; $properties = $this->cssmgr->MergeCSS('TABLE',$tag,$attr); $properties = $this->cssmgr->array_merge_recursive_unique($this->base_table_properties, $properties); if (isset($properties['FONT-KERNING']) && (strtoupper($properties['FONT-KERNING'])=='NORMAL' || strtoupper($properties['FONT-KERNING'])=='AUTO')) { $this->kerning = true; } else { $this->kerning = false; } if (isset($properties['LETTER-SPACING']) && ($properties['LETTER-SPACING'] || $properties['LETTER-SPACING']==='0') && strtoupper($properties['LETTER-SPACING']) != 'NORMAL') { $this->lSpacingCSS = strtoupper($properties['LETTER-SPACING']); $this->fixedlSpacing = $this->ConvertSize($this->lSpacingCSS,$this->FontSize); } else { $this->lSpacingCSS = ''; $this->fixedlSpacing = false; } if (isset($properties['WORD-SPACING']) && strtoupper($properties['WORD-SPACING']) != 'NORMAL') { $this->wSpacingCSS = strtoupper($properties['WORD-SPACING']); $this->minwSpacing = $this->ConvertSize($this->wSpacingCSS,$this->FontSize); } else { $this->minwSpacing = 0; $this->wSpacingCSS = ''; } if (isset($properties['HYPHENS']) && $properties['HYPHENS']) { if (strtoupper($properties['HYPHENS']) == 'NONE') { $this->textparam['hyphens'] = 2; } else if (strtoupper($properties['HYPHENS']) == 'AUTO') { $this->textparam['hyphens'] = 1; } else if (strtoupper($properties['HYPHENS']) == 'MANUAL') { $this->textparam['hyphens'] = 0; } } if (isset($properties['BACKGROUND-COLOR'])) { $c['bgcolor'] = $properties['BACKGROUND-COLOR']; } else if (isset($properties['BACKGROUND'])) { $c['bgcolor'] = $properties['BACKGROUND']; } else if (isset($attr['BGCOLOR'])) $c['bgcolor'] = $attr['BGCOLOR']; if (isset($properties['BACKGROUND-GRADIENT'])) { $c['gradient'] = $properties['BACKGROUND-GRADIENT']; } else { $c['gradient'] = false; } if (isset($properties['BACKGROUND-IMAGE']) && $properties['BACKGROUND-IMAGE'] && !$this->keep_block_together) { $ret = $this->SetBackground($properties, $this->blk[$this->blklvl]['inner_width']); if ($ret) { $c['background-image'] = $ret; } } if (isset($properties['VERTICAL-ALIGN'])) { $c['va']=$align[strtolower($properties['VERTICAL-ALIGN'])]; } else if (isset($attr['VALIGN'])) $c['va'] = $align[strtolower($attr['VALIGN'])]; if (isset($properties['TEXT-ALIGN']) && $properties['TEXT-ALIGN']) { if (substr($properties['TEXT-ALIGN'],0,1)=='D') { $c['a'] = $properties['TEXT-ALIGN']; } else { $c['a'] = $align[strtolower($properties['TEXT-ALIGN'])]; } } if (isset($attr['ALIGN']) && $attr['ALIGN']) { if (strtolower($attr['ALIGN']) == 'char') { if (isset($attr['CHAR']) && $attr['CHAR']) { $char = html_entity_decode($attr['CHAR']); $char = strcode2utf($char); $d = array_search($char,$this->decimal_align); if ($d !== false) { $c['a'] = $d.'R'; } } else { $c['a'] = 'DPR'; } } else { $c['a'] = $align[strtolower($attr['ALIGN'])]; } } if (!$c['a']) { if (isset($table['direction']) && $table['direction'] == 'rtl' ) { $c['a'] = 'R'; } else { $c['a'] = 'L'; } } if (isset($properties['TEXT-ROTATE']) && ($properties['TEXT-ROTATE'] || $properties['TEXT-ROTATE']==="0")){ $c['R'] = $properties['TEXT-ROTATE']; } if (isset($properties['BORDER'])) { $bord = $this->border_details($properties['BORDER']); if ($bord['s']) { if (!$this->simpleTables){ $c['border'] = _BORDER_ALL; $c['border_details']['R'] = $bord; $c['border_details']['L'] = $bord; $c['border_details']['T'] = $bord; $c['border_details']['B'] = $bord; $c['border_details']['L']['dom'] = $this->cell_border_dominance_L; $c['border_details']['R']['dom'] = $this->cell_border_dominance_R; $c['border_details']['T']['dom'] = $this->cell_border_dominance_T; $c['border_details']['B']['dom'] = $this->cell_border_dominance_B; } else if ($this->simpleTables && $this->row==0 && $this->col==0){ $table['simple']['border'] = _BORDER_ALL; $table['simple']['border_details']['R'] = $bord; $table['simple']['border_details']['L'] = $bord; $table['simple']['border_details']['T'] = $bord; $table['simple']['border_details']['B'] = $bord; } } } if (!$this->simpleTables){ if (isset($properties['BORDER-RIGHT']) && $properties['BORDER-RIGHT']) { $c['border_details']['R'] = $this->border_details($properties['BORDER-RIGHT']); $this->setBorder($c['border'], _BORDER_RIGHT, $c['border_details']['R']['s']); $c['border_details']['R']['dom'] = $this->cell_border_dominance_R; } if (isset($properties['BORDER-LEFT']) && $properties['BORDER-LEFT']) { $c['border_details']['L'] = $this->border_details($properties['BORDER-LEFT']); $this->setBorder($c['border'], _BORDER_LEFT, $c['border_details']['L']['s']); $c['border_details']['L']['dom'] = $this->cell_border_dominance_L; } if (isset($properties['BORDER-BOTTOM']) && $properties['BORDER-BOTTOM']) { $c['border_details']['B'] = $this->border_details($properties['BORDER-BOTTOM']); $this->setBorder($c['border'], _BORDER_BOTTOM, $c['border_details']['B']['s']); $c['border_details']['B']['dom'] = $this->cell_border_dominance_B; } if (isset($properties['BORDER-TOP']) && $properties['BORDER-TOP']) { $c['border_details']['T'] = $this->border_details($properties['BORDER-TOP']); $this->setBorder($c['border'], _BORDER_TOP, $c['border_details']['T']['s']); $c['border_details']['T']['dom'] = $this->cell_border_dominance_T; } } else if ($this->simpleTables && $this->row==0 && $this->col==0){ if (isset($properties['BORDER-LEFT']) && $properties['BORDER-LEFT']) { $bord = $this->border_details($properties['BORDER-LEFT']); if ($bord['s']) { $table['simple']['border'] = _BORDER_ALL; } else { $table['simple']['border'] = 0; } $table['simple']['border_details']['R'] = $bord; $table['simple']['border_details']['L'] = $bord; $table['simple']['border_details']['T'] = $bord; $table['simple']['border_details']['B'] = $bord; } } if ($this->simpleTables && $this->row==0 && $this->col==0 && !$table['borders_separate'] && $table['simple']['border'] ){ $table['border_details'] = $table['simple']['border_details']; $table['border'] = $table['simple']['border']; } if (!$table['borders_separate'] && !$this->simpleTables && isset($table['trborder-left'][$this->row])) { if ($this->col==0) { $left = $this->border_details($table['trborder-left'][$this->row]); $c['border_details']['L'] = $left; $this->setBorder($c['border'], _BORDER_LEFT, $c['border_details']['L']['s']); } $c['border_details']['B'] = $this->border_details($table['trborder-bottom'][$this->row]); $this->setBorder($c['border'], _BORDER_BOTTOM, $c['border_details']['B']['s']); $c['border_details']['T'] = $this->border_details($table['trborder-top'][$this->row]); $this->setBorder($c['border'], _BORDER_TOP, $c['border_details']['T']['s']); } if ($this->packTableData && !$this->simpleTables) { $c['borderbin'] = $this->_packCellBorder($c); unset($c['border']); unset($c['border_details']); } if (isset($properties['PADDING-LEFT'])) { $c['padding']['L'] = $this->ConvertSize($properties['PADDING-LEFT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-RIGHT'])) { $c['padding']['R'] = $this->ConvertSize($properties['PADDING-RIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-BOTTOM'])) { $c['padding']['B'] = $this->ConvertSize($properties['PADDING-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['PADDING-TOP'])) { $c['padding']['T'] = $this->ConvertSize($properties['PADDING-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } $w = ''; if (isset($properties['WIDTH'])) { $w = $properties['WIDTH']; } else if (isset($attr['WIDTH'])) { $w = $attr['WIDTH']; } if ($w) { if (strpos($w,'%') && !$this->ignore_table_percents ) { $c['wpercent'] = $w + 0; } else if (!strpos($w,'%') && !$this->ignore_table_widths ) { $c['w'] = $this->ConvertSize($w,$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } } if (isset($properties['HEIGHT']) && !strpos($properties['HEIGHT'],'%')) { $c['h'] = $this->ConvertSize($properties['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } else if (isset($attr['HEIGHT']) && !strpos($attr['HEIGHT'],'%')) $c['h'] = $this->ConvertSize($attr['HEIGHT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if (isset($properties['COLOR'])) { $cor = $this->ConvertColor($properties['COLOR']); if ($cor) { $this->colorarray = $cor; $this->SetTColor($cor); } } if (isset($properties['FONT-FAMILY'])) { $this->SetFont($properties['FONT-FAMILY'],'',0,false); } if (isset($properties['FONT-SIZE'])) { $mmsize = $this->ConvertSize($properties['FONT-SIZE'],$this->default_font_size/_MPDFK); if ($mmsize) { $this->SetFontSize($mmsize*(_MPDFK),false); } } $c['dfs'] = $this->FontSize; if (isset($properties['FONT-WEIGHT'])) { if (strtoupper($properties['FONT-WEIGHT']) == 'BOLD') { $this->SetStyle('B',true); } } if (isset($properties['FONT-STYLE'])) { if (strtoupper($properties['FONT-STYLE']) == 'ITALIC') { $this->SetStyle('I',true); } } if (isset($properties['FONT-VARIANT'])) { if (strtoupper($properties['FONT-VARIANT']) == 'SMALL-CAPS') { $this->SetStyle('S',true); } } if (isset($properties['TEXT-DECORATION'])) { if (strtoupper($properties['TEXT-DECORATION']) == 'LINE-THROUGH') { $this->strike = true; } else if (strtoupper($properties['TEXT-DECORATION']) == 'UNDERLINE') { $this->SetStyle('U',true); } } if (isset($properties['TEXT-SHADOW'])) { $ts = $this->cssmgr->setCSStextshadow($properties['TEXT-SHADOW']); if ($ts) { $this->textshadow = $ts; } } if (isset($properties['TEXT-TRANSFORM'])) { if (strtoupper($properties['TEXT-TRANSFORM']) == 'CAPITALIZE') { $this->capitalize = true; } else if (strtoupper($properties['TEXT-TRANSFORM']) == 'UPPERCASE') { $this->toupper = true; } else if (strtoupper($properties['TEXT-TRANSFORM']) == 'LOWERCASE') { $this->tolower = true; } } if (isset($properties['WHITE-SPACE'])) { if (strtoupper($properties['WHITE-SPACE']) == 'NOWRAP') { $c['nowrap']= 1; } } $properties = array(); if (isset($attr['TEXT-ROTATE'])) { $c['R'] = $attr['TEXT-ROTATE']; } if (isset($attr['NOWRAP']) && $attr['NOWRAP']) $c['nowrap']= 1; $this->cell[$this->row][$this->col] = $c; unset($c); $this->cell[$this->row][$this->col]['s'] = 0 ; $cs = $rs = 1; if (isset($attr['COLSPAN']) && $attr['COLSPAN']>1) $cs = $this->cell[$this->row][$this->col]['colspan'] = $attr['COLSPAN']; if ($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nc'] < $this->col+$cs) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nc'] = $this->col+$cs; } for($l=$this->col; $l < $this->col+$cs ;$l++) { if ($l-$this->col) $this->cell[$this->row][$l] = 0; } if (isset($attr['ROWSPAN']) && $attr['ROWSPAN']>1) $rs = $this->cell[$this->row][$this->col]['rowspan'] = $attr['ROWSPAN']; for ($k=$this->row ; $k < $this->row+$rs ;$k++) { for($l=$this->col; $l < $this->col+$cs ;$l++) { if ($k-$this->row || $l-$this->col) $this->cell[$k][$l] = 0; } } unset($table); break; case 'OL': case 'UL': $this->listjustfinished = false; if ($this->blockjustfinished && !count($this->textbuffer) && $this->y != $this->tMargin && $this->collapseBlockMargins) { $lastbottommargin = $this->lastblockbottommargin; } else { $lastbottommargin = 0; } $this->lastblockbottommargin = 0; $this->blockjustfinished=false; $this->linebreakjustfinished=false; $this->lastoptionaltag = ''; $this->cssmgr->listCSSlvl++; if((!$this->tableLevel) && ($this->listlvl == 0)) { $blockstate = 0; if (count($this->textbuffer) == 0 && $this->lastblocklevelchange == 1 && !$this->tableLevel && !$this->kwt) { $this->newFlowingBlock( $this->blk[$this->blklvl]['width'],$this->lineheight,'',false,false,1,true, $this->blk[$this->blklvl]['direction']); $this->finishFlowingBlock(true); } else if (count($this->textbuffer)) { $this->printbuffer($this->textbuffer,$blockstate); } $this->textbuffer=array(); $this->lastblocklevelchange = -1; } if ($this->listlvl == 0) { $this->list_indent = array(); $this->list_align = array(); $this->list_lineheight = array(); $this->InlineProperties['LIST'] = array(); $this->InlineProperties['LISTITEM'] = array(); } if($this->tableLevel) { $this->list_indent[$this->listlvl] = 0; if ($tag == 'OL') $this->listtype = '1'; else if ($tag == 'UL') $this->listtype = 'disc'; if ($this->listlvl > 0) { $this->listlist[$this->listlvl]['MAXNUM'] = $this->listnum; } $this->listlvl++; if (isset($attr['START'])) { $this->listnum = intval($attr['START']); } else { $this->listnum = 0; } $this->listlist[$this->listlvl] = array('TYPE'=>$this->listtype,'MAXNUM'=>$this->listnum); break; } if (($this->PDFA || $this->PDFX) && $tag == 'UL') { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "List bullets cannot use core font Zapfdingbats in PDFA1-b or PDFX/1-a. (Substitute characters from current font used if available, otherwise substitutes hyphen '-')"; } } if ($this->cssmgr->listCSSlvl==1) { $properties = $this->cssmgr->MergeCSS('TOPLIST',$tag,$attr); } else { $properties = $this->cssmgr->MergeCSS('LIST',$tag,$attr); } if (!empty($properties)) $this->setCSS($properties,'LIST'); $this->listtype = ''; if (isset($properties['LIST-STYLE-TYPE'])) { $this->listtype = $this->_getListStyle($properties['LIST-STYLE-TYPE']); } else if (isset($properties['LIST-STYLE'])) { $this->listtype = $this->_getListStyle($properties['LIST-STYLE']); } else if (isset($attr['TYPE']) && $attr['TYPE']) { $this->listtype = $attr['TYPE']; } if (!$this->listtype) { if ($tag == 'OL') $this->listtype = '1'; if ($tag == 'UL') { if ($this->listlvl % 3 == 0) $this->listtype = 'disc'; elseif ($this->listlvl % 3 == 1) $this->listtype = 'circle'; else $this->listtype = 'square'; } } if ($this->listlvl == 0) { $this->inherit_lineheight = 0; $this->listlvl++; if (isset($attr['START'])) { $this->listnum = intval($attr['START']); } else { $this->listnum = 0; } $this->listDir = (isset($this->blk[$this->blklvl]['direction']) ? $this->blk[$this->blklvl]['direction'] : null); $occur = $this->listoccur[$this->listlvl] = 1; $this->listlist[$this->listlvl][1] = array('TYPE'=>$this->listtype,'MAXNUM'=>$this->listnum); } else { if (!empty($this->textbuffer)) { $this->listitem[] = array($this->listlvl,$this->listnum,$this->textbuffer,$this->listoccur[$this->listlvl],$this->listitemtype); $this->listnum++; } $this->textbuffer = array(); $occur = $this->listoccur[$this->listlvl]; $this->listlist[$this->listlvl][$occur]['MAXNUM'] = $this->listnum; $this->listlvl++; if (isset($attr['START'])) { $this->listnum = intval($attr['START']); } else { $this->listnum = 0; } if (!isset($this->listoccur[$this->listlvl]) || $this->listoccur[$this->listlvl] == 0) $this->listoccur[$this->listlvl] = 1; else $this->listoccur[$this->listlvl]++; $occur = $this->listoccur[$this->listlvl]; $this->listlist[$this->listlvl][$occur] = array('TYPE'=>$this->listtype,'MAXNUM'=>$this->listnum); } if ($this->listlvl == 1) { if (isset($properties['MARGIN-TOP'])) { if ($lastbottommargin) { $tmp = $this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); if ($tmp > $lastbottommargin) { $properties['MARGIN-TOP'] -= $lastbottommargin; } else { $properties['MARGIN-TOP'] = 0; } } $this->DivLn($this->ConvertSize($properties['MARGIN-TOP'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false),$this->blklvl,true,1); } if (isset($properties['MARGIN-BOTTOM'])) { $this->list_margin_bottom = $this->ConvertSize($properties['MARGIN-BOTTOM'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($this->blk[$this->blklvl]['line_height'])) { $this->list_lineheight[$this->listlvl][$occur] = $this->blk[$this->blklvl]['line_height']; } if (isset($properties['DIRECTION']) && $properties['DIRECTION']) { $this->listDir = strtolower($properties['DIRECTION']); } else if (isset($attr['DIR']) && $attr['DIR']) { $this->listDir = strtolower($attr['DIR']); } } $this->list_indent[$this->listlvl][$occur] = 5; if (isset($properties['TEXT-INDENT'])) { $this->list_indent[$this->listlvl][$occur] = $this->ConvertSize($properties['TEXT-INDENT'],$this->blk[$this->blklvl]['inner_width'],$this->FontSize,false); } if (isset($properties['TEXT-ALIGN'])) { $this->list_align[$this->listlvl][$occur] = $align[strtolower($properties['TEXT-ALIGN'])]; } if (isset($properties['LINE-HEIGHT'])) { $this->list_lineheight[$this->listlvl][$occur] = $this->fixLineheight($properties['LINE-HEIGHT']); } else if ($this->listlvl>1 && isset($this->list_lineheight[($this->listlvl - 1)][1])) { $this->list_lineheight[$this->listlvl][$occur] = end($this->list_lineheight[($this->listlvl - 1)]); } if (!isset($this->list_lineheight[$this->listlvl][$occur]) || !$this->list_lineheight[$this->listlvl][$occur]) { $this->list_lineheight[$this->listlvl][$occur] = $this->normalLineheight; } $this->InlineProperties['LIST'][$this->listlvl][$occur] = $this->saveInlineProperties(); $properties = array(); break; case 'LI': $this->lastoptionaltag = $tag; $this->ignorefollowingspaces = true; if($this->tableLevel) { $this->blockjustfinished=false; if ((isset($this->cell[$this->row][$this->col]['maxs']) && $this->cell[$this->row][$this->col]['maxs'] > 0 ) || $this->cell[$this->row][$this->col]['s'] > 0 ) { $this->_saveCellTextBuffer("\n"); if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0 ; } if ($this->listlvl == 0) { $this->listlvl++; $this->listnum = 0; $this->listlist[$this->listlvl] = array('TYPE'=>'disc','MAXNUM'=>$this->listnum); } $this->listnum++; switch($this->listlist[$this->listlvl]['TYPE']) { case 'A': $blt = $this->dec2alpha($this->listnum,true).$this->list_number_suffix; break; case 'a': $blt = $this->dec2alpha($this->listnum,false).$this->list_number_suffix; break; case 'I': $blt = $this->dec2roman($this->listnum,true).$this->list_number_suffix; break; case 'i': $blt = $this->dec2roman($this->listnum,false).$this->list_number_suffix; break; case '1': $blt = $this->listnum.$this->list_number_suffix; break; default: if ($this->listlvl % 3 == 1 && $this->_charDefined($this->CurrentFont['cw'],8226)) { $blt = "\xe2\x80\xa2"; } else if ($this->listlvl % 3 == 2 && $this->_charDefined($this->CurrentFont['cw'],9900)) { $blt = "\xe2\x9a\xac"; } else if ($this->listlvl % 3 == 0 && $this->_charDefined($this->CurrentFont['cw'],9642)) { $blt = "\xe2\x96\xaa"; } else { $blt = '-'; } break; } if ($this->usingCoreFont) { $ls = str_repeat(chr(160).chr(160),($this->listlvl-1)*2) . $blt . ' '; } else { $ls = str_repeat("\xc2\xa0\xc2\xa0",($this->listlvl-1)*2) . $blt . ' '; } $this->_saveCellTextBuffer($ls, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $this->GetStringWidth($ls); break; } if ($this->listlvl == 0) { $this->listlvl++; $this->listnum = 0; $this->listoccur[$this->listlvl] = 1; $this->listlist[$this->listlvl][1] = array('TYPE'=>'disc','MAXNUM'=>$this->listnum); } if ($this->listnum == 0) { $this->listnum++; $this->textbuffer = array(); } else { if (!empty($this->textbuffer)) { if (!$this->listjustfinished) { $this->listitem[] = array($this->listlvl,$this->listnum,$this->textbuffer,$this->listoccur[$this->listlvl],$this->listitemtype); $this->listnum++; } else { $this->listitem[] = array($this->listlvl,$this->listnum,$this->textbuffer,$this->listoccur[$this->listlvl],$this->listitemtype, true); } } $this->textbuffer = array(); } $this->listjustfinished = false; $this->cssmgr->listCSSlvl++; $properties = $this->cssmgr->MergeCSS('LIST',$tag,$attr); if (!empty($properties)) $this->setCSS($properties,'LIST'); $this->InlineProperties['LISTITEM'][$this->listlvl][$this->listoccur[$this->listlvl]][$this->listnum] = $this->saveInlineProperties(); if (isset($properties['LIST-STYLE-TYPE'])) { $this->listitemtype = $this->_getListStyle($properties['LIST-STYLE-TYPE']); } else if (isset($properties['LIST-STYLE'])) { $this->listitemtype = $this->_getListStyle($properties['LIST-STYLE']); } else if (isset($attr['TYPE']) && $attr['TYPE']) { $this->listitemtype = $attr['TYPE']; } else $this->listitemtype = ''; break; }} function _getListStyle($ls) { if (stristr($ls,'decimal')) { return '1'; } else if (preg_match('/(disc|circle|square|arabic-indic|bengali|devanagari|gujarati|gurmukhi|kannada|malayalam|oriya|persian|tamil|telugu|thai|urdu)/i',$ls,$m)) { return strtolower(trim($m[1])); } else if (stristr($ls,'lower-roman')) { return 'i'; } else if (stristr($ls,'upper-roman')) { return 'I'; } else if (stristr($ls,'lower-latin')|| stristr($ls,'lower-alpha')) { return 'a'; } else if (stristr($ls,'upper-latin') || stristr($ls,'upper-alpha')) { return 'A'; } else if (stristr($ls,'none')) { return 'none'; } else if (preg_match('/U\+([a-fA-F0-9]+)/i',$ls)) { return $ls; } else { return ''; } } function CloseTag($tag) { $this->ignorefollowingspaces = false; if($tag=='OPTION') { $this->selectoption['ACTIVE'] = false; $this->lastoptionaltag = ''; } if($tag=='TTS' or $tag=='TTA' or $tag=='TTZ') { if ($this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); $ltag = strtolower($tag); $this->$ltag = false; } if($tag=='FONT' || $tag=='SPAN' || $tag=='CODE' || $tag=='KBD' || $tag=='SAMP' || $tag=='TT' || $tag=='VAR' || $tag=='INS' || $tag=='STRONG' || $tag=='CITE' || $tag=='SUB' || $tag=='SUP' || $tag=='S' || $tag=='STRIKE' || $tag=='DEL' || $tag=='Q' || $tag=='EM' || $tag=='B' || $tag=='I' || $tag=='U' | $tag=='SMALL' || $tag=='BIG' || $tag=='ACRONYM' || $tag=='MARK' || $tag=='TIME' || $tag=='PROGRESS' || $tag=='METER' ) { if ($tag == 'SPAN') { if (isset($this->InlineProperties['SPAN'][$this->spanlvl]) && $this->InlineProperties['SPAN'][$this->spanlvl]) { $this->restoreInlineProperties($this->InlineProperties['SPAN'][$this->spanlvl]); } unset($this->InlineProperties['SPAN'][$this->spanlvl]); if (isset($this->InlineAnnots['SPAN'][$this->spanlvl]) && $this->InlineAnnots['SPAN'][$this->spanlvl]) { $annot = $this->InlineAnnots['SPAN'][$this->spanlvl]; } unset($this->InlineAnnots['SPAN'][$this->spanlvl]); $this->spanlvl--; } else { if (isset($this->InlineProperties[$tag]) && $this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); if (isset($this->InlineAnnots[$tag]) && $this->InlineAnnots[$tag]) { $annot = $this->InlineAnnots[$tag]; } unset($this->InlineAnnots[$tag]); } if (isset($annot)) { if($this->tableLevel) { $this->cell[$this->row][$this->col]['textbuffer'][] = array($annot); } else { $this->textbuffer[] = array($annot); } } } if($tag=='METER' || $tag=='PROGRESS') { $this->inMeter = false; } if($tag=='A') { $this->HREF=''; if (isset($this->InlineProperties['A'])) { $this->restoreInlineProperties($this->InlineProperties['A']); } unset($this->InlineProperties['A']); } if($tag=='LEGEND') { if (count($this->textbuffer) && !$this->tableLevel) { $leg = $this->textbuffer[(count($this->textbuffer)-1)]; unset($this->textbuffer[(count($this->textbuffer)-1)]); $this->textbuffer = array_values($this->textbuffer); $this->blk[$this->blklvl]['border_legend'] = $leg; $this->blk[$this->blklvl]['margin_top'] += ($leg[11]/2)/_MPDFK; $this->blk[$this->blklvl]['padding_top'] += ($leg[11]/2)/_MPDFK; } if (isset($this->InlineProperties['LEGEND'])) { $this->restoreInlineProperties($this->InlineProperties['LEGEND']); } unset($this->InlineProperties['LEGEND']); $this->ignorefollowingspaces = true; } if($tag=='TEXTAREA') { $this->specialcontent = ''; if ($this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); } if($tag=='SELECT') { $this->lastoptionaltag = ''; $texto = ''; if (isset($this->selectoption['SELECTED'])) { $texto = $this->selectoption['SELECTED']; } if ($this->useActiveForms) { $w = $this->selectoption['MAXWIDTH']; } else { $w = $this->GetStringWidth($texto); } if ($w == 0) { $w = 5; } $objattr['type'] = 'select'; $objattr['text'] = $texto; if (isset($this->selectoption['NAME'])) { $objattr['fieldname'] = $this->selectoption['NAME']; } if (isset($this->selectoption['READONLY'])) { $objattr['readonly'] = true; } if (isset($this->selectoption['REQUIRED'])) { $objattr['required'] = true; } if (isset($this->selectoption['SPELLCHECK'])) { $objattr['spellcheck'] = true; } if (isset($this->selectoption['EDITABLE'])) { $objattr['editable'] = true; } if (isset($this->selectoption['ONCHANGE'])) { $objattr['onChange'] = $this->selectoption['ONCHANGE']; } if (isset($this->selectoption['ITEMS'])) { $objattr['items'] = $this->selectoption['ITEMS']; } if (isset($this->selectoption['MULTIPLE'])) { $objattr['multiple'] = $this->selectoption['MULTIPLE']; } if (isset($this->selectoption['DISABLED'])) { $objattr['disabled'] = $this->selectoption['DISABLED']; } if (isset($this->selectoption['TITLE'])) { $objattr['title'] = $this->selectoption['TITLE']; } if (isset($this->selectoption['COLOR'])) { $objattr['color'] = $this->selectoption['COLOR']; } if (isset($this->selectoption['SIZE'])) { $objattr['size'] = $this->selectoption['SIZE']; } if (isset($objattr['size']) && $objattr['size']>1) { $rows=$objattr['size']; } else { $rows = 1; } $objattr['fontfamily'] = $this->FontFamily; $objattr['fontsize'] = $this->FontSizePt; $objattr['width'] = $w + ($this->form->form_element_spacing['select']['outer']['h']*2)+($this->form->form_element_spacing['select']['inner']['h']*2) + ($this->FontSize*1.4); $objattr['height'] = ($this->FontSize*$rows) + ($this->form->form_element_spacing['select']['outer']['v']*2)+($this->form->form_element_spacing['select']['inner']['v']*2); $e = "\xbb\xa4\xactype=select,objattr=".serialize($objattr)."\xbb\xa4\xac"; $properties = array(); if ($this->tableLevel) { $this->_saveCellTextBuffer($e, $this->HREF); $this->cell[$this->row][$this->col]['s'] += $objattr['width'] ; } else { $this->_saveTextBuffer($e, $this->HREF); } $this->selectoption = array(); $this->specialcontent = ''; if ($this->InlineProperties[$tag]) { $this->restoreInlineProperties($this->InlineProperties[$tag]); } unset($this->InlineProperties[$tag]); } if($tag=='P' || $tag=='DIV' || $tag=='H1' || $tag=='H2' || $tag=='H3' || $tag=='H4' || $tag=='H5' || $tag=='H6' || $tag=='PRE' || $tag=='FORM' || $tag=='ADDRESS' || $tag=='BLOCKQUOTE' || $tag=='CENTER' || $tag=='DT' || $tag=='DD' || $tag=='DL' || $tag=='CAPTION' || $tag=='FIELDSET' || $tag=='ARTICLE' || $tag=='ASIDE' || $tag=='FIGURE' || $tag=='FIGCAPTION' || $tag=='FOOTER' || $tag=='HEADER' || $tag=='HGROUP' || $tag=='NAV' || $tag=='SECTION' || $tag=='DETAILS' || $tag=='SUMMARY' ) { $this->ignorefollowingspaces = true; $this->blockjustfinished=true; $this->lastblockbottommargin = $this->blk[$this->blklvl]['margin_bottom']; if ($this->listlvl>0) { return; } if (preg_match('/^H\d/',$tag) && !$this->tableLevel && !$this->writingToC) { if (isset($this->h2toc[$tag]) || isset($this->h2bookmarks[$tag])) { $content = ''; if (count($this->textbuffer)==1) { $content = $this->textbuffer[0][0]; } else { for ($i=0;$i<count($this->textbuffer);$i++) { if (substr($this->textbuffer[$i][0],0,3) != "\xbb\xa4\xac") { $content .= $this->textbuffer[$i][0]; } } } if (isset($this->h2toc[$tag])) { $objattr = array(); $objattr['type'] = 'toc'; $objattr['toclevel'] = $this->h2toc[$tag]; $objattr['CONTENT'] = htmlspecialchars($content); $e = "\xbb\xa4\xactype=toc,objattr=".serialize($objattr)."\xbb\xa4\xac"; array_unshift($this->textbuffer,array($e)); } if (isset($this->h2bookmarks[$tag])) { $objattr = array(); $objattr['type'] = 'bookmark'; $objattr['bklevel'] = $this->h2bookmarks[$tag]; $objattr['CONTENT'] = $content; $e = "\xbb\xa4\xactype=toc,objattr=".serialize($objattr)."\xbb\xa4\xac"; array_unshift($this->textbuffer,array($e)); } } } if($this->tableLevel) { if ($this->linebreakjustfinished) { $this->blockjustfinished=false; } if (isset($this->InlineProperties['BLOCKINTABLE'])) { if ($this->InlineProperties['BLOCKINTABLE']) { $this->restoreInlineProperties($this->InlineProperties['BLOCKINTABLE']); } unset($this->InlineProperties['BLOCKINTABLE']); } if($tag=='PRE') { $this->ispre=false; } return; } $this->lastoptionaltag = ''; $this->divbegin=false; $this->linebreakjustfinished=false; $this->x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin']; $currpos = $this->page*1000 + $this->y; if (isset($this->blk[$this->blklvl]['float_endpos']) && $this->blk[$this->blklvl]['float_endpos'] > $currpos) { $old_page = $this->page; $new_page = intval($this->blk[$this->blklvl]['float_endpos'] /1000); if ($old_page != $new_page) { $s = $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $this->page = $new_page; $this->ResetMargins(); $this->Reset(); $this->pageoutput[$this->page] = array(); } $this->y = (($this->blk[$this->blklvl]['float_endpos'] *1000) % 1000000)/1000; } if ($this->lastblocklevelchange == 1) { $blockstate = 3; } else if ($this->lastblocklevelchange == -1) { $blockstate = 2; } else { $blockstate = 0; } if (count($this->textbuffer) && $this->textbuffer[count($this->textbuffer)-1]) { if (substr($this->textbuffer[count($this->textbuffer)-1][0],0,3) != "\xbb\xa4\xac") { if ($this->usingCoreFont) { $this->textbuffer[count($this->textbuffer)-1][0] = preg_replace('/[ ]+$/', '', $this->textbuffer[count($this->textbuffer)-1][0]); } else { $this->textbuffer[count($this->textbuffer)-1][0] = preg_replace('/[ ]+$/u', '', $this->textbuffer[count($this->textbuffer)-1][0]); } } } if (count($this->textbuffer) == 0 && $this->lastblocklevelchange != 0) { $this->newFlowingBlock( $this->blk[$this->blklvl]['width'],$this->lineheight,'',false,false,$blockstate,true, $this->blk[$this->blklvl]['direction']); $this->finishFlowingBlock(true); $this->PaintDivBB('',$blockstate); } else { $this->printbuffer($this->textbuffer,$blockstate); } $this->textbuffer=array(); if ($this->blk[$this->blklvl]['keep_block_together']) { $this->printdivbuffer(); } if ($this->kwt) { $this->kwt_height = $this->y - $this->kwt_y0; } $this->printfloatbuffer(); if($tag=='PRE') { $this->ispre=false; } if ($this->blk[$this->blklvl]['float'] == 'R') { $s = $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $this->Reset(); $this->pageoutput[$this->page] = array(); for($i=($this->blklvl-1); $i >= 0; $i--) { if (isset($this->blk[$i]['float_endpos'])) { $this->blk[$i]['float_endpos'] = max($this->blk[$i]['float_endpos'], ($this->page*1000 + $this->y)); } else { $this->blk[$i]['float_endpos'] = $this->page*1000 + $this->y; } } $this->floatDivs[] = array( 'side'=>'R', 'startpage'=>$this->blk[$this->blklvl]['startpage'] , 'y0'=>$this->blk[$this->blklvl]['float_start_y'] , 'startpos'=> ($this->blk[$this->blklvl]['startpage']*1000 + $this->blk[$this->blklvl]['float_start_y']), 'endpage'=>$this->page , 'y1'=>$this->y , 'endpos'=> ($this->page*1000 + $this->y), 'w'=> $this->blk[$this->blklvl]['float_width'], 'blklvl'=>$this->blklvl, 'blockContext' => $this->blk[$this->blklvl-1]['blockContext'] ); $this->y = $this->blk[$this->blklvl]['float_start_y'] ; $this->page = $this->blk[$this->blklvl]['startpage'] ; $this->ResetMargins(); $this->pageoutput[$this->page] = array(); } if ($this->blk[$this->blklvl]['float'] == 'L') { $s = $this->PrintPageBackgrounds(); $this->pages[$this->page] = preg_replace('/(___BACKGROUND___PATTERNS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pageBackgrounds = array(); $this->Reset(); $this->pageoutput[$this->page] = array(); for($i=($this->blklvl-1); $i >= 0; $i--) { if (isset($this->blk[$i]['float_endpos'])) { $this->blk[$i]['float_endpos'] = max($this->blk[$i]['float_endpos'], ($this->page*1000 + $this->y)); } else { $this->blk[$i]['float_endpos'] = $this->page*1000 + $this->y; } } $this->floatDivs[] = array( 'side'=>'L', 'startpage'=>$this->blk[$this->blklvl]['startpage'] , 'y0'=>$this->blk[$this->blklvl]['float_start_y'] , 'startpos'=> ($this->blk[$this->blklvl]['startpage']*1000 + $this->blk[$this->blklvl]['float_start_y']), 'endpage'=>$this->page , 'y1'=>$this->y , 'endpos'=> ($this->page*1000 + $this->y), 'w'=> $this->blk[$this->blklvl]['float_width'], 'blklvl'=>$this->blklvl, 'blockContext' => $this->blk[$this->blklvl-1]['blockContext'] ); $this->y = $this->blk[$this->blklvl]['float_start_y'] ; $this->page = $this->blk[$this->blklvl]['startpage'] ; $this->ResetMargins(); $this->pageoutput[$this->page] = array(); } if (isset($this->blk[$this->blklvl]['visibility']) && $this->blk[$this->blklvl]['visibility']!='visible') { $this->SetVisibility('visible'); } if (isset($this->blk[$this->blklvl]['page_break_after'])) { $page_break_after = $this->blk[$this->blklvl]['page_break_after']; } else { $page_break_after = ''; } $this->Reset(); if (isset($this->blk[$this->blklvl]['z-index']) && $this->blk[$this->blklvl]['z-index'] > 0) { $this->EndLayer(); } if ($this->blklvl > 0) { if ($this->blk[$this->blklvl]['tag'] == $tag) { unset($this->blk[$this->blklvl]); $this->blklvl--; } } $this->lastblocklevelchange = -1 ; if (isset($this->blk[$this->blklvl]['InlineProperties'])) { $this->restoreInlineProperties($this->blk[$this->blklvl]['InlineProperties']); } $this->x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin']; if ($page_break_after) { $save_blklvl = $this->blklvl; $save_blk = $this->blk; $save_silp = $this->saveInlineProperties(); $save_spanlvl = $this->spanlvl; $save_ilp = $this->InlineProperties; if ($this->blklvl>1) { for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if (count($this->textbuffer)) { $this->printbuffer($this->textbuffer); $this->textbuffer=array(); } } $save_cols = false; if ($this->ColActive) { $save_cols = true; $save_nbcol = $this->NbCol; $this->SetColumns(0); } if ($page_break_after == 'RIGHT') { $this->AddPage($this->CurOrientation,'NEXT-ODD','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else if ($page_break_after == 'LEFT') { $this->AddPage($this->CurOrientation,'NEXT-EVEN','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else { $this->AddPage($this->CurOrientation,'','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } if (!$this->restoreBlockPagebreaks) { $this->blklvl = 0; $this->lastblocklevelchange = 0; $this->blk = array(); $this->initialiseBlock($this->blk[0]); $this->blk[0]['width'] =& $this->pgwidth; $this->blk[0]['inner_width'] =& $this->pgwidth; $this->blk[0]['blockContext'] = $this->blockContext; $properties = $this->cssmgr->MergeCSS('BLOCK','BODY',''); $this->setCSS($properties,'','BODY'); $this->blklvl++; $currblk =& $this->blk[$this->blklvl]; $prevblk =& $this->blk[$this->blklvl-1]; $this->initialiseBlock($currblk); $currblk['tag'] = $tag; $currblk['attr'] = $attr; $this->Reset(); $properties = $this->cssmgr->MergeCSS('BLOCK',$tag,$attr); } if ($save_cols) { $this->SetColumns($save_nbcol,$this->colvAlign,$this->ColGap); } if ($this->restoreBlockPagebreaks && !$this->tableLevel && !$this->listlvl) { $this->blk = $save_blk; $t = $this->blk[0]['tag']; $a = $this->blk[0]['attr']; $this->blklvl = 0; for ($b=0; $b<=$save_blklvl;$b++) { $tc = $t; $ac = $a; $t = $this->blk[$b+1]['tag']; $a = $this->blk[$b+1]['attr']; unset($this->blk[$b+1]); $this->OpenTag($tc,$ac); } $this->spanlvl = $save_spanlvl; $this->InlineProperties = $save_ilp; $this->restoreInlineProperties($save_silp); } } } if($tag=='TH') $this->SetStyle('B',false); if(($tag=='TH' or $tag=='TD') && $this->tableLevel) { $this->lastoptionaltag = 'TR'; unset($this->cssmgr->tablecascadeCSS[$this->cssmgr->tbCSSlvl]); $this->cssmgr->tbCSSlvl--; if (!$this->tdbegin) { return; } $this->tdbegin = false; if (!isset($this->cell[$this->row][$this->col]['maxs'])) { if (!is_array($this->cell[$this->row][$this->col])) { $this->Error("You may have an error in your HTML code e.g. &lt;/td&gt;&lt;/td&gt;"); } $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } if (isset($this->cell[$this->row][$this->col]['textbuffer'])) { $ntb = count($this->cell[$this->row][$this->col]['textbuffer']); } else { $ntb = 0; } if ($ntb>1 && $this->cell[$this->row][$this->col]['textbuffer'][$ntb-1][0] == "\n") { unset($this->cell[$this->row][$this->col]['textbuffer'][$ntb-1]); } if ($this->cacheTables) { $clen = $this->_cacheCell($this->cell[$this->row][$this->col], $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cache']); $this->cell[$this->row][$this->col] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['ptr']; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['ptr'] += $clen; } if ($this->tablethead) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_thead'][$this->row] = true; if ($this->tableLevel==1) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['headernrows'] = max($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['headernrows'] , ($this->row+1)); } } if ($this->tabletfoot) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot'][$this->row] = true; if ($this->tableLevel==1) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['footernrows'] = max($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['footernrows'] , ($this->row+1 - $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['headernrows'] )); } } $this->Reset(); } if($tag=='TR' && $this->tableLevel) { if (isset($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trborder-left'][$this->row])) { if ($this->cacheTables) { $c = $this->_uncacheCell($this->cell[$this->row][$this->col], $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cache'], null); } else { $c =& $this->cell[$this->row][$this->col]; } if ($c) { if ($this->packTableData) { $cell = $this->_unpackCellBorder($c['borderbin'] ); } else { $cell = $c; } $cell['border_details']['R'] = $this->border_details($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trborder-right'][$this->row]); $this->setBorder($cell['border'], _BORDER_RIGHT, $cell['border_details']['R']['s']); if ($this->packTableData) { $c['borderbin'] = $this->_packCellBorder($cell); unset($c['border']); unset($c['border_details']); } else { $c = $cell; } } if ($this->cacheTables) { $fh = fopen($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cache'], "r+b"); $this->_cacheUpdateBorder($c, $fh, $this->cell[$this->row][$this->col]); fclose($fh); } } $this->lastoptionaltag = ''; unset($this->cssmgr->tablecascadeCSS[$this->cssmgr->tbCSSlvl]); $this->cssmgr->tbCSSlvl--; $this->trow_text_rotate = ''; $this->tabletheadjustfinished = false; } if($tag=='TBODY') { $this->lastoptionaltag = ''; unset($this->cssmgr->tablecascadeCSS[$this->cssmgr->tbCSSlvl]); $this->cssmgr->tbCSSlvl--; } if($tag=='THEAD') { $this->lastoptionaltag = ''; unset($this->cssmgr->tablecascadeCSS[$this->cssmgr->tbCSSlvl]); $this->cssmgr->tbCSSlvl--; $this->tablethead = 0; $this->tabletheadjustfinished = true; $this->ResetStyles(); $this->thead_font_weight = ''; $this->thead_font_style = ''; $this->thead_font_smCaps = ''; $this->thead_valign_default = ''; $this->thead_textalign_default = ''; } if($tag=='TFOOT') { $this->lastoptionaltag = ''; unset($this->cssmgr->tablecascadeCSS[$this->cssmgr->tbCSSlvl]); $this->cssmgr->tbCSSlvl--; $this->tabletfoot = 0; $this->ResetStyles(); $this->tfoot_font_weight = ''; $this->tfoot_font_style = ''; $this->tfoot_font_smCaps = ''; $this->tfoot_valign_default = ''; $this->tfoot_textalign_default = ''; } if($tag=='TABLE') { if ($this->progressBar) { $this->UpdateProgressBar(1,'','TABLE'); } if ($this->progressBar) { $this->UpdateProgressBar(7,0,''); } $this->lastoptionaltag = ''; unset($this->cssmgr->tablecascadeCSS[$this->cssmgr->tbCSSlvl]); $this->cssmgr->tbCSSlvl--; $this->ignorefollowingspaces = true; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cells'] = $this->cell; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['wc'] = array_pad(array(),$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nc'],array('miw'=>0,'maw'=>0)); $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['hr'] = array_pad(array(),$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nr'],0); if (isset($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot']) && count($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot'])) { $tfrows = array(); foreach($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot'] AS $r=>$val) { if ($val) { $tfrows[] = $r; } } $temp = array(); $temptf = array(); foreach($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cells'] AS $k=>$row) { if (in_array($k,$tfrows)) { $temptf[] = $row; } else { $temp[] = $row; } } $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot'] = array(); for($i=count($temp) ; $i<(count($temp)+count($temptf)); $i++) { $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['is_tfoot'][$i] = true; } if (count($this->table[($this->tableLevel+1)])) { foreach($this->table[($this->tableLevel+1)] AS $nid=>$nested) { $this->table[($this->tableLevel+1)][$nid]['nestedpos'][0] -= count($temptf); } } $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cells'] = array_merge($temp, $temptf); $temptrbgi = array(); $temptrbgg = array(); $temptrbgc = array(); $temptrbgc[-1] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['bgcolor'][-1]; for($k=0; $k<$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nr']; $k++) { if (!in_array($k,$tfrows)) { $temptrbgi[] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trbackground-images'][$k]; $temptrbgg[] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trgradients'][$k]; $temptrbgc[] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['bgcolor'][$k]; } } for($k=0; $k<$this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['nr']; $k++) { if (in_array($k,$tfrows)) { $temptrbgi[] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trbackground-images'][$k]; $temptrbgg[] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trgradients'][$k]; $temptrbgc[] = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['bgcolor'][$k]; } } $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trbackground-images'] = $temptrbgi; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['trgradients'] = $temptrbgg; $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['bgcolor'] = $temptrbgc ; } if ($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['direction']=='rtl') { $this->_reverseTableDir($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]); } $this->_fixTableBorders($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]); if ($this->progressBar) { $this->UpdateProgressBar(7,10,' '); } if ($this->ColActive) { $this->table_rotate = 0; } if ($this->table_rotate <> 0) { $this->tablebuffer = ''; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 1); $this->tbrot_maxh = $this->blk[$this->blklvl]['inner_width'] ; $this->tbrot_align = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['a'] ; } $this->shrin_k = 1; if ($this->shrink_tables_to_fit < 1) { $this->shrink_tables_to_fit = 1; } if (!$this->shrink_this_table_to_fit) { $this->shrink_this_table_to_fit = $this->shrink_tables_to_fit; } if ($this->tableLevel>1) { $this->_tableColumnWidth($this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]],true); $tmiw = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['miw']; $tmaw = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['maw']; $tl = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['tl']; $this->tableLevel--; $this->base_table_properties = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['baseProperties']; $this->cell = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['cells']; if (isset($this->cell['PARENTCELL'])) { if ($this->cell['PARENTCELL']) { $this->restoreInlineProperties($this->cell['PARENTCELL']); } unset($this->cell['PARENTCELL']); } $this->row = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['currrow']; $this->col = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['currcol']; $objattr = array(); $objattr['type'] = 'nestedtable'; $objattr['nestedcontent'] = $this->tbctr[($this->tableLevel+1)]; $objattr['table'] = $this->tbctr[$this->tableLevel]; $objattr['row'] = $this->row; $objattr['col'] = $this->col; $objattr['level'] = $this->tableLevel; $e = "\xbb\xa4\xactype=nestedtable,objattr=".serialize($objattr)."\xbb\xa4\xac"; $this->_saveCellTextBuffer($e); $this->cell[$this->row][$this->col]['s'] += $tl ; if (!isset($this->cell[$this->row][$this->col]['maxs'])) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } elseif($this->cell[$this->row][$this->col]['maxs'] < $this->cell[$this->row][$this->col]['s']) { $this->cell[$this->row][$this->col]['maxs'] = $this->cell[$this->row][$this->col]['s']; } $this->cell[$this->row][$this->col]['s'] = 0; if ((isset($this->cell[$this->row][$this->col]['nestedmaw']) && $this->cell[$this->row][$this->col]['nestedmaw'] < $tmaw) || !isset($this->cell[$this->row][$this->col]['nestedmaw'])) { $this->cell[$this->row][$this->col]['nestedmaw'] = $tmaw ; } if ((isset($this->cell[$this->row][$this->col]['nestedmiw']) && $this->cell[$this->row][$this->col]['nestedmiw'] < $tmiw) || !isset($this->cell[$this->row][$this->col]['nestedmiw'])) { $this->cell[$this->row][$this->col]['nestedmiw'] = $tmiw ; } $this->tdbegin = true; $this->nestedtablejustfinished = true; $this->ignorefollowingspaces = true; return; } $this->cMarginL = 0; $this->cMarginR = 0; $this->cMarginT = 0; $this->cMarginB = 0; $this->cellPaddingL = 0; $this->cellPaddingR = 0; $this->cellPaddingT = 0; $this->cellPaddingB = 0; if (isset($this->table[1][1]['overflow']) && $this->table[1][1]['overflow']=='visible') { if ($this->kwt || $this->table_rotate || $this->table_keep_together || $this->ColActive) { $this->kwt = false; $this->table_rotate = 0; $this->table_keep_together = false; } $this->_tableColumnWidth($this->table[1][1],true); $this->_tableWidth($this->table[1][1]); } else { if (!$this->kwt_saved) { $this->kwt_height = 0; } list($check,$tablemiw) = $this->_tableColumnWidth($this->table[1][1],true); $save_table = $this->table; if ($this->cacheTables) { $this->_backupCacheFiles(); } $reset_to_minimum_width = false; $added_page = false; if ($check > 1) { if ($check > $this->shrink_this_table_to_fit && $this->table_rotate) { if ($this->y != $this->tMargin) { $this->AddPage($this->CurOrientation); $this->kwt_moved = true; } $added_page = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; $check = 1; } $reset_to_minimum_width = true; } if ($reset_to_minimum_width) { $this->shrin_k = $check; $this->default_font_size /= $this->shrin_k; $this->SetFontSize($this->default_font_size, false ); $this->shrinkTable($this->table[1][1],$this->shrin_k); $this->_tableColumnWidth($this->table[1][1],false); for($lvl=2;$lvl<=$this->innermostTableLevel;$lvl++) { for ($nid=1; $nid<=$this->tbctr[$lvl]; $nid++) { $this->shrinkTable($this->table[$lvl][$nid],$this->shrin_k); $this->_tableColumnWidth($this->table[$lvl][$nid],false); } } } $this->SetLineHeight('',$this->table_lineheight); $this->_tableWidth($this->table[1][1]); } for($lvl=2;$lvl<=$this->innermostTableLevel;$lvl++) { for ($nid=1; $nid<=$this->tbctr[$lvl]; $nid++) { list($parentrow, $parentcol, $parentnid) = $this->table[$lvl][$nid]['nestedpos']; if ($this->cacheTables) { $c = $this->_uncacheCell($this->table[($lvl-1)][$parentnid]['cells'][$parentrow][$parentcol], $this->table[($lvl-1)][$parentnid]['cache'], null); } else $c =& $this->table[($lvl-1)][$parentnid]['cells'][$parentrow][$parentcol]; if (isset($c['colspan']) && $c['colspan']> 1) { $parentwidth = 0; for($cs=0;$cs<$c['colspan'] ; $cs++) { $parentwidth += $this->table[($lvl-1)][$parentnid]['wc'][$parentcol+$cs]; } } else { $parentwidth = $this->table[($lvl-1)][$parentnid]['wc'][$parentcol]; } if (!$this->simpleTables){ if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($c['borderbin']); } else { $br = $c['border_details']['R']['w']; $bl = $c['border_details']['L']['w']; } if ($this->table[$lvl-1][$parentnid]['borders_separate']) { $parentwidth -= $br + $bl + $c['padding']['L'] + $c['padding']['R'] + $this->table[($lvl-1)][$parentnid]['border_spacing_H']; } else { $parentwidth -= $br/2 + $bl/2 + $c['padding']['L'] + $c['padding']['R']; } } else if ($this->simpleTables){ if ($this->table[$lvl-1][$parentnid]['borders_separate']) { $parentwidth -= $this->table[($lvl-1)][$parentnid]['simple']['border_details']['L']['w'] + $this->table[($lvl-1)][$parentnid]['simple']['border_details']['R']['w'] + $c['padding']['L'] + $c['padding']['R'] + $this->table[($lvl-1)][$parentnid]['border_spacing_H']; } else { $parentwidth -= $this->table[($lvl-1)][$parentnid]['simple']['border_details']['L']['w']/2 + $this->table[($lvl-1)][$parentnid]['simple']['border_details']['R']['w']/2 + $c['padding']['L'] + $c['padding']['R']; } } if (isset($this->table[$lvl][$nid]['wpercent']) && $this->table[$lvl][$nid]['wpercent'] && $lvl>1) { $this->table[$lvl][$nid]['w'] = $parentwidth; } else if ($parentwidth > $this->table[$lvl][$nid]['maw']) { $this->table[$lvl][$nid]['w'] = $this->table[$lvl][$nid]['maw']; } else { $this->table[$lvl][$nid]['w'] = $parentwidth; } unset($c); $this->_tableWidth($this->table[$lvl][$nid]); } } for($lvl=$this->innermostTableLevel;$lvl>0;$lvl--) { for ($nid=1; $nid<=$this->tbctr[$lvl]; $nid++) { list($tableheight,$maxrowheight,$fullpage,$remainingpage, $maxfirstrowheight) = $this->_tableHeight($this->table[$lvl][$nid]); } } if ($this->progressBar) { $this->UpdateProgressBar(7,20,' '); } if ($this->table[1][1]['overflow']=='visible') { if ($maxrowheight > $fullpage) { die("mPDF Warning: A Table row is greater than available height. You cannot use CSS overflow:visible"); } if ($maxfirstrowheight > $remainingpage) { $this->AddPage($this->CurOrientation); } $r = 0; $c = 0; $p = 0; $y = 0; while (!$finished) { list($finished,$r,$c,$p,$y,$y0) = $this->_tableWrite($this->table[1][1],true,$r,$c,$p,$y); if (!$finished) { $this->AddPage($this->CurOrientation); if ($r==0 && $y0 > -1) { $this->y = $y0; } } } } else { $recalculate = 1; $forcerecalc = false; if ($maxrowheight > $fullpage) { $recalculate = $this->tbsqrt($maxrowheight / $fullpage, 1); $forcerecalc = true; } else if ($this->table_rotate) { if ($tableheight > $remainingpage) { if (($this->shrin_k * $this->tbsqrt($tableheight / $remainingpage, 1)) <= $this->shrink_this_table_to_fit) { $recalculate = $this->tbsqrt($tableheight / $remainingpage, 1); } else if (!$added_page) { if ($this->y != $this->tMargin) { $this->AddPage($this->CurOrientation); $this->kwt_moved = true; } $added_page = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; $recalculate = (1 / $this->shrin_k) + 0.001; } } else { $recalculate = 1; } } else if ($this->table_keep_together || ($this->table[1][1]['nr']==1 && !$this->writingHTMLfooter)) { if ($tableheight > $fullpage) { if (($this->shrin_k * $this->tbsqrt($tableheight / $fullpage, 1)) <= $this->shrink_this_table_to_fit) { $recalculate = $this->tbsqrt($tableheight / $fullpage, 1); } else if ($this->tableMinSizePriority) { $this->table_keep_together = false; $recalculate = 1.001; } else { if ($this->y != $this->tMargin) { $this->AddPage($this->CurOrientation); $this->kwt_moved = true; } $added_page = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; $recalculate = $this->tbsqrt($tableheight / $fullpage, 1); } } else if ($tableheight > $remainingpage) { if (($this->shrin_k * $this->tbsqrt($tableheight / $remainingpage, 1)) <= $this->shrink_this_table_to_fit) { $recalculate = $this->tbsqrt($tableheight / $remainingpage, 1); } else { if ($this->y != $this->tMargin) { $this->AddPage($this->CurOrientation); $this->kwt_moved = true; } $added_page = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; $recalculate = 1.001; } } else { $recalculate = 1; } } else { $recalculate = 1; } if ($recalculate > $this->shrink_this_table_to_fit && !$forcerecalc) { $recalculate = $this->shrink_this_table_to_fit; } $iteration = 1; while($recalculate <> 1) { $this->shrin_k1 = $recalculate ; $this->shrin_k *= $recalculate ; $this->default_font_size /= ($this->shrin_k1) ; $this->SetFontSize($this->default_font_size, false ); $this->SetLineHeight('',$this->table_lineheight); $this->table = $save_table; if ($this->cacheTables) { $this->_restoreCacheFiles(); } if ($this->shrin_k <> 1) { $this->shrinkTable($this->table[1][1],$this->shrin_k); } $this->_tableColumnWidth($this->table[1][1],false); for($lvl=2;$lvl<=$this->innermostTableLevel;$lvl++) { for ($nid=1; $nid<=$this->tbctr[$lvl]; $nid++) { if ($this->shrin_k <> 1) { $this->shrinkTable($this->table[$lvl][$nid],$this->shrin_k); } $this->_tableColumnWidth($this->table[$lvl][$nid],false); } } $this->_tableWidth($this->table[1][1]); for($lvl=2;$lvl<=$this->innermostTableLevel;$lvl++) { for ($nid=1; $nid<=$this->tbctr[$lvl]; $nid++) { list($parentrow, $parentcol, $parentnid) = $this->table[$lvl][$nid]['nestedpos']; if ($this->cacheTables) { $c = $this->_uncacheCell($this->table[($lvl-1)][$parentnid]['cells'][$parentrow][$parentcol], $this->table[($lvl-1)][$parentnid]['cache'], null); } else $c =& $this->table[($lvl-1)][$parentnid]['cells'][$parentrow][$parentcol]; if (isset($c['colspan']) && $c['colspan']> 1) { $parentwidth = 0; for($cs=0;$cs<$c['colspan'] ; $cs++) { $parentwidth += $this->table[($lvl-1)][$parentnid]['wc'][$parentcol+$cs]; } } else { $parentwidth = $this->table[($lvl-1)][$parentnid]['wc'][$parentcol]; } if (!$this->simpleTables){ if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($c['borderbin']); } else { $br = $c['border_details']['R']['w']; $bl = $c['border_details']['L']['w']; } if ($this->table[$lvl-1][$parentnid]['borders_separate']) { $parentwidth -= $br + $bl + $c['padding']['L'] + $c['padding']['R'] + $this->table[($lvl-1)][$parentnid]['border_spacing_H']; } else { $parentwidth -= $br/2 + $bl/2 + $c['padding']['L'] + $c['padding']['R']; } } else if ($this->simpleTables){ if ($this->table[$lvl-1][$parentnid]['borders_separate']) { $parentwidth -= $this->table[($lvl-1)][$parentnid]['simple']['border_details']['L']['w'] + $this->table[($lvl-1)][$parentnid]['simple']['border_details']['R']['w'] + $c['padding']['L'] + $c['padding']['R'] + $this->table[($lvl-1)][$parentnid]['border_spacing_H']; } else { $parentwidth -= ($this->table[($lvl-1)][$parentnid]['simple']['border_details']['L']['w'] + $this->table[($lvl-1)][$parentnid]['simple']['border_details']['R']['w']) /2 + $c['padding']['L'] + $c['padding']['R']; } } if (isset($this->table[$lvl][$nid]['wpercent']) && $this->table[$lvl][$nid]['wpercent'] && $lvl>1) { $this->table[$lvl][$nid]['w'] = $parentwidth; } else if ($parentwidth > $this->table[$lvl][$nid]['maw']) { $this->table[$lvl][$nid]['w'] = $this->table[$lvl][$nid]['maw'] ; } else { $this->table[$lvl][$nid]['w'] = $parentwidth; } unset($c); $this->_tableWidth($this->table[$lvl][$nid]); } } for($lvl=$this->innermostTableLevel;$lvl>0;$lvl--) { for ($nid=1; $nid<=$this->tbctr[$lvl]; $nid++) { list($tableheight,$maxrowheight,$fullpage,$remainingpage, $maxfirstrowheight) = $this->_tableHeight($this->table[$lvl][$nid]); } } if ($maxrowheight > $fullpage) { $recalculate = $this->tbsqrt($maxrowheight / $fullpage, $iteration); $iteration++; } else if ($this->table_rotate && $tableheight > $remainingpage && !$added_page) { if (($this->shrin_k * $this->tbsqrt($tableheight / $remainingpage, $iteration)) <= $this->shrink_this_table_to_fit) { $recalculate = $this->tbsqrt($tableheight / $remainingpage, $iteration); $iteration++; } else { if (!$added_page) { $this->AddPage($this->CurOrientation); $added_page = true; $this->kwt_moved = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; } $recalculate = (1 / $this->shrin_k) + 0.001; } } else if ($this->table_keep_together || ($this->table[1][1]['nr']==1 && !$this->writingHTMLfooter)) { if ($tableheight > $fullpage) { if (($this->shrin_k * $this->tbsqrt($tableheight / $fullpage, $iteration)) <= $this->shrink_this_table_to_fit) { $recalculate = $this->tbsqrt($tableheight / $fullpage, $iteration); $iteration++; } else if ($this->tableMinSizePriority) { $this->table_keep_together = false; $recalculate = (1 / $this->shrin_k) + 0.001; } else { if (!$added_page && $this->y != $this->tMargin) { $this->AddPage($this->CurOrientation); $added_page = true; $this->kwt_moved = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; } $recalculate = $this->tbsqrt($tableheight / $fullpage, $iteration); $iteration++; } } else if ($tableheight > $remainingpage) { if (($this->shrin_k * $this->tbsqrt($tableheight / $remainingpage, $iteration)) <= $this->shrink_this_table_to_fit) { $recalculate = $this->tbsqrt($tableheight / $remainingpage, $iteration); $iteration++; } else { if (!$added_page) { $this->AddPage($this->CurOrientation); $added_page = true; $this->kwt_moved = true; $this->tbrot_maxw = $this->h - ($this->y + $this->bMargin + 5) - $this->kwt_height; } $recalculate = (1 / $this->shrin_k) + 0.001; } } else { $recalculate = 1; } } else { $recalculate = 1; } } if ($maxfirstrowheight > $remainingpage && !$added_page && !$this->table_rotate && !$this->ColActive && !$this->table_keep_together && !$this->writingHTMLheader && !$this->writingHTMLfooter) { $this->AddPage($this->CurOrientation); $this->kwt_moved = true; } if ($this->kwt_saved && $this->kwt_moved) { $this->printkwtbuffer(); $this->kwt_moved = false; $this->kwt_saved = false; } if ($this->progressBar) { $this->UpdateProgressBar(7,30,' '); } $this->_tableWrite($this->table[1][1]); if ($this->table_rotate && $this->tablebuffer) { $this->PageBreakTrigger=$this->h-$this->bMargin; $save_tr = $this->table_rotate; $save_y = $this->y; $this->table_rotate = 0; $this->y = $this->tbrot_y0; $h = $this->tbrot_w; $this->DivLn($h,$this->blklvl,true); $this->table_rotate = $save_tr; $this->y = $save_y; $this->printtablebuffer(); } $this->table_rotate = 0; } $this->x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin']; $this->maxPosR = max($this->maxPosR , ($this->x + $this->table[1][1]['w'])); $this->blockjustfinished=true; $this->lastblockbottommargin = $this->table[1][1]['margin']['B']; if (isset($this->table[1][1]['page_break_after'])) { $page_break_after = $this->table[1][1]['page_break_after']; } else { $page_break_after = ''; } $this->kwt = false; $this->kwt_y0 = 0; $this->kwt_x0 = 0; $this->kwt_height = 0; $this->kwt_buffer = array(); $this->kwt_Links = array(); $this->kwt_Annots = array(); $this->kwt_moved = false; $this->kwt_saved = false; $this->kwt_Reference = array(); $this->kwt_BMoutlines = array(); $this->kwt_toc = array(); $this->shrin_k = 1; $this->shrink_this_table_to_fit = 0; unset($this->table); $this->table=array(); $this->tableLevel=0; $this->tbctr=array(); $this->innermostTableLevel=0; $this->cssmgr->tbCSSlvl = 0; $this->cssmgr->tablecascadeCSS = array(); unset($this->cell); $this->cell=array(); $this->col=-1; $this->row=-1; $this->Reset(); $this->cellPaddingL = 0; $this->cellPaddingT = 0; $this->cellPaddingR = 0; $this->cellPaddingB = 0; $this->cMarginL = 0; $this->cMarginT = 0; $this->cMarginR = 0; $this->cMarginB = 0; $this->default_font_size = $this->original_default_font_size; $this->default_font = $this->original_default_font; $this->SetFontSize($this->default_font_size, false); $this->SetFont($this->default_font,'',0,false); $this->SetLineHeight(); if (isset($this->blk[$this->blklvl]['InlineProperties'])) { $this->restoreInlineProperties($this->blk[$this->blklvl]['InlineProperties']);} if ($this->progressBar) { $this->UpdateProgressBar(7,100,' '); } if ($page_break_after) { $save_blklvl = $this->blklvl; $save_blk = $this->blk; $save_silp = $this->saveInlineProperties(); $save_spanlvl = $this->spanlvl; $save_ilp = $this->InlineProperties; if ($this->blklvl>1) { for ($b= $this->blklvl;$b>0;$b--) { $this->CloseTag($this->blk[$b]['tag']); } if (count($this->textbuffer)) { $this->printbuffer($this->textbuffer); $this->textbuffer=array(); } } $save_cols = false; if ($this->ColActive) { $save_cols = true; $save_nbcol = $this->NbCol; $this->SetColumns(0); } if ($page_break_after == 'RIGHT') { $this->AddPage($this->CurOrientation,'NEXT-ODD','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else if ($page_break_after == 'LEFT') { $this->AddPage($this->CurOrientation,'NEXT-EVEN','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } else { $this->AddPage($this->CurOrientation,'','','','','','', '','', '','','','','','',0,0,0,0,$pagesel); } if (!$this->restoreBlockPagebreaks) { $this->blklvl = 0; $this->lastblocklevelchange = 0; $this->blk = array(); $this->initialiseBlock($this->blk[0]); $this->blk[0]['width'] =& $this->pgwidth; $this->blk[0]['inner_width'] =& $this->pgwidth; $this->blk[0]['blockContext'] = $this->blockContext; $properties = $this->cssmgr->MergeCSS('BLOCK','BODY',''); $this->setCSS($properties,'','BODY'); } if ($save_cols) { $this->SetColumns($save_nbcol,$this->colvAlign,$this->ColGap); } if ($this->restoreBlockPagebreaks) { $this->blk = $save_blk; $t = $this->blk[0]['tag']; $a = $this->blk[0]['attr']; $this->blklvl = 0; for ($b=0; $b<=$save_blklvl;$b++) { $tc = $t; $ac = $a; $t = $this->blk[$b+1]['tag']; $a = $this->blk[$b+1]['attr']; unset($this->blk[$b+1]); $this->OpenTag($tc,$ac); } $this->spanlvl = $save_spanlvl; $this->InlineProperties = $save_ilp; $this->restoreInlineProperties($save_silp); } } } if($tag=='LI') { $this->lastoptionaltag = ''; unset($this->cssmgr->listcascadeCSS[$this->cssmgr->listCSSlvl]); $this->cssmgr->listCSSlvl--; if (isset($this->listoccur[$this->listlvl]) && isset($this->InlineProperties['LIST'][$this->listlvl][$this->listoccur[$this->listlvl]])) { $this->restoreInlineProperties($this->InlineProperties['LIST'][$this->listlvl][$this->listoccur[$this->listlvl]]); } } if(($tag=='UL') or ($tag=='OL')) { $this->ignorefollowingspaces = true; unset($this->cssmgr->listcascadeCSS[$this->cssmgr->listCSSlvl]); $this->cssmgr->listCSSlvl--; $this->lastoptionaltag = ''; if($this->tableLevel) { $this->listlist[$this->listlvl]['MAXNUM'] = $this->listnum; unset($this->listlist[$this->listlvl]); $this->listlvl--; if (isset($this->listlist[$this->listlvl]['MAXNUM'])) { $this->listnum = $this->listlist[$this->listlvl]['MAXNUM']; } if ($this->listlvl == 0) { $this->listjustfinished = true; } return; } if ($this->listlvl > 1) { $this->listjustfinished=true; if (!empty($this->textbuffer)) { $this->listitem[] = array($this->listlvl,$this->listnum,$this->textbuffer,$this->listoccur[$this->listlvl],$this->listitemtype); } else { $this->listnum--; } $this->textbuffer = array(); $occur = $this->listoccur[$this->listlvl]; $this->listlist[$this->listlvl][$occur]['MAXNUM'] = $this->listnum; $this->listlvl--; $occur = $this->listoccur[$this->listlvl]; $this->listnum = $this->listlist[$this->listlvl][$occur]['MAXNUM']; $this->listtype = $this->listlist[$this->listlvl][$occur]['TYPE']; if ($this->InlineProperties['LIST'][$this->listlvl][$occur]) { $this->restoreInlineProperties($this->InlineProperties['LIST'][$this->listlvl][$occur]); } } else { if (!empty($this->textbuffer)) { $this->listitem[] = array($this->listlvl,$this->listnum,$this->textbuffer,$this->listoccur[$this->listlvl],$this->listitemtype); } else { $this->listnum--; } $occur = $this->listoccur[$this->listlvl]; $this->listlist[$this->listlvl][$occur]['MAXNUM'] = $this->listnum; $this->textbuffer = array(); $this->listlvl--; $this->printlistbuffer(); unset($this->InlineProperties['LIST']); $this->Ln(0); if ($this->list_margin_bottom) { $this->DivLn($this->list_margin_bottom,$this->blklvl,true,1); } if (isset($this->blk[$this->blklvl]['InlineProperties'])) { $this->restoreInlineProperties($this->blk[$this->blklvl]['InlineProperties']);} $this->listjustfinished = true; $this->cssmgr->listCSSlvl = 0; $this->cssmgr->listcascadeCSS = array(); $this->blockjustfinished=true; $this->lastblockbottommargin = $this->list_margin_bottom; } } } function tbsqrt($val, $iteration=3) { $k = 4; if ($iteration==1) return sqrt($val); $x = 2-(($iteration-2)/($k-2)); if ($x == 0) { $ret = $val+0.00001; } else if ($x < 0) { $ret = 1 + ( pow(2, ($iteration-2-$k))/1000 ); } else { $ret = 1+(($val-1)/$x); } return $ret; } function printlistbuffer() { $x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin']; $this->cMarginL = 0; $this->cMarginR = 0; $currIndentLvl = -1; $lastIndent = array(); $bak_page = $this->page; $indent = 0; foreach($this->listitem as $item) { $oldcolumn = $this->CurrCol; $this->bulletarray = array(); $this->listlvl = $lvl = $item[0]; $num = $item[1]; $this->textbuffer = $item[2]; $occur = $item[3]; if ($item[4]) { $type = $item[4]; } else { $type = $this->listlist[$lvl][$occur]['TYPE']; } $maxnum = $this->listlist[$lvl][$occur]['MAXNUM']; $this->restoreInlineProperties($this->InlineProperties['LIST'][$lvl][$occur]); $this->SetFont($this->FontFamily,$this->FontStyle,$this->FontSizePt,true,true); $clh = $this->FontSize; $this->SetLineHeight($this->FontSizePt,$this->list_lineheight[$lvl][$occur]); $this->listOcc = $occur; $this->listnum = $num; if (isset($this->list_align[$this->listlvl][$occur])) { $this->divalign = $this->list_align[$this->listlvl][$occur]; } else { if (isset($this->blk[$this->blklvl]['direction']) && $this->blk[$this->blklvl]['direction']=='rtl') { $this->divalign = 'R'; } else { $this->divalign = 'L'; } } $bullfs = $this->InlineProperties['LISTITEM'][$lvl][$occur][$num]['size']; $space_width = $this->GetCharWidth(' ',false) * 1.5; $this->divwidth = $this->blk[$this->blklvl]['inner_width']; $this->divheight = $this->lineheight; $typefont = $this->FontFamily; if (preg_match('/U\+([a-fA-F0-9]+)/i',$type,$m)) { if ($this->_charDefined($this->CurrentFont['cw'],hexdec($m[1]))) { $list_item_marker = codeHex2utf($m[1]); } else { $list_item_marker = '-'; } $blt_width = $this->GetStringWidth($list_item_marker); $typefont = ''; if (preg_match('/rgb\(.*?\)/',$type,$m)) { $list_item_color = $this->ConvertColor($m[0]); } } else { $list_item_color = false; switch($type) { case '1': if ($this->listDir == 'rtl') { $list_item_marker = $this->list_number_suffix . $num; } else { $list_item_marker = $num . $this->list_number_suffix; } $blt_width = $this->GetStringWidth(str_repeat('5',strlen($maxnum)).$this->list_number_suffix); break; case 'none': $list_item_marker = ''; $blt_width = 0; break; case 'A': $anum = $this->dec2alpha($num,true); $maxnum = $this->dec2alpha($maxnum,true); if ($this->listDir == 'rtl') { $list_item_marker = $this->list_number_suffix . $anum; } else { $list_item_marker = $anum . $this->list_number_suffix; } $blt_width = $this->GetStringWidth(str_repeat('W',strlen($maxnum)).$this->list_number_suffix); break; case 'a': $anum = $this->dec2alpha($num,false); $maxnum = $this->dec2alpha($maxnum,false); if ($this->listDir == 'rtl') { $list_item_marker = $this->list_number_suffix . $anum; } else { $list_item_marker = $anum . $this->list_number_suffix; } $blt_width = $this->GetStringWidth(str_repeat('m',strlen($maxnum)).$this->list_number_suffix); break; case 'I': $anum = $this->dec2roman($num,true); if ($this->listDir == 'rtl') { $list_item_marker = $this->list_number_suffix . $anum; } else { $list_item_marker = $anum . $this->list_number_suffix; } if ($maxnum>87) { $bbit = 87; } else if ($maxnum>86) { $bbit = 86; } else if ($maxnum>37) { $bbit = 38; } else if ($maxnum>36) { $bbit = 37; } else if ($maxnum>27) { $bbit = 28; } else if ($maxnum>26) { $bbit = 27; } else if ($maxnum>17) { $bbit = 18; } else if ($maxnum>16) { $bbit = 17; } else if ($maxnum>7) { $bbit = 8; } else if ($maxnum>6) { $bbit = 7; } else if ($maxnum>3) { $bbit = 4; } else { $bbit = $maxnum; } $maxlnum = $this->dec2roman($bbit,true); $blt_width = $this->GetStringWidth($maxlnum.$this->list_number_suffix); break; case 'i': $anum = $this->dec2roman($num,false); if ($this->listDir == 'rtl') { $list_item_marker = $this->list_number_suffix . $anum; } else { $list_item_marker = $anum . $this->list_number_suffix; } if ($maxnum>87) { $bbit = 87; } else if ($maxnum>86) { $bbit = 86; } else if ($maxnum>37) { $bbit = 38; } else if ($maxnum>36) { $bbit = 37; } else if ($maxnum>27) { $bbit = 28; } else if ($maxnum>26) { $bbit = 27; } else if ($maxnum>17) { $bbit = 18; } else if ($maxnum>16) { $bbit = 17; } else if ($maxnum>7) { $bbit = 8; } else if ($maxnum>6) { $bbit = 7; } else if ($maxnum>3) { $bbit = 4; } else { $bbit = $maxnum; } $maxlnum = $this->dec2roman($bbit,false); $blt_width = $this->GetStringWidth($maxlnum.$this->list_number_suffix); break; case 'disc': if ($this->PDFA || $this->PDFX) { if ($this->_charDefined($this->CurrentFont['cw'],8226)) { $list_item_marker = "\xe2\x80\xa2"; } else { $list_item_marker = '-'; } $blt_width = $this->GetCharWidth($list_item_marker); break; } $list_item_marker = chr(108); $typefont = 'czapfdingbats'; $blt_width = (0.791 * $this->FontSize/2.5); break; case 'circle': if ($this->PDFA || $this->PDFX) { if ($this->_charDefined($this->CurrentFont['cw'],9900)) { $list_item_marker = "\xe2\x9a\xac"; } else { $list_item_marker = '-'; } $blt_width = $this->GetCharWidth($list_item_marker); break; } $list_item_marker = chr(109); $typefont = 'czapfdingbats'; $blt_width = (0.873 * $this->FontSize/2.5); break; case 'square': if ($this->PDFA || $this->PDFX) { if ($this->_charDefined($this->CurrentFont['cw'],9642)) { $list_item_marker = "\xe2\x96\xaa"; } else { $list_item_marker = '-'; } $blt_width = $this->GetCharWidth($list_item_marker); break; } $list_item_marker = chr(110); $typefont = 'czapfdingbats'; $blt_width = (0.761 * $this->FontSize/2.5); break; case 'arabic-indic': $cp = 0x0660; $rnum = $this->dec2other($num, $cp); $list_item_marker = $this->list_number_suffix . $rnum; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'persian': case 'urdu': $cp = 0x06F0; $rnum = $this->dec2other($num, $cp); $list_item_marker = $this->list_number_suffix . $rnum; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'bengali': $cp = 0x09E6; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'devanagari': $cp = 0x0966; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'gujarati': $cp = 0x0AE6; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'gurmukhi': $cp = 0x0A66; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'kannada': $cp = 0x0CE6; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'malayalam': $cp = 0x0D66; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(6, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'oriya': $cp = 0x0B66; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'telugu': $cp = 0x0C66; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(3, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'tamil': $cp = 0x0BE6; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(9, $cp),strlen($maxnum)).$this->list_number_suffix); break; case 'thai': $cp = 0x0E50; $rnum = $this->dec2other($num, $cp); $list_item_marker = $rnum . $this->list_number_suffix; $blt_width = $this->GetStringWidth(str_repeat($this->dec2other(5, $cp),strlen($maxnum)).$this->list_number_suffix); break; default: if ($this->listDir == 'rtl') { $list_item_marker = $this->list_number_suffix . $num; } else { $list_item_marker = $num . $this->list_number_suffix; } $blt_width = $this->GetStringWidth(str_repeat('5',strlen($maxnum)).$this->list_number_suffix); break; } } if (isset($item[5]) && $item[5]) { $list_item_marker = ''; } if ($currIndentLvl < $lvl) { if ($lvl > 1 || $this->list_indent_first_level) { $indent += $this->list_indent[$lvl][$occur]; $lastIndent[$lvl] = $this->list_indent[$lvl][$occur]; } } else if ($currIndentLvl > $lvl) { while ($currIndentLvl > $lvl) { $indent -= $lastIndent[$currIndentLvl]; $currIndentLvl--; } } $currIndentLvl = $lvl; if ($this->listDir == 'rtl') { if ($this->list_align_style == 'L') { $lalign = 'R'; } else { $lalign = 'L'; } $this->divwidth = $this->blk[$this->blklvl]['width'] - ($indent + $blt_width + $space_width) ; $xb = $this->blk[$this->blklvl]['inner_width'] + $this->blk[$this->blklvl]['border_left']['w'] + $this->blk[$this->blklvl]['padding_left'] - $indent - $blt_width; $this->bulletarray = array('w'=>$blt_width,'h'=>$clh,'txt'=>$list_item_marker,'x'=>$xb,'align'=>$lalign,'font'=>$typefont,'level'=>$lvl, 'occur'=>$occur, 'num'=>$num, 'fontsize'=>$bullfs, 'col'=>$list_item_color ); $this->x = $x; } else { if ($this->list_align_style == 'L') { $lalign = 'L'; } else { $lalign = 'R'; } $this->divwidth = $this->blk[$this->blklvl]['width'] - ($indent + $blt_width + $space_width) ; $xb = $this->blk[$this->blklvl]['padding_left'] + $this->blk[$this->blklvl]['border_left']['w'] - $blt_width - $space_width; $this->bulletarray = array('w'=>$blt_width,'h'=>$clh,'txt'=>$list_item_marker,'x'=>$xb,'align'=>$lalign,'font'=>$typefont,'level'=>$lvl, 'occur'=>$occur, 'num'=>$num, 'fontsize'=>$bullfs, 'col'=>$list_item_color ); $this->x = $x + $indent + $blt_width + $space_width; } $this->printbuffer($this->textbuffer,'',false,true); $this->textbuffer=array(); if ($this->page != $bak_page) { if (($this->page-$bak_page) % 2 == 1) { $x += $this->MarginCorrection; } $bak_page = $this->page; } if ($this->CurrCol != $oldcolumn) { if ($this->directionality == 'rtl') { $x -= ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } else { $x += ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } $oldcolumn = $this->CurrCol; } } $this->listoccur = array(); $this->listitem = array(); $this->listlist = array(); $this->listlvl = 0; $this->listnum = 0; $this->listtype = ''; $this->textbuffer = array(); $this->divwidth = 0; $this->divheight = 0; $this->x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin']; } function _saveTextBuffer($t, $link = '', $intlink = '') { $arr = array(); $arr[0] = $t; if (isset($link) && $link) $arr[1] = $link; $arr[2] = $this->currentfontstyle; if (isset($this->colorarray) && $this->colorarray) $arr[3] = $this->colorarray; $arr[4] = $this->currentfontfamily; if (isset($this->SUP) && $this->SUP) $arr[5] = $this->SUP; if (isset($this->SUB) && $this->SUB) $arr[6] = $this->SUB; if (isset($intlink) && $intlink) $arr[7] = $intlink; if (isset($this->strike) && $this->strike) $arr[8] = $this->strike; if (isset($this->textparam) && $this->textparam) $arr[9] = $this->textparam; if (isset($this->spanbgcolorarray) && $this->spanbgcolorarray) $arr[10] = $this->spanbgcolorarray; $arr[11] = $this->currentfontsize; if (isset($this->ReqFontStyle) && $this->ReqFontStyle) $arr[12] = $this->ReqFontStyle; if (isset($this->kerning) && $this->kerning) $arr[13] = $this->kerning; if (isset($this->lSpacingCSS) && $this->lSpacingCSS) $arr[14] = $this->lSpacingCSS; if (isset($this->wSpacingCSS) && $this->wSpacingCSS) $arr[15] = $this->wSpacingCSS; if (isset($this->spanborddet) && $this->spanborddet) $arr[16] = $this->spanborddet; if (isset($this->textshadow) && $this->textshadow) $arr[17] = $this->textshadow; $this->textbuffer[] = $arr; } function _saveCellTextBuffer($t, $link = '', $intlink = '') { $arr = array(); $arr[0] = $t; if (isset($link) && $link) $arr[1] = $link; $arr[2] = $this->currentfontstyle; if (isset($this->colorarray) && $this->colorarray) $arr[3] = $this->colorarray; $arr[4] = $this->currentfontfamily; if (isset($this->SUP) && $this->SUP) $arr[5] = $this->SUP; if (isset($this->SUB) && $this->SUB) $arr[6] = $this->SUB; if (isset($intlink) && $intlink) $arr[7] = $intlink; if (isset($this->strike) && $this->strike) $arr[8] = $this->strike; if (isset($this->textparam) && $this->textparam) $arr[9] = $this->textparam; if (isset($this->spanbgcolorarray) && $this->spanbgcolorarray) $arr[10] = $this->spanbgcolorarray; $arr[11] = $this->currentfontsize; if (isset($this->ReqFontStyle) && $this->ReqFontStyle) $arr[12] = $this->ReqFontStyle; if (isset($this->kerning) && $this->kerning) $arr[13] = $this->kerning; if (isset($this->lSpacingCSS) && $this->lSpacingCSS) $arr[14] = $this->lSpacingCSS; if (isset($this->wSpacingCSS) && $this->wSpacingCSS) $arr[15] = $this->wSpacingCSS; if (isset($this->spanborddet) && $this->spanborddet) $arr[16] = $this->spanborddet; if (isset($this->textshadow) && $this->textshadow) $arr[17] = $this->textshadow; $this->cell[$this->row][$this->col]['textbuffer'][] = $arr; } function printbuffer($arrayaux,$blockstate=0,$is_table=false,$is_list=false) { $this->spanbgcolorarray = ''; $this->spanbgcolor = false; $this->spanborder = false; $this->spanborddet = array(); $paint_ht_corr = 0; if (count($this->floatDivs)) { list($l_exists, $r_exists, $l_max, $r_max, $l_width, $r_width) = $this->GetFloatDivInfo($this->blklvl); if (($this->blk[$this->blklvl]['inner_width']-$l_width-$r_width) < (2*$this->GetCharWidth('W',false))) { if ($l_max < $r_max && ($this->blk[$this->blklvl]['inner_width']-$r_width) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('LEFT', $this->blklvl); } else if ($r_max < $l_max && ($this->blk[$this->blklvl]['inner_width']-$l_width) > (2*$this->GetCharWidth('W',false))) { $this->ClearFloats('RIGHT', $this->blklvl); } else { $this->ClearFloats('BOTH', $this->blklvl); } } } $bak_y = $this->y; $bak_x = $this->x; $align = ''; if (!$is_table && !$is_list) { if (isset($this->blk[$this->blklvl]['align']) && $this->blk[$this->blklvl]['align']) { $align = $this->blk[$this->blklvl]['align']; } if (isset($this->blk[$this->blklvl]['block-align']) && $this->blk[$this->blklvl]['block-align']) { $align = $this->blk[$this->blklvl]['block-align']; } if (isset($this->blk[$this->blklvl]['direction'])) $blockdir = $this->blk[$this->blklvl]['direction']; else $blockdir = ""; $this->divwidth = $this->blk[$this->blklvl]['width']; } else { $align = $this->divalign; if ($is_table) { $blockdir = $this->table[$this->tableLevel][$this->tbctr[$this->tableLevel]]['direction']; } else { $blockdir = $this->listDir; } } $oldpage = $this->page; if ($this->divwidth == 0) { $this->divwidth = $this->pgwidth; } if (!$is_table && !$is_list) { $this->SetLineHeight($this->FontSizePt,$this->blk[$this->blklvl]['line_height']); } $this->divheight = $this->lineheight; $old_height = $this->divheight; $this->SetFont($this->default_font,'',$this->default_font_size,true,true); $array_size = count($arrayaux); $this->newFlowingBlock( $this->divwidth,$this->divheight,$align,$is_table,$is_list,$blockstate,true,$blockdir); if ($array_size == 0) { $this->finishFlowingBlock(true); } for($i=0;$i < $array_size; $i++) { $oldcolumn = $this->CurrCol; $vetor = $arrayaux[$i]; if ($i == 0 and $vetor[0] != "\n" and !$this->ispre) { $vetor[0] = ltrim($vetor[0]); } if (empty($vetor[0]) && !($vetor[0]==='0') && empty($vetor[7])) { if ($i == ($array_size-1)) { $this->finishFlowingBlock(true); } continue; } if(isset($vetor[11]) and $vetor[11] != '') { if ($is_table && $this->shrin_k) { $this->SetFontSize($vetor[11]/$this->shrin_k,false); } else { $this->SetFontSize($vetor[11],false); } } if(isset($vetor[17]) && !empty($vetor[17])) { $this->textshadow = $vetor[17]; } if(isset($vetor[16]) && !empty($vetor[16])) { $this->spanborddet = $vetor[16]; $this->spanborder = true; } if(isset($vetor[15])) { $this->wSpacingCSS = $vetor[15]; if ($this->wSpacingCSS && strtoupper($this->wSpacingCSS) != 'NORMAL') { $this->minwSpacing = $this->ConvertSize($this->wSpacingCSS,$this->FontSize); } } if(isset($vetor[14])) { $this->lSpacingCSS = $vetor[14]; if (($this->lSpacingCSS || $this->lSpacingCSS==='0') && strtoupper($this->lSpacingCSS) != 'NORMAL') { $this->fixedlSpacing = $this->ConvertSize($this->lSpacingCSS,$this->FontSize); } } if(isset($vetor[13])) { $this->kerning = $vetor[13]; } if(isset($vetor[10]) and !empty($vetor[10])) { $this->spanbgcolorarray = $vetor[10]; $this->spanbgcolor = true; } if(isset($vetor[9]) and !empty($vetor[9])) { $this->textparam = $vetor[9] ; $this->SetTextOutline($this->textparam); } if(isset($vetor[8]) and $vetor[8] === true) { $this->strike = true; } if(isset($vetor[7]) and $vetor[7] != '') { $ily = $this->y; if ($this->keep_block_together) { $this->internallink[$vetor[7]] = array("Y"=>$ily,"PAGE"=>$this->page, "kt"=>true ); } else if ($this->table_rotate) { $this->internallink[$vetor[7]] = array("Y"=>$ily,"PAGE"=>$this->page, "tbrot"=>true ); } else if ($this->kwt) { $this->internallink[$vetor[7]] = array("Y"=>$ily,"PAGE"=>$this->page, "kwt"=>true ); } else if ($this->ColActive) { $this->internallink[$vetor[7]] = array("Y"=>$ily,"PAGE"=>$this->page, "col"=>$this->CurrCol ); } else $this->internallink[$vetor[7]] = array("Y"=>$ily,"PAGE"=>$this->page ); if (empty($vetor[0])) { if ($i == ($array_size-1)) { $this->finishFlowingBlock(true); } continue; } } if(isset($vetor[6]) and $vetor[6] === true) { $this->SUB = true; } if(isset($vetor[5]) and $vetor[5] === true) { $this->SUP = true; } if(isset($vetor[4]) and $vetor[4] != '') { $font = $this->SetFont($vetor[4],$this->FontStyle,0,false); } if (!empty($vetor[3])) { $cor = $vetor[3]; $this->SetTColor($cor); } if(isset($vetor[2]) and $vetor[2] != '') { $this->SetStyles($vetor[2]); } if(isset($vetor[12]) and $vetor[12] != '') { $this->ReqFontStyle = $vetor[12]; } if(isset($vetor[1]) and $vetor[1] != '') { if (strpos($vetor[1],".") === false && strpos($vetor[1],"@") !== 0) { while(array_key_exists($vetor[1],$this->internallink)) $vetor[1]="#".$vetor[1]; $this->internallink[$vetor[1]] = $this->AddLink(); $vetor[1] = $this->internallink[$vetor[1]]; } $this->HREF = $vetor[1]; } if (substr($vetor[0],0,3) == "\xbb\xa4\xac") { $objattr = $this->_getObjAttr($vetor[0]); if ($objattr['type'] == 'nestedtable') { if ($objattr['nestedcontent']) { $level = $objattr['level']; $table = &$this->table[$level][$objattr['table']]; if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); $cell = $this->_uncacheCell($table['cells'][$objattr['row']][$objattr['col']], '', $fh); } else { $fh = null; $cell = &$table['cells'][$objattr['row']][$objattr['col']]; } $this->finishFlowingBlock(false,'nestedtable'); $save_dw = $this->divwidth ; $save_buffer = $this->cellBorderBuffer; $this->cellBorderBuffer = array(); $ncx = $this->x; list($dummyx,$w) = $this->_tableGetWidth($table, $objattr['row'], $objattr['col'], $fh); $ntw = $this->table[($level+1)][$objattr['nestedcontent']]['w']; if (!$this->simpleTables){ if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($cell['borderbin']); } else { $br = $cell['border_details']['R']['w']; $bl = $cell['border_details']['L']['w']; } if ($table['borders_separate']) { $innerw = $w - $bl - $br - $cell['padding']['L'] - $cell['padding']['R'] - $table['border_spacing_H']; } else { $innerw = $w - $bl/2 - $br/2 - $cell['padding']['L'] - $cell['padding']['R']; } } else if ($this->simpleTables){ if ($table['borders_separate']) { $innerw = $w - $table['simple']['border_details']['L']['w'] - $table['simple']['border_details']['R']['w'] - $cell['padding']['L'] - $cell['padding']['R'] - $table['border_spacing_H']; } else { $innerw = $w - $table['simple']['border_details']['L']['w']/2 - $table['simple']['border_details']['R']['w']/2 - $cell['padding']['L'] - $cell['padding']['R']; } } if ($cell['a']=='C' || $this->table[($level+1)][$objattr['nestedcontent']]['a']=='C') { $ncx += ($innerw-$ntw)/2; } elseif ($cell['a']=='R' || $this->table[($level+1)][$objattr['nestedcontent']]['a']=='R') { $ncx += $innerw- $ntw; } $this->x = $ncx ; if ($this->cacheTables) { fclose($fh); } $this->_tableWrite($this->table[($level+1)][$objattr['nestedcontent']]); $this->cellBorderBuffer = $save_buffer; $this->x = $bak_x ; $this->divwidth = $save_dw; $this->newFlowingBlock( $this->divwidth,$this->divheight,$align,$is_table,$is_list,$blockstate,false,$blockdir); } } else { if ($is_table) { $maxWidth = $this->divwidth; } else { $maxWidth = $this->divwidth - ($this->blk[$this->blklvl]['padding_left'] + $this->blk[$this->blklvl]['border_left']['w'] + $this->blk[$this->blklvl]['padding_right'] + $this->blk[$this->blklvl]['border_right']['w']); } if (isset($this->floatmargins['R']) && $this->y <= $this->floatmargins['R']['y1'] && $this->y >= $this->floatmargins['R']['y0']) { $maxWidth -= $this->floatmargins['R']['w']; } if (isset($this->floatmargins['L']) && $this->y <= $this->floatmargins['L']['y1'] && $this->y >= $this->floatmargins['L']['y0']) { $maxWidth -= $this->floatmargins['L']['w']; } list($skipln) = $this->inlineObject($objattr['type'], '', $this->y, $objattr,$this->lMargin, ($this->flowingBlockAttr['contentWidth']/_MPDFK), $maxWidth, $this->flowingBlockAttr['height'], false, $is_table); $iby = $this->y; $oldpage = $this->page; $oldcol = $this->CurrCol; if (($skipln == 1 || $skipln == -2) && !isset($objattr['float'])) { $this->finishFlowingBlock(false,$objattr['type']); $this->newFlowingBlock( $this->divwidth,$this->divheight,$align,$is_table,$is_list,$blockstate,false,$blockdir); } $thispage = $this->page; if ($this->CurrCol!=$oldcol) { $changedcol = true; } else { $changedcol=false; } if (!$changedcol && $skipln <0 && $this->AcceptPageBreak() && $thispage==$oldpage) { $this->AddPage($this->CurOrientation); if (count($this->objectbuffer)) { $yadj = $iby - $this->y; foreach($this->objectbuffer AS $ib=>$val) { if ($this->objectbuffer[$ib]['OUTER-Y'] ) $this->objectbuffer[$ib]['OUTER-Y'] -= $yadj; if ($this->objectbuffer[$ib]['BORDER-Y']) $this->objectbuffer[$ib]['BORDER-Y'] -= $yadj; if ($this->objectbuffer[$ib]['INNER-Y']) $this->objectbuffer[$ib]['INNER-Y'] -= $yadj; } } } if ($this->page != $oldpage) { if (($this->page-$oldpage) % 2 == 1) { $bak_x += $this->MarginCorrection; } $oldpage = $this->page; $y = $this->tMargin - $paint_ht_corr ; $this->oldy = $this->tMargin - $paint_ht_corr ; $old_height = 0; } $this->x = $bak_x; if ($this->CurrCol != $oldcolumn) { if ($this->directionality == 'rtl') { $bak_x -= ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } else { $bak_x += ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } $this->x = $bak_x; $oldcolumn = $this->CurrCol; $y = $this->y0 - $paint_ht_corr ; $this->oldy = $this->y0 - $paint_ht_corr ; $old_height = 0; } if ($objattr['type'] == 'image' && isset($objattr['float'])) { $fy = $this->y; if ($this->flowingBlockAttr['newblock'] && ($this->flowingBlockAttr['blockstate']==1 || $this->flowingBlockAttr['blockstate']==3) && $this->flowingBlockAttr['lineCount']== 0) { $fy += $this->blk[$this->blklvl]['margin_top'] + $this->blk[$this->blklvl]['padding_top'] + $this->blk[$this->blklvl]['border_top']['w']; } if ($objattr['float']=='R') { $fx = $this->w - $this->rMargin - $objattr['width'] - ($this->blk[$this->blklvl]['outer_right_margin'] + $this->blk[$this->blklvl]['border_right']['w'] + $this->blk[$this->blklvl]['padding_right']); } else if ($objattr['float']=='L') { $fx = $this->lMargin + ($this->blk[$this->blklvl]['outer_left_margin'] + $this->blk[$this->blklvl]['border_left']['w'] + $this->blk[$this->blklvl]['padding_left']); } $w = $objattr['width']; $h = abs($objattr['height']); $widthLeft = $maxWidth - ($this->flowingBlockAttr['contentWidth']/_MPDFK); $maxHeight = $this->h - ($this->tMargin + $this->margin_header + $this->bMargin + 10) ; $extraWidth = ($objattr['border_left']['w'] + $objattr['border_right']['w'] + $objattr['margin_left']+ $objattr['margin_right']); $extraHeight = ($objattr['border_top']['w'] + $objattr['border_bottom']['w'] + $objattr['margin_top']+ $objattr['margin_bottom']); if ($objattr['itype'] == 'wmf' || $objattr['itype'] == 'svg') { $file = $objattr['file']; $info=$this->formobjects[$file]; } else { $file = $objattr['file']; $info=$this->images[$file]; } $img_w = $w - $extraWidth ; $img_h = $h - $extraHeight ; if ($objattr['border_left']['w']) { $objattr['BORDER-WIDTH'] = $img_w + (($objattr['border_left']['w'] + $objattr['border_right']['w'])/2) ; $objattr['BORDER-HEIGHT'] = $img_h + (($objattr['border_top']['w'] + $objattr['border_bottom']['w'])/2) ; $objattr['BORDER-X'] = $fx + $objattr['margin_left'] + (($objattr['border_left']['w'])/2) ; $objattr['BORDER-Y'] = $fy + $objattr['margin_top'] + (($objattr['border_top']['w'])/2) ; } $objattr['INNER-WIDTH'] = $img_w; $objattr['INNER-HEIGHT'] = $img_h; $objattr['INNER-X'] = $fx + $objattr['margin_left'] + ($objattr['border_left']['w']); $objattr['INNER-Y'] = $fy + $objattr['margin_top'] + ($objattr['border_top']['w']) ; $objattr['ID'] = $info['i']; $objattr['OUTER-WIDTH'] = $w; $objattr['OUTER-HEIGHT'] = $h; $objattr['OUTER-X'] = $fx; $objattr['OUTER-Y'] = $fy; if ($objattr['float']=='R') { $this->floatmargins['R']['skipline'] = false; if (isset($this->floatmargins['R']['y1']) && $this->floatmargins['R']['y1'] > 0 && $fy < $this->floatmargins['R']['y1']) { $this->WriteFlowingBlock($vetor[0]); } else if (isset($this->floatmargins['L']['y1']) && $this->floatmargins['L']['y1'] > 0 && $fy < $this->floatmargins['L']['y1']) { $mw = 2*$this->GetCharWidth('W',false); if (($this->blk[$this->blklvl]['inner_width'] - $w - $this->floatmargins['L']['w']) < $mw) { $this->WriteFlowingBlock($vetor[0]); } else { $this->floatmargins['R']['x'] = $fx; $this->floatmargins['R']['w'] = $w; $this->floatmargins['R']['y0'] = $fy; $this->floatmargins['R']['y1'] = $fy + $h; if ($skipln == 1) { $this->floatmargins['R']['skipline'] = true; $this->floatmargins['R']['id'] = count($this->floatbuffer)+0; $objattr['skipline'] = true; } $this->floatbuffer[] = $objattr; } } else { $this->floatmargins['R']['x'] = $fx; $this->floatmargins['R']['w'] = $w; $this->floatmargins['R']['y0'] = $fy; $this->floatmargins['R']['y1'] = $fy + $h; if ($skipln == 1) { $this->floatmargins['R']['skipline'] = true; $this->floatmargins['R']['id'] = count($this->floatbuffer)+0; $objattr['skipline'] = true; } $this->floatbuffer[] = $objattr; } } else if ($objattr['float']=='L') { $this->floatmargins['L']['skipline'] = false; if (isset($this->floatmargins['L']['y1']) && $this->floatmargins['L']['y1'] > 0 && $fy < $this->floatmargins['L']['y1']) { $this->floatmargins['L']['skipline'] = false; $this->WriteFlowingBlock($vetor[0]); } else if (isset($this->floatmargins['R']['y1']) && $this->floatmargins['R']['y1'] > 0 && $fy < $this->floatmargins['R']['y1']) { $mw = 2*$this->GetCharWidth('W',false); if (($this->blk[$this->blklvl]['inner_width'] - $w - $this->floatmargins['R']['w']) < $mw) { $this->WriteFlowingBlock($vetor[0]); } else { $this->floatmargins['L']['x'] = $fx + $w; $this->floatmargins['L']['w'] = $w; $this->floatmargins['L']['y0'] = $fy; $this->floatmargins['L']['y1'] = $fy + $h; if ($skipln == 1) { $this->floatmargins['L']['skipline'] = true; $this->floatmargins['L']['id'] = count($this->floatbuffer)+0; $objattr['skipline'] = true; } $this->floatbuffer[] = $objattr; } } else { $this->floatmargins['L']['x'] = $fx + $w; $this->floatmargins['L']['w'] = $w; $this->floatmargins['L']['y0'] = $fy; $this->floatmargins['L']['y1'] = $fy + $h; if ($skipln == 1) { $this->floatmargins['L']['skipline'] = true; $this->floatmargins['L']['id'] = count($this->floatbuffer)+0; $objattr['skipline'] = true; } $this->floatbuffer[] = $objattr; } } } else { $this->WriteFlowingBlock($vetor[0]); } } } else { if ($this->tableLevel) { $paint_ht_corr = 0; } else { $paint_ht_corr = $this->blk[$this->blklvl]['border_top']['w']; } if ($vetor[0] == "\n") { if ($this->flowingBlockAttr['content']) { $this->finishFlowingBlock(false,'br'); } else if ($is_table) { $this->y+= $this->_computeLineheight($this->table_lineheight); } else if (!$is_table) { $this->DivLn($this->lineheight); if ($this->ColActive) { $this->breakpoints[$this->CurrCol][] = $this->y; } } if ($this->page != $oldpage) { if (($this->page-$oldpage) % 2 == 1) { $bak_x += $this->MarginCorrection; } $oldpage = $this->page; $y = $this->tMargin - $paint_ht_corr ; $this->oldy = $this->tMargin - $paint_ht_corr ; $old_height = 0; } $this->x = $bak_x; if ($this->CurrCol != $oldcolumn) { if ($this->directionality == 'rtl') { $bak_x -= ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } else { $bak_x += ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } $this->x = $bak_x; $oldcolumn = $this->CurrCol; $y = $this->y0 - $paint_ht_corr ; $this->oldy = $this->y0 - $paint_ht_corr ; $old_height = 0; } $this->newFlowingBlock( $this->divwidth,$this->divheight,$align,$is_table,$is_list,$blockstate,false,$blockdir); } else { $this->WriteFlowingBlock( $vetor[0]); if ($this->page != $oldpage) { if (($this->page-$oldpage) % 2 == 1) { $bak_x += $this->MarginCorrection; $this->x = $bak_x; } $oldpage = $this->page; $y = $this->tMargin - $paint_ht_corr ; $this->oldy = $this->tMargin - $paint_ht_corr ; $old_height = 0; } if ($this->CurrCol != $oldcolumn) { if ($this->directionality == 'rtl') { $bak_x -= ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } else { $bak_x += ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } $this->x = $bak_x; $oldcolumn = $this->CurrCol; $y = $this->y0 - $paint_ht_corr ; $this->oldy = $this->y0 - $paint_ht_corr ; $old_height = 0; } } } if ($i == ($array_size-1)) { $this->finishFlowingBlock(true); if ($this->page != $oldpage) { if (($this->page-$oldpage) % 2 == 1) { $bak_x += $this->MarginCorrection; $this->x = $bak_x; } $oldpage = $this->page; $y = $this->tMargin - $paint_ht_corr ; $this->oldy = $this->tMargin - $paint_ht_corr ; $old_height = 0; } if ($this->CurrCol != $oldcolumn) { if ($this->directionality == 'rtl') { $bak_x -= ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } else { $bak_x += ($this->CurrCol - $oldcolumn) * ($this->ColWidth+$this->ColGap); } $this->x = $bak_x; $oldcolumn = $this->CurrCol; $y = $this->y0 - $paint_ht_corr ; $this->oldy = $this->y0 - $paint_ht_corr ; $old_height = 0; } } $this->SetTColor($this->ConvertColor(0)); $this->SetDColor($this->ConvertColor(0)); $this->SetFColor($this->ConvertColor(255)); $this->colorarray = ''; $this->spanbgcolorarray = ''; $this->spanbgcolor = false; $this->spanborder = false; $this->spanborddet = array(); $this->HREF = ''; $this->textparam = array(); $this->SetTextOutline(); $this->SUP = false; $this->SUB = false; $this->strike = false; $this->textshadow = ''; $this->currentfontfamily = ''; $this->currentfontsize = ''; $this->currentfontstyle = ''; if ($this->tableLevel) { $this->SetLineHeight('',$this->table_lineheight); } else if ($is_list && $this->list_lineheight[$this->listlvl][$this->listOcc]) { $this->SetLineHeight('',$this->list_lineheight[$this->listlvl][$this->listOcc]); } else if (isset($this->blk[$this->blklvl]['line_height']) && $this->blk[$this->blklvl]['line_height']) { $this->SetLineHeight('',$this->blk[$this->blklvl]['line_height']); } $this->ResetStyles(); $this->toupper = false; $this->tolower = false; $this->capitalize = false; $this->kerning = false; $this->lSpacingCSS = ''; $this->wSpacingCSS = ''; $this->fixedlSpacing = false; $this->minwSpacing = 0; $this->SetDash(); $this->dash_on = false; $this->dotted_on = false; } if ((isset($this->blk[$this->blklvl]['border']) || isset($this->blk[$this->blklvl]['bgcolor']) || isset($this->blk[$this->blklvl]['box_shadow'])) && $blockstate && ($this->y != $this->oldy)) { $bottom_y = $this->y; if (isset($this->blk[$this->blklvl]['startpage']) && $this->blk[$this->blklvl]['startpage'] != $this->page && $blockstate != 1) { $this->PaintDivBB('pagetop',$blockstate); } else if ($blockstate != 1) { $this->PaintDivBB('',$blockstate); } $this->y = $bottom_y; $this->x = $bak_x; } $this->SetFontSize($this->default_font_size,false); } function _setDashBorder($style, $div, $cp, $side) { if ($style == 'dashed' && (($side=='L' || $side=='R') || ($side=='T' && $div != 'pagetop' && !$cp) || ($side=='B' && $div!='pagebottom') )) { $dashsize = 2; $dashsizek = 1.5; $this->SetDash($dashsize,($dashsize/$dashsizek)+($this->LineWidth*2)); } else if ($style == 'dotted' || ($side=='T' && ($div == 'pagetop' || $cp)) || ($side=='B' && $div == 'pagebottom')) { $this->SetLineJoin(1); $this->SetLineCap(1); $this->SetDash(0.001,($this->LineWidth*3)); } } function _setBorderLine($b, $k=1) { $this->SetLineWidth($b['w']/$k); $this->SetDColor($b['c']); if ($b['c'][0]==5) { $this->SetAlpha($b['c'][4], 'Normal', false, 'S')."\n"; } else if ($b['c'][0]==6) { $this->SetAlpha($b['c'][5], 'Normal', false, 'S')."\n"; } } function PaintDivBB($divider='',$blockstate=0,$blvl=0) { if ($this->ColActive) { return ; } $save_y = $this->y; if (!$blvl) { $blvl = $this->blklvl; } $x0 = $x1 = $y0 = $y1 = 0; if (isset($this->blk[$blvl]['bb_painted'][$this->page]) && $this->blk[$blvl]['bb_painted'][$this->page]) { return; } if (isset($this->blk[$blvl]['x0'])) { $x0 = $this->blk[$blvl]['x0']; } if (isset($this->blk[$blvl]['y1'])) { $y1 = $this->blk[$blvl]['y1']; } if ($y1==0) { if ($divider=='pagebottom') { $y1 = $this->h-$this->bMargin; } else { $y1 = $this->y; } } if (isset($this->blk[$blvl]['startpage']) && $this->blk[$blvl]['startpage'] != $this->page) { $continuingpage = true; } else { $continuingpage = false; } if (isset($this->blk[$blvl]['y0'])) { $y0 = $this->blk[$blvl]['y0']; } $h = $y1 - $y0; $w = $this->blk[$blvl]['width']; $x1 = $x0 + $w; $border_top = $this->blk[$blvl]['border_top']['w']; $border_bottom = $this->blk[$blvl]['border_bottom']['w']; $border_left = $this->blk[$blvl]['border_left']['w']; $border_right = $this->blk[$blvl]['border_right']['w']; if (!$this->blk[$blvl]['border_top'] || $divider == 'pagetop' || $continuingpage) { $border_top = 0; } if (!$this->blk[$blvl]['border_bottom'] || $blockstate == 1 || $divider == 'pagebottom') { $border_bottom = 0; } $brTL_H = 0; $brTL_V = 0; $brTR_H = 0; $brTR_V = 0; $brBL_H = 0; $brBL_V = 0; $brBR_H = 0; $brBR_V = 0; $brset = false; if (isset($this->blk[$blvl]['border_radius_TL_H'])) { $brTL_H = $this->blk[$blvl]['border_radius_TL_H']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_TL_V'])) { $brTL_V = $this->blk[$blvl]['border_radius_TL_V']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_TR_H'])) { $brTR_H = $this->blk[$blvl]['border_radius_TR_H']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_TR_V'])) { $brTR_V = $this->blk[$blvl]['border_radius_TR_V']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_BR_H'])) { $brBR_H = $this->blk[$blvl]['border_radius_BR_H']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_BR_V'])) { $brBR_V = $this->blk[$blvl]['border_radius_BR_V']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_BL_H'])) { $brBL_H = $this->blk[$blvl]['border_radius_BL_H']; $brset = true; } if (isset($this->blk[$blvl]['border_radius_BL_V'])) { $brBL_V = $this->blk[$blvl]['border_radius_BL_V']; $brset = true; } if (!$this->blk[$blvl]['border_top'] || $divider == 'pagetop' || $continuingpage) { $brTL_H = 0; $brTL_V = 0; $brTR_H = 0; $brTR_V = 0; } if (!$this->blk[$blvl]['border_bottom'] || $blockstate == 1 || $divider == 'pagebottom') { $brBL_H = 0; $brBL_V = 0; $brBR_H = 0; $brBR_V = 0; } if ($brTL_H < min($border_left, $border_top)) { $brTL_H = $brTL_V = 0; } if ($brTL_V < min($border_left, $border_top)) { $brTL_V = $brTL_H = 0; } if ($brTR_H < min($border_right, $border_top)) { $brTR_H = $brTR_V = 0; } if ($brTR_V < min($border_right, $border_top)) { $brTR_V = $brTR_H = 0; } if ($brBL_H < min($border_left, $border_bottom)) { $brBL_H = $brBL_V = 0; } if ($brBL_V < min($border_left, $border_bottom)) { $brBL_V = $brBL_H = 0; } if ($brBR_H < min($border_right, $border_bottom)) { $brBR_H = $brBR_V = 0; } if ($brBR_V < min($border_right, $border_bottom)) { $brBR_V = $brBR_H = 0; } $f = min($h/($brTL_V + $brBL_V + 0.001), $h/($brTR_V + $brBR_V + 0.001), $w/($brTL_H + $brTR_H + 0.001), $w/($brBL_H + $brBR_H + 0.001)); if ($f < 1) { $brTL_H *= $f; $brTL_V *= $f; $brTR_H *= $f; $brTR_V *= $f; $brBL_H *= $f; $brBL_V *= $f; $brBR_H *= $f; $brBR_V *= $f; } $tbcol = $this->ConvertColor(255); for($l=0; $l <= $blvl; $l++) { if ($this->blk[$l]['bgcolor']) { $tbcol = $this->blk[$l]['bgcolorarray']; } } if (isset($this->blk[$blvl]['y0']) && $this->blk[$blvl]['y0']) { $y0 = $this->blk[$blvl]['y0']; } $h = $y1 - $y0; $w = $this->blk[$blvl]['width']; if ($this->blk[$blvl]['border_top'] && $divider != 'pagetop' && !$continuingpage) { $tbd = $this->blk[$blvl]['border_top']; $legend = ''; if (isset($this->blk[$blvl]['border_legend']) && $this->blk[$blvl]['border_legend']) { $legend = $this->blk[$blvl]['border_legend']; $txt = ltrim($legend[0]); $this->SetFont($legend[4],$legend[2],$legend[11]); if ($legend[3]) { $cor = $legend[3]; $this->SetTColor($cor); } $stringWidth = $this->GetStringWidth($txt ); $save_x = $this->x; $save_y = $this->y; $save_currentfontfamily = $this->FontFamily; $save_currentfontsize = $this->FontSizePt; $save_currentfontstyle = $this->FontStyle.($this->U ? 'U' : '').($this->S ? 'S' : ''); $this->y = $y0 - $this->FontSize/2 + $this->blk[$blvl]['border_top']['w']/2; $this->x = $x0 + $this->blk[$blvl]['padding_left'] + $this->blk[$blvl]['border_left']['w']; $gap = 0.2 * $this->FontSize; $legbreakL = $this->x - $gap; $legbreakR = $this->x + $stringWidth + $gap; $this->Cell( $stringWidth, $this->FontSize, $txt , '', 0, 'C', $fill, '', 0, 0,0,'M', $fill); $this->x = $save_x; $this->y = $save_y; $this->SetFont($save_currentfontfamily,$save_currentfontstyle,$save_currentfontsize); $this->SetTColor($this->ConvertColor(0)); } if (isset($tbd['s']) && $tbd['s']) { if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('q'); $this->SetLineWidth(0); $this->_out(sprintf('%.3F %.3F m ',($x0)*_MPDFK, ($this->h-($y0))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $border_left)*_MPDFK, ($this->h-($y0 + $border_top))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w - $border_right)*_MPDFK, ($this->h-($y0 + $border_top))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w)*_MPDFK, ($this->h-($y0))*_MPDFK)); $this->_out(' h W n '); } $this->_setBorderLine($tbd); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $legbreakL -= $border_top/2; $legbreakR += $border_top/2; $this->_setDashBorder($tbd['style'],$divider,$continuingpage,'T'); } else if (($brTL_V && $brTL_H) || ($brTR_V && $brTR_H) || $tbd['style']=='solid' || $tbd['style']=='double' ) { $this->SetLineJoin(0); $this->SetLineCap(0); } $s = ''; if ($brTR_H && $brTR_V) { $s .= ($this->_EllipseArc($x0 + $w - $brTR_H, $y0 + $brTR_V, $brTR_H - $border_top/2 , $brTR_V - $border_top/2 , 1, 2, true))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F m ',($x0 + $w)*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F m ',($x0 + $w - ($border_top/2))*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } if ($brTL_H && $brTL_V ) { if ($legend) { if ($legbreakR < ($x0 + $w - $brTR_H)) { $s .= (sprintf('%.3F %.3F l ', $legbreakR*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } if ($legbreakL > ($x0 + $brTL_H )) { $s .= (sprintf('%.3F %.3F m ',$legbreakL*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; $s .= (sprintf('%.3F %.3F l ',($x0 + $brTL_H )*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK)."\n"); } else { $s .= (sprintf('%.3F %.3F m ',($x0 + $brTL_H )*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } } else { $s .= (sprintf('%.3F %.3F l ',($x0 + $brTL_H )*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } $s .= ($this->_EllipseArc($x0 + $brTL_H, $y0 + $brTL_V, $brTL_H - $border_top/2 , $brTL_V - $border_top/2 , 2, 1))."\n"; } else { if ($legend) { if ($legbreakR < ($x0 + $w)) { $s .= (sprintf('%.3F %.3F l ',$legbreakR*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } if ($legbreakL > ($x0)) { $s .= (sprintf('%.3F %.3F m ',$legbreakL*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F l ',($x0)*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F l ',($x0 + ($border_top/2))*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F m ', ($x0)*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F m ', ($x0 + $border_top/2)*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F l ',($x0)*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F l ',($x0 + ($border_top/2))*_MPDFK, ($this->h-($y0 + ($border_top/2)))*_MPDFK))."\n"; } } $s .= 'S'."\n"; $this->_out($s); if ($tbd['style']=='double') { $this->SetLineWidth($tbd['w']/3); $this->SetDColor($tbcol); $this->_out($s); } if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('Q'); } $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($this->blk[$blvl]['border_bottom'] && $blockstate != 1 && $divider != 'pagebottom') { $tbd = $this->blk[$blvl]['border_bottom']; if (isset($tbd['s']) && $tbd['s']) { if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('q'); $this->SetLineWidth(0); $this->_out(sprintf('%.3F %.3F m ',($x0)*_MPDFK, ($this->h-($y0 + $h))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $border_left)*_MPDFK, ($this->h-($y0 + $h - $border_bottom))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w - $border_right)*_MPDFK, ($this->h-($y0 + $h - $border_bottom))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w)*_MPDFK, ($this->h-($y0 + $h))*_MPDFK)); $this->_out(' h W n '); } $this->_setBorderLine($tbd); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],$divider,$continuingpage,'B'); } else if (($brBL_V && $brBL_H) || ($brBR_V && $brBR_H) || $tbd['style']=='solid' || $tbd['style']=='double' ) { $this->SetLineJoin(0); $this->SetLineCap(0); } $s = ''; if ($brBL_H && $brBL_V) { $s .= ($this->_EllipseArc($x0 + $brBL_H, $y0 + $h - $brBL_V, $brBL_H - $border_bottom/2 , $brBL_V - $border_bottom/2 , 3, 2, true))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F m ',($x0)*_MPDFK, ($this->h-($y0 + $h - ($border_bottom/2)))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F m ',($x0 + ($border_bottom/2))*_MPDFK, ($this->h-($y0 + $h - ($border_bottom/2)))*_MPDFK))."\n"; } if ($brBR_H && $brBR_V ) { $s .= (sprintf('%.3F %.3F l ',($x0 + $w - ($border_bottom/2) - $brBR_H )*_MPDFK, ($this->h-($y0 + $h - ($border_bottom/2)))*_MPDFK))."\n"; $s .= ($this->_EllipseArc($x0 + $w - $brBR_H, $y0 + $h - $brBR_V, $brBR_H - $border_bottom/2 , $brBR_V - $border_bottom/2 , 4, 1))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F l ',($x0 + $w)*_MPDFK, ($this->h-($y0 + $h - ($border_bottom/2)))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F l ',($x0 + $w - ($border_bottom/2))*_MPDFK, ($this->h-($y0 + $h - ($border_bottom/2)))*_MPDFK))."\n"; } $s .= 'S'."\n"; $this->_out($s); if ($tbd['style']=='double') { $this->SetLineWidth($tbd['w']/3); $this->SetDColor($tbcol); $this->_out($s); } if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('Q'); } $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($this->blk[$blvl]['border_left']) { $tbd = $this->blk[$blvl]['border_left']; if (isset($tbd['s']) && $tbd['s']) { if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('q'); $this->SetLineWidth(0); $this->_out(sprintf('%.3F %.3F m ',($x0)*_MPDFK, ($this->h-($y0))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $border_left)*_MPDFK, ($this->h-($y0+$border_top))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $border_left)*_MPDFK, ($this->h-($y0 + $h - $border_bottom))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0)*_MPDFK, ($this->h-($y0 + $h))*_MPDFK)); $this->_out(' h W n '); } $this->_setBorderLine($tbd); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],$divider,$continuingpage,'L'); } else if (($brTL_V && $brTL_H) || ($brBL_V && $brBL_H) || $tbd['style']=='solid' || $tbd['style']=='double' ) { $this->SetLineJoin(0); $this->SetLineCap(0); } $s = ''; if ($brTL_V && $brTL_H) { $s .= ($this->_EllipseArc($x0 + $brTL_H, $y0 + $brTL_V, $brTL_H - $border_left/2 , $brTL_V - $border_left/2, 2, 2, true))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F m ',($x0 + ($border_left/2))*_MPDFK, ($this->h-($y0))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F m ',($x0 + ($border_left/2))*_MPDFK, ($this->h-($y0 + ($border_left/2)))*_MPDFK))."\n"; } if ($brBL_V && $brBL_H ) { $s .= (sprintf('%.3F %.3F l ',($x0 + ($border_left/2))*_MPDFK, ($this->h-($y0 + $h - ($border_left/2)- $brBL_V) )*_MPDFK))."\n"; $s .= ($this->_EllipseArc($x0 + $brBL_H, $y0 + $h - $brBL_V, $brBL_H - $border_left/2 , $brBL_V - $border_left/2, 3, 1))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F l ',($x0 + ($border_left/2))*_MPDFK, ($this->h-($y0 + $h) )*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F l ',($x0 + ($border_left/2))*_MPDFK, ($this->h-($y0 + $h - ($border_left/2)) )*_MPDFK))."\n"; } $s .= 'S'."\n"; $this->_out($s); if ($tbd['style']=='double') { $this->SetLineWidth($tbd['w']/3); $this->SetDColor($tbcol); $this->_out($s); } if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('Q'); } $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($this->blk[$blvl]['border_right']) { $tbd = $this->blk[$blvl]['border_right']; if (isset($tbd['s']) && $tbd['s']) { if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('q'); $this->SetLineWidth(0); $this->_out(sprintf('%.3F %.3F m ',($x0 + $w)*_MPDFK, ($this->h-($y0))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w - $border_right)*_MPDFK, ($this->h-($y0+$border_top))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w - $border_right)*_MPDFK, ($this->h-($y0 + $h - $border_bottom))*_MPDFK)); $this->_out(sprintf('%.3F %.3F l ',($x0 + $w)*_MPDFK, ($this->h-($y0 + $h))*_MPDFK)); $this->_out(' h W n '); } $this->_setBorderLine($tbd); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],$divider,$continuingpage,'R'); } else if (($brTR_V && $brTR_H) || ($brBR_V && $brBR_H) || $tbd['style']=='solid' || $tbd['style']=='double' ) { $this->SetLineJoin(0); $this->SetLineCap(0); } $s = ''; if ($brBR_V && $brBR_H) { $s .= ($this->_EllipseArc($x0 + $w - $brBR_H, $y0 + $h - $brBR_V, $brBR_H - $border_right/2 , $brBR_V - $border_right/2, 4, 2, true))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F m ',($x0 + $w - ($border_right/2))*_MPDFK, ($this->h-($y0 + $h))*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F m ',($x0 + $w - ($border_right/2))*_MPDFK, ($this->h-($y0 + $h - ($border_right/2)))*_MPDFK))."\n"; } if ($brTR_V && $brTR_H ) { $s .= (sprintf('%.3F %.3F l ',($x0 + $w - ($border_right/2))*_MPDFK, ($this->h-($y0 + ($border_right/2) + $brTR_V) )*_MPDFK))."\n"; $s .= ($this->_EllipseArc($x0 + $w - $brTR_H, $y0 + $brTR_V, $brTR_H - $border_right/2 , $brTR_V - $border_right/2, 1, 1))."\n"; } else if ($tbd['style']=='solid' || $tbd['style']=='double') { $s .= (sprintf('%.3F %.3F l ',($x0 + $w - ($border_right/2))*_MPDFK, ($this->h-($y0) )*_MPDFK))."\n"; } else { $s .= (sprintf('%.3F %.3F l ',($x0 + $w - ($border_right/2))*_MPDFK, ($this->h-($y0 + ($border_right/2)) )*_MPDFK))."\n"; } $s .= 'S'."\n"; $this->_out($s); if ($tbd['style']=='double') { $this->SetLineWidth($tbd['w']/3); $this->SetDColor($tbcol); $this->_out($s); } if (!$brset && $tbd['style']!='dotted' && $tbd['style']!='dashed') { $this->_out('Q'); } $this->SetLineWidth(0.1); $this->SetDColor($this->ConvertColor(0)); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } $this->SetDash(); $this->y = $save_y; if ($this->ColActive || $this->kwt || $this->keep_block_together) { return ; } $bgx0 = $x0; $bgx1 = $x1; $bgy0 = $y0; $bgy1 = $y1; if (isset($this->blk[$blvl]['background_clip']) && $this->blk[$blvl]['background_clip'] == 'padding-box') { $brbgTL_H = max(0, $brTL_H - $this->blk[$blvl]['border_left']['w']); $brbgTL_V = max(0, $brTL_V - $this->blk[$blvl]['border_top']['w']); $brbgTR_H = max(0, $brTR_H - $this->blk[$blvl]['border_right']['w']); $brbgTR_V = max(0, $brTR_V - $this->blk[$blvl]['border_top']['w']); $brbgBL_H = max(0, $brBL_H - $this->blk[$blvl]['border_left']['w']); $brbgBL_V = max(0, $brBL_V - $this->blk[$blvl]['border_bottom']['w']); $brbgBR_H = max(0, $brBR_H - $this->blk[$blvl]['border_right']['w']); $brbgBR_V = max(0, $brBR_V - $this->blk[$blvl]['border_bottom']['w']); $bgx0 += $this->blk[$blvl]['border_left']['w']; $bgx1 -= $this->blk[$blvl]['border_right']['w']; if ($this->blk[$blvl]['border_top'] && $divider != 'pagetop' && !$continuingpage) { $bgy0 += $this->blk[$blvl]['border_top']['w']; } if ($this->blk[$blvl]['border_bottom'] && $blockstate != 1 && $divider != 'pagebottom') { $bgy1 -= $this->blk[$blvl]['border_bottom']['w']; } } else if (isset($this->blk[$blvl]['background_clip']) && $this->blk[$blvl]['background_clip'] == 'content-box') { $brbgTL_H = max(0, $brTL_H - $this->blk[$blvl]['border_left']['w'] - $this->blk[$blvl]['padding_left']); $brbgTL_V = max(0, $brTL_V - $this->blk[$blvl]['border_top']['w'] - $this->blk[$blvl]['padding_top']); $brbgTR_H = max(0, $brTR_H - $this->blk[$blvl]['border_right']['w'] - $this->blk[$blvl]['padding_right']); $brbgTR_V = max(0, $brTR_V - $this->blk[$blvl]['border_top']['w'] - $this->blk[$blvl]['padding_top']); $brbgBL_H = max(0, $brBL_H - $this->blk[$blvl]['border_left']['w'] - $this->blk[$blvl]['padding_left']); $brbgBL_V = max(0, $brBL_V - $this->blk[$blvl]['border_bottom']['w'] - $this->blk[$blvl]['padding_bottom']); $brbgBR_H = max(0, $brBR_H - $this->blk[$blvl]['border_right']['w'] - $this->blk[$blvl]['padding_right']); $brbgBR_V = max(0, $brBR_V - $this->blk[$blvl]['border_bottom']['w'] - $this->blk[$blvl]['padding_bottom']); $bgx0 += $this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['padding_left']; $bgx1 -= $this->blk[$blvl]['border_right']['w'] + $this->blk[$blvl]['padding_right']; if (($this->blk[$blvl]['border_top']['w'] || $this->blk[$blvl]['padding_top']) && $divider != 'pagetop' && !$continuingpage) { $bgy0 += $this->blk[$blvl]['border_top']['w'] + $this->blk[$blvl]['padding_top']; } if (($this->blk[$blvl]['border_bottom']['w'] || $this->blk[$blvl]['padding_bottom']) && $blockstate != 1 && $divider != 'pagebottom') { $bgy1 -= $this->blk[$blvl]['border_bottom']['w'] + $this->blk[$blvl]['padding_bottom']; } } else { $brbgTL_H = $brTL_H; $brbgTL_V = $brTL_V; $brbgTR_H = $brTR_H; $brbgTR_V = $brTR_V; $brbgBL_H = $brBL_H; $brbgBL_V = $brBL_V; $brbgBR_H = $brBR_H; $brbgBR_V = $brBR_V; } $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($bgx0+$brbgTL_H )*_MPDFK, ($this->h-$bgy0)*_MPDFK); if ($brbgTL_H || $brbgTL_V) { $s .= $this->_EllipseArc($bgx0+$brbgTL_H, $bgy0+$brbgTL_V, $brbgTL_H , $brbgTL_V , 2); } $s .= sprintf('%.3F %.3F l ', ($bgx0)*_MPDFK, ($this->h-($bgy1-$brbgBL_V ))*_MPDFK); if ($brbgBL_H || $brbgBL_V) { $s .= $this->_EllipseArc($bgx0+$brbgBL_H, $bgy1-$brbgBL_V, $brbgBL_H , $brbgBL_V , 3); } $s .= sprintf('%.3F %.3F l ', ($bgx1-$brbgBR_H )*_MPDFK, ($this->h-($bgy1))*_MPDFK); if ($brbgBR_H || $brbgBR_V) { $s .= $this->_EllipseArc($bgx1-$brbgBR_H, $bgy1-$brbgBR_V, $brbgBR_H , $brbgBR_V , 4); } $s .= sprintf('%.3F %.3F l ', ($bgx1)*_MPDFK, ($this->h-($bgy0+$brbgTR_V))*_MPDFK); if ($brbgTR_H || $brbgTR_V) { $s .= $this->_EllipseArc($bgx1-$brbgTR_H, $bgy0+$brbgTR_V, $brbgTR_H , $brbgTR_V , 1); } $s .= sprintf('%.3F %.3F l ', ($bgx0+$brbgTL_H )*_MPDFK, ($this->h-$bgy0)*_MPDFK); $shadow = ''; if (isset($this->blk[$blvl]['box_shadow']) && $this->blk[$blvl]['box_shadow'] && $h > 0) { foreach($this->blk[$blvl]['box_shadow'] AS $sh) { if ($sh['col']{0}==1) { $colspace = 'Gray'; if ($sh['col']{2}==1) { $col1 = '1'.$sh['col'][1].'1'.$sh['col'][3]; } else { $col1 = '1'.$sh['col'][1].'1'.chr(100); } $col2 = '1'.$sh['col'][1].'1'.chr(0); } else if ($sh['col']{0}==4) { $colspace = 'CMYK'; $col1 = '6'.$sh['col'][1].$sh['col'][2].$sh['col'][3].$sh['col'][4].chr(100); $col2 = '6'.$sh['col'][1].$sh['col'][2].$sh['col'][3].$sh['col'][4].chr(0); } else if ($sh['col']{0}==5) { $colspace = 'RGB'; $col1 = '5'.$sh['col'][1].$sh['col'][2].$sh['col'][3].$sh['col'][4]; $col2 = '5'.$sh['col'][1].$sh['col'][2].$sh['col'][3].chr(0); } else if ($sh['col']{0}==6) { $colspace = 'CMYK'; $col1 = '6'.$sh['col'][1].$sh['col'][2].$sh['col'][3].$sh['col'][4].$sh['col'][5]; $col2 = '6'.$sh['col'][1].$sh['col'][2].$sh['col'][3].$sh['col'][4].chr(0); } else { $colspace = 'RGB'; $col1 = '5'.$sh['col'][1].$sh['col'][2].$sh['col'][3].chr(100); $col2 = '5'.$sh['col'][1].$sh['col'][2].$sh['col'][3].chr(0); } $shadow .= $s; $shadow .= sprintf('0 %.3F m %.3F %.3F l ', $this->h*_MPDFK, $this->w*_MPDFK, $this->h*_MPDFK); $shadow .= sprintf('%.3F 0 l 0 0 l 0 %.3F l ', $this->w*_MPDFK, $this->h*_MPDFK); $shadow .= 'W n'."\n"; $sh['blur'] = abs($sh['blur']); if (-$sh['spread'] + $sh['blur']/2 > min($w/2, $h/2)) { $sh['spread'] = $sh['blur']/2 - min($w/2, $h/2) + 0.01; } if ($sh['x'] || $sh['y']) $shadow .= sprintf(' q 1 0 0 1 %.4F %.4F cm', $sh['x']*_MPDFK, -$sh['y']*_MPDFK)."\n"; $shadow .= ' q 0 w '; $shadow .= $this->SetFColor($col1, true)."\n"; if ($col1{0}==5 && ord($col1{4})<100) { $shadow .= $this->SetAlpha(ord($col1{4})/100, 'Normal', true, 'F')."\n"; } else if ($col1{0}==6 && ord($col1{5})<100) { $shadow .= $this->SetAlpha(ord($col1{5})/100, 'Normal', true, 'F')."\n"; } else if ($col1{0}==1 && $col1{2}==1 && ord($col1{3})<100) { $shadow .= $this->SetAlpha(ord($col1{3})/100, 'Normal', true, 'F')."\n"; } $mag = 0.551784; $mag2 = 0.551784; $d1 = $sh['spread']+$sh['blur']/2; $d2 = $sh['spread']-$sh['blur']/2; $bl = $sh['blur']; $x00 = $x0 - $d1; $y00 = $y0 - $d1; $w00 = $w + $d1*2; $h00 = $h + $d1*2; $flatten = false; if (max($brbgTR_H, $brbgTL_H, $brbgBR_H, $brbgBL_H) >= $w+$d2) { $flatten = true; } if (max($brbgTR_V, $brbgTL_V, $brbgBR_V, $brbgBL_V) >= $h+$d2) { $flatten = true; } $p1x = $x00+$w00-$d1-$brbgTR_H; $p1c2x = $p1x +($d2+$brbgTR_H)*$mag; $p1y = $y00+$bl; $p2x = $x00+$w00-$d1-$brbgTR_H; $p2c2x = $p2x + ($d1+$brbgTR_H)*$mag; $p2y = $y00; $p2c1y = $p2y + $bl/2; $p3x = $x00+$w00; $p3c2x = $p3x - $bl/2; $p3y = $y00+$d1+$brbgTR_V; $p3c1y = $p3y - ($d1+$brbgTR_V)*$mag; $p4x = $x00+$w00-$bl; $p4y = $y00+$d1+$brbgTR_V; $p4c2y = $p4y - ($d2+$brbgTR_V)*$mag; if (-$d2 > min($brbgTR_H, $brbgTR_V) || $flatten) { $p1x = $x00+$w00-$bl; $p1c2x = $p1x; $p2x = $x00+$w00-$bl; $p2c2x = $p2x + $bl*$mag2; $p3y = $y00+$bl; $p3c1y = $p3y - $bl*$mag2; $p4y = $y00+$bl; $p4c2y = $p4y ; } $shadow .= sprintf('%.3F %.3F m ', ($p1x )*_MPDFK, ($this->h-($p1y ))*_MPDFK); $shadow .= sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c ', ($p1c2x)*_MPDFK, ($this->h-($p1y))*_MPDFK, ($p4x)*_MPDFK, ($this->h-($p4c2y))*_MPDFK, ($p4x)*_MPDFK, ($this->h-($p4y))*_MPDFK); $patch_array[0]['f']=0; $patch_array[0]['points']=array($p1x,$p1y, $p1x,$p1y, $p2x,$p2c1y, $p2x,$p2y, $p2c2x,$p2y, $p3x,$p3c1y, $p3x,$p3y, $p3c2x,$p3y, $p4x,$p4y, $p4x,$p4y, $p4x,$p4c2y, $p1c2x,$p1y); $patch_array[0]['colors'] = array($col1,$col2,$col2,$col1); $p1x = $x00+$w00; $p1y = $y00+$d1+$brbgTR_V; $p2x = $x00+$w00-$bl; $p2y = $y00+$d1+$brbgTR_V; $p3x = $x00+$w00-$bl; $p3y = $y00+$h00-$d1-$brbgBR_V; $p4x = $x00+$w00; $p4c1x = $p4x-$bl/2; $p4y = $y00+$h00-$d1-$brbgBR_V; if (-$d2 > min($brbgTR_H, $brbgTR_V) || $flatten) { $p1y = $y00+$bl; $p2y = $y00+$bl; } if (-$d2 > min($brbgBR_H, $brbgBR_V) || $flatten) { $p3y = $y00+$h00-$bl; $p4y = $y00+$h00-$bl; } $shadow .= sprintf('%.3F %.3F l ', ($p3x )*_MPDFK, ($this->h-($p3y ))*_MPDFK); $patch_array[1]['f']=2; $patch_array[1]['points']=array($p2x,$p2y, $p3x,$p3y, $p3x,$p3y, $p3x,$p3y, $p4c1x,$p4y, $p4x,$p4y, $p4x,$p4y, $p1x,$p1y); $patch_array[1]['colors'] = array($col1,$col2); $p1x = $x00+$w00-$bl; $p1y = $y00+$h00-$d1-$brbgBR_V; $p1c2y = $p1y + ($d2+$brbgBR_V)*$mag; $p2x = $x00+$w00; $p2y = $y00+$h00-$d1-$brbgBR_V; $p2c2y = $p2y + ($d1+$brbgBR_V)*$mag; $p3x = $x00+$w00-$d1-$brbgBR_H; $p3c1x = $p3x + ($d1+$brbgBR_H)*$mag; $p3y = $y00+$h00; $p3c2y = $p3y - $bl/2; $p4x = $x00+$w00-$d1-$brbgBR_H; $p4c2x = $p4x + ($d2+$brbgBR_H)*$mag; $p4y = $y00+$h00-$bl; if (-$d2 > min($brbgBR_H, $brbgBR_V) || $flatten) { $p1y = $y00+$h00-$bl; $p1c2y = $p1y; $p2y = $y00+$h00-$bl; $p2c2y = $p2y + $bl*$mag2; $p3x = $x00+$w00-$bl; $p3c1x = $p3x + $bl*$mag2; $p4x = $x00+$w00-$bl; $p4c2x = $p4x; } $shadow .= sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c ', ($p1x)*_MPDFK, ($this->h-($p1c2y))*_MPDFK, ($p4c2x)*_MPDFK, ($this->h-($p4y))*_MPDFK, ($p4x)*_MPDFK, ($this->h-($p4y))*_MPDFK); $patch_array[2]['f']=2; $patch_array[2]['points']=array($p2x,$p2c2y, $p3c1x,$p3y, $p3x,$p3y, $p3x,$p3c2y, $p4x,$p4y, $p4x,$p4y, $p4c2x,$p4y, $p1x,$p1c2y); $patch_array[2]['colors'] = array($col2,$col1); $p1x = $x00+$w00-$d1-$brbgBR_H; $p1y = $y00+$h00; $p2x = $x00+$w00-$d1-$brbgBR_H; $p2y = $y00+$h00-$bl; $p3x = $x00+$d1+$brbgBL_H; $p3y = $y00+$h00-$bl; $p4x = $x00+$d1+$brbgBL_H; $p4y = $y00+$h00; $p4c1y = $p4y - $bl/2; if (-$d2 > min($brbgBR_H, $brbgBR_V) || $flatten) { $p1x = $x00+$w00-$bl; $p2x = $x00+$w00-$bl; } if (-$d2 > min($brbgBL_H, $brbgBL_V) || $flatten) { $p3x = $x00+$bl; $p4x = $x00+$bl; } $shadow .= sprintf('%.3F %.3F l ', ($p3x )*_MPDFK, ($this->h-($p3y ))*_MPDFK); $patch_array[3]['f']=2; $patch_array[3]['points']=array($p2x,$p2y, $p3x,$p3y, $p3x,$p3y, $p3x,$p3y, $p4x,$p4c1y, $p4x,$p4y, $p4x,$p4y, $p1x,$p1y); $patch_array[3]['colors'] = array($col1,$col2); $p1x = $x00+$d1+$brbgBL_H; $p1c2x = $p1x - ($d2+$brbgBL_H)*$mag; $p1y = $y00+$h00-$bl; $p2x = $x00+$d1+$brbgBL_H; $p2c2x = $p2x - ($d1+$brbgBL_H)*$mag; $p2y = $y00+$h00; $p3x = $x00; $p3c2x = $p3x + $bl/2; $p3y = $y00+$h00-$d1-$brbgBL_V; $p3c1y = $p3y + ($d1+$brbgBL_V)*$mag; $p4x = $x00+$bl; $p4y = $y00+$h00-$d1-$brbgBL_V; $p4c2y = $p4y + ($d2+$brbgBL_V)*$mag; if (-$d2 > min($brbgBL_H, $brbgBL_V) || $flatten) { $p1x = $x00+$bl; $p1c2x = $p1x; $p2x = $x00+$bl; $p2c2x = $p2x - $bl*$mag2; $p3y = $y00+$h00-$bl; $p3c1y = $p3y + $bl*$mag2; $p4y = $y00+$h00-$bl; $p4c2y = $p4y; } $shadow .= sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c ', ($p1c2x)*_MPDFK, ($this->h-($p1y))*_MPDFK, ($p4x)*_MPDFK, ($this->h-($p4c2y))*_MPDFK, ($p4x)*_MPDFK, ($this->h-($p4y))*_MPDFK); $patch_array[4]['f']=2; $patch_array[4]['points']=array($p2c2x,$p2y, $p3x,$p3c1y, $p3x,$p3y, $p3c2x,$p3y, $p4x,$p4y, $p4x,$p4y, $p4x,$p4c2y, $p1c2x,$p1y); $patch_array[4]['colors'] = array($col2,$col1); $p1x = $x00; $p1y = $y00+$h00-$d1-$brbgBL_V; $p2x = $x00+$bl; $p2y = $y00+$h00-$d1-$brbgBL_V; $p3x = $x00+$bl; $p3y = $y00+$d1+$brbgTL_V; $p4x = $x00; $p4c1x = $p4x + $bl/2; $p4y = $y00+$d1+$brbgTL_V; if (-$d2 > min($brbgBL_H, $brbgBL_V) || $flatten) { $p1y = $y00+$h00-$bl; $p2y = $y00+$h00-$bl; } if (-$d2 > min($brbgTL_H, $brbgTL_V) || $flatten) { $p3y = $y00+$bl; $p4y = $y00+$bl; } $shadow .= sprintf('%.3F %.3F l ', ($p3x )*_MPDFK, ($this->h-($p3y ))*_MPDFK); $patch_array[5]['f']=2; $patch_array[5]['points']=array($p2x,$p2y, $p3x,$p3y, $p3x,$p3y, $p3x,$p3y, $p4c1x,$p4y, $p4x,$p4y, $p4x,$p4y, $p1x,$p1y); $patch_array[5]['colors'] = array($col1,$col2); $p1x = $x00+$bl; $p1y = $y00+$d1+$brbgTL_V; $p1c2y = $p1y - ($d2+$brbgTL_V)*$mag; $p2x = $x00; $p2y = $y00+$d1+$brbgTL_V; $p2c2y = $p2y - ($d1+$brbgTL_V)*$mag; $p3x = $x00+$d1+$brbgTL_H; $p3c1x = $p3x - ($d1+$brbgTL_H)*$mag; $p3y = $y00; $p3c2y = $p3y + $bl/2; $p4x = $x00+$d1+$brbgTL_H; $p4c2x = $p4x - ($d2+$brbgTL_H)*$mag; $p4y = $y00+$bl; if (-$d2 > min($brbgTL_H, $brbgTL_V) || $flatten) { $p1y = $y00+$bl; $p1c2y = $p1y; $p2y = $y00+$bl; $p2c2y = $p2y - $bl*$mag2; $p3x = $x00+$bl; $p3c1x = $p3x - $bl*$mag2; $p4x = $x00+$bl; $p4c2x = $p4x ; } $shadow .= sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c ', ($p1x)*_MPDFK, ($this->h-($p1c2y))*_MPDFK, ($p4c2x)*_MPDFK, ($this->h-($p4y))*_MPDFK, ($p4x)*_MPDFK, ($this->h-($p4y))*_MPDFK); $patch_array[6]['f']=2; $patch_array[6]['points']=array($p2x,$p2c2y, $p3c1x,$p3y, $p3x,$p3y, $p3x,$p3c2y, $p4x,$p4y, $p4x,$p4y, $p4c2x,$p4y, $p1x,$p1c2y); $patch_array[6]['colors'] = array($col2,$col1); $p1x = $x00+$d1+$brbgTL_H; $p1y = $y00; $p2x = $x00+$d1+$brbgTL_H; $p2y = $y00+$bl; $p3x = $x00+$w00-$d1-$brbgTR_H; $p3y = $y00+$bl; $p4x = $x00+$w00-$d1-$brbgTR_H; $p4y = $y00; $p4c1y = $p4y + $bl/2; if (-$d2 > min($brbgTL_H, $brbgTL_V) || $flatten) { $p1x = $x00+$bl; $p2x = $x00+$bl; } if (-$d2 > min($brbgTR_H, $brbgTR_V) || $flatten) { $p3x = $x00+$w00-$bl; $p4x = $x00+$w00-$bl; } $shadow .= sprintf('%.3F %.3F l ', ($p3x )*_MPDFK, ($this->h-($p3y ))*_MPDFK); $patch_array[7]['f']=2; $patch_array[7]['points']=array($p2x,$p2y, $p3x,$p3y, $p3x,$p3y, $p3x,$p3y, $p4x,$p4c1y, $p4x,$p4y, $p4x,$p4y, $p1x,$p1y); $patch_array[7]['colors'] = array($col1,$col2); $shadow .= ' h f Q '."\n"; if ($bl) $shadow .= $this->grad->CoonsPatchMesh($x00,$y00,$w00,$h00,$patch_array,$x00,$x00+$w00,$y00,$y00+$h00, $colspace, true); if ($sh['x'] || $sh['y']) $shadow .= ' Q'."\n"; $shadow .= ' Q'."\n"; } } $s .= ' W n '; if ($this->blk[$blvl]['bgcolor']) { $this->pageBackgrounds[$blvl][] = array('x'=>$x0, 'y'=>$y0, 'w'=>$w, 'h'=>$h, 'col'=>$this->blk[$blvl]['bgcolorarray'], 'clippath'=>$s, 'visibility'=>$this->visibility, 'shadow'=>$shadow, 'z-index'=>$this->current_layer); } else if ($shadow) { $this->pageBackgrounds[$blvl][] = array('shadowonly'=>true, 'col'=>'', 'clippath'=>'', 'visibility'=>$this->visibility, 'shadow'=>$shadow, 'z-index'=>$this->current_layer); } if (isset($this->blk[$blvl]['gradient'])) { $g = $this->grad->parseBackgroundGradient($this->blk[$blvl]['gradient']); if ($g) { $gx = $x0; $gy = $y0; $this->pageBackgrounds[$blvl][] = array('gradient'=>true, 'x'=>$gx, 'y'=>$gy, 'w'=>$w, 'h'=>$h, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>$s, 'visibility'=>$this->visibility, 'z-index'=>$this->current_layer); } } if (isset($this->blk[$blvl]['background-image'])) { if ($this->blk[$blvl]['background-image']['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $this->blk[$blvl]['background-image']['gradient'] )) { $g = $this->grad->parseMozGradient( $this->blk[$blvl]['background-image']['gradient'] ); if ($g) { $gx = $x0; $gy = $y0; if ($this->blk[$blvl]['background-image']['origin'] == 'padding-box') { $gx += $this->blk[$blvl]['border_left']['w']; $w -= ($this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['border_right']['w']); if ($this->blk[$blvl]['border_top'] && $divider != 'pagetop' && !$continuingpage) { $gy += $this->blk[$blvl]['border_top']['w']; } if ($this->blk[$blvl]['border_bottom'] && $blockstate != 1 && $divider != 'pagebottom') { $gy1 = $y1 - $this->blk[$blvl]['border_bottom']['w']; } else { $gy1 = $y1; } $h = $gy1 - $gy; } else if ($this->blk[$blvl]['background-image']['origin'] == 'content-box') { $gx += $this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['padding_left']; $w -= ($this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['padding_left'] + $this->blk[$blvl]['border_right']['w'] + $this->blk[$blvl]['padding_right']); if ($this->blk[$blvl]['border_top'] && $divider != 'pagetop' && !$continuingpage) { $gy += $this->blk[$blvl]['border_top']['w'] + $this->blk[$blvl]['padding_top']; } if ($this->blk[$blvl]['border_bottom'] && $blockstate != 1 && $divider != 'pagebottom') { $gy1 = $y1 - ($this->blk[$blvl]['border_bottom']['w'] + $this->blk[$blvl]['padding_bottom']); } else { $gy1 = $y1 - $this->blk[$blvl]['padding_bottom']; } $h = $gy1 - $gy; } if (isset($this->blk[$blvl]['background-image']['size']['w']) && $this->blk[$blvl]['background-image']['size']['w']) { $size = $this->blk[$blvl]['background-image']['size']; if ($size['w']!='contain' && $size['w']!='cover') { if (stristr($size['w'] ,'%')) { $size['w'] += 0; $size['w'] /= 100; $w *= $size['w']; } else if ($size['w']!='auto') { $w = $size['w']; } if (stristr($size['h'] ,'%')) { $size['h'] += 0; $size['h'] /= 100; $h *= $size['h']; } else if ($size['h']!='auto') { $h = $size['h']; } } } $this->pageBackgrounds[$blvl][] = array('gradient'=>true, 'x'=>$gx, 'y'=>$gy, 'w'=>$w, 'h'=>$h, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>$s, 'visibility'=>$this->visibility, 'z-index'=>$this->current_layer); } } else { $image_id = $this->blk[$blvl]['background-image']['image_id']; $orig_w = $this->blk[$blvl]['background-image']['orig_w']; $orig_h = $this->blk[$blvl]['background-image']['orig_h']; $x_pos = $this->blk[$blvl]['background-image']['x_pos']; $y_pos = $this->blk[$blvl]['background-image']['y_pos']; $x_repeat = $this->blk[$blvl]['background-image']['x_repeat']; $y_repeat = $this->blk[$blvl]['background-image']['y_repeat']; $resize = $this->blk[$blvl]['background-image']['resize']; $opacity = $this->blk[$blvl]['background-image']['opacity']; $itype = $this->blk[$blvl]['background-image']['itype']; $size = $this->blk[$blvl]['background-image']['size']; $bpa = array('x'=>$x0, 'y'=>$y0, 'w'=>$w, 'h'=>$h); if ($this->blk[$blvl]['background-image']['origin'] == 'padding-box') { $bpa['x'] = $x0 + $this->blk[$blvl]['border_left']['w']; $bpa['w'] = $w - ($this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['border_right']['w']); if ($this->blk[$blvl]['border_top'] && $divider != 'pagetop' && !$continuingpage) { $bpa['y'] = $y0 + $this->blk[$blvl]['border_top']['w']; } else { $bpa['y'] = $y0; } if ($this->blk[$blvl]['border_bottom'] && $blockstate != 1 && $divider != 'pagebottom') { $bpay = $y1 - $this->blk[$blvl]['border_bottom']['w']; } else { $bpay = $y1; } $bpa['h'] = $bpay - $bpa['y']; } else if ($this->blk[$blvl]['background-image']['origin'] == 'content-box') { $bpa['x'] = $x0 + $this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['padding_left']; $bpa['w'] = $w - ($this->blk[$blvl]['border_left']['w'] + $this->blk[$blvl]['padding_left'] + $this->blk[$blvl]['border_right']['w'] + $this->blk[$blvl]['padding_right']); if ($this->blk[$blvl]['border_top'] && $divider != 'pagetop' && !$continuingpage) { $bpa['y'] = $y0 + $this->blk[$blvl]['border_top']['w'] + $this->blk[$blvl]['padding_top']; } else { $bpa['y'] = $y0 + $this->blk[$blvl]['padding_top']; } if ($this->blk[$blvl]['border_bottom'] && $blockstate != 1 && $divider != 'pagebottom') { $bpay = $y1 - ($this->blk[$blvl]['border_bottom']['w'] + $this->blk[$blvl]['padding_bottom']); } else { $bpay = $y1 - $this->blk[$blvl]['padding_bottom']; } $bpa['h'] = $bpay - $bpa['y']; } $this->pageBackgrounds[$blvl][] = array('x'=>$x0, 'y'=>$y0, 'w'=>$w, 'h'=>$h, 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>$s, 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype, 'visibility'=>$this->visibility, 'z-index'=>$this->current_layer, 'size'=>$size, 'bpa'=>$bpa ); } } $this->blk[$blvl]['bb_painted'][$this->page] = true; } function _EllipseArc($x0, $y0, $rx, $ry, $seg = 1, $part=false, $start=false) { $s = ''; if ($rx<0) { $rx = 0; } if ($ry<0) { $ry = 0; } $rx *= _MPDFK; $ry *= _MPDFK; $astart = 0; if ($seg == 1) { $afinish = 90; $nSeg = 4; } else if ($seg == 2) { $afinish = 180; $nSeg = 8; } else if ($seg == 3) { $afinish = 270; $nSeg = 12; } else { $afinish = 360; $nSeg = 16; } $astart = deg2rad((float) $astart); $afinish = deg2rad((float) $afinish); $totalAngle = $afinish - $astart; $dt = $totalAngle / $nSeg; $dtm = $dt/3; $x0 *= _MPDFK; $y0 = ($this->h - $y0) * _MPDFK; $t1 = $astart; $a0 = $x0 + ($rx * cos($t1)); $b0 = $y0 + ($ry * sin($t1)); $c0 = -$rx * sin($t1); $d0 = $ry * cos($t1); $op = false; for ($i = 1; $i <= $nSeg; $i++) { $t1 = ($i * $dt) + $astart; $a1 = $x0 + ($rx * cos($t1)); $b1 = $y0 + ($ry * sin($t1)); $c1 = -$rx * sin($t1); $d1 = $ry * cos($t1); if ($i>($nSeg-4) && (!$part || ($part == 1 && $i<=$nSeg-2) || ($part == 2 && $i>$nSeg-2))) { if ($start && !$op) { $s .= sprintf('%.3F %.3F m ', $a0, $b0); } $s .= sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c ', ($a0 + ($c0 * $dtm)), ($b0 + ($d0 * $dtm)), ($a1 - ($c1 * $dtm)) , ($b1 - ($d1 * $dtm)), $a1 , $b1 ); $op = true; } $a0 = $a1; $b0 = $b1; $c0 = $c1; $d0 = $d1; } return $s; } function PaintDivLnBorder($state=0,$blvl=0,$h) { $this->ColDetails[$this->CurrCol]['bottom_margin'] = $this->y + $h; $save_y = $this->y; $w = $this->blk[$blvl]['width']; $x0 = $this->x; $y0 = $this->y; $x1 = $this->x + $w; $y1 = $this->y + $h; if ($this->blk[$blvl]['border_top'] && ($state==1 || $state==3)) { $tbd = $this->blk[$blvl]['border_top']; if (isset($tbd['s']) && $tbd['s']) { $this->_setBorderLine($tbd); $this->y = $y0 + ($tbd['w']/2); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],'',$continuingpage,'T'); $this->Line($x0 + ($tbd['w']/2) , $this->y , $x0 + $w - ($tbd['w']/2), $this->y); } else { $this->SetLineJoin(0); $this->SetLineCap(0); $this->Line($x0, $this->y , $x0 + $w, $this->y); } $this->y += $tbd['w']; $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($this->blk[$blvl]['border_left']) { $tbd = $this->blk[$blvl]['border_left']; if (isset($tbd['s']) && $tbd['s']) { $this->_setBorderLine($tbd); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->y = $y0 + ($tbd['w']/2); $this->_setDashBorder($tbd['style'],'',$continuingpage,'L'); $this->Line($x0 + ($tbd['w']/2), $this->y, $x0 + ($tbd['w']/2), $y0 + $h -($tbd['w']/2)); } else { $this->y = $y0; $this->SetLineJoin(0); $this->SetLineCap(0); $this->Line($x0 + ($tbd['w']/2), $this->y, $x0 + ($tbd['w']/2), $y0 + $h); } $this->y += $tbd['w']; $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($this->blk[$blvl]['border_right']) { $tbd = $this->blk[$blvl]['border_right']; if (isset($tbd['s']) && $tbd['s']) { $this->_setBorderLine($tbd); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->y = $y0 + ($tbd['w']/2); $this->_setDashBorder($tbd['style'],'',$continuingpage,'R'); $this->Line($x0 + $w - ($tbd['w']/2), $this->y, $x0 + $w - ($tbd['w']/2), $y0 + $h - ($tbd['w']/2)); } else { $this->y = $y0; $this->SetLineJoin(0); $this->SetLineCap(0); $this->Line($x0 + $w - ($tbd['w']/2), $this->y, $x0 + $w - ($tbd['w']/2), $y0 + $h); } $this->y += $tbd['w']; $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($this->blk[$blvl]['border_bottom'] && $state > 1) { $tbd = $this->blk[$blvl]['border_bottom']; if (isset($tbd['s']) && $tbd['s']) { $this->_setBorderLine($tbd); $this->y = $y0 + $h - ($tbd['w']/2); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],'',$continuingpage,'B'); $this->Line($x0 + ($tbd['w']/2) , $this->y, $x0 + $w - ($tbd['w']/2), $this->y); } else { $this->SetLineJoin(0); $this->SetLineCap(0); $this->Line($x0, $this->y, $x0 + $w, $this->y); } $this->y += $tbd['w']; $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } $this->SetDash(); $this->y = $save_y; } function PaintImgBorder($objattr,$is_table) { if ($this->ColActive) { return ; } if ($is_table) { $k = $this->shrin_k; } else { $k = 1; } $h = (isset($objattr['BORDER-HEIGHT']) ? $objattr['BORDER-HEIGHT'] : 0); $w = (isset($objattr['BORDER-WIDTH']) ? $objattr['BORDER-WIDTH'] : 0); $x0 = (isset($objattr['BORDER-X']) ? $objattr['BORDER-X'] : 0); $y0 = (isset($objattr['BORDER-Y']) ? $objattr['BORDER-Y'] : 0); if ($objattr['border_top']) { $tbd = $objattr['border_top']; if (!empty($tbd['s'])) { $this->_setBorderLine($tbd,$k); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],'','','T'); } $this->Line($x0, $y0, $x0 + $w, $y0); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($objattr['border_left']) { $tbd = $objattr['border_left']; if (!empty($tbd['s'])) { $this->_setBorderLine($tbd,$k); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],'','','L'); } $this->Line($x0, $y0, $x0, $y0 + $h); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($objattr['border_right']) { $tbd = $objattr['border_right']; if (!empty($tbd['s'])) { $this->_setBorderLine($tbd,$k); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],'','','R'); } $this->Line($x0 + $w, $y0, $x0 + $w, $y0 + $h); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } if ($objattr['border_bottom']) { $tbd = $objattr['border_bottom']; if (!empty($tbd['s'])) { $this->_setBorderLine($tbd,$k); if ($tbd['style']=='dotted' || $tbd['style']=='dashed') { $this->_setDashBorder($tbd['style'],'','','B'); } $this->Line($x0, $y0 + $h, $x0 + $w, $y0 + $h); $this->SetLineJoin(2); $this->SetLineCap(2); $this->SetDash(); } } $this->SetDash(); $this->SetAlpha(1); } function Reset() { $this->SetTColor($this->ConvertColor(0)); $this->SetDColor($this->ConvertColor(0)); $this->SetFColor($this->ConvertColor(255)); $this->SetAlpha(1); $this->colorarray = ''; $this->spanbgcolorarray = ''; $this->spanbgcolor = false; $this->spanborder = false; $this->spanborddet = array(); $this->ResetStyles(); $this->HREF = ''; $this->textparam = array(); $this->SetTextOutline(); $this->SUP = false; $this->SUB = false; $this->strike = false; $this->textshadow = ''; $this->SetFont($this->default_font,'',0,false); $this->SetFontSize($this->default_font_size,false); $this->currentfontfamily = ''; $this->currentfontsize = ''; if ($this->tableLevel) { $this->SetLineHeight('',$this->table_lineheight); } else if ($this->listlvl && $this->list_lineheight[$this->listlvl][$this->bulletarray['occur']]) { $this->SetLineHeight('',$this->list_lineheight[$this->listlvl][$this->bulletarray['occur']]); } else if (isset($this->blk[$this->blklvl]['line_height']) && $this->blk[$this->blklvl]['line_height']) { $this->SetLineHeight('',$this->blk[$this->blklvl]['line_height']); } $this->toupper = false; $this->tolower = false; $this->kerning = false; $this->lSpacingCSS = ''; $this->wSpacingCSS = ''; $this->fixedlSpacing = false; $this->minwSpacing = 0; $this->capitalize = false; $this->SetDash(); $this->dash_on = false; $this->dotted_on = false; $this->divwidth = 0; $this->divheight = 0; $this->divalign = ''; $this->divrevert = false; $this->oldy = -1; $bodystyle = array(); if (isset($this->cssmgr->CSS['BODY']['FONT-STYLE'])) { $bodystyle['FONT-STYLE'] = $this->cssmgr->CSS['BODY']['FONT-STYLE']; } if (isset($this->cssmgr->CSS['BODY']['FONT-WEIGHT'])) { $bodystyle['FONT-WEIGHT'] = $this->cssmgr->CSS['BODY']['FONT-WEIGHT']; } if (isset($this->cssmgr->CSS['BODY']['COLOR'])) { $bodystyle['COLOR'] = $this->cssmgr->CSS['BODY']['COLOR']; } if (isset($bodystyle)) { $this->setCSS($bodystyle,'BLOCK','BODY'); } } function ReadMetaTags($html) { $regexp = '/ (\\w+?)=([^\\s>"]+)/si'; $html = preg_replace($regexp," \$1=\"\$2\"",$html); if (preg_match('/<title>(.*?)<\/title>/si',$html,$m)) { $this->SetTitle($m[1]); } preg_match_all('/<meta [^>]*?(name|content)="([^>]*?)" [^>]*?(name|content)="([^>]*?)".*?>/si',$html,$aux); $firstattr = $aux[1]; $secondattr = $aux[3]; for( $i = 0 ; $i < count($aux[0]) ; $i++) { $name = ( strtoupper($firstattr[$i]) == "NAME" )? strtoupper($aux[2][$i]) : strtoupper($aux[4][$i]); $content = ( strtoupper($firstattr[$i]) == "CONTENT" )? $aux[2][$i] : $aux[4][$i]; switch($name) { case "KEYWORDS": $this->SetKeywords($content); break; case "AUTHOR": $this->SetAuthor($content); break; case "DESCRIPTION": $this->SetSubject($content); break; } } } function ReadCharset($html) { if ($this->allow_charset_conversion) { if (preg_match('/<head.*charset=([^\'\"\s]*).*<\/head>/si',$html,$m)) { if (strtoupper($m[1]) != 'UTF-8') { $this->charset_in = strtoupper($m[1]); } } } } function setCSS($arrayaux,$type='',$tag='') { if (!is_array($arrayaux)) return; if (isset($arrayaux['FONT-SIZE'])) { $v = $arrayaux['FONT-SIZE']; if(is_numeric($v[0])) { if ($type == 'BLOCK' && $this->blklvl>0 && isset($this->blk[$this->blklvl-1]['InlineProperties']) && isset($this->blk[$this->blklvl-1]['InlineProperties']['size'])) { $mmsize = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['InlineProperties']['size']); } else { $mmsize = $this->ConvertSize($v,$this->FontSize); } $this->SetFontSize( $mmsize*(_MPDFK),false ); } else{ $v = strtoupper($v); if (isset($this->fontsizes[$v])) { $this->SetFontSize( $this->fontsizes[$v]* $this->default_font_size,false); } } if ($tag == 'BODY') { $this->SetDefaultFontSize($this->FontSizePt); } } if ($this->useLang && !$this->usingCoreFont) { if (isset($arrayaux['LANG']) && $arrayaux['LANG'] && $arrayaux['LANG'] != $this->default_lang && ((strlen($arrayaux['LANG']) == 5 && $arrayaux['LANG'] != 'UTF-8') || strlen($arrayaux['LANG']) == 2)) { list ($coreSuitable,$mpdf_pdf_unifonts) = GetLangOpts($arrayaux['LANG'], $this->useAdobeCJK); if ($mpdf_pdf_unifonts) { $this->RestrictUnicodeFonts($mpdf_pdf_unifonts); } else { $this->RestrictUnicodeFonts($this->default_available_fonts ); } if ($tag == 'BODY') { $this->currentLang = $arrayaux['LANG']; $this->default_lang = $arrayaux['LANG']; if ($mpdf_pdf_unifonts) { $this->default_available_fonts = $mpdf_pdf_unifonts; } } } else { $this->RestrictUnicodeFonts($this->default_available_fonts ); } } if (isset($arrayaux['FONT-FAMILY'])) { $v = $arrayaux['FONT-FAMILY']; $aux_fontlist = explode(",",$v); $found = 0; foreach($aux_fontlist AS $f) { $fonttype = trim($f); $fonttype = preg_replace('/["\']*(.*?)["\']*/','\\1',$fonttype); $fonttype = preg_replace('/ /','',$fonttype); $v = strtolower(trim($fonttype)); if (isset($this->fonttrans[$v]) && $this->fonttrans[$v]) { $v = $this->fonttrans[$v]; } if ((!$this->onlyCoreFonts && in_array($v,$this->available_unifonts)) || in_array($v,array('ccourier','ctimes','chelvetica')) || ($this->onlyCoreFonts && in_array($v,array('courier','times','helvetica','arial'))) || in_array($v, array('sjis','uhc','big5','gb'))) { $fonttype = $v; $found = 1; break; } } if (!$found) { foreach($aux_fontlist AS $f) { $fonttype = trim($f); $fonttype = preg_replace('/["\']*(.*?)["\']*/','\\1',$fonttype); $fonttype = preg_replace('/ /','',$fonttype); $v = strtolower(trim($fonttype)); if (isset($this->fonttrans[$v]) && $this->fonttrans[$v]) { $v = $this->fonttrans[$v]; } if (in_array($v,$this->sans_fonts) || in_array($v,$this->serif_fonts) || in_array($v,$this->mono_fonts) ) { $fonttype = $v; break; } } } if ($tag == 'BODY') { $this->SetDefaultFont($fonttype); } $this->SetFont($fonttype,$this->currentfontstyle,0,false); } else { $this->SetFont($this->currentfontfamily,$this->currentfontstyle,0,false); } foreach($arrayaux as $k => $v) { if ($type != 'INLINE' && $tag != 'BODY' && $type != 'LIST') { switch($k){ case 'BORDER-TOP': $this->blk[$this->blklvl]['border_top'] = $this->border_details($v); if ($this->blk[$this->blklvl]['border_top']['s']) { $this->blk[$this->blklvl]['border'] = 1; } break; case 'BORDER-BOTTOM': $this->blk[$this->blklvl]['border_bottom'] = $this->border_details($v); if ($this->blk[$this->blklvl]['border_bottom']['s']) { $this->blk[$this->blklvl]['border'] = 1; } break; case 'BORDER-LEFT': $this->blk[$this->blklvl]['border_left'] = $this->border_details($v); if ($this->blk[$this->blklvl]['border_left']['s']) { $this->blk[$this->blklvl]['border'] = 1; } break; case 'BORDER-RIGHT': $this->blk[$this->blklvl]['border_right'] = $this->border_details($v); if ($this->blk[$this->blklvl]['border_right']['s']) { $this->blk[$this->blklvl]['border'] = 1; } break; case 'PADDING-TOP': $this->blk[$this->blklvl]['padding_top'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'PADDING-BOTTOM': $this->blk[$this->blklvl]['padding_bottom'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'PADDING-LEFT': $this->blk[$this->blklvl]['padding_left'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'PADDING-RIGHT': $this->blk[$this->blklvl]['padding_right'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'MARGIN-TOP': $tmp = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); if (isset($this->blk[$this->blklvl]['lastbottommargin'])) { if ($tmp > $this->blk[$this->blklvl]['lastbottommargin']) { $tmp -= $this->blk[$this->blklvl]['lastbottommargin']; } else { $tmp = 0; } } $this->blk[$this->blklvl]['margin_top'] = $tmp; break; case 'MARGIN-BOTTOM': $this->blk[$this->blklvl]['margin_bottom'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'MARGIN-LEFT': $this->blk[$this->blklvl]['margin_left'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'MARGIN-RIGHT': $this->blk[$this->blklvl]['margin_right'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-TOP-LEFT-RADIUS-H': $this->blk[$this->blklvl]['border_radius_TL_H'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-TOP-LEFT-RADIUS-V': $this->blk[$this->blklvl]['border_radius_TL_V'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-TOP-RIGHT-RADIUS-H': $this->blk[$this->blklvl]['border_radius_TR_H'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-TOP-RIGHT-RADIUS-V': $this->blk[$this->blklvl]['border_radius_TR_V'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-BOTTOM-LEFT-RADIUS-H': $this->blk[$this->blklvl]['border_radius_BL_H'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-BOTTOM-LEFT-RADIUS-V': $this->blk[$this->blklvl]['border_radius_BL_V'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-BOTTOM-RIGHT-RADIUS-H': $this->blk[$this->blklvl]['border_radius_BR_H'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BORDER-BOTTOM-RIGHT-RADIUS-V': $this->blk[$this->blklvl]['border_radius_BR_V'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); break; case 'BOX-SHADOW': $bs = $this->cssmgr->setCSSboxshadow($v); if ($bs) { $this->blk[$this->blklvl]['box_shadow'] = $bs; } break; case 'BACKGROUND-CLIP': if (strtoupper($v) == 'PADDING-BOX') { $this->blk[$this->blklvl]['background_clip'] = 'padding-box'; } else if (strtoupper($v) == 'CONTENT-BOX') { $this->blk[$this->blklvl]['background_clip'] = 'content-box'; } break; case 'PAGE-BREAK-AFTER': if (strtoupper($v) == 'AVOID') { $this->blk[$this->blklvl]['page_break_after_avoid'] = true; } else if (strtoupper($v) == 'ALWAYS' || strtoupper($v) == 'LEFT' || strtoupper($v) == 'RIGHT') { $this->blk[$this->blklvl]['page_break_after'] = strtoupper($v) ; } break; case 'WIDTH': if (strtoupper($v) != 'AUTO') { $this->blk[$this->blklvl]['css_set_width'] = $this->ConvertSize($v,$this->blk[$this->blklvl-1]['inner_width'],$this->FontSize,false); } break; case 'TEXT-INDENT': $this->blk[$this->blklvl]['text_indent'] = $v; break; } } if ($type != 'INLINE' && $type != 'LIST') { switch($k){ case 'MARGIN-COLLAPSE': if (strtoupper($v) == 'COLLAPSE') { $this->blk[$this->blklvl]['margin_collapse'] = true; } break; case 'LINE-HEIGHT': $this->blk[$this->blklvl]['line_height'] = $this->fixLineheight($v); if (!$this->blk[$this->blklvl]['line_height'] ) { $this->blk[$this->blklvl]['line_height'] = $this->normalLineheight; } break; case 'TEXT-ALIGN': switch (strtoupper($v)) { case 'LEFT': $this->blk[$this->blklvl]['align']="L"; break; case 'CENTER': $this->blk[$this->blklvl]['align']="C"; break; case 'RIGHT': $this->blk[$this->blklvl]['align']="R"; break; case 'JUSTIFY': $this->blk[$this->blklvl]['align']="J"; break; } break; case 'BACKGROUND-GRADIENT': if ($type == 'BLOCK') { $this->blk[$this->blklvl]['gradient'] = $v; } break; case 'DIRECTION': if ($v) { $this->blk[$this->blklvl]['direction'] = strtolower($v); } break; } } if ($type == 'INLINE' || $type == 'LIST') { switch($k){ case 'DISPLAY': if (strtoupper($v) == 'NONE') { $this->inlineDisplayOff = true; } break; case 'DIRECTION': break; } } if ($type == 'INLINE') { switch($k){ case 'BORDER-TOP': $this->spanborddet['T'] = $this->border_details($v); $this->spanborder = true; break; case 'BORDER-BOTTOM': $this->spanborddet['B'] = $this->border_details($v); $this->spanborder = true; break; case 'BORDER-LEFT': $this->spanborddet['L'] = $this->border_details($v); $this->spanborder = true; break; case 'BORDER-RIGHT': $this->spanborddet['R'] = $this->border_details($v); $this->spanborder = true; break; case 'VISIBILITY': $v = strtolower($v); if ($v == 'visible' || $v == 'hidden' || $v == 'printonly' || $v == 'screenonly') { $this->textparam['visibility'] = $v; } break; } } switch($k){ case 'TEXT-ALIGN': if (strtoupper($v) == 'NOJUSTIFY' && $this->blk[$this->blklvl]['align']=="J") { $this->blk[$this->blklvl]['align']=""; } break; case 'BACKGROUND': case 'BACKGROUND-COLOR': $cor = $this->ConvertColor($v); if ($cor) { if ($tag == 'BODY') { $this->bodyBackgroundColor = $cor; } else if ($type == 'INLINE' || $type == 'LIST') { $this->spanbgcolorarray = $cor; $this->spanbgcolor = true; } else { $this->blk[$this->blklvl]['bgcolorarray'] = $cor; $this->blk[$this->blklvl]['bgcolor'] = true; } } else if ($type != 'INLINE' && $type != 'LIST') { if ($this->ColActive || $this->keep_block_together) { $this->blk[$this->blklvl]['bgcolorarray'] = $this->blk[$this->blklvl-1]['bgcolorarray'] ; $this->blk[$this->blklvl]['bgcolor'] = $this->blk[$this->blklvl-1]['bgcolor'] ; } } break; case 'FONT-KERNING': if ((strtoupper($v) == 'NORMAL' || strtoupper($v) == 'AUTO') && $this->useKerning) { $this->kerning = true; } else if (strtoupper($v) == 'NONE') { $this->kerning = false; } break; case 'LETTER-SPACING': $this->lSpacingCSS = $v; if (($this->lSpacingCSS || $this->lSpacingCSS==='0') && strtoupper($this->lSpacingCSS) != 'NORMAL') { $this->fixedlSpacing = $this->ConvertSize($this->lSpacingCSS,$this->FontSize); } break; case 'WORD-SPACING': $this->wSpacingCSS = $v; if ($this->wSpacingCSS && strtoupper($this->wSpacingCSS) != 'NORMAL') { $this->minwSpacing = $this->ConvertSize($this->wSpacingCSS,$this->FontSize); } break; case 'FONT-STYLE': switch (strtoupper($v)) { case 'ITALIC': case 'OBLIQUE': $this->SetStyle('I',true); break; case 'NORMAL': $this->SetStyle('I',false); break; } break; case 'FONT-WEIGHT': switch (strtoupper($v)) { case 'BOLD': $this->SetStyle('B',true); break; case 'NORMAL': $this->SetStyle('B',false); break; } break; case 'VERTICAL-ALIGN': switch (strtoupper($v)) { case 'SUPER': $this->SUP=true; $this->SUB=false; break; case 'SUB': $this->SUB=true; $this->SUP=false; break; case 'BASELINE': $this->SUB=false; $this->SUP=false; break; } break; case 'TEXT-DECORATION': if (stristr($v,'LINE-THROUGH')) { $this->strike = true; } else if (stristr($v,'UNDERLINE')) { $this->SetStyle('U',true); } else if (stristr($v,'NONE')) { $this->SetStyle('U',false); $this->strike = false; } break; case 'FONT-VARIANT': switch (strtoupper($v)) { case 'SMALL-CAPS': $this->SetStyle('S',true); break; case 'NORMAL': $this->SetStyle('S',false); break; } break; case 'TEXT-TRANSFORM': switch (strtoupper($v)) { case 'CAPITALIZE': $this->capitalize=true; break; case 'UPPERCASE': $this->toupper=true; break; case 'LOWERCASE': $this->tolower=true; break; case 'NONE': break; } break; case 'TEXT-SHADOW': $ts = $this->cssmgr->setCSStextshadow($v); if ($ts) { $this->textshadow = $ts; } break; case 'HYPHENS': if (strtoupper($v)=='NONE') { $this->textparam['hyphens'] = 2; } else if (strtoupper($v)=='AUTO') { $this->textparam['hyphens'] = 1; } else if (strtoupper($v)=='MANUAL') { $this->textparam['hyphens'] = 0; } break; case 'TEXT-OUTLINE': if (strtoupper($v)=='NONE') { $this->textparam['outline-s'] = false; } break; case 'TEXT-OUTLINE-WIDTH': case 'OUTLINE-WIDTH': switch(strtoupper($v)) { case 'THIN': $v = '0.03em'; break; case 'MEDIUM': $v = '0.05em'; break; case 'THICK': $v = '0.07em'; break; } $w = $this->ConvertSize($v,$this->blk[$this->blklvl]['inner_width'],$this->FontSize); if ($w) { $this->textparam['outline-WIDTH'] = $w; $this->textparam['outline-s'] = true; } else { $this->textparam['outline-s'] = false; } break; case 'TEXT-OUTLINE-COLOR': case 'OUTLINE-COLOR': if (strtoupper($v) == 'INVERT') { if ($this->colorarray) { $cor = $this->colorarray; $this->textparam['outline-COLOR'] = $this->_invertColor($cor); } else { $this->textparam['outline-COLOR'] = $this->ConvertColor(255); } } else { $cor = $this->ConvertColor($v); if ($cor) { $this->textparam['outline-COLOR'] = $cor ; } } break; case 'COLOR': $cor = $this->ConvertColor($v); if ($cor) { $this->colorarray = $cor; $this->SetTColor($cor); } break; } }} function SetStyle($tag,$enable) { $this->$tag=$enable; $style=''; foreach(array('B','I','U','S') as $s) { if($this->$s) { $style.=$s; } } if ($this->S && empty($this->upperCase)) { @include(_MPDF_PATH.'includes/upperCase.php'); } $this->currentfontstyle=$style; $this->SetFont('',$style,0,false); } function SetStylesArray($arr) { $style=''; foreach(array('B','I','U','S') as $s) { if (isset($arr[$s])) { if ($arr[$s]) { $this->$s = true; $style.=$s; } else { $this->$s = false; } } else if ($this->$s) { $style.=$s; } } $this->currentfontstyle=$style; $this->SetFont('',$style,0,false); } function SetStyles($str) { $style=''; foreach(array('B','I','U','S') as $s) { if (strpos($str,$s) !== false) { $this->$s = true; $style.=$s; } else { $this->$s = false; } } $this->currentfontstyle=$style; $this->SetFont('',$style,0,false); } function ResetStyles() { foreach(array('B','I','U','S') as $s) { $this->$s = false; } $this->currentfontstyle=''; $this->SetFont('','',0,false); } function DisableTags($str='') { if ($str == '') { $this->enabledtags = "<span><s><strike><del><bdo><big><small><ins><cite><acronym><font><sup><sub><b><u><i><a><strong><em><code><samp><tt><kbd><var><q><table><thead><tfoot><tbody><tr><th><td><ol><ul><li><dl><dt><dd><form><input><select><textarea><option><div><p><h1><h2><h3><h4><h5><h6><pre><center><blockquote><address><hr><img><br><indexentry><indexinsert><bookmark><watermarktext><watermarkimage><tts><ttz><tta><column_break><columnbreak><newcolumn><newpage><page_break><pagebreak><formfeed><columns><toc><tocentry><tocpagebreak><pageheader><pagefooter><setpageheader><setpagefooter><sethtmlpageheader><sethtmlpagefooter><annotation><template><jpgraph><barcode><dottab><caption><textcircle><fieldset><legend><article><aside><figure><figcaption><footer><header><hgroup><nav><section><mark><details><summary><meter><progress><time>"; } else { $str = explode(",",$str); foreach($str as $v) $this->enabledtags = str_replace(trim($v),'',$this->enabledtags); } } function finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight) { $af = 0; $bf = 0; $mta = 0; $mba = 0; if ($lhxt['BS']) { $af = max($af, ($lhxt['BS'] - ($maxfontsize * (0.5 + $this->baselineC)))); } if ($lhxt['M']) { $af = max($af, ($lhxt['M'] - $maxfontsize)/2); $bf = max($bf, ($lhxt['M'] - $maxfontsize)/2); } if ($lhxt['TT']) { $bf = max($bf, ($lhxt['TT'] - $maxfontsize)); } if ($lhxt['TB']) { $af = max($af, ($lhxt['TB'] - $maxfontsize)); } if ($lhxt['T']) { $mta = max($mta, $lhxt['T']); } if ($lhxt['B']) { $mba = max($mba, $lhxt['B']); } if ((!$lhfixed || !$forceExactLineheight) && ($af > (($maxlineHeight - $maxfontsize)/2) || $bf > (($maxlineHeight - $maxfontsize)/2))) { $maxlineHeight = $maxfontsize + $af + $bf; } else if (!$lhfixed) { $af = $bf = ($maxlineHeight - $maxfontsize)/2; } if ($mta > $maxlineHeight) { $bf += ($mta - $maxlineHeight); $maxlineHeight = $mta; } if ($mba > $maxlineHeight) { $af += ($mba - $maxlineHeight); $maxlineHeight = $mba; } return $maxlineHeight; } function TableWordWrap($maxwidth, $forcewrap = 0, $textbuffer = '', $def_fontsize, $returnarray=false) { $biggestword=0; $toonarrow=false; $textbuffer[0][0] = preg_replace('/^[ ]*/','',$textbuffer[0][0]); if ((count($textbuffer) == 0) or ((count($textbuffer) == 1) && ($textbuffer[0][0] == ''))) { return 0; } $text = ''; $lhfixed = false; if (preg_match('/([0-9.,]+)mm/',$this->table_lineheight)) { $lhfixed = true; } if ($lhfixed) { $def_lineheight = $this->_computeLineheight($this->table_lineheight, $def_fontsize);} else { $def_lineheight = 0; } $maxfontsize = 0; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $def_lineheight ; $ch = 0; $width = 0; $ln = 1; $mxw = $this->GetCharWidth('W',false); for($cctr=0;$cctr<count($textbuffer);$cctr++) { $chunk = $textbuffer[$cctr]; $line = $chunk[0]; if (substr($line,0,3) == "\xbb\xa4\xac") { $objattr = $this->_getObjAttr($line); if ($objattr['type'] == 'nestedtable') { $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $level = $objattr['level']; $ih = $this->table[($level+1)][$objattr['nestedcontent']]['h']; $ch += $ih; $ln++; $maxfontsize = 0; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $def_lineheight ; $width = 0; $text = ""; continue; } list($skipln,$iw,$ih) = $this->inlineObject((isset($specialcontent['type']) ? $specialcontent['type'] : null),0,0, $objattr, $this->lMargin,$width,$maxwidth,$maxlineHeight,false,true); if ($objattr['type'] == 'hr') { $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $ch += $ih; $ln++; $maxfontsize = 0; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $def_lineheight ; $width = 0; $text = ""; continue; } if ($skipln==1 || $skipln==-2) { $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $maxfontsize = 0; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $def_lineheight ; $ln++; $width = 0; $text = ""; } $va = (isset($objattr['vertical-align']) ? $objattr['vertical-align'] : null); if ($va) { $lhxt[$va] = max($lhxt[$va], $ih); } if ($lhfixed && $ih > $def_fontsize) { $forceExactLineheight = false; } $maxlineHeight = max($maxlineHeight ,$ih); $width += $iw; continue; } if(isset($chunk[11]) and $chunk[11] != '') { if ($this->shrin_k) { $this->SetFontSize($chunk[11]/$this->shrin_k,false); } else { $this->SetFontSize($chunk[11],false); } } if ($line == "\n") { $maxfontsize = max($maxfontsize,$this->FontSize); $fh = $this->_computeLineheight($this->table_lineheight); if ($lhfixed && $this->FontSize > $def_fontsize) { $fh = $this->FontSize; $forceExactLineheight = false; } $maxlineHeight = max($maxlineHeight,$fh); $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $maxfontsize = 0; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $this->_computeLineheight($this->table_lineheight); $ln++; $text = ""; $width = 0; if(isset($chunk[11]) and $chunk[11] != '') { $this->SetFontSize($this->default_font_size,false); } continue; } $lbw = $rbw = 0; if(isset($chunk[16]) && !empty($chunk[16])) { $this->spanborddet = $chunk[16]; if (isset($this->spanborddet['L'])) $lbw = $this->spanborddet['L']['w']; if (isset($this->spanborddet['R'])) $rbw = $this->spanborddet['R']['w']; } if(isset($chunk[15])) { $this->wSpacingCSS = $chunk[15]; if ($this->wSpacingCSS && strtoupper($this->wSpacingCSS) != 'NORMAL') { $this->minwSpacing = $this->ConvertSize($this->wSpacingCSS,$this->FontSize); } } if(isset($chunk[14])) { $this->lSpacingCSS = $chunk[14]; if (($this->lSpacingCSS || $this->lSpacingCSS==='0') && strtoupper($this->lSpacingCSS) != 'NORMAL') { $this->fixedlSpacing = $this->ConvertSize($this->lSpacingCSS,$this->FontSize); } } if(isset($chunk[13])) { $this->kerning = $chunk[13]; } if(isset($chunk[9])) { $this->textparam = $chunk[9]; } if(isset($chunk[4]) and $chunk[4] != '') { $font = $this->SetFont($chunk[4],$this->FontStyle,0,false); } if(isset($chunk[2]) and $chunk[2] != '') { $this->SetStyles($chunk[2]); } $space = $this->GetCharWidth(' ',false); if (mb_substr($line,0,1,$this->mb_enc ) == ' ') { $width += $space; $text .= ' '; } if (mb_substr($line,(mb_strlen($line,$this->mb_enc )-1),1,$this->mb_enc ) == ' ') { $lsend = true; } else { $lsend = false; } $line= trim($line); if ($line == '') { continue; } if ($this->iterationCounter) $line = preg_replace('/{iteration ([a-zA-Z0-9_]+)}/','\\1', $line); $words = explode(' ', $line); foreach ($words as $k=>$word) { $word = trim($word); $wordwidth = $this->GetStringWidth($word); if ($k==0) { $wordwidth += $lbw; } if ($k==(count($words)-1)) { $wordwidth += $rbw; } if ($wordwidth > $maxwidth + 0.0001) { $firstchunk=true; while($wordwidth > $maxwidth + 0.0001) { $chw = 0; $oneCJKorphan = false; $mlen = mb_strlen($word, $this->mb_enc ); for ( $i = 0; $i < $mlen; $i++ ) { $chw = $this->GetStringWidth(mb_substr($word,0,$i+1,$this->mb_enc )); if ($k==0) { $chw += $lbw; } if ($k==(count($words)-1)) { $chw += $rbw; } if ($chw > $maxwidth) { if ($i==0 && $firstchunk) { $wordwidth = $maxwidth - 0.0001; if ($this->debug) { $this->Error("Table cell width calculated less than that needed for one character!"); } break; } if ($this->checkCJK && !$this->usingCoreFont && preg_match("/[".$this->pregCJKchars."]/u", $word)) { if (!$oneCJKorphan && preg_match('/['.$this->CJKoverflow.']$/u',mb_substr($word,0,$i+1,$this->mb_enc )) && $this->allowCJKorphans) { $wordwidth = $maxwidth - 0.0001; $oneCJKorphan = true; continue; } $cjkfix = 0; if ($i>0 && preg_match("/[".$this->CJKleading."$]/u", mb_substr($word,0,$i,$this->mb_enc ))) { $cjkfix = 1; } else if (preg_match("/[".$this->CJKfollowing."]/u", mb_substr($word,$i,1,$this->mb_enc ))) { if ($this->allowCJKorphans && !$oneCJKorphan) { if ($i==($mlen-1) || ($i<($mlen-1) && !preg_match("/[".$this->CJKfollowing."]/u", mb_substr($word,$i+1,1,$this->mb_enc )))) { $wordwidth = $maxwidth - 0.0001; $oneCJKorphan = true; continue; } } $cjkfix = 2; } else if (preg_match("/([".$this->pregCJKchars."]+[0-9\x{ff10}-\x{ff19}]+$)/u", mb_substr($word,0,$i,$this->mb_enc )) && preg_match("/^([0-9\x{ff10}-\x{ff19}]+[".$this->pregCJKchars."]+)/u", mb_substr($word,$i,16,$this->mb_enc ))) { $cjkfix = 3; } if ($cjkfix) { $m0 = mb_substr($word,$i-1,1,$this->mb_enc ); $m1 = mb_substr($word,0,$i-1,$this->mb_enc ); $mi = $i - 1; if ($cjkfix == 3) { $match = "0-9\x{ff10}-\x{ff19}"; } else { $match = $this->CJKleading; } while(preg_match("/[".$match."$]/u", $m1) && mb_strlen($m1, $this->mb_enc)>2) { $m0 = mb_substr($m1,$mi-1,1,$this->mb_enc ).$m0; $m1 = mb_substr($m1,0,$mi-1,$this->mb_enc ); $mi--; } $word = mb_substr($word,0,$i,$this->mb_enc ) . $m0 . mb_substr($word,$i,mb_strlen($word, $this->mb_enc )-$i,$this->mb_enc ); $mlen = mb_strlen($word, $this->mb_enc ); } } if ($text && $firstchunk) { $maxfontsize = max($maxfontsize,$this->FontSize); $fh = $this->_computeLineheight($this->table_lineheight); if ($lhfixed && $this->FontSize > $def_fontsize) { $fh = $this->FontSize; $forceExactLineheight = false; } $maxlineHeight = max($maxlineHeight,$fh); $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $maxfontsize = $this->FontSize; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $this->_computeLineheight($this->table_lineheight); $ln++; } $maxfontsize = max($maxfontsize,$this->FontSize); $fh = $this->_computeLineheight($this->table_lineheight); if ($lhfixed && $this->FontSize > $def_fontsize) { $fh = $this->FontSize; $forceExactLineheight = false; } $maxlineHeight = max($maxlineHeight,$fh); $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $maxfontsize = $this->FontSize; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $this->_computeLineheight($this->table_lineheight); $ln++; $mxw = $maxwidth; $text = mb_substr($word,0,$i,$this->mb_enc ); $word = mb_substr($word,$i,mb_strlen($word, $this->mb_enc )-$i,$this->mb_enc ); $wordwidth = $this->GetStringWidth($word); $width = 0; $firstchunk=false; break; } } if (mb_strlen($word, $this->mb_enc )<2 && $wordwidth > $maxwidth + 0.0001) { $wordwidth = $maxwidth - 0.0001; if ($this->debug) { $this->Error("Table cell width calculated less than that needed for single character!"); } } $firstchunk=false; } } if ($width + $wordwidth < $maxwidth + 0.0001) { $mxw = max($mxw, ($width+$wordwidth)); $width += $wordwidth + $space; $text .= $word.' '; } else { if ($this->textparam['hyphens'] != 2 && preg_match('/\-/',$word)) { list($hardsuccess,$pre,$post,$prelength) = $this->hardHyphenate($word, ($maxwidth - $width)-$this->GetCharWidth("-", false)); if ($hardsuccess) { $text .= $pre.'-'; $word = $post; $wordwidth = $this->GetStringWidth($word); if ($k==(count($words)-1)) { $wordwidth += $rbw; } } } else if ($this->textparam['hyphens'] != 2 && (!$this->usingCoreFont && preg_match("/\xc2\xad/",$word)) || ($this->usingCoreFont && preg_match("/".chr(173)."/",$word) && ($this->FontFamily!='csymbol' && $this->FontFamily!='czapfdingbats')) ) { list($success,$pre,$post,$prelength) = $this->softHyphenate($word, ($maxwidth - $width)); if ($success) { $text .= $pre.'-'; $word = $post; $wordwidth = $this->GetStringWidth($word); if ($k==(count($words)-1)) { $wordwidth += $rbw; } } } else if ($this->textparam['hyphens'] == 1) { list($success,$pre,$post,$prelength) = $this->hyphenateWord($word, ($maxwidth - $width)); if ($success) { $text .= $pre.'-'; $word = $post; $wordwidth = $this->GetStringWidth($word); if ($k==(count($words)-1)) { $wordwidth += $rbw; } } } if ( count($textbuffer)>1 && $cctr > 0 && $k==0 && (substr($textbuffer[$cctr][0],0,3) != "\xbb\xa4\xac") && (substr($textbuffer[$cctr-1][0],0,3) != "\xbb\xa4\xac") && substr($textbuffer[$cctr-1][0],-1,1) != ' ' && substr($textbuffer[$cctr][0],0,1) != ' ' ) { $found = false; for ($ix=$cctr-1;$ix>=0;$ix--) { if (preg_match('/[ ]/',$textbuffer[$ix][0])) { $found = $ix; break; } } if ($found !== false) { $charpos = strrpos($textbuffer[$found][0],' '); $a1 = $a2 = $textbuffer[$found]; $a1[0] = "\n"; $a2[0] = substr($textbuffer[$found][0], $charpos+1, strlen($textbuffer[$found][0])-$charpos); $textbuffer[$found][0] = substr($textbuffer[$found][0], 0, $charpos); array_insert($textbuffer, $a1, $found+1); array_insert($textbuffer, $a2, $found+2); $biggestword=0; $toonarrow=false; $lhfixed = false; if (preg_match('/([0-9.,]+)mm/',$this->table_lineheight)) { $lhfixed = true; } if ($lhfixed) { $def_lineheight = $this->_computeLineheight($this->table_lineheight, $def_fontsize);} else { $def_lineheight = 0; } $maxfontsize = 0; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $def_lineheight ; $ch = 0; $width = 0; $ln = 1; $mxw = $this->GetCharWidth('W',false); $text = ''; $cctr = -1; break; } } $maxfontsize = max($maxfontsize,$this->FontSize); $fh = $this->_computeLineheight($this->table_lineheight); if ($lhfixed && $this->FontSize > $def_fontsize) { $fh = $this->FontSize; $forceExactLineheight = false; } $maxlineHeight = max($maxlineHeight,$fh); $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); $mxw = $maxwidth; $maxfontsize = $this->FontSize; $forceExactLineheight = true; $lhxt = array('BS'=>0, 'M'=>0, 'TT'=>0, 'TB'=>0, 'T'=>0, 'B'=>0); $maxlineHeight = $this->_computeLineheight($this->table_lineheight); $ln++; $width = $wordwidth + $space; $text = $word.' '; } $maxfontsize = max($maxfontsize,$this->FontSize); $fh = $this->_computeLineheight($this->table_lineheight); if ($lhfixed && $this->FontSize > $def_fontsize) { $fh = $this->FontSize; $forceExactLineheight = false; } $maxlineHeight = max($maxlineHeight,$fh); } if (!$lsend) { $width -= $space; $text = rtrim($text); } if(isset($chunk[2]) and $chunk[2] != '') { $this->ResetStyles(); } if(isset($chunk[4]) and $chunk[4] != '') { $this->SetFont($this->default_font,$this->FontStyle,0,false); } if(isset($chunk[11]) and $chunk[11] != '') { $this->SetFontSize($this->default_font_size,false); } $this->spanborddet = array(); $this->kerning = false; $this->lSpacingCSS = ''; $this->wSpacingCSS = ''; $this->fixedlSpacing = false; $this->minwSpacing = 0; } if ($width) { $ch += $this->finaliseCellLineHeight($lhxt, $maxfontsize, $maxlineHeight, $lhfixed, $forceExactLineheight); } if ($returnarray) { return array($ch,$ln,$mxw); } else { return $ch; } } function TableCheckMinWidth($maxwidth, $forcewrap = 0, $textbuffer) { $biggestword=0; $toonarrow=false; if ((count($textbuffer) == 0) or ((count($textbuffer) == 1) && ($textbuffer[0][0] == ''))) { return 0; } foreach ($textbuffer as $chunk) { $line = $chunk[0]; if ($this->iterationCounter) $line = preg_replace('/{iteration ([a-zA-Z0-9_]+)}/','\\1', $line); if (substr($line,0,3) == "\xbb\xa4\xac") { $objattr = $this->_getObjAttr($line); if ($objattr['type']!='hr' && isset($objattr['width']) && ($objattr['width']/$this->shrin_k) > ($maxwidth + 0.0001) ) { if (($objattr['width']/$this->shrin_k) > $biggestword) { $biggestword = ($objattr['width']/$this->shrin_k); } $toonarrow=true; } continue; } if ($line == "\n") { continue; } $line = trim($line ); if(isset($chunk[11]) and $chunk[11] != '') { if ($this->shrin_k) { $this->SetFontSize($chunk[11]/$this->shrin_k,false); } else { $this->SetFontSize($chunk[11],false); } } if(isset($chunk[4]) and $chunk[4] != '') { $font = $this->SetFont($chunk[4],$this->FontStyle,0,false); } if(isset($chunk[2]) and $chunk[2] != '') { $this->SetStyles($chunk[2]); } $lbw = $rbw = 0; if(isset($chunk[16]) && !empty($chunk[16])) { $this->spanborddet = $chunk[16]; $lbw = $this->spanborddet['L']['w']; $rbw = $this->spanborddet['R']['w']; } if(isset($chunk[15])) { $this->wSpacingCSS = $chunk[15]; if ($this->wSpacingCSS && strtoupper($this->wSpacingCSS) != 'NORMAL') { $this->minwSpacing = $this->ConvertSize($this->wSpacingCSS,$this->FontSize); } } if(isset($chunk[14])) { $this->lSpacingCSS = $chunk[14]; if (($this->lSpacingCSS || $this->lSpacingCSS==='0') && strtoupper($this->lSpacingCSS) != 'NORMAL') { $this->fixedlSpacing = $this->ConvertSize($this->lSpacingCSS,$this->FontSize); } } if(isset($chunk[13])) { $this->kerning = $chunk[13]; } $words = explode(' ', $line); foreach ($words as $k=>$word) { $word = trim($word); $wordwidth = $this->GetStringWidth($word); if ($k==0) { $wordwidth += $lbw; } if ($k==(count($words)-1)) { $wordwidth += $rbw; } if ($wordwidth > $maxwidth + 0.0001) { if ($wordwidth > $biggestword) { $biggestword = $wordwidth; } $toonarrow=true; } } if(isset($chunk[2]) and $chunk[2] != '') { $this->ResetStyles(); } if(isset($chunk[4]) and $chunk[4] != '') { $this->SetFont($this->default_font,$this->FontStyle,0,false); } if(isset($chunk[11]) and $chunk[11] != '') { $this->SetFontSize($this->default_font_size,false); } $this->spanborddet = array(); $this->kerning = false; $this->lSpacingCSS = ''; $this->wSpacingCSS = ''; $this->fixedlSpacing = false; $this->minwSpacing = 0; } if (($toonarrow) && ($this->table_error_report)) { $this->Error("Word is too long to fit in table - ".$this->table_error_report_param); } if ($toonarrow) return -$biggestword; else return 1; } function shrinkTable(&$table,$k) { $table['border_spacing_H'] /= $k; $table['border_spacing_V'] /= $k; $table['padding']['T'] /= $k; $table['padding']['R'] /= $k; $table['padding']['B'] /= $k; $table['padding']['L'] /= $k; $table['margin']['T'] /= $k; $table['margin']['R'] /= $k; $table['margin']['B'] /= $k; $table['margin']['L'] /= $k; $table['border_details']['T']['w'] /= $k; $table['border_details']['R']['w'] /= $k; $table['border_details']['B']['w'] /= $k; $table['border_details']['L']['w'] /= $k; if (isset($table['max_cell_border_width']['T'])) $table['max_cell_border_width']['T'] /= $k; if (isset($table['max_cell_border_width']['R'])) $table['max_cell_border_width']['R'] /= $k; if (isset($table['max_cell_border_width']['B'])) $table['max_cell_border_width']['B'] /= $k; if (isset($table['max_cell_border_width']['L'])) $table['max_cell_border_width']['L'] /= $k; if ($this->simpleTables){ $table['simple']['border_details']['T']['w'] /= $k; $table['simple']['border_details']['R']['w'] /= $k; $table['simple']['border_details']['B']['w'] /= $k; $table['simple']['border_details']['L']['w'] /= $k; } $table['miw'] /= $k; $table['maw'] /= $k; if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } for($j = 0 ; $j < $table['nc'] ; $j++ ) { $table['wc'][$j]['miw'] /= $k; $table['wc'][$j]['maw'] /= $k; if (isset($table['decimal_align'][$j]['maxs0']) && $table['decimal_align'][$j]['maxs0']) { $table['decimal_align'][$j]['maxs0'] /= $k; } if (isset($table['decimal_align'][$j]['maxs1']) && $table['decimal_align'][$j]['maxs1']) { $table['decimal_align'][$j]['maxs1'] /= $k; } if (isset($table['wc'][$j]['absmiw']) && $table['wc'][$j]['absmiw'] ) $table['wc'][$j]['absmiw'] /= $k; for($i = 0 ; $i < $table['nr']; $i++ ) { if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $c = &$table['cells'][$i][$j]; if (isset($c) && $c) { if (!$this->simpleTables){ if ($this->packTableData) { $cell = $this->_unpackCellBorder($c['borderbin'] ); $cell['border_details']['T']['w'] /= $k; $cell['border_details']['R']['w'] /= $k; $cell['border_details']['B']['w'] /= $k; $cell['border_details']['L']['w'] /= $k; $cell['border_details']['mbw']['TL'] /= $k; $cell['border_details']['mbw']['TR'] /= $k; $cell['border_details']['mbw']['BL'] /= $k; $cell['border_details']['mbw']['BR'] /= $k; $cell['border_details']['mbw']['LT'] /= $k; $cell['border_details']['mbw']['LB'] /= $k; $cell['border_details']['mbw']['RT'] /= $k; $cell['border_details']['mbw']['RB'] /= $k; $c['borderbin'] = $this->_packCellBorder($cell); } else { $c['border_details']['T']['w'] /= $k; $c['border_details']['R']['w'] /= $k; $c['border_details']['B']['w'] /= $k; $c['border_details']['L']['w'] /= $k; $c['border_details']['mbw']['TL'] /= $k; $c['border_details']['mbw']['TR'] /= $k; $c['border_details']['mbw']['BL'] /= $k; $c['border_details']['mbw']['BR'] /= $k; $c['border_details']['mbw']['LT'] /= $k; $c['border_details']['mbw']['LB'] /= $k; $c['border_details']['mbw']['RT'] /= $k; $c['border_details']['mbw']['RB'] /= $k; } } $c['padding']['T'] /= $k; $c['padding']['R'] /= $k; $c['padding']['B'] /= $k; $c['padding']['L'] /= $k; $c['maxs'] /= $k; if (isset($c['w'])) { $c['w'] /= $k; } $c['s'] /= $k; $c['maw'] /= $k; $c['miw'] /= $k; if (isset($c['absmiw'])) $c['absmiw'] /= $k; if (isset($c['nestedmaw'])) $c['nestedmaw'] /= $k; if (isset($c['nestedmiw'])) $c['nestedmiw'] /= $k; if (isset($c['textbuffer'])) { foreach($c['textbuffer'] AS $n=>$tb) { if (!empty($tb[16])) { $c['textbuffer'][$n][16]['T']['w'] /= $k; $c['textbuffer'][$n][16]['B']['w'] /= $k; $c['textbuffer'][$n][16]['L']['w'] /= $k; $c['textbuffer'][$n][16]['R']['w'] /= $k; } } } if ($this->cacheTables) { $this->_cacheCell($c, '', "W", $fh, $table['cells'][$i][$j]); } unset($c); } } } if ($this->cacheTables) { fclose($fh); } } function _cacheCell($c, $file, $mode="A", $fh=null, $offset=0) { if (!is_array($c) || !isset($c)) { return ''; } if(isset($c['w'])) { $cw = $c['w']; } else { $cw = -1; } if(isset($c['w0'])) { $cw0 = $c['w0']; } else { $cw0 = -1; } if(isset($c['h0'])) { $ch0 = $c['h0']; } else { $ch0 = -1; } $data = pack("n2d19A1A1n2sA32A128", $c['colspan'], $c['rowspan'], $c['s'], $c['maxs'], $c['nestedmaw'], $c['nestedmiw'], $c['padding']['L'], $c['padding']['R'], $c['padding']['T'], $c['padding']['B'], $c['dfs'], $cw, $c['h'], $c['absmiw'], $c['maw'], $c['miw'], $c['mih'], $c['x0'], $cw0, $c['y0'], $ch0, $c['a'], $c['va'], $c['nowrap'], $c['wpercent'], $c['R'], $c['bgcolor'], $c['gradient'] ); if ($c['background-image']) { $data .= pack("n2d2A6A6n3dA4A128", strlen($data), $c['background-image']['image_id'], $c['background-image']['orig_w'], $c['background-image']['orig_h'], $c['background-image']['x_pos'], $c['background-image']['y_pos'], $c['background-image']['x_repeat'], $c['background-image']['y_repeat'], $c['background-image']['resize'], $c['background-image']['opacity'], $c['background-image']['itype'], $c['background-image']['gradient'] ); } else $data .= pack("n",0); $tb_offset = 2 + 186 + 2 + strlen($data); $stb = serialize($c['textbuffer']).'        '; $lentb = strlen($stb); $data2 = pack("nA".$lentb, $lentb, $stb); $tempfh = true; if ($mode=="W" && $offset) { if (!$fh) { $fh = fopen($file, "r+b"); } else $tempfh = false; fseek($fh, $offset); } else { $fh = fopen($file, "ab"); } fwrite($fh, pack("n",$tb_offset)); fwrite($fh, $c['borderbin']); fwrite($fh, pack("n",strlen($data))); fwrite($fh, $data); fwrite($fh, $data2); if ($tempfh) fclose($fh); return ($tb_offset + 2 + $lentb); } function _cacheUpdateTxB($c, $fh, $offset) { fseek($fh, $offset); $tb_offset = $this->read_short($fh); fseek($fh, ($tb_offset-2), SEEK_CUR); $lentb = $this->read_short($fh); $stb = serialize($c['textbuffer']); fwrite($fh, pack("A".$lentb, $stb)); } function _cacheUpdateBorder($c, $fh, $offset) { $offset += 2; fseek($fh, $offset); fwrite($fh, $c['borderbin']); } function _cacheUpdateMtx($c, $fh, $offset, $var) { if ($var=='mih') { $offset += (2 + 186 + 2 + 4 + 14*_DSIZE); } else if ($var=='x0') { $offset += (2 + 186 + 2 + 4 + 15*_DSIZE); } else if ($var=='y0') { $offset += (2 + 186 + 2 + 4 + 17*_DSIZE); } fseek($fh, $offset); if ($var=='mih') { fwrite($fh, pack("d",$c['mih'])); } else if ($var=='x0') { fwrite($fh, pack("d2",$c['x0'],$c['w0'])); } else if ($var=='y0') { fwrite($fh, pack("d2",$c['y0'],$c['h0'])); } } function _uncacheCell($ptr, $file, $fh) { if ($ptr==0) { return null; } if (is_array($ptr)) { $this->Error("Probable cause - missing end tag &lt;/td&gt;. You may be able to change the configurable variable: allow_html_optional_endtags "); } $tempfh = true; if (!$fh) { $fh = fopen($file, "rb"); } else $tempfh = false; fseek($fh, $ptr); $c = array(); $tb_offset = $this->read_short($fh); $c['borderbin'] = fread($fh,186); $maindatalen = $this->read_short($fh); $str = fread($fh,$maindatalen ); $data = unpack("ncolspan/nrowspan/ds/dmaxs/dnmaw/dnmiw/dpl/dpr/dpt/dpb/ddfs/dw/dh/dabsmiw/dmaw/dmiw/dmih/dx0/dw0/dy0/dh0/A1a/A1va/nnowrap/nwpercent/sR/A32bgcol/A128grad/nbgimage", $str); if ($data['colspan']>0) $c['colspan'] = $data['colspan']; if ($data['rowspan']>0) $c['rowspan'] = $data['rowspan']; $c['s'] = $data['s']; $c['maxs'] = $data['maxs']; if ($data['nmaw']>0) $c['nestedmaw'] = $data['nmaw']; if ($data['nmiw']>0) $c['nestedmiw'] = $data['nmiw']; $c['padding']['L'] = $data['pl']; $c['padding']['R'] = $data['pr']; $c['padding']['T'] = $data['pt']; $c['padding']['B'] = $data['pb']; $c['dfs'] = $data['dfs']; if ($data['w']>=0) $c['w'] = $data['w']; if ($data['h']>0) $c['h'] = $data['h']; if ($data['absmiw']>0) $c['absmiw'] = $data['absmiw']; if ($data['maw']>0) $c['maw'] = $data['maw']; if ($data['miw']>0) $c['miw'] = $data['miw']; if ($data['mih']>0) $c['mih'] = $data['mih']; if ($data['w0']>=0) { $c['w0'] = $data['w0']; $c['x0'] = $data['x0']; } if ($data['h0']>=0) { $c['h0'] = $data['h0']; $c['y0'] = $data['y0']; } $c['a'] = trim($data['a']); $c['va'] = trim($data['va']); if ($data['nowrap']) $c['nowrap'] = $data['nowrap']; else $c['nowrap'] = false; if ($data['wpercent']>0) $c['wpercent'] = $data['wpercent']; if ($data['R']<>0) $c['R'] = $data['R']; else $c['R'] = false; $c['bgcolor'] = trim($data['bgcol']); if (trim($data['grad'])) $c['gradient'] = trim($data['grad']); else $c['gradient'] = false; if ($data['bgimage']>0) { $bgidata = substr($str, ($data['bgimage']+2)); $c['background-image'] = unpack("nimage_id/dorig_w/dorig_h/A6x_pos/A6y_pos/nx_repeat/ny_repeat/nresize/dopacity/A4itype/A128gradient", $bgidata); } $tblen = $this->read_short($fh); $tbsp = fread($fh,$tblen); $tbs = unpack("A".$tblen."textbuffer",$tbsp); $c['textbuffer'] = unserialize(trim($tbs['textbuffer'])); if ($tempfh) { fclose($fh); } return ($c); } function read_short(&$fh) { $s = fread($fh,2); $a = (ord($s[0])<<8) + ord($s[1]); if ($a & (1 << 15) ) { $a = ($a - (1 << 16)); } return $a; } function _backupCacheFiles() { foreach($this->table AS $lvl=>$t) { foreach($this->table[$lvl] AS $c=>$t2) { copy( $t2['cache'], $t2['cache'].'.bak'); } } } function _restoreCacheFiles() { foreach($this->table AS $lvl=>$t) { foreach($this->table[$lvl] AS $c=>$t2) { copy( $t2['cache'].'.bak', $t2['cache']); } } } function _packCellBorder($cell) { if (!is_array($cell) || !isset($cell)) { return ''; } if (!$this->packTableData) { return $cell; } $bindata = pack("nnda6A10nnda6A10nnda6A10nnda6A10nd9", $cell['border'], $cell['border_details']['R']['s'], $cell['border_details']['R']['w'], $cell['border_details']['R']['c'], $cell['border_details']['R']['style'], $cell['border_details']['R']['dom'], $cell['border_details']['L']['s'], $cell['border_details']['L']['w'], $cell['border_details']['L']['c'], $cell['border_details']['L']['style'], $cell['border_details']['L']['dom'], $cell['border_details']['T']['s'], $cell['border_details']['T']['w'], $cell['border_details']['T']['c'], $cell['border_details']['T']['style'], $cell['border_details']['T']['dom'], $cell['border_details']['B']['s'], $cell['border_details']['B']['w'], $cell['border_details']['B']['c'], $cell['border_details']['B']['style'], $cell['border_details']['B']['dom'], $cell['border_details']['mbw']['BL'], $cell['border_details']['mbw']['BR'], $cell['border_details']['mbw']['RT'], $cell['border_details']['mbw']['RB'], $cell['border_details']['mbw']['TL'], $cell['border_details']['mbw']['TR'], $cell['border_details']['mbw']['LT'], $cell['border_details']['mbw']['LB'], $cell['border_details']['cellposdom'] ); return $bindata; } function _getBorderWidths($bindata) { if (!$bindata) { return array(0,0,0,0); } if (!$this->packTableData) { return array($bindata['border_details']['T']['w'], $bindata['border_details']['R']['w'], $bindata['border_details']['B']['w'], $bindata['border_details']['L']['w']); } $bd = unpack("nbord/nrs/drw/a6rca/A10rst/nrd/nls/dlw/a6lca/A10lst/nld/nts/dtw/a6tca/A10tst/ntd/nbs/dbw/a6bca/A10bst/nbd/dmbl/dmbr/dmrt/dmrb/dmtl/dmtr/dmlt/dmlb/dcpd", $bindata); $cell['border_details']['R']['w'] = $bd['rw']; $cell['border_details']['L']['w'] = $bd['lw']; $cell['border_details']['T']['w'] = $bd['tw']; $cell['border_details']['B']['w'] = $bd['bw']; return array($bd['tw'], $bd['rw'], $bd['bw'], $bd['lw']); } function _unpackCellBorder($bindata) { if (!$bindata) { return array(); } if (!$this->packTableData) { return $bindata; } $bd = unpack("nbord/nrs/drw/a6rca/A10rst/nrd/nls/dlw/a6lca/A10lst/nld/nts/dtw/a6tca/A10tst/ntd/nbs/dbw/a6bca/A10bst/nbd/dmbl/dmbr/dmrt/dmrb/dmtl/dmtr/dmlt/dmlb/dcpd", $bindata); $cell['border'] = $bd['bord']; $cell['border_details']['R']['s'] = $bd['rs']; $cell['border_details']['R']['w'] = $bd['rw']; $cell['border_details']['R']['c'] = $bd['rca']; $cell['border_details']['R']['style'] = trim($bd['rst']); $cell['border_details']['R']['dom'] = $bd['rd']; $cell['border_details']['L']['s'] = $bd['ls']; $cell['border_details']['L']['w'] = $bd['lw']; $cell['border_details']['L']['c'] = $bd['lca']; $cell['border_details']['L']['style'] = trim($bd['lst']); $cell['border_details']['L']['dom'] = $bd['ld']; $cell['border_details']['T']['s'] = $bd['ts']; $cell['border_details']['T']['w'] = $bd['tw']; $cell['border_details']['T']['c'] = $bd['tca']; $cell['border_details']['T']['style'] = trim($bd['tst']); $cell['border_details']['T']['dom'] = $bd['td']; $cell['border_details']['B']['s'] = $bd['bs']; $cell['border_details']['B']['w'] = $bd['bw']; $cell['border_details']['B']['c'] = $bd['bca']; $cell['border_details']['B']['style'] = trim($bd['bst']); $cell['border_details']['B']['dom'] = $bd['bd']; $cell['border_details']['mbw']['BL'] = $bd['mbl']; $cell['border_details']['mbw']['BR'] = $bd['mbr']; $cell['border_details']['mbw']['RT'] = $bd['mrt']; $cell['border_details']['mbw']['RB'] = $bd['mrb']; $cell['border_details']['mbw']['TL'] = $bd['mtl']; $cell['border_details']['mbw']['TR'] = $bd['mtr']; $cell['border_details']['mbw']['LT'] = $bd['mlt']; $cell['border_details']['mbw']['LB'] = $bd['mlb']; $cell['border_details']['cellposdom'] = $bd['cpd']; return($cell); } function _tableColumnWidth(&$table,$firstpass=false){ $cs = &$table['cells']; $nc = $table['nc']; $nr = $table['nr']; $listspan = array(); if ($table['borders_separate']) { $tblbw = $table['border_details']['L']['w'] + $table['border_details']['R']['w'] + $table['margin']['L'] + $table['margin']['R'] + $table['padding']['L'] + $table['padding']['R'] + $table['border_spacing_H']; } else { $tblbw = $table['max_cell_border_width']['L']/2 + $table['max_cell_border_width']['R']/2 + $table['margin']['L'] + $table['margin']['R']; } if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } else { $fh = null; } for($j = 0 ; $j < $nc ; $j++ ) { $wc = &$table['wc'][$j]; for($i = 0 ; $i < $nr ; $i++ ) { if (isset($cs[$i][$j]) && $cs[$i][$j]) { if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $c = &$cs[$i][$j]; if ($this->simpleTables){ if ($table['borders_separate']) { $extrcw = $table['simple']['border_details']['L']['w'] + $table['simple']['border_details']['R']['w'] + $c['padding']['L'] + $c['padding']['R'] + $table['border_spacing_H']; } else { $extrcw = $table['simple']['border_details']['L']['w']/2 + $table['simple']['border_details']['R']['w']/2 + $c['padding']['L'] + $c['padding']['R']; } } else { if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($c['borderbin']); } else { $br = $c['border_details']['R']['w']; $bl = $c['border_details']['L']['w']; } if ($table['borders_separate']) { $extrcw = $bl + $br + $c['padding']['L'] + $c['padding']['R'] + $table['border_spacing_H']; } else { $extrcw = $bl/2 + $br/2 + $c['padding']['L'] + $c['padding']['R']; } } $mw = 0; if(substr($c['a'],0,1) == 'D') { $mw = $table['decimal_align'][$j]['maxs0'] + $table['decimal_align'][$j]['maxs1'] + $extrcw ; } $c['absmiw'] = $mw; if (isset($c['R']) && $c['R']) { $c['maw'] = $c['miw'] = $this->FontSize + $extrcw ; if (isset($c['w'])) { if ($c['miw'] <$c['w']) { $c['miw'] = $c['w']; } } if (!isset($c['colspan'])) { if ($wc['miw'] < $c['miw']) { $wc['miw'] = $c['miw']; } if ($wc['maw'] < $c['maw']) { $wc['maw'] = $c['maw']; } if ($firstpass) { if (isset($table['l'][$j]) ) { $table['l'][$j] += $c['miw'] ; } else { $table['l'][$j] = $c['miw'] ; } } } if ($c['miw'] > $wc['miw']) { $wc['miw'] = $c['miw']; } if ($wc['miw'] > $wc['maw']) { $wc['maw'] = $wc['miw']; } continue; } if ($firstpass) { if (isset($c['s'])) { $c['s'] += $extrcw; } if (isset($c['maxs'])) { $c['maxs'] += $extrcw; } if (isset($c['nestedmiw'])) { $c['nestedmiw'] += $extrcw; } if (isset($c['nestedmaw'])) { $c['nestedmaw'] += $extrcw; } } if (isset($c['nestedmiw']) && $this->table[1][1]['overflow']!='visible') { $miw = $c['nestedmiw']; } else { $miw = $mw; } if (isset($c['maxs']) && $c['maxs'] != '') { $c['s'] = $c['maxs']; } if (isset($c['nestedmaw'])) { $c['maw'] = $c['nestedmaw']; } else $c['maw'] = $c['s']; if (isset($table['overflow']) && $table['overflow']=='visible' && $table['level']==1) { if (($c['maw'] + $tblbw) > $this->blk[$this->blklvl]['inner_width']) { $c['maw'] = $this->blk[$this->blklvl]['inner_width'] - $tblbw; } } if (isset($c['nowrap']) && $c['nowrap']) { $miw = $c['maw']; } if (isset($c['wpercent']) && $firstpass) { if (isset($c['colspan'])) { for($k=0;$k<$c['colspan'];$k++) { $table['wc'][($j+$k)]['wpercent'] = $c['wpercent'] / $c['colspan']; } } else { if (isset($table['w']) && $table['w']) { $c['w'] = $c['wpercent']/100 * ($table['w'] - $tblbw ); } $wc['wpercent'] = $c['wpercent']; } } if (isset($table['overflow']) && $table['overflow']=='visible' && $table['level']==1) { if (($c['w'] + $tblbw) > $this->blk[$this->blklvl]['inner_width']) { $c['w'] = $this->blk[$this->blklvl]['inner_width'] - $tblbw; } } if (isset($c['w'])) { if ($miw<$c['w']) { $c['miw'] = $c['w']; } if ($miw>$c['w']) { $c['miw'] = $c['w'] = $miw; } if (!isset($wc['w'])) { $wc['w'] = 1; } } else { $c['miw'] = $miw; } if ($c['maw'] < $c['miw']) { $c['maw'] = $c['miw']; } if (!isset($c['colspan'])) { if ($wc['miw'] < $c['miw']) { $wc['miw'] = $c['miw']; } if ($wc['maw'] < $c['maw']) { $wc['maw'] = $c['maw']; } if ((isset($wc['absmiw']) && $wc['absmiw'] < $c['absmiw']) || !isset($wc['absmiw'])) { $wc['absmiw'] = $c['absmiw']; } if (isset($table['l'][$j]) ) { $table['l'][$j] += $c['s']; } else { $table['l'][$j] = $c['s']; } } else { $listspan[] = array($i,$j); } if (isset($c['textbuffer']) && (!isset($table['overflow']) || $table['overflow']!='wrap')) { $minwidth = $this->TableCheckMinWidth($wc['miw']- $extrcw ,0,$c['textbuffer']); } else { $minwidth = 0; } if ($minwidth < 0) { if (!isset($c['colspan'])) { $wc['miw'] = max($wc['miw'],((-$minwidth) + $extrcw) ); } else { $c['miw'] = max($c['miw'],((-$minwidth) + $extrcw) ); } } if (!isset($c['colspan'])) { if ($wc['miw'] > $wc['maw']) { $wc['maw'] = $wc['miw']; } } if ($this->cacheTables) { $this->_cacheCell($c, '', "W", $fh, $table['cells'][$i][$j]); } } unset($c); } } $wc = &$table['wc']; foreach ($listspan as $span) { list($i,$j) = $span; if ($this->cacheTables) { $c = $this->_uncacheCell($cs[$i][$j], '', $fh); } else $c = &$cs[$i][$j]; $lc = $j + $c['colspan']; if ($lc > $nc) { $lc = $nc; } $wis = $wisa = 0; $was = $wasa = 0; $list = array(); for($k=$j;$k<$lc;$k++) { if (isset($table['l'][$k]) ) { if ($c['R']) { $table['l'][$k] += $c['miw']/$c['colspan'] ; } else { $table['l'][$k] += $c['s']/$c['colspan']; } } else { if ($c['R']) { $table['l'][$k] = $c['miw']/$c['colspan'] ; } else { $table['l'][$k] = $c['s']/$c['colspan']; } } $wis += $wc[$k]['miw']; $was += $wc[$k]['maw']; if (!isset($c['w'])) { $list[] = $k; $wisa += $wc[$k]['miw']; $wasa += $wc[$k]['maw']; } } if ($c['miw'] > $wis) { if (!$wis) { for($k=$j;$k<$lc;$k++) { $wc[$k]['miw'] = $c['miw']/$c['colspan']; } } else if (!count($list)) { $wi = $c['miw'] - $wis; for($k=$j;$k<$lc;$k++) { $wc[$k]['miw'] += ($wc[$k]['miw']/$wis)*$wi; } } else { $wi = $c['miw'] - $wis; foreach ($list as $k) { $wc[$k]['miw'] += ($wc[$k]['miw']/$wisa)*$wi; } } } if ($c['maw'] > $was) { if (!$wis) { for($k=$j;$k<$lc;$k++) { $wc[$k]['maw'] = $c['maw']/$c['colspan']; } } else if (!count($list)) { $wi = $c['maw'] - $was; for($k=$j;$k<$lc;$k++) { $wc[$k]['maw'] += ($wc[$k]['maw']/$was)*$wi; } } else { $wi = $c['maw'] - $was; foreach ($list as $k) { $wc[$k]['maw'] += ($wc[$k]['maw']/$wasa)*$wi; } } } unset($c); } if ($this->cacheTables) { fclose($fh); } $checkminwidth = 0; $checkmaxwidth = 0; $totallength = 0; for( $i = 0 ; $i < $nc ; $i++ ) { $checkminwidth += $table['wc'][$i]['miw']; $checkmaxwidth += $table['wc'][$i]['maw']; $totallength += $table['l'][$i]; } if (!isset($table['w']) && $firstpass) { $sumpc = 0; $notset = 0; for( $i = 0 ; $i < $nc ; $i++ ) { if (isset($table['wc'][$i]['wpercent']) && $table['wc'][$i]['wpercent']) { $sumpc += $table['wc'][$i]['wpercent']; } else { $notset++; } } if ($sumpc >= 100 && $notset) { for( $i = 0 ; $i < $nc ; $i++ ) { if ((!isset($table['wc'][$i]['wpercent']) || !$table['wc'][$i]['wpercent']) && (!isset($table['wc'][$i]['w']) || !$table['wc'][$i]['w'])) { $table['wc'][$i]['wpercent'] = 1; } } } if ($sumpc) { $sumnonpc = (100 - $sumpc); $sumpc = max($sumpc,100); $miwleft = 0; $miwleftcount = 0; $miwsurplusnonpc = 0; $maxcalcmiw = 0; $mawleft = 0; $mawleftcount = 0; $mawsurplusnonpc = 0; $maxcalcmaw = 0; for( $i = 0 ; $i < $nc ; $i++ ) { if (isset($table['wc'][$i]['wpercent'])) { $maxcalcmiw = max($maxcalcmiw, ($table['wc'][$i]['miw'] * $sumpc /$table['wc'][$i]['wpercent']) ); $maxcalcmaw = max($maxcalcmaw, ($table['wc'][$i]['maw'] * $sumpc /$table['wc'][$i]['wpercent']) ); } else { $miwleft += $table['wc'][$i]['miw']; $mawleft += $table['wc'][$i]['maw']; if (!isset($table['wc'][$i]['w'])) { $miwleftcount++; $mawleftcount++; } } } if ($miwleft && $sumnonpc > 0) { $miwnon = $miwleft * 100 / $sumnonpc; } if ($mawleft && $sumnonpc > 0) { $mawnon = $mawleft * 100 / $sumnonpc; } if (($miwnon > $checkminwidth || $maxcalcmiw > $checkminwidth) && $this->keep_table_proportions) { if ($miwnon > $maxcalcmiw) { $miwsurplusnonpc = round((($miwnon * $sumnonpc / 100) - $miwleft),3); $checkminwidth = $miwnon; } else { $checkminwidth = $maxcalcmiw; } for( $i = 0 ; $i < $nc ; $i++ ) { if (isset($table['wc'][$i]['wpercent'])) { $newmiw = $checkminwidth * $table['wc'][$i]['wpercent']/100; if ($table['wc'][$i]['miw'] < $newmiw) { $table['wc'][$i]['miw'] = $newmiw; } $table['wc'][$i]['w'] = 1; } else if ($miwsurplusnonpc && !$table['wc'][$i]['w']) { $table['wc'][$i]['miw'] += $miwsurplusnonpc / $miwleftcount; } } } if (($mawnon > $checkmaxwidth || $maxcalcmaw > $checkmaxwidth )) { if ($mawnon > $maxcalcmaw) { $mawsurplusnonpc = round((($mawnon * $sumnonpc / 100) - $mawleft),3); $checkmaxwidth = $mawnon; } else { $checkmaxwidth = $maxcalcmaw; } for( $i = 0 ; $i < $nc ; $i++ ) { if (isset($table['wc'][$i]['wpercent'])) { $newmaw = $checkmaxwidth * $table['wc'][$i]['wpercent']/100; if ($table['wc'][$i]['maw'] < $newmaw) { $table['wc'][$i]['maw'] = $newmaw; } $table['wc'][$i]['w'] = 1; } else if ($mawsurplusnonpc && !$table['wc'][$i]['w']) { $table['wc'][$i]['maw'] += $mawsurplusnonpc / $mawleftcount; } if ($table['wc'][$i]['maw'] < $table['wc'][$i]['miw']) { $table['wc'][$i]['maw'] = $table['wc'][$i]['miw']; } } } if ($checkminwidth > $checkmaxwidth) { $checkmaxwidth = $checkminwidth; } } } if (isset($table['wpercent']) && $table['wpercent']) { $checkminwidth *= (100 / $table['wpercent']); $checkmaxwidth *= (100 / $table['wpercent']); } $checkminwidth += $tblbw ; $checkmaxwidth += $tblbw ; if ((isset($table['miw']) && $checkminwidth > $table['miw']) || !isset($table['miw'])) { $table['miw'] = $checkminwidth; } if ((isset($table['maw']) && $checkmaxwidth > $table['maw']) || !isset($table['maw'])) { $table['maw'] = $checkmaxwidth; } $table['tl'] = $totallength ; if (!$this->tableCJK) { if ($this->table_rotate) { $mxw = $this->tbrot_maxw; } else { $mxw = $this->blk[$this->blklvl]['inner_width']; } if(!isset($table['overflow'])) { $table['overflow'] = null; } if ($table['overflow']=='visible') { return array(0,0); } else if ($table['overflow']=='hidden' && !$this->table_rotate && !$this->ColActive && $checkminwidth > $mxw) { $table['w'] = $table['miw']; return array(0,0); } else if ($table['overflow']=='wrap') { return array(0,0); } if (isset($table['w']) && $table['w'] ) { if ($table['w'] >= $checkminwidth && $table['w'] <= $mxw) { $table['maw'] = $mxw = $table['w']; } else if ($table['w'] >= $checkminwidth && $table['w'] > $mxw && $this->keep_table_proportions) { $checkminwidth = $table['w']; } else { unset($table['w']); } } $ratio = $checkminwidth/$mxw; if ($checkminwidth > $mxw) { return array(($ratio +0.001),$checkminwidth); } } unset($cs); return array(0,0); } function _tableWidth(&$table){ $widthcols = &$table['wc']; $numcols = $table['nc']; $tablewidth = 0; if ($table['borders_separate']) { $tblbw = $table['border_details']['L']['w'] + $table['border_details']['R']['w'] + $table['margin']['L'] + $table['margin']['R'] + $table['padding']['L'] + $table['padding']['R'] + $table['border_spacing_H']; } else { $tblbw = $table['max_cell_border_width']['L']/2 + $table['max_cell_border_width']['R']/2 + $table['margin']['L'] + $table['margin']['R']; } if ($table['level']>1 && isset($table['w'])) { if (isset($table['wpercent']) && $table['wpercent']) { $table['w'] = $temppgwidth = (($table['w']-$tblbw) * $table['wpercent'] / 100) + $tblbw ; } else { $temppgwidth = $table['w'] ; } } else if ($this->table_rotate) { $temppgwidth = $this->tbrot_maxw; $enddiv = $this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w']; if ($enddiv/$temppgwidth <0.05) { $temppgwidth -= $enddiv; } } else { if (isset($table['w']) && $table['w']< $this->blk[$this->blklvl]['inner_width']) { $notfullwidth = 1; $temppgwidth = $table['w'] ; } else if ($table['overflow']=='visible' && $table['level'] ==1) { $temppgwidth = null; } else if ($table['overflow']=='hidden' && !$this->ColActive && isset($table['w']) && $table['w'] > $this->blk[$this->blklvl]['inner_width'] && $table['w']==$table['miw']) { $temppgwidth = $table['w'] ; } else { $temppgwidth = $this->blk[$this->blklvl]['inner_width']; } } $totaltextlength = 0; $totalatextlength = 0; $percentages_set = 0; for ( $i = 0 ; $i < $numcols ; $i++ ) { if (isset($widthcols[$i]['wpercent'])) { $tablewidth += $widthcols[$i]['maw']; $percentages_set = 1; } else if (isset($widthcols[$i]['w'])) { $tablewidth += $widthcols[$i]['miw']; } else { $tablewidth += $widthcols[$i]['maw']; } $totaltextlength += $table['l'][$i]; } if (!$totaltextlength) { $totaltextlength =1; } $tablewidth += $tblbw; if ($tablewidth > $temppgwidth) { $table['w'] = $temppgwidth; } else if ($tablewidth < $temppgwidth && !isset($table['w']) && $percentages_set) { $table['w'] = $table['maw']; } if (isset($table['w']) && $table['w'] > $temppgwidth) { $table['w'] = $temppgwidth; } if (isset($table['w'])) { $wis = $wisa = 0; $list = array(); $notsetlist = array(); for( $i = 0 ; $i < $numcols ; $i++ ) { $wis += $widthcols[$i]['miw']; if (!isset($widthcols[$i]['w']) || ($widthcols[$i]['w'] && $table['w'] > $temppgwidth && !$this->keep_table_proportions && !$notfullwidth )){ $list[] = $i; $wisa += $widthcols[$i]['miw']; $totalatextlength += $table['l'][$i]; } } if (!$totalatextlength) { $totalatextlength =1; } if ($table['w'] > $wis + $tblbw) { if ($table['w'] < $temppgwidth || $this->keep_table_proportions) { for($k=0;$k<$numcols;$k++) { if (isset($widthcols[$k]['wpercent'])) { $curr = $widthcols[$k]['miw']; $widthcols[$k]['miw'] = ($table['w']-$tblbw) * $widthcols[$k]['wpercent']/100; $wis += $widthcols[$k]['miw'] - $curr; $wisa += $widthcols[$k]['miw'] - $curr; } } } $surplus = 0; $ttl = 0; if (!count($list)) { $wi = ($table['w']-($wis + $tblbw)); for($k=0;$k<$numcols;$k++) { $spareratio = ($table['l'][$k] / $totaltextlength); if ($widthcols[$k]['miw'] + ($wi * $spareratio) > $widthcols[$k]['maw']) { $surplus += ($wi * $spareratio) - ($widthcols[$k]['maw']-$widthcols[$k]['miw']); $widthcols[$k]['miw'] = $widthcols[$k]['maw']; } else { $notsetlist[] = $k; $ttl += $table['l'][$k]; $widthcols[$k]['miw'] += ($wi * $spareratio); } } } else { $wi = ($table['w'] - ($wis + $tblbw)); foreach ($list as $k) { $spareratio = ($table['l'][$k] / $totalatextlength); if ($widthcols[$k]['miw'] + ($wi * $spareratio) > $widthcols[$k]['maw']) { $surplus += ($wi * $spareratio) - ($widthcols[$k]['maw']-$widthcols[$k]['miw']); $widthcols[$k]['miw'] = $widthcols[$k]['maw']; } else { $notsetlist[] = $k; $ttl += $table['l'][$k]; $widthcols[$k]['miw'] += ($wi * $spareratio); } } } if ($surplus) { if (count($notsetlist) && count($notsetlist) < $numcols) { foreach ($notsetlist AS $i) { if ($ttl) $widthcols[$i]['miw'] += $surplus * $table['l'][$i] / $ttl ; } } else if (count($list) && count($list) < $numcols) { foreach ($list AS $i) { $widthcols[$i]['miw'] += $surplus / count($list) ; } } else if ($numcols) { $ttl = array_sum($table['l']); for ($i=0;$i<$numcols;$i++) { $widthcols[$i]['miw'] += $surplus * $table['l'][$i] / $ttl; } } } } for ($i=0;$i<$numcols;$i++) { $widthcols[$i] = $widthcols[$i]['miw']; } $checktablewidth = 0; for ( $i = 0 ; $i < $numcols ; $i++ ) { $checktablewidth += $widthcols[$i]; } if ($checktablewidth > ($temppgwidth + 0.001 - $tblbw)) { $usedup = 0; $numleft = 0; for ($i=0;$i<$numcols;$i++) { if ((isset($widthcols[$i]) && $widthcols[$i] > (($temppgwidth - $tblbw) / $numcols)) && (!isset($widthcols[$i]['w']))) { $numleft++; unset($widthcols[$i]); } else { $usedup += $widthcols[$i]; } } for ($i=0;$i<$numcols;$i++) { if (!isset($widthcols[$i]) || !$widthcols[$i]) { $widthcols[$i] = ((($temppgwidth - $tblbw) - $usedup)/ ($numleft)); } } } } else { $table['w'] = $tablewidth; for ( $i = 0 ; $i < $numcols ; $i++) { if (isset($widthcols[$i]['wpercent']) && $this->keep_table_proportions) { $colwidth = $widthcols[$i]['maw']; } else if (isset($widthcols[$i]['w'])) { $colwidth = $widthcols[$i]['miw']; } else { $colwidth = $widthcols[$i]['maw']; } unset($widthcols[$i]); $widthcols[$i] = $colwidth; } } if ($table['overflow']=='visible' && $table['level'] ==1) { if ($tablewidth > $this->blk[$this->blklvl]['inner_width']) { if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } else { $fh = null; } for ($j = 0 ; $j < $numcols; $j++) { for ($i = 0 ; $i < $table['nr']; $i++) { if (isset($table['cells'][$i][$j]) && $table['cells'][$i][$j]) { if ($this->cacheTables) { $cc = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); $colspan = $cc['colspan']; } else $colspan = $table['cells'][$i][$j]['colspan']; if ($colspan > 1) { $w = 0; for ($c = $j; $c < ($j + $colspan); $c++) { $w += $widthcols[$c]; } if ($w > $this->blk[$this->blklvl]['inner_width']) { $diff = $w - ($this->blk[$this->blklvl]['inner_width'] - $tblbw); for ($c = $j; $c < ($j + $colspan); $c++) { $widthcols[$c] -= $diff * ($widthcols[$c]/$w); } $table['w'] -= $diff; $table['csp'][$j] = $w - $diff; } } } } } if ($this->cacheTables) { fclose($fh); } } $pgNo = 0; $currWc = 0; for ($i = 0 ; $i < $numcols; $i++) { if (isset($table['csp'][$i])) { $w = $table['csp'][$i]; unset($table['csp'][$i]); } else { $w = $widthcols[$i]; } if (($currWc + $w + $tblbw) > $this->blk[$this->blklvl]['inner_width']) { $pgNo++; $currWc = $widthcols[$i] ; } else { $currWc += $widthcols[$i] ; } $table['colPg'][$i] = $pgNo; } } } function _tableHeight(&$table){ $level = $table['level']; $levelid = $table['levelid']; $cells = &$table['cells']; $numcols = $table['nc']; $numrows = $table['nr']; $listspan = array(); $checkmaxheight = 0; $headerrowheight = 0; $checkmaxheightplus = 0; $headerrowheightplus = 0; $firstrowheight = 0; $footerrowheight = 0; $footerrowheightplus = 0; if ($this->table_rotate) { $temppgheight = $this->tbrot_maxh; $remainingpage = $this->tbrot_maxh; } else { $temppgheight = ($this->h - $this->bMargin - $this->tMargin) - $this->kwt_height; $remainingpage = ($this->h - $this->bMargin - $this->y) - $this->kwt_height; $enddiv = $this->blk[$this->blklvl]['padding_bottom'] + $this->blk[$this->blklvl]['border_bottom']['w'] + $table['margin']['B']; if ($remainingpage > $enddiv && $enddiv/$remainingpage <0.05) { $remainingpage -= $enddiv; } else if ($remainingpage == 0) { $remainingpage = 0.001; } if ($temppgheight > $enddiv && $enddiv/$temppgheight <0.05) { $temppgheight -= $enddiv; } else if ($temppgheight == 0) { $temppgheight = 0.001; } } if ($remainingpage < 0) { $remainingpage = 0.001; } if ($temppgheight < 0) { $temppgheight = 0.001; } if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } else { $fh = null; } for( $i = 0 ; $i < $numrows ; $i++ ) { $heightrow = &$table['hr'][$i]; for( $j = 0 ; $j < $numcols ; $j++ ) { if (isset($cells[$i][$j]) && $cells[$i][$j]) { if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $c = &$cells[$i][$j]; if ($this->simpleTables){ if ($table['borders_separate']) { $extraWLR = ($table['simple']['border_details']['L']['w']+$table['simple']['border_details']['R']['w']) + ($c['padding']['L']+$c['padding']['R'])+$table['border_spacing_H']; $extrh = ($table['simple']['border_details']['T']['w']+$table['simple']['border_details']['B']['w']) + ($c['padding']['T']+$c['padding']['B'])+$table['border_spacing_V']; } else { $extraWLR = ($table['simple']['border_details']['L']['w']+$table['simple']['border_details']['R']['w'])/2 + ($c['padding']['L']+$c['padding']['R']); $extrh = ($table['simple']['border_details']['T']['w']+$table['simple']['border_details']['B']['w'])/2 + ($c['padding']['T']+$c['padding']['B']); } } else { if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($c['borderbin']); } else { $bt = $c['border_details']['T']['w']; $bb = $c['border_details']['B']['w']; $br = $c['border_details']['R']['w']; $bl = $c['border_details']['L']['w']; } if ($table['borders_separate']) { $extraWLR = $bl + $br + $c['padding']['L'] + $c['padding']['R'] + $table['border_spacing_H']; $extrh = $bt + $bb + $c['padding']['T'] + $c['padding']['B'] + $table['border_spacing_V']; } else { $extraWLR = $bl/2 + $br/2 + $c['padding']['L'] + $c['padding']['R']; $extrh = $bt/2 + $bb/2 + $c['padding']['T']+$c['padding']['B']; } } if ($table['overflow']=='visible' && $level==1) list($x,$cw) = $this->_splitTableGetWidth($table, $i,$j, $fh); else list($x,$cw) = $this->_tableGetWidth($table, $i,$j, $fh); if ($c['R'] && isset($c['textbuffer'])) { $str = ''; foreach($c['textbuffer'] AS $t) { $str .= $t[0].' '; } $str = trim($str); $s_fs = $this->FontSizePt; $s_f = $this->FontFamily; $s_st = $this->FontStyle; $this->SetFont($c['textbuffer'][0][4],$c['textbuffer'][0][2],$c['textbuffer'][0][11] / $this->shrin_k,true,true); $tempch = $this->GetStringWidth($str); if ($c['R'] >= 45 && $c['R'] < 90) { $tempch = ((sin(deg2rad($c['R']))) * $tempch ) + ((sin(deg2rad($c['R']))) * (($c['textbuffer'][0][11]/_MPDFK) / $this->shrin_k)); } $this->SetFont($s_f,$s_st,$s_fs,true,true); $ch = ($tempch ) + $extrh ; } else { if (isset($c['textbuffer'])) { $tempch = $this->TableWordWrap(($cw-$extraWLR),1,$c['textbuffer'], $c['dfs']); } else { $tempch = 0; } $ch = $tempch + $extrh ; } if (isset($c['h']) && $c['h'] > $ch) { $c['mih'] = $ch; $ch = $c['h']; } else $c['mih'] = $ch; if ($this->cacheTables) { $this->_cacheUpdateMtx($c, $fh, $table['cells'][$i][$j], 'mih'); } if (isset($c['rowspan'])) $listspan[] = array($i,$j); elseif ($heightrow < $ch) $heightrow = $ch; if ($table['borders_separate']) { if ($i == ($numrows-1) || (isset($c['rowspan']) && ($i+$c['rowspan']) == ($numrows)) ) { $extra = $table['margin']['B'] + $table['padding']['B'] + $table['border_details']['B']['w'] + $table['border_spacing_V']/2; } else { $extra = $table['border_spacing_V']/2; } } else { if (!$this->simpleTables){ $extra = $bb/2; } else if ($this->simpleTables){ $extra = $table['simple']['border_details']['B']['w'] /2; } } if (isset($table['is_thead'][$i]) && $table['is_thead'][$i]) { if ($j==0) { $headerrowheight += $ch; $headerrowheightplus += $ch+$extra; } } else if (isset($table['is_tfoot'][$i]) && $table['is_tfoot'][$i]) { if ($j==0) { $footerrowheight += $ch; $footerrowheightplus += $ch+$extra; } } else { $checkmaxheight = max($checkmaxheight,$ch); $checkmaxheightplus = max($checkmaxheightplus,$ch+$extra); } if ($this->tableLevel==1 && $i == $table['headernrows']) { $firstrowheight = max($ch,$firstrowheight); } unset($c); } } } $heightrow = &$table['hr']; foreach ($listspan as $span) { list($i,$j) = $span; if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $c = &$cells[$i][$j]; $lr = $i + $c['rowspan']; if ($lr > $numrows) $lr = $numrows; $hs = $hsa = 0; $list = array(); for($k=$i;$k<$lr;$k++) { $hs += $heightrow[$k]; if (!isset($c['h'])) { $list[] = $k; $hsa += $heightrow[$k]; } } if ($table['borders_separate']) { if ($i == ($numrows-1) || ($i+$c['rowspan']) == ($numrows) ) { $extra = $table['margin']['B'] + $table['padding']['B'] + $table['border_details']['B']['w'] + $table['border_spacing_V']/2; } else { $extra = $table['border_spacing_V']/2; } } else { if (!$this->simpleTables){ if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($c['borderbin']); } else { $bb = $c['border_details']['B']['w']; } $extra = $bb/2; } else if ($this->simpleTables){ $extra = $table['simple']['border_details']['B']['w'] /2; } } if (!empty($table['is_thead'][$i])) { $headerrowheight = max($headerrowheight,$hs); $headerrowheightplus = max($headerrowheightplus,$hs+$extra); } else if (!empty($table['is_tfoot'][$i])) { $footerrowheight = max($footerrowheight,$hs); $footerrowheightplus = max($footerrowheightplus,$hs+$extra); } else { $checkmaxheight = max($checkmaxheight,$hs); $checkmaxheightplus = max($checkmaxheightplus,$hs+$extra); } if ($this->tableLevel==1 && $i == $table['headernrows']) { $firstrowheight = max($hs,$firstrowheight); } if ($c['mih'] > $hs) { if (!$hs) { for($k=$i;$k<$lr;$k++) $heightrow[$k] = $c['mih']/$c['rowspan']; } elseif (!count($list)) { $hi = $c['mih'] - $hs; for($k=$i;$k<$lr;$k++) $heightrow[$k] += ($heightrow[$k]/$hs)*$hi; } else { $hi = $c['mih'] - $hsa; foreach ($list as $k) $heightrow[$k] += ($heightrow[$k]/$hsa)*$hi; } } unset($c); if ($heightrow[$i]==0) { $top = $i; foreach ($listspan as $checkspan) { list($cki,$ckj) = $checkspan; if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$cki][$ckj], '', $fh); } else $c = &$cells[$cki][$ckj]; if (isset($c['rowspan']) && $c['rowspan']>1) { if (($cki + $c['rowspan']-1) >= $i) { $top = min($top, $cki); } } } $bottom = $i + $c['rowspan']-1; for ($k=$top; $k<=$bottom; $k++) { if ($k != $i && $heightrow[$k]==0) { break(1); } if ($k==$top) { for( $m = 0 ; $m < $numcols ; $m++ ) { if (!isset($cells[$k][$m]) || $cells[$k][$m]==0) { break(2); } } } else if ($k==$bottom) { for( $m = 0 ; $m < $numcols ; $m++ ) { if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$k][$m], '', $fh); } else $c = &$cells[$k][$m]; if (isset($c['rowspan']) && $c['rowspan']>1) { break(2); } } } } $colH = array(); $extH = 0; $newhr = array(); for( $m = 0 ; $m < $numcols ; $m++ ) { for ($k=$top; $k<=$bottom; $k++) { if (isset($cells[$k][$m]) && $cells[$k][$m]!=0) { if ($this->cacheTables) { $c = $this->_uncacheCell($table['cells'][$k][$m], '', $fh); } else $c = &$cells[$k][$m]; if (isset($c['h']) && $c['h']) { $useh = $c['h']; } else { $useh = $c['mih']; } $colH[$m] += $useh; if (!isset($c['rowspan']) || $c['rowspan']<2) { $newhr[$k] = max($newhr[$k], $useh); } } } $extH = max($tabH, $colH[$m]); } $newhr[$i] = $extH - array_sum($newhr); for ($k=$top; $k<=$bottom; $k++) { $heightrow[$k] = $newhr[$k]; } } unset($c); } $table['h'] = array_sum($heightrow); unset($heightrow); if ($this->cacheTables) { fclose($fh); } if ($table['borders_separate']) { $table['h'] += $table['margin']['T'] + $table['margin']['B'] + $table['border_details']['T']['w'] + $table['border_details']['B']['w'] + $table['border_spacing_V'] + $table['padding']['T'] + $table['padding']['B']; } else { $table['h'] += $table['margin']['T'] + $table['margin']['B'] + $table['max_cell_border_width']['T']/2 + $table['max_cell_border_width']['B']/2; } $maxrowheight = $checkmaxheightplus + $headerrowheightplus + $footerrowheightplus; $maxfirstrowheight = $firstrowheight + $headerrowheightplus + $footerrowheightplus; return array($table['h'],$maxrowheight,$temppgheight,$remainingpage,$maxfirstrowheight); } function _tableGetWidth(&$table, $i,$j, $fh){ if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$table['cells'][$i][$j]; if ($cell) { if (isset($cell['x0'])) { return array($cell['x0'], $cell['w0']); } $x = 0; $widthcols = &$table['wc']; for( $k = 0 ; $k < $j ; $k++ ) $x += $widthcols[$k]; $w = $widthcols[$j]; if (isset($cell['colspan'])) { for ( $k = $j+$cell['colspan']-1 ; $k > $j ; $k-- ) $w += $widthcols[$k]; } $cell['x0'] = $x; $cell['w0'] = $w; if ($this->cacheTables) { $this->_cacheUpdateMtx($cell, $fh, $table['cells'][$i][$j], 'x0'); } return array($x, $w); } return array(0,0); } function _splitTableGetWidth(&$table, $i,$j, $fh){ if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$table['cells'][$i][$j]; if ($cell) { if (isset($cell['x0'])) return array($cell['x0'], $cell['w0']); $x = 0; $widthcols = &$table['wc']; $pg = $table['colPg'][$j]; for( $k = 0 ; $k < $j ; $k++ ) { if ($table['colPg'][$k]==$pg) $x += $widthcols[$k]; } $w = $widthcols[$j]; if (isset($cell['colspan'])) { for ( $k = $j+$cell['colspan']-1 ; $k > $j ; $k-- ) if ($table['colPg'][$k]==$pg) $w += $widthcols[$k]; } $cell['x0'] = $x; $cell['w0'] = $w; if ($this->cacheTables) { $this->_cacheUpdateMtx($cell, $fh, $table['cells'][$i][$j], 'x0'); } return array($x, $w); } return array(0,0); } function _tableGetHeight(&$table, $i,$j, $fh){ if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$table['cells'][$i][$j]; if ($cell){ if (isset($cell['y0'])) return array($cell['y0'], $cell['h0']); $y = 0; $heightrow = &$table['hr']; for ($k=0;$k<$i;$k++) $y += $heightrow[$k]; $h = $heightrow[$i]; if (isset($cell['rowspan'])){ for ($k=$i+$cell['rowspan']-1;$k>$i;$k--) $h += $heightrow[$k]; } $cell['y0'] = $y; $cell['h0'] = $h; if ($this->cacheTables) { $this->_cacheUpdateMtx($cell, $fh, $table['cells'][$i][$j], 'y0'); } return array($y, $h); } return array(0,0); } function _tableGetMaxRowHeight($table, $row, $fh) { if ($row==$table['nc']-1) { return $table['hr'][$row]; } $maxrowheight = $table['hr'][$row]; for ($i=$row+1;$i<$table['nr'];$i++) { $cellsset = 0; for ($j=0;$j<$table['nc'];$j++) { if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); if ($cell) { if (isset($cell['colspan'])) { $cellsset += $cell['colspan']; } else $cellsset += 1; } } else { if ($table['cells'][$i][$j]) { if (isset($table['cells'][$i][$j]['colspan'])) { $cellsset += $table['cells'][$i][$j]['colspan']; } else $cellsset += 1; } } } if ($cellsset == $table['nc']) { return $maxrowheight; } else { $maxrowheight += $table['hr'][$i]; } } return $maxrowheight; } function _tableRect($x, $y, $w, $h, $bord=-1, $details=array(), $buffer=false, $bSeparate=false, $cort='cell', $tablecorner='', $bsv=0, $bsh=0) { $cellBorderOverlay = array(); if ($bord==-1) { $this->Rect($x, $y, $w, $h); } else if ($this->simpleTables && ($cort=='cell')) { $this->SetLineWidth($details['L']['w']); if ($details['L']['c']) { $this->SetDColor($details['L']['c']); } else { $this->SetDColor($this->ConvertColor(0)); } $this->SetLineJoin(0); $this->Rect($x, $y, $w, $h); } else if ($bord){ if (!$bSeparate && $buffer) { $priority = 'LRTB'; for($p=0;$p<strlen($priority);$p++) { $side = $priority[$p]; $details['p'] = $side ; $dom = 0; if (isset($details[$side]['w'])) { $dom += ($details[$side]['w'] * 100000); } if (isset($details[$side]['style'])) { $dom += (array_search($details[$side]['style'],$this->borderstyles)*100) ; } if (isset($details[$side]['dom'])) { $dom += ($details[$side]['dom']*10); } $coldom = 0; if (isset($details[$side]['c']) && is_array($details[$side]['c'])) { if ($details[$side]['c']{0}==3) { $coldom = 10-(((ord($details[$side]['c']{1})*1.00)+(ord($details[$side]['c']{2})*1.00)+(ord($details[$side]['c']{3})*1.00))/76.5); } } if ($coldom) { $dom += $coldom; } if (isset($details['cellposdom'])) { $dom += $details['cellposdom']; } $save = false; if ($side == 'T' && $this->issetBorder($bord, _BORDER_TOP)) { $cbord = _BORDER_TOP; $save = true; } else if ($side == 'L' && $this->issetBorder($bord, _BORDER_LEFT)) { $cbord = _BORDER_LEFT; $save = true; } else if ($side == 'R' && $this->issetBorder($bord, _BORDER_RIGHT)) { $cbord = _BORDER_RIGHT; $save = true; } else if ($side == 'B' && $this->issetBorder($bord, _BORDER_BOTTOM)) { $cbord = _BORDER_BOTTOM; $save = true; } if ($save) { $this->cellBorderBuffer[] = pack("A16nCnda6A10d14", str_pad(sprintf("%08.7f", $dom),16,"0",STR_PAD_LEFT), $cbord, ord($side), $details[$side]['s'], $details[$side]['w'], $details[$side]['c'], $details[$side]['style'], $x, $y, $w, $h, $details['mbw']['BL'], $details['mbw']['BR'], $details['mbw']['RT'], $details['mbw']['RB'], $details['mbw']['TL'], $details['mbw']['TR'], $details['mbw']['LT'], $details['mbw']['LB'], $details['cellposdom'], 0 ); if ($details[$side]['style'] == 'ridge' || $details[$side]['style'] == 'groove' || $details[$side]['style'] == 'inset' || $details[$side]['style'] == 'outset' || $details[$side]['style'] == 'double' ) { $details[$side]['overlay'] = true; $this->cellBorderBuffer[] = pack("A16nCnda6A10d14", str_pad(sprintf("%08.7f", ($dom+4)),16,"0",STR_PAD_LEFT), $cbord, ord($side), $details[$side]['s'], $details[$side]['w'], $details[$side]['c'], $details[$side]['style'], $x, $y, $w, $h, $details['mbw']['BL'], $details['mbw']['BR'], $details['mbw']['RT'], $details['mbw']['RB'], $details['mbw']['TL'], $details['mbw']['TR'], $details['mbw']['LT'], $details['mbw']['LB'], $details['cellposdom'], 1 ); } } } return; } if (isset($details['p']) && strlen($details['p'])>1) { $priority = $details['p']; } else { $priority='LTRB'; } $Tw = 0; $Rw = 0; $Bw = 0; $Lw = 0; if (isset($details['T']['w'])) { $Tw = $details['T']['w']; } if (isset($details['R']['w'])) { $Rw = $details['R']['w']; } if (isset($details['B']['w'])) { $Bw = $details['B']['w']; } if (isset($details['L']['w'])) { $Lw = $details['L']['w']; } $x2 = $x + $w; $y2 = $y + $h; $oldlinewidth = $this->LineWidth; for($p=0;$p<strlen($priority);$p++) { $side = $priority[$p]; $xadj = 0; $xadj2 = 0; $yadj = 0; $yadj2 = 0; $print = false; if ($Tw && $side=='T' && $this->issetBorder($bord, _BORDER_TOP)) { $ly1 = $y; $ly2 = $y; $lx1 = $x; $lx2 = $x2; $this->SetLineWidth($Tw); if ($cort == 'cell' || strpos($tablecorner,'L')!==false) { if ($Tw > $Lw) $xadj = ($Tw - $Lw)/2; if ($Tw < $Lw) $xadj = ($Tw + $Lw)/2; } else { $xadj = $Tw/2 - $bsh/2; } if ($cort == 'cell' || strpos($tablecorner,'R')!==false) { if ($Tw > $Rw) $xadj2 = ($Tw - $Rw)/2; if ($Tw < $Rw) $xadj2 = ($Tw + $Rw)/2; } else { $xadj2 = $Tw/2 - $bsh/2; } if (!$bSeparate && $details['mbw']['TL']) { $xadj = ($Tw - $details['mbw']['TL'])/2 ; } if (!$bSeparate && $details['mbw']['TR']) { $xadj2 = ($Tw - $details['mbw']['TR'])/2; } $print = true; } if ($Lw && $side=='L' && $this->issetBorder($bord, _BORDER_LEFT)) { $ly1 = $y; $ly2 = $y2; $lx1 = $x; $lx2 = $x; $this->SetLineWidth($Lw); if ($cort == 'cell' || strpos($tablecorner,'T')!==false) { if ($Lw > $Tw) $yadj = ($Lw - $Tw)/2; if ($Lw < $Tw) $yadj = ($Lw + $Tw)/2; } else { $yadj = $Lw/2 - $bsv/2; } if ($cort == 'cell' || strpos($tablecorner,'B')!==false) { if ($Lw > $Bw) $yadj2 = ($Lw - $Bw)/2; if ($Lw < $Bw) $yadj2 = ($Lw + $Bw)/2; } else { $yadj2 = $Lw/2 - $bsv/2; } if (!$bSeparate && $details['mbw']['LT']) { $yadj = ($Lw - $details['mbw']['LT'])/2; } if (!$bSeparate && $details['mbw']['LB']) { $yadj2 = ($Lw - $details['mbw']['LB'])/2; } $print = true; } if ($Rw && $side=='R' && $this->issetBorder($bord, _BORDER_RIGHT)) { $ly1 = $y; $ly2 = $y2; $lx1 = $x2; $lx2 = $x2; $this->SetLineWidth($Rw); if ($cort == 'cell' || strpos($tablecorner,'T')!==false) { if ($Rw < $Tw) $yadj = ($Rw + $Tw)/2; if ($Rw > $Tw) $yadj = ($Rw - $Tw)/2; } else { $yadj = $Rw/2 - $bsv/2; } if ($cort == 'cell' || strpos($tablecorner,'B')!==false) { if ($Rw > $Bw) $yadj2 = ($Rw - $Bw)/2; if ($Rw < $Bw) $yadj2 = ($Rw + $Bw)/2; } else { $yadj2 = $Rw/2 - $bsv/2; } if (!$bSeparate && $details['mbw']['RT']) { $yadj = ($Rw - $details['mbw']['RT'])/2; } if (!$bSeparate && $details['mbw']['RB']) { $yadj2 = ($Rw - $details['mbw']['RB'])/2; } $print = true; } if ($Bw && $side=='B' && $this->issetBorder($bord, _BORDER_BOTTOM)) { $ly1 = $y2; $ly2 = $y2; $lx1 = $x; $lx2 = $x2; $this->SetLineWidth($Bw); if ($cort == 'cell' || strpos($tablecorner,'L')!==false) { if ($Bw > $Lw) $xadj = ($Bw - $Lw)/2; if ($Bw < $Lw) $xadj = ($Bw + $Lw)/2; } else { $xadj = $Bw/2 - $bsh/2; } if ($cort == 'cell' || strpos($tablecorner,'R')!==false) { if ($Bw > $Rw) $xadj2 = ($Bw - $Rw)/2; if ($Bw < $Rw) $xadj2 = ($Bw + $Rw)/2; } else { $xadj2 = $Bw/2 - $bsh/2; } if (!$bSeparate && $details['mbw']['BL']) { $xadj = ($Bw - $details['mbw']['BL'])/2; } if (!$bSeparate && $details['mbw']['BR']) { $xadj2 = ($Bw - $details['mbw']['BR'])/2; } $print = true; } if ($print) { if ($details[$side]['style'] == 'double') { if (!isset($details[$side]['overlay']) || !$details[$side]['overlay'] || $bSeparate) { if ($details[$side]['c']) { $this->SetDColor($details[$side]['c']); } else { $this->SetDColor($this->ConvertColor(0)); } $this->Line($lx1 + $xadj, $ly1 + $yadj, $lx2 - $xadj2, $ly2 - $yadj2); } if ((isset($details[$side]['overlay']) && $details[$side]['overlay']) || $bSeparate) { if ($bSeparate && $cort=='table') { if ($side=='T') { $xadj -= $this->LineWidth/2; $xadj2 -= $this->LineWidth; if ($this->issetBorder($bord, _BORDER_LEFT)) { $xadj += $this->LineWidth/2; } if ($this->issetBorder($bord, _BORDER_RIGHT)) { $xadj2 += $this->LineWidth; } } if ($side=='L') { $yadj -= $this->LineWidth/2; $yadj2 -= $this->LineWidth; if ($this->issetBorder($bord, _BORDER_TOP)) { $yadj += $this->LineWidth/2; } if ($this->issetBorder($bord, _BORDER_BOTTOM)) { $yadj2 += $this->LineWidth; } } if ($side=='B') { $xadj -= $this->LineWidth/2; $xadj2 -= $this->LineWidth; if ($this->issetBorder($bord, _BORDER_LEFT)) { $xadj += $this->LineWidth/2; } if ($this->issetBorder($bord, _BORDER_RIGHT)) { $xadj2 += $this->LineWidth; } } if ($side=='R') { $yadj -= $this->LineWidth/2; $yadj2 -= $this->LineWidth; if ($this->issetBorder($bord, _BORDER_TOP)) { $yadj += $this->LineWidth/2; } if ($this->issetBorder($bord, _BORDER_BOTTOM)) { $yadj2 += $this->LineWidth; } } } $this->SetLineWidth($this->LineWidth/3); $tbcol = $this->ConvertColor(255); for($l=0; $l <= $this->blklvl; $l++) { if ($this->blk[$l]['bgcolor']) { $tbcol = ($this->blk[$l]['bgcolorarray']); } } if ($bSeparate) { $cellBorderOverlay[] = array( 'x' => $lx1 + $xadj, 'y' => $ly1 + $yadj, 'x2' => $lx2 - $xadj2, 'y2' => $ly2 - $yadj2, 'col' => $tbcol, 'lw' => $this->LineWidth, ); } else { $this->SetDColor($tbcol); $this->Line($lx1 + $xadj, $ly1 + $yadj, $lx2 - $xadj2, $ly2 - $yadj2); } } } else if (isset($details[$side]['style']) && ($details[$side]['style'] == 'ridge' || $details[$side]['style'] == 'groove' || $details[$side]['style'] == 'inset' || $details[$side]['style'] == 'outset')) { if (!isset($details[$side]['overlay']) || !$details[$side]['overlay'] || $bSeparate) { if ($details[$side]['c']) { $this->SetDColor($details[$side]['c']); } else { $this->SetDColor($this->ConvertColor(0)); } if ($details[$side]['style'] == 'outset' || $details[$side]['style'] == 'groove') { $nc = $this->_darkenColor($details[$side]['c']); $this->SetDColor($nc); } else if ($details[$side]['style'] == 'ridge' || $details[$side]['style'] == 'inset') { $nc = $this->_lightenColor($details[$side]['c']); $this->SetDColor($nc); } $this->Line($lx1 + $xadj, $ly1 + $yadj, $lx2 - $xadj2, $ly2 - $yadj2); } if ((isset($details[$side]['overlay']) && $details[$side]['overlay']) || $bSeparate) { if ($details[$side]['c']) { $this->SetDColor($details[$side]['c']); } else { $this->SetDColor($this->ConvertColor(0)); } $doubleadj = ($this->LineWidth)/3; $this->SetLineWidth($this->LineWidth/2); $xadj3 = $yadj3 = $wadj3 = $hadj3 = 0; if ($details[$side]['style'] == 'ridge' || $details[$side]['style'] == 'inset') { $nc = $this->_darkenColor($details[$side]['c']); if ($bSeparate && $cort=='table') { if ($side=='T') { $yadj3 = $this->LineWidth/2; $xadj3 = -$this->LineWidth/2; $wadj3 = $this->LineWidth; if ($this->issetBorder($bord, _BORDER_LEFT)) { $xadj3 += $this->LineWidth; $wadj3 -= $this->LineWidth; } if ($this->issetBorder($bord, _BORDER_RIGHT)) { $wadj3 -= $this->LineWidth*2; } } if ($side=='L') { $xadj3 = $this->LineWidth/2; $yadj3 = -$this->LineWidth/2; $hadj3 = $this->LineWidth; if ($this->issetBorder($bord, _BORDER_TOP)) { $yadj3 += $this->LineWidth; $hadj3 -= $this->LineWidth; } if ($this->issetBorder($bord, _BORDER_BOTTOM)) { $hadj3 -= $this->LineWidth*2; } } if ($side=='B') { $yadj3 = $this->LineWidth/2; $xadj3 = -$this->LineWidth/2; $wadj3 = $this->LineWidth; } if ($side=='R') { $xadj3 = $this->LineWidth/2; $yadj3 = -$this->LineWidth/2; $hadj3 = $this->LineWidth; } } else if ($side=='T') { $yadj3 = $this->LineWidth/2; $xadj3 = $this->LineWidth/2; $wadj3 = -$this->LineWidth*2; } else if ($side=='L') { $xadj3 = $this->LineWidth/2; $yadj3 = $this->LineWidth/2; $hadj3 = -$this->LineWidth*2; } else if ($side=='B' && $bSeparate) { $yadj3 = $this->LineWidth/2; $wadj3 = $this->LineWidth/2; } else if ($side=='R' && $bSeparate) { $xadj3 = $this->LineWidth/2; $hadj3 = $this->LineWidth/2; } else if ($side=='B') { $yadj3 = $this->LineWidth/2; $xadj3 = $this->LineWidth/2; } else if ($side=='R') { $xadj3 = $this->LineWidth/2; $yadj3 = $this->LineWidth/2; } } else { $nc = $this->_lightenColor($details[$side]['c']); if ($bSeparate && $cort=='table') { if ($side=='T') { $yadj3 = $this->LineWidth/2; $xadj3 = -$this->LineWidth/2; $wadj3 = $this->LineWidth; if ($this->issetBorder($bord, _BORDER_LEFT)) { $xadj3 += $this->LineWidth; $wadj3 -= $this->LineWidth; } } if ($side=='L') { $xadj3 = $this->LineWidth/2; $yadj3 = -$this->LineWidth/2; $hadj3 = $this->LineWidth; if ($this->issetBorder($bord, _BORDER_TOP)) { $yadj3 += $this->LineWidth; $hadj3 -= $this->LineWidth; } } if ($side=='B') { $yadj3 = $this->LineWidth/2; $xadj3 = -$this->LineWidth/2; $wadj3 = $this->LineWidth; if ($this->issetBorder($bord, _BORDER_LEFT)) { $xadj3 += $this->LineWidth; $wadj3 -= $this->LineWidth; } } if ($side=='R') { $xadj3 = $this->LineWidth/2; $yadj3 = -$this->LineWidth/2; $hadj3 = $this->LineWidth; if ($this->issetBorder($bord, _BORDER_TOP)) { $yadj3 += $this->LineWidth; $hadj3 -= $this->LineWidth; } } } else if ($side=='T') { $yadj3 = $this->LineWidth/2; $xadj3 = $this->LineWidth/2; } else if ($side=='L') { $xadj3 = $this->LineWidth/2; $yadj3 = $this->LineWidth/2; } else if ($side=='B' && $bSeparate) { $yadj3 = $this->LineWidth/2; $xadj3 = $this->LineWidth/2; } else if ($side=='R' && $bSeparate) { $xadj3 = $this->LineWidth/2; $yadj3 = $this->LineWidth/2; } else if ($side=='B') { $yadj3 = $this->LineWidth/2; $xadj3 = -$this->LineWidth/2; $wadj3 = $this->LineWidth; } else if ($side=='R') { $xadj3 = $this->LineWidth/2; $yadj3 = -$this->LineWidth/2; $hadj3 = $this->LineWidth; } } if ($bSeparate) { $cellBorderOverlay[] = array( 'x' => $lx1 + $xadj + $xadj3, 'y' => $ly1 + $yadj + $yadj3, 'x2' => $lx2 - $xadj2 + $xadj3 + $wadj3, 'y2' => $ly2 - $yadj2 + $yadj3 + $hadj3, 'col' => $nc, 'lw' => $this->LineWidth, ); } else { $this->SetDColor($nc); $this->Line($lx1 + $xadj + $xadj3, $ly1 + $yadj + $yadj3, $lx2 - $xadj2 + $xadj3 + $wadj3, $ly2 - $yadj2 + $yadj3 + $hadj3); } } } else { if ($details[$side]['style'] == 'dashed') { $dashsize = 2; $dashsizek = 1.5; $this->SetDash($dashsize,($dashsize/$dashsizek)+($this->LineWidth*2)); } else if ($details[$side]['style'] == 'dotted') { $this->SetLineJoin(1); $this->SetLineCap(1); $this->SetDash(0.001,($this->LineWidth*2)); } if ($details[$side]['c']) { $this->SetDColor($details[$side]['c']); } else { $this->SetDColor($this->ConvertColor(0)); } $this->Line($lx1 + $xadj, $ly1 + $yadj, $lx2 - $xadj2, $ly2 - $yadj2); } $this->SetDash(); $this->SetLineCap(2); } } if ($bSeparate && count($cellBorderOverlay)) { foreach($cellBorderOverlay AS $cbo) { $this->SetLineWidth($cbo['lw']); $this->SetDColor($cbo['col']); $this->Line($cbo['x'], $cbo['y'], $cbo['x2'], $cbo['y2']); } } } } function _lightenColor($c) { if (is_array($c)) { die('Color error in _lightencolor'); } if ($c{0}==3 || $c{0}==5) { list($h,$s,$l) = $this->rgb2hsl(ord($c{1})/255,ord($c{2})/255,ord($c{3})/255); $l += ((1 - $l)*0.8); list($r,$g,$b) = $this->hsl2rgb($h,$s,$l); $ret = array(3,$r,$g,$b); } else if ($c{0}==4 || $c{0}==6) { $ret = array(4, max(0,(ord($c{1})-20)), max(0,(ord($c{2})-20)), max(0,(ord($c{3})-20)), max(0,(ord($c{4})-20)) ); } else if ($c{0}==1) { $ret = array(1,min(255,(ord($c{1})+32))); } $c = array_pad($ret, 6, 0); $cstr = pack("a1ccccc", $c[0], ($c[1] & 0xFF), ($c[2] & 0xFF), ($c[3] & 0xFF), ($c[4] & 0xFF), ($c[5] & 0xFF) ); return $cstr; } function _darkenColor($c) { if (is_array($c)) { die('Color error in _darkenColor'); } if ($c{0}==3 || $c{0}==5) { list($h,$s,$l) = $this->rgb2hsl(ord($c{1})/255,ord($c{2})/255,ord($c{3})/255); $s *= 0.25; $l *= 0.75; list($r,$g,$b) = $this->hsl2rgb($h,$s,$l); $ret = array(3,$r,$g,$b); } else if ($c{0}==4 || $c{0}==6) { $ret = array(4, min(100,(ord($c{1})+20)), min(100,(ord($c{2})+20)), min(100,(ord($c{3})+20)), min(100,(ord($c{4})+20)) ); } else if ($c{0}==1) { $ret = array(1,max(0,(ord($c{1})-32))); } $c = array_pad($ret, 6, 0); $cstr = pack("a1ccccc", $c[0], ($c[1] & 0xFF), ($c[2] & 0xFF), ($c[3] & 0xFF), ($c[4] & 0xFF), ($c[5] & 0xFF) ); return $cstr; } function setBorder(&$var, $flag, $set = true) { $flag = intval($flag); if ($set) { $set = true; } $var = intval($var); $var = $set ? ($var | $flag) : ($var & ~$flag); } function issetBorder($var, $flag) { $flag = intval($flag); $var = intval($var); return (($var & $flag) == $flag); } function _table2cellBorder(&$tableb, &$cbdb, &$cellb, $bval) { if ($tableb && $tableb['w'] > $cbdb['w']) { $cbdb = $tableb; $this->setBorder($cellb, $bval); } else if ($tableb && $tableb['w'] == $cbdb['w'] && array_search($tableb['style'],$this->borderstyles) > array_search($cbdb['style'],$this->borderstyles)) { $cbdb = $tableb; $this->setBorder($cellb, $bval); } } function _fixTableBorders(&$table){ if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } else { $fh = null; } if (!$table['borders_separate'] && $table['border_details']['L']['w']) { $table['max_cell_border_width']['L'] = $table['border_details']['L']['w']; } if (!$table['borders_separate'] && $table['border_details']['R']['w']) { $table['max_cell_border_width']['R'] = $table['border_details']['R']['w']; } if (!$table['borders_separate'] && $table['border_details']['T']['w']) { $table['max_cell_border_width']['T'] = $table['border_details']['T']['w']; } if (!$table['borders_separate'] && $table['border_details']['B']['w']) { $table['max_cell_border_width']['B'] = $table['border_details']['B']['w']; } if ($this->simpleTables) { return; } $cells = &$table['cells']; $numcols = $table['nc']; $numrows = $table['nr']; if (isset($table['topntail']) && $table['topntail']) { $tntborddet = $this->border_details($table['topntail']); } if (isset($table['thead-underline']) && $table['thead-underline']) { $thuborddet = $this->border_details($table['thead-underline']); } for( $i = 0 ; $i < $numrows ; $i++ ) { for( $j = 0 ; $j < $numcols ; $j++ ) { if (isset($cells[$i][$j]) && $cells[$i][$j]) { if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$cells[$i][$j]; if ($this->packTableData) { $cbord = $this->_unpackCellBorder($cell['borderbin']); } else { $cbord = &$cells[$i][$j]; } if (!$cbord['border'] && isset($table['border']) && $table['border'] && $this->table_border_attr_set) { $cbord['border'] = $table['border']; $cbord['border_details'] = $table['border_details']; } if (isset($cell['colspan']) && $cell['colspan']>1) { $ccolsp = $cell['colspan']; } else { $ccolsp = 1; } if (isset($cell['rowspan']) && $cell['rowspan']>1) { $crowsp = $cell['rowspan']; } else { $crowsp = 1; } $cbord['border_details']['cellposdom'] = ((($i+1)/$numrows) / 10000 ) + ((($j+1)/$numcols) / 10 ); if ($this->table_border_css_set && !$table['borders_separate']) { if ($i == 0) { $this->_table2cellBorder($table['border_details']['T'], $cbord['border_details']['T'], $cbord['border'], _BORDER_TOP); } if ($i == ($numrows-1) || ($i+$crowsp) == ($numrows) ) { $this->_table2cellBorder($table['border_details']['B'], $cbord['border_details']['B'], $cbord['border'], _BORDER_BOTTOM); } if ($j == 0) { $this->_table2cellBorder($table['border_details']['L'], $cbord['border_details']['L'], $cbord['border'], _BORDER_LEFT); } if ($j == ($numcols-1) || ($j+$ccolsp) == ($numcols) ) { $this->_table2cellBorder($table['border_details']['R'], $cbord['border_details']['R'], $cbord['border'], _BORDER_RIGHT); } } $fixbottom = true; if (isset($table['topntail']) && $table['topntail']) { if ($i == 0) { $cbord['border_details']['T'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_TOP); } if ($this->tableLevel==1 && $table['headernrows']>0 && $i == $table['headernrows']-1) { $cbord['border_details']['B'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_BOTTOM); $fixbottom = false; } else if ($this->tableLevel==1 && $table['headernrows']>0 && $i == $table['headernrows']) { if (!$table['borders_separate']) { $cbord['border_details']['T'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_TOP); } } if ($this->tableLevel==1 && $table['footernrows']>0 && $i == ($numrows-$table['footernrows']-1)) { if (!$table['borders_separate']) { $cbord['border_details']['B'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_BOTTOM); $fixbottom = false; } } else if ($this->tableLevel==1 && $table['footernrows']>0 && $i == ($numrows-$table['footernrows'])) { $cbord['border_details']['T'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_TOP); } if ($this->tabletheadjustfinished) { if (!$table['borders_separate']) { $cbord['border_details']['T'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_TOP); } } if ($i == ($numrows-1) || ($i+$crowsp) == ($numrows) ) { $cbord['border_details']['B'] = $tntborddet; $this->setBorder($cbord['border'], _BORDER_BOTTOM); } } if (isset($table['thead-underline']) && $table['thead-underline']) { if ($table['borders_separate']) { if ($i == 0) { $cbord['border_details']['B'] = $thuborddet; $this->setBorder($cbord['border'], _BORDER_BOTTOM); $fixbottom = false; } } else { if ($this->tableLevel==1 && $table['headernrows']>0 && $i == $table['headernrows']-1) { $cbord['border_details']['T'] = $thuborddet; $this->setBorder($cbord['border'], _BORDER_TOP); } else if ($this->tabletheadjustfinished) { $cbord['border_details']['T'] = $thuborddet; $this->setBorder($cbord['border'], _BORDER_TOP); } } } if (!$table['borders_separate']) { if (($i < ($numrows-1) || ($i+$crowsp) < $numrows ) && $fixbottom ) { for ($cspi = 0; $cspi<$ccolsp; $cspi++) { if (isset($cells[($i+$crowsp)][$j+$cspi])) { if ($this->packTableData) { if ($this->cacheTables) { $adjc = $this->_uncacheCell($table['cells'][$i+$crowsp][$j+$cspi], '', $fh); } else { $adjc = $cells[($i+$crowsp)][$j+$cspi]; } $celladj = $this->_unpackCellBorder($adjc['borderbin']); } else { $celladj =& $cells[($i+$crowsp)][$j+$cspi]; } } else { $celladj = false; } if ($celladj && $celladj['border_details']['T']['s'] == 1) { $csadj = $celladj['border_details']['T']['w']; $csthis = $cbord['border_details']['B']['w']; if ($cbord['border_details']['B']['style']=='hidden') { $celladj['border_details']['T'] = $cbord['border_details']['B']; $this->setBorder($celladj['border'] , _BORDER_TOP, false); $this->setBorder($cbord['border'] , _BORDER_BOTTOM , false); } else if ($celladj['border_details']['T']['style']=='hidden') { $cbord['border_details']['B'] = $celladj['border_details']['T']; $this->setBorder($cbord['border'] , _BORDER_BOTTOM , false); $this->setBorder($celladj['border'] , _BORDER_TOP, false); } else if ($csthis > $csadj) { if (!isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) || (isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) && $cells[($i+$crowsp)][$j+$cspi]['colspan']<2)) { $celladj['border_details']['T'] = $cbord['border_details']['B']; $this->setBorder($cbord['border'] , _BORDER_BOTTOM); } } else if ($csadj > $csthis) { if ($ccolsp < 2) { $cbord['border_details']['B'] = $celladj['border_details']['T']; $this->setBorder($celladj['border'] , _BORDER_TOP); } } else if (array_search($cbord['border_details']['B']['style'],$this->borderstyles) > array_search($celladj['border_details']['T']['style'],$this->borderstyles)) { if (!isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) || (isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) && $cells[($i+$crowsp)][$j+$cspi]['colspan']<2)) { $celladj['border_details']['T'] = $cbord['border_details']['B']; $this->setBorder($cbord['border'] , _BORDER_BOTTOM ); } } else if (array_search($celladj['border_details']['T']['style'],$this->borderstyles) > array_search($cbord['border_details']['B']['style'],$this->borderstyles)) { if ($ccolsp < 2) { $cbord['border_details']['B'] = $celladj['border_details']['T']; $this->setBorder($celladj['border'] , _BORDER_TOP); } } else if ($celladj['border_details']['T']['dom'] > $cbord['border_details']['B']['dom']) { if ($ccolsp < 2) { $cbord['border_details']['B'] = $celladj['border_details']['T']; $this->setBorder($celladj['border'] , _BORDER_TOP); } } else { if (!isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) || (isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) && $cells[($i+$crowsp)][$j+$cspi]['colspan']<2)) { $celladj['border_details']['T'] = $cbord['border_details']['B']; $this->setBorder($cbord['border'] , _BORDER_BOTTOM ); } } } else if ($celladj) { if (!isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) || (isset($cells[($i+$crowsp)][$j+$cspi]['colspan']) && $cells[($i+$crowsp)][$j+$cspi]['colspan']<2)) { $celladj['border_details']['T'] = $cbord['border_details']['B']; } } if ($celladj && $this->packTableData) { $celladj['borderbin'] = $this->_packCellBorder($celladj); unset($celladj['border']); unset($celladj['border_details']); } if ($this->cacheTables) { $this->_cacheUpdateBorder($celladj, $fh, $table['cells'][$i+$crowsp][$j+$cspi]); } unset($celladj); } } if ($j < ($numcols-1) || ($j+$ccolsp) < $numcols ) { for ($cspi = 0; $cspi<$crowsp; $cspi++) { if (isset($cells[($i+$cspi)][$j+$ccolsp])) { if ($this->packTableData) { if ($this->cacheTables) { $adjc = $this->_uncacheCell($table['cells'][$i+$cspi][$j+$ccolsp], '', $fh); } else { $adjc = $cells[($i+$cspi)][$j+$ccolsp]; } $celladj = $this->_unpackCellBorder($adjc['borderbin']); } else { $celladj =& $cells[$i+$cspi][$j+$ccolsp]; } } else { $celladj = false; } if ($celladj && $celladj['border_details']['L']['s'] == 1) { $csadj = $celladj['border_details']['L']['w']; $csthis = $cbord['border_details']['R']['w']; if ($cbord['border_details']['R']['style']=='hidden') { $celladj['border_details']['L'] = $cbord['border_details']['R']; $this->setBorder($celladj['border'] , _BORDER_LEFT, false); $this->setBorder($cbord['border'] , _BORDER_RIGHT , false); } else if ($celladj['border_details']['L']['style']=='hidden') { $cbord['border_details']['R'] = $celladj['border_details']['L']; $this->setBorder($cbord['border'] , _BORDER_RIGHT , false); $this->setBorder($celladj['border'] , _BORDER_LEFT, false); } else if ($csthis > $csadj) { if (!isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) || (isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) && $cells[($i+$cspi)][$j+$ccolsp]['rowspan']<2)) { $celladj['border_details']['L'] = $cbord['border_details']['R']; $this->setBorder($cbord['border'] , _BORDER_RIGHT); $this->setBorder($celladj['border'] , _BORDER_LEFT, false); } } else if ($csadj > $csthis) { if ($crowsp < 2) { $cbord['border_details']['R'] = $celladj['border_details']['L']; $this->setBorder($cbord['border'] , _BORDER_RIGHT, false); $this->setBorder($celladj['border'] , _BORDER_LEFT); } } else if (array_search($cbord['border_details']['R']['style'],$this->borderstyles) > array_search($celladj['border_details']['L']['style'],$this->borderstyles)) { if (!isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) || (isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) && $cells[($i+$cspi)][$j+$ccolsp]['rowspan']<2)) { $celladj['border_details']['L'] = $cbord['border_details']['R']; $this->setBorder($celladj['border'] , _BORDER_LEFT, false); $this->setBorder($cbord['border'] , _BORDER_RIGHT); } } else if (array_search($celladj['border_details']['L']['style'],$this->borderstyles) > array_search($cbord['border_details']['R']['style'],$this->borderstyles)) { if ($crowsp < 2) { $cbord['border_details']['R'] = $celladj['border_details']['L']; $this->setBorder($cbord['border'] , _BORDER_RIGHT , false); $this->setBorder($celladj['border'] , _BORDER_LEFT); } } else if ($celladj['border_details']['L']['dom'] > $cbord['border_details']['R']['dom']) { if ($crowsp < 2) { $cbord['border_details']['R'] = $celladj['border_details']['L']; $this->setBorder($celladj['border'] , _BORDER_LEFT); } } else { if (!isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) || (isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) && $cells[($i+$cspi)][$j+$ccolsp]['rowspan']<2)) { $celladj['border_details']['L'] = $cbord['border_details']['R']; $this->setBorder($cbord['border'] , _BORDER_RIGHT); } } } else if ($celladj) { if (!isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) || (isset($cells[($i+$cspi)][$j+$ccolsp]['rowspan']) && $cells[($i+$cspi)][$j+$ccolsp]['rowspan']<2)) { $celladj['border_details']['L'] = $cbord['border_details']['R']; } } if ($celladj && $this->packTableData) { $celladj['borderbin'] = $this->_packCellBorder($celladj); unset($celladj['border']); unset($celladj['border_details']); } if ($this->cacheTables) { $this->_cacheUpdateBorder($celladj, $fh, $table['cells'][$i+$cspi][$j+$ccolsp]); } unset($celladj); } } } if (!$table['borders_separate']) { $cbord['border_details']['mbw']['BL'] = max($cbord['border_details']['mbw']['BL'], $cbord['border_details']['L']['w']); $cbord['border_details']['mbw']['BR'] = max($cbord['border_details']['mbw']['BR'], $cbord['border_details']['R']['w']); $cbord['border_details']['mbw']['RT'] = max($cbord['border_details']['mbw']['RT'], $cbord['border_details']['T']['w']); $cbord['border_details']['mbw']['RB'] = max($cbord['border_details']['mbw']['RB'], $cbord['border_details']['B']['w']); $cbord['border_details']['mbw']['TL'] = max($cbord['border_details']['mbw']['TL'], $cbord['border_details']['L']['w']); $cbord['border_details']['mbw']['TR'] = max($cbord['border_details']['mbw']['TR'], $cbord['border_details']['R']['w']); $cbord['border_details']['mbw']['LT'] = max($cbord['border_details']['mbw']['LT'], $cbord['border_details']['T']['w']); $cbord['border_details']['mbw']['LB'] = max($cbord['border_details']['mbw']['LB'], $cbord['border_details']['B']['w']); if (($i+$crowsp) < $numrows && isset($cells[$i+$crowsp][$j])) { if ($this->packTableData) { if ($this->cacheTables) { $adjc = $this->_uncacheCell($table['cells'][$i+$crowsp][$j], '', $fh); } else { $adjc = $cells[$i+$crowsp][$j]; } $celladj = $this->_unpackCellBorder($adjc['borderbin']); } else { $celladj =& $cells[$i+$crowsp][$j]; } $cbord['border_details']['mbw']['BL'] = max($cbord['border_details']['mbw']['BL'], $celladj['border_details']['L']['w'], $celladj['border_details']['mbw']['TL']); $cbord['border_details']['mbw']['BR'] = max($cbord['border_details']['mbw']['BR'], $celladj['border_details']['R']['w'], $celladj['border_details']['mbw']['TR']); $cbord['border_details']['mbw']['LB'] = max($cbord['border_details']['mbw']['LB'], $celladj['border_details']['mbw']['LT']); $cbord['border_details']['mbw']['RB'] = max($cbord['border_details']['mbw']['RB'], $celladj['border_details']['mbw']['RT']); unset($celladj); } if (($j+$ccolsp) < $numcols && isset($cells[$i][$j+$ccolsp])) { if ($this->packTableData) { if ($this->cacheTables) { $adjc = $this->_uncacheCell($table['cells'][$i][$j+$ccolsp], '', $fh); } else { $adjc = $cells[$i][$j+$ccolsp]; } $celladj = $this->_unpackCellBorder($adjc['borderbin']); } else { $celladj =& $cells[$i][$j+$ccolsp]; } $cbord['border_details']['mbw']['RT'] = max($cbord['border_details']['mbw']['RT'], $celladj['border_details']['T']['w'], $celladj['border_details']['mbw']['LT']); $cbord['border_details']['mbw']['RB'] = max($cbord['border_details']['mbw']['RB'], $celladj['border_details']['B']['w'], $celladj['border_details']['mbw']['LB']); $cbord['border_details']['mbw']['TR'] = max($cbord['border_details']['mbw']['TR'], $celladj['border_details']['mbw']['TL']); $cbord['border_details']['mbw']['BR'] = max($cbord['border_details']['mbw']['BR'], $celladj['border_details']['mbw']['BL']); unset($celladj); } if ($i > 0 && isset($cells[$i-1][$j]) && (($this->packTableData && $cells[$i-1][$j]['borderbin']) || $cells[$i-1][$j]['border'])) { if ($this->packTableData) { if ($this->cacheTables) { $adjc = $this->_uncacheCell($table['cells'][$i-1][$j], '', $fh); } else { $adjc = $cells[$i-1][$j]; } $celladj = $this->_unpackCellBorder($adjc['borderbin']); } else { $celladj =& $cells[$i-1][$j]; } $cbord['border_details']['mbw']['TL'] = max($cbord['border_details']['mbw']['TL'], $celladj['border_details']['L']['w'], $celladj['border_details']['mbw']['BL']); $cbord['border_details']['mbw']['TR'] = max($cbord['border_details']['mbw']['TR'], $celladj['border_details']['R']['w'], $celladj['border_details']['mbw']['BR']); $cbord['border_details']['mbw']['LT'] = max($cbord['border_details']['mbw']['LT'], $celladj['border_details']['mbw']['LB']); $cbord['border_details']['mbw']['RT'] = max($cbord['border_details']['mbw']['RT'], $celladj['border_details']['mbw']['RB']); if ($celladj['border_details']['mbw']['BL']) { $celladj['border_details']['mbw']['BL'] = max($cbord['border_details']['mbw']['TL'], $celladj['border_details']['mbw']['BL']); } if ($celladj['border_details']['mbw']['BR'] ) { $celladj['border_details']['mbw']['BR'] = max($celladj['border_details']['mbw']['BR'], $cbord['border_details']['mbw']['TR']); } if ($this->packTableData) { $cells[$i-1][$j]['borderbin'] = $this->_packCellBorder($celladj); } unset($celladj); } if ($j > 0 && isset($cells[$i][$j-1]) && (($this->packTableData && $cells[$i][$j-1]['borderbin']) || $cells[$i][$j-1]['border'])) { if ($this->packTableData) { if ($this->cacheTables) { $adjc = $this->_uncacheCell($table['cells'][$i][$j-1], '', $fh); } else { $adjc = $cells[$i][$j-1]; } $celladj = $this->_unpackCellBorder($adjc['borderbin']); } else { $celladj =& $cells[$i][$j-1]; } $cbord['border_details']['mbw']['LT'] = max($cbord['border_details']['mbw']['LT'], $celladj['border_details']['T']['w'], $celladj['border_details']['mbw']['RT']); $cbord['border_details']['mbw']['LB'] = max($cbord['border_details']['mbw']['LB'], $celladj['border_details']['B']['w'], $celladj['border_details']['mbw']['RB']); $cbord['border_details']['mbw']['BL'] = max($cbord['border_details']['mbw']['BL'], $celladj['border_details']['mbw']['BR']); $cbord['border_details']['mbw']['TL'] = max($cbord['border_details']['mbw']['TL'], $celladj['border_details']['mbw']['TR']); if ($celladj['border_details']['mbw']['RT']) { $celladj['border_details']['mbw']['RT'] = max($celladj['border_details']['mbw']['RT'], $cbord['border_details']['mbw']['LT']); } if ($celladj['border_details']['mbw']['RB']) { $celladj['border_details']['mbw']['RB'] = max($celladj['border_details']['mbw']['RB'], $cbord['border_details']['mbw']['LB']); } if ($this->packTableData) { $cells[$i][$j-1]['borderbin'] = $this->_packCellBorder($celladj); } unset($celladj); } if ($j == 0 && $cbord['border_details']['L']['w']) { $table['max_cell_border_width']['L'] = max($table['max_cell_border_width']['L'],$cbord['border_details']['L']['w']); } if (($j == ($numcols-1) || ($j+$ccolsp) == $numcols ) && $cbord['border_details']['R']['w']) { $table['max_cell_border_width']['R'] = max($table['max_cell_border_width']['R'],$cbord['border_details']['R']['w']); } if ($i == 0 && $cbord['border_details']['T']['w']) { $table['max_cell_border_width']['T'] = max($table['max_cell_border_width']['T'],$cbord['border_details']['T']['w']); } if (($i == ($numrows-1) || ($i+$crowsp) == $numrows ) && $cbord['border_details']['B']['w']) { $table['max_cell_border_width']['B'] = max($table['max_cell_border_width']['B'],$cbord['border_details']['B']['w']); } } if ($this->packTableData) { $cell['borderbin'] = $this->_packCellBorder($cbord); } if ($this->cacheTables) { $this->_cacheUpdateBorder($cell, $fh, $table['cells'][$i][$j]); } unset($cbord ); unset($cell ); } } } if ($this->cacheTables) { fclose($fh); } unset($cell ); } function _reverseTableDir(&$table) { if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } $cells = &$table['cells']; $numcols = $table['nc']; $numrows = $table['nr']; for( $i = 0 ; $i < $numrows ; $i++ ) { $row = array(); for( $j = ($numcols-1) ; $j >= 0 ; $j-- ) { if (isset($cells[$i][$j]) && $cells[$i][$j]) { if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$cells[$i][$j]; $col = $numcols - $j - 1; if (isset($cell['colspan']) && $cell['colspan'] > 1) { $col -= ($cell['colspan']-1); } for ($n=0; $n < count($cell['textbuffer']); $n++) { $t = $cell['textbuffer'][$n][0]; if (substr($t,0,19) == "\xbb\xa4\xactype=nestedtable") { $objattr = $this->_getObjAttr($t); $objattr['col'] = $col; $cell['textbuffer'][$n][0] = "\xbb\xa4\xactype=nestedtable,objattr=".serialize($objattr)."\xbb\xa4\xac"; $this->table[($this->tableLevel+1)][$objattr['nestedcontent']]['nestedpos'][1] = $col; if ($this->cacheTables) { $this->_cacheUpdateTxB($cell, $fh, $table['cells'][$i][$j]); } } } $row[$col] = $cells[$i][$j]; unset($cell); } } for($f=0; $f < $numcols; $f++) { if (!isset($row[$f])) { $row[$f] = 0; } } $table['cells'][$i] = $row; } if ($this->cacheTables) { fclose($fh); } } function _tableWrite(&$table, $split=false, $startrow=0, $startcol=0, $splitpg=0, $rety = 0){ $level = $table['level']; $levelid = $table['levelid']; $cells = &$table['cells']; $numcols = $table['nc']; $numrows = $table['nr']; if ($this->ColActive && $level==1) { $this->breakpoints[$this->CurrCol][] = $this->y; } if (!$split || ($startrow==0 && $splitpg==0) || $startrow>0){ if ($table['margin']['T']) { if (!$this->table_rotate && $level==1) { $this->DivLn($table['margin']['T'],$this->blklvl,true,1); } else { $this->y += ($table['margin']['T']); } } if ($table['borders_separate']) { if ($startrow>0 && (!isset($table['is_thead']) || count($table['is_thead'])==0)) $adv = $table['border_spacing_V']/2; else $adv = $table['padding']['T'] + $table['border_details']['T']['w'] + $table['border_spacing_V']/2; } else { $adv = $table['max_cell_border_width']['T']/2; } if (!$this->table_rotate && $level==1) { $this->DivLn($adv); } else { $this->y += $adv; } } if ($level==1) { $this->x = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin'] + $this->blk[$this->blklvl]['padding_left'] + $this->blk[$this->blklvl]['border_left']['w']; $x0 = $this->x; $y0 = $this->y; $right = $x0 + $this->blk[$this->blklvl]['inner_width']; $outerfilled = $this->y; $this->outerfilled = $this->y; $this->colsums = array(); } else { $x0 = $this->x; $y0 = $this->y; $right = $x0 + $table['w']; } if ($this->table_rotate) { $temppgwidth = $this->tbrot_maxw; $this->PageBreakTrigger = $pagetrigger = $y0 + ($this->blk[$this->blklvl]['inner_width']); if ($level==1) { $this->tbrot_y0 = $this->y - $adv - $table['margin']['T'] ; $this->tbrot_x0 = $this->x; $this->tbrot_w = $table['w']; if ($table['borders_separate']) { $this->tbrot_h = $table['margin']['T'] + $table['padding']['T'] + $table['border_details']['T']['w'] + $table['border_spacing_V']/2; } else { $this->tbrot_h = $table['margin']['T'] + $table['padding']['T'] + $table['max_cell_border_width']['T']; } } } else { $this->PageBreakTrigger = $pagetrigger = ($this->h - $this->bMargin); if ($level==1) { $temppgwidth = $this->blk[$this->blklvl]['inner_width']; if (isset($table['a']) and ($table['w'] < $this->blk[$this->blklvl]['inner_width'])) { if ($table['a']=='C') { $x0 += ((($right-$x0) - $table['w'])/2); } else if ($table['a']=='R') { $x0 = $right - $table['w']; } } } else { $temppgwidth = $table['w']; } } if(!isset($table['overflow'])) { $table['overflow'] = null; } if ($table['overflow']=='hidden' && $level==1 && !$this->table_rotate && !$this->ColActive) { $this->tableClipPath = sprintf('q %.3F %.3F %.3F %.3F re W n',$x0*_MPDFK,$this->h*_MPDFK,$this->blk[$this->blklvl]['inner_width']*_MPDFK,-$this->h*_MPDFK); $this->_out($this->tableClipPath); } else { $this->tableClipPath = ''; } if ($table['borders_separate']) { $indent = $table['margin']['L'] + $table['border_details']['L']['w'] + $table['padding']['L'] + $table['border_spacing_H']/2; } else { $indent = $table['margin']['L'] + $table['max_cell_border_width']['L']/2; } $x0 += $indent; $returny = 0; $lastCol = 0; $tableheader = array(); $tablefooter = array(); $tableheaderrowheight = 0; $tablefooterrowheight = 0; $footery = 0; if (($this->mirrorMargins) && (($this->page)%2==0)) { $tablestartpage = 'EVEN'; } else if (($this->mirrorMargins) && (($this->page)%2==1)) { $tablestartpage = 'ODD'; } else { $tablestartpage = ''; } if ($this->ColActive) { $tablestartcolumn = $this->CurrCol; } else { $tablestartcolumn = ''; } if ($this->cacheTables) { $fh = fopen($table['cache'], "r+b"); } else { $fh = null; } $y = $h = 0; for( $i = 0; $i < $numrows ; $i++ ) { if ($this->progressBar) { $this->UpdateProgressBar(7,intval(30 + ($i*40/$numrows)),' '); } if (isset($table['is_tfoot'][$i]) && $table['is_tfoot'][$i] && $level==1) { $tablefooterrowheight += $table['hr'][$i]; $tablefooter[$i][0]['trbackground-images'] = $table['trbackground-images'][$i]; $tablefooter[$i][0]['trgradients'] = $table['trgradients'][$i]; $tablefooter[$i][0]['trbgcolor'] = $table['bgcolor'][$i]; for( $j = $startcol ; $j < $numcols ; $j++ ) { if (isset($cells[$i][$j]) && $cells[$i][$j]) { if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$cells[$i][$j]; if ($split) { if ($table['colPg'][$j] != $splitpg) { continue; } list($x,$w) = $this->_splitTableGetWidth($table, $i, $j, $fh); $js = $j - $startcol; } else { list($x,$w) = $this->_tableGetWidth($table, $i, $j, $fh); $js = $j; } list($y,$h) = $this->_tableGetHeight($table, $i, $j, $fh); $x += $x0; $y += $y0; $tablefooter[$i][$js]['x'] = $x; $tablefooter[$i][$js]['y'] = $y; $tablefooter[$i][$js]['h'] = $h; $tablefooter[$i][$js]['w'] = $w; if (isset($cell['textbuffer'])) { $tablefooter[$i][$js]['textbuffer'] = $cell['textbuffer']; } else { $tablefooter[$i][$js]['textbuffer'] = ''; } $tablefooter[$i][$js]['a'] = $cell['a']; $tablefooter[$i][$js]['R'] = $cell['R']; $tablefooter[$i][$js]['va'] = $cell['va']; $tablefooter[$i][$js]['mih'] = $cell['mih']; $tablefooter[$i][$js]['gradient'] = $cell['gradient']; $tablefooter[$i][$js]['background-image'] = $cell['background-image']; if (!$this->simpleTables){ if ($this->packTableData) { $c = $this->_unpackCellBorder($cell['borderbin']); $tablefooter[$i][$js]['border'] = $c['border']; $tablefooter[$i][$js]['border_details'] = $c['border_details']; } else { $tablefooter[$i][$js]['border'] = $cell['border']; $tablefooter[$i][$js]['border_details'] = $cell['border_details']; } } else if ($this->simpleTables){ $tablefooter[$i][$js]['border'] = $table['simple']['border']; $tablefooter[$i][$js]['border_details'] = $table['simple']['border_details']; } $tablefooter[$i][$js]['bgcolor'] = $cell['bgcolor']; $tablefooter[$i][$js]['padding'] = $cell['padding']; $tablefooter[$i][$js]['rowspan'] = $cell['rowspan']; $tablefooter[$i][$js]['colspan'] = $cell['colspan']; } } } } if ($level==1) { $this->_out('___TABLE___BACKGROUNDS'.date('jY')); } $tableheaderadj = 0; $tablefooteradj = 0; $tablestartpageno = $this->page; for( $i = 0; $i < $numrows ; $i++ ) { if ($split && $startrow > 0) { $thnr = (isset($table['is_thead']) ? count($table['is_thead']) : 0); if ($i >= $thnr && $i < $startrow) { continue; } if ($i == $startrow){ $returny = $rety - $tableheaderrowheight; } } $maxrowheight = $this->_tableGetMaxRowHeight($table, $i, $fh); $skippage = false; $newpagestarted = false; for( $j = $startcol ; $j < $numcols ; $j++ ) { if ($split) { if ($table['colPg'][$j] > $splitpg) { break; } $lastCol = $j; } if (isset($cells[$i][$j]) && $cells[$i][$j]) { if ($this->cacheTables) { $cell = $this->_uncacheCell($table['cells'][$i][$j], '', $fh); } else $cell = &$cells[$i][$j]; if ($split) { $lastCol = $j + (isset($cell['colspan']) ? ($cell['colspan']-1) : 0) ; list($x,$w) = $this->_splitTableGetWidth($table, $i, $j, $fh); } else { list($x,$w) = $this->_tableGetWidth($table, $i, $j, $fh); } list($y,$h) = $this->_tableGetHeight($table, $i, $j, $fh); $x += $x0; $y += $y0; $y -= $returny; if ($table['borders_separate']) { if (!empty($tablefooter) || $i == ($numrows-1) || (isset($cell['rowspan']) && ($i+$cell['rowspan']) == $numrows) || (!isset($cell['rowspan']) && ($i+1) == $numrows) ) { $extra = $table['padding']['B'] + $table['border_details']['B']['w'] + $table['border_spacing_V']/2; } else { $extra = $table['border_spacing_V']/2; } } else { $extra = $table['max_cell_border_width']['B']/2; } if ($j==$startcol && ((($y + $maxrowheight + $extra ) > ($pagetrigger+0.001)) || (($this->keepColumns || !$this->ColActive) && !empty($tablefooter) && ($y + $maxrowheight + $tablefooterrowheight + $extra) > $pagetrigger) && ($this->tableLevel==1 && $i < ($numrows - $table['headernrows']))) && ($y0 >0 || $x0 > 0) && !$this->InFooter && $this->autoPageBreak ) { if (!$skippage) { $finalSpread = true; $firstSpread = true; if ($split) { for($t=$startcol; $t<$numcols; $t++) { if ($table['colPg'][$t] > $splitpg) { $finalSpread = false; break; } } if ($startcol>0) { $firstSpread = false; } } if (($this->keepColumns || !$this->ColActive) && !empty($tablefooter) && $i > 0 ) { $this->y = $y; $ya = $this->y; $this->TableHeaderFooter($tablefooter,$tablestartpage,$tablestartcolumn,'F',$level, $firstSpread, $finalSpread); if ($this->table_rotate) { $this->tbrot_h += $this->y - $ya ; } $tablefooteradj = $this->y - $ya ; } $y -= $y0; $returny += $y; $oldcolumn = $this->CurrCol; if ($this->AcceptPageBreak()) { $newpagestarted = true; $this->y = $y + $y0; if($i>0 && !$this->table_rotate && $level==1 && !$this->ColActive) { if ($table['borders_separate']) { $adv = $table['border_spacing_V']/2; if (($this->keepColumns || !$this->ColActive) && !empty($tablefooter) && $i > 0 ) { $adv += ($table['padding']['B'] + $table['border_details']['B']['w']); } } else { $maxbwtop = 0; $maxbwbottom = 0; if (!$this->simpleTables){ if (!empty($tablefooter)) { $maxbwbottom = $table['max_cell_border_width']['B']; } else { $brow = $i-1; for( $ctj = 0 ; $ctj < $numcols ; $ctj++ ) { if (isset($cells[$brow][$ctj]) && $cells[$brow][$ctj]) { if ($this->cacheTables) { $cadj = $this->_uncacheCell($table['cells'][$brow][$ctj], '', $fh); list($bt,$br,$bb,$bl) = $this->_getBorderWidths($cadj['borderbin']); } else if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($cells[$brow][$ctj]['borderbin']); } else { $bb = $cells[$brow][$ctj]['border_details']['B']['w']; } $maxbwbottom = max($maxbwbottom , $bb); } } } if (!empty($tableheader)) { $maxbwtop = $table['max_cell_border_width']['T']; } else { $trow = $i-1; for( $ctj = 0 ; $ctj < $numcols ; $ctj++ ) { if (isset($cells[$trow][$ctj]) && $cells[$trow][$ctj]) { if ($this->cacheTables) { $cadj = $this->_uncacheCell($table['cells'][$trow][$ctj], '', $fh); list($bt,$br,$bb,$bl) = $this->_getBorderWidths($cadj['borderbin']); } else if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($cells[$trow][$ctj]['borderbin']); } else { $bt = $cells[$trow][$ctj]['border_details']['T']['w']; } $maxbwtop = max($maxbwtop , $bt); } } } } else if ($this->simpleTables){ $maxbwtop = $table['simple']['border_details']['T']['w']; $maxbwbottom = $table['simple']['border_details']['B']['w']; } $adv = $maxbwbottom /2; } $this->y += $adv; } if($i>0 && $this->table_rotate && $level==1) { } if ($this->tableClipPath ) { $this->_out("Q"); } $bx = $x0; $by = $y0; if ($table['borders_separate']) { $bx -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['border_spacing_H']/2); if ($tablestartpageno != $this->page) { $by += $table['max_cell_border_width']['T']/2; if (empty($tableheader)) { $by -= ($table['border_spacing_V']/2); } } else { $by -= ($table['padding']['T'] + $table['border_details']['T']['w'] + $table['border_spacing_V']/2); } } else if ($tablestartpageno != $this->page && !empty($tableheader)) { $by += $maxbwtop /2; } $by -= $tableheaderadj; $bh = $this->y - $by + $tablefooteradj; if (!$table['borders_separate']) { $bh -= $adv ; } if ($split) { $bw = 0; for($t=$startcol; $t<$numcols; $t++) { if ($table['colPg'][$t] == $splitpg) { $bw += $table['wc'][$t]; } if ($table['colPg'][$t] > $splitpg) { break; } } if ($table['borders_separate']) { if ($firstSpread) { $bw += $table['padding']['L'] + $table['border_details']['L']['w'] + $table['border_spacing_H']; } else { $bx += ($table['padding']['L'] + $table['border_details']['L']['w']); $bw += $table['border_spacing_H']; } if ($finalSpread) { $bw += $table['padding']['R'] + $table['border_details']['R']['w']/2 + $table['border_spacing_H']; } } } else { $bw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; } if ($this->splitTableBorderWidth && ($this->keepColumns || !$this->ColActive) && empty($tablefooter) && $i > 0 && $table['border_details']['B']['w']) { $prevDrawColor = $this->DrawColor; $lw = $this->LineWidth; $this->SetLineWidth($this->splitTableBorderWidth); $this->SetDColor($table['border_details']['B']['c']); $this->SetLineJoin(0); $this->SetLineCap(0); $blx = $bx; $blw = $bw; if (!$table['borders_separate']) { $blx -= ($table['max_cell_border_width']['L']/2); $blw += ($table['max_cell_border_width']['L']/2 + $table['max_cell_border_width']['R']/2); } $this->Line($blx,$this->y+($this->splitTableBorderWidth/2),$blx+$blw,$this->y+($this->splitTableBorderWidth/2)); $this->DrawColor = $prevDrawColor; $this->_out($this->DrawColor); $this->SetLineWidth($lw); $this->SetLineJoin(2); $this->SetLineCap(2); } if (!$this->ColActive && ($i > 0 || $j > 0)) { if (isset($table['bgcolor'][-1])) { $color = $this->ConvertColor($table['bgcolor'][-1]); if ($color) { if (!$table['borders_separate']) { $bh -= $table['max_cell_border_width']['B']/2; } $this->tableBackgrounds[$level*9][] = array('gradient'=>false, 'x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'col'=>$color); } } if (isset($table['gradient'])) { $g = $this->grad->parseBackgroundGradient($table['gradient']); if ($g) { $this->tableBackgrounds[$level*9+1][] = array('gradient'=>true, 'x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } if (isset($table['background-image'])) { if ($table['background-image']['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $table['background-image']['gradient'] )) { $g = $this->grad->parseMozGradient( $table['background-image']['gradient'] ); if ($g) { $this->tableBackgrounds[$level*9+1][] = array('gradient'=>true, 'x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } else { $image_id = $table['background-image']['image_id']; $orig_w = $table['background-image']['orig_w']; $orig_h = $table['background-image']['orig_h']; $x_pos = $table['background-image']['x_pos']; $y_pos = $table['background-image']['y_pos']; $x_repeat = $table['background-image']['x_repeat']; $y_repeat = $table['background-image']['y_repeat']; $resize = $table['background-image']['resize']; $opacity = $table['background-image']['opacity']; $itype = $table['background-image']['itype']; $this->tableBackgrounds[$level*9+2][] = array('x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>'', 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } } } if ($this->tableBackgrounds) { $s = $this->PrintTableBackgrounds(); if ($this->bufferoutput) { $this->headerbuffer = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', '\\1'."\n".$s."\n", $this->headerbuffer); $this->headerbuffer = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', " ", $this->headerbuffer ); } else { $this->pages[$this->page] = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); $this->pages[$this->page] = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', " ", $this->pages[$this->page]); } $this->tableBackgrounds = array(); } if ($split) { if ($i == 0 && $j == 0) { $y0 = -1; } else if ($finalSpread) { $splitpg = 0; $startcol = 0; $startrow = $i; } else { $splitpg++; $startcol = $t; $returny -= $y; } return array(false, $startrow, $startcol, $splitpg, $returny, $y0); } $this->AddPage($this->CurOrientation); $this->_out('___TABLE___BACKGROUNDS'.date('jY')); if ($this->tableClipPath ) { $this->_out($this->tableClipPath); } $x= $x + $this->MarginCorrection; $x0= $x0 + $this->MarginCorrection; if ($this->splitTableBorderWidth && ($this->keepColumns || !$this->ColActive) && empty($tableheader) && $i > 0 && $table['border_details']['T']['w'] ) { $prevDrawColor = $this->DrawColor; $lw = $this->LineWidth; $this->SetLineWidth($this->splitTableBorderWidth); $this->SetDColor($table['border_details']['T']['c']); $this->SetLineJoin(0); $this->SetLineCap(0); $blx += $this->MarginCorrection; $this->Line($blx,$this->y-($this->splitTableBorderWidth/2),$blx+$blw,$this->y-($this->splitTableBorderWidth/2)); $this->DrawColor = $prevDrawColor; $this->_out($this->DrawColor); $this->SetLineWidth($lw); $this->SetLineJoin(2); $this->SetLineCap(2); } if($i>0 && !$this->table_rotate && $level==1 && $table['headernrows']==0) { if ($table['borders_separate']) { $adv = $table['border_spacing_V']/2; } else { $maxbwtop = 0; for( $ctj = 0 ; $ctj < $numcols ; $ctj++ ) { if (isset($cells[$i][$ctj]) && $cells[$i][$ctj]) { if (!$this->simpleTables){ if ($this->cacheTables) { $celltj = $this->_uncacheCell($table['cells'][$i][$ctj], '', $fh); list($bt,$br,$bb,$bl) = $this->_getBorderWidths($celltj['borderbin']); } else if ($this->packTableData) { list($bt,$br,$bb,$bl) = $this->_getBorderWidths($cells[$i][$ctj]['borderbin']); } else { $bt = $cells[$i][$ctj]['border_details']['T']['w']; } $maxbwtop = max($maxbwtop, $bt); } else if ($this->simpleTables){ $maxbwtop = max($maxbwtop, $table['simple']['border_details']['T']['w']); } } } $adv = $maxbwtop /2; } $this->y += $adv; } if ($this->table_rotate) { $this->tbrot_x0 = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin'] + $this->blk[$this->blklvl]['padding_left'] + $this->blk[$this->blklvl]['border_left']['w']; if ($table['borders_separate']) { $this->tbrot_h = $table['margin']['T'] + $table['padding']['T'] + $table['border_details']['T']['w'] + $table['border_spacing_V']/2; } else { $this->tbrot_h = $table['margin']['T'] + $table['max_cell_border_width']['T'] ; } $this->tbrot_y0 = $this->y; $pagetrigger = $y0 - $tableheaderadj + ($this->blk[$this->blklvl]['inner_width']); } else { $pagetrigger = $this->PageBreakTrigger; } if ($this->kwt_saved && $level==1) { $this->kwt_moved = true; } if (!$this->keep_block_together && !empty($tableheader)) { $ya = $this->y; $this->TableHeaderFooter($tableheader,$tablestartpage,$tablestartcolumn,'H',$level); if ($this->table_rotate) { $this->tbrot_h = $this->y - $ya ; } $tableheaderadj = $this->y - $ya ; } else if ($i==0 && !$this->keep_block_together && !$this->table_rotate && $level==1 && !$this->ColActive) { if ($table['borders_separate']) { $adv = $table['border_spacing_V']/2 + $table['border_details']['T']['w'] + $table['padding']['T']; } else { $adv = $table['max_cell_border_width']['T'] /2 ; } if ($adv) { if ($this->table_rotate) { $this->y += ($adv); } else { $this->DivLn($adv,$this->blklvl,true); } } } $outerfilled = 0; $y = $y0 = $this->y; } if ($this->CurrCol != $oldcolumn) { $x += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); $x0 += $this->ChangeColumn * ($this->ColWidth+$this->ColGap); if ($this->CurrCol == 0) { $y0 = $this->y; } else { $y0 = $this->y0; } $y = $y0; $outerfilled = 0; if ($this->CurrCol != 0 && ($this->keepColumns && $this->ColActive) && !empty($tableheader) && $i > 0 ) { $this->x = $x; $this->y = $y; $this->TableHeaderFooter($tableheader,$tablestartpage,$tablestartcolumn,'H',$level); $y0 = $y=$this->y; } } } $skippage = true; } $this->x = $x; $this->y = $y; if ($this->kwt_saved && $level==1) { $this->printkwtbuffer(); $x0 = $x = $this->x; $y0 = $y = $this->y; $this->kwt_moved = false; $this->kwt_saved = false; } if ($i==0 && $j==0 && $level==1) { if (($this->mirrorMargins) && (($this->page)%2==0)) { $tablestartpage = 'EVEN'; } else if (($this->mirrorMargins) && (($this->page)%2==1)) { $tablestartpage = 'ODD'; } else { $tablestartpage = ''; } $tablestartpageno = $this->page; if ($this->ColActive) { $tablestartcolumn = $this->CurrCol; } } $align = $cell['a']; if ($this->ColActive) { if ($this->blklvl > 0 && ($j==0) && !$this->table_rotate && $level==1) { $firstblockfill = $this->GetFirstBlockFill(); if ($firstblockfill && $this->blklvl >= $firstblockfill) { $divh = $maxrowheight; if ((!isset($cell['rowspan']) && $i == $numrows-1) || (isset($cell['rowspan']) && (($i == $numrows-1 && $cell['rowspan']<2) || ($cell['rowspan']>1 && ($i + $cell['rowspan']-1) == $numrows-1)))) { if ($table['borders_separate']) { $adv = $table['margin']['B'] + $table['padding']['B'] + $table['border_details']['B']['w'] + $table['border_spacing_V']/2; } else { $adv = $table['margin']['B'] + $table['max_cell_border_width']['B']/2; } $divh += $adv; } if (($this->y + $divh) > $outerfilled ) { $bak_x = $this->x; $bak_y = $this->y; if ($outerfilled > $this->y) { $divh = ($this->y + $divh) - $outerfilled; $this->y = $outerfilled; } $this->DivLn($divh,-3,false); $outerfilled = $this->y + $divh; $bcor = $this->blk[$this->blklvl]['bgcolorarray']; if ($bcor ) $this->SetFColor($bcor); $this->x = $bak_x; $this->y = $bak_y; } } } } if ($this->ColActive) { if ($table['borders_separate']) { $fill = isset($table['bgcolor'][-1]) ? $table['bgcolor'][-1] : 0; if ($fill) { $color = $this->ConvertColor($fill); if ($color) { $xadj = ($table['border_spacing_H']/2); $yadj = ($table['border_spacing_V']/2); $wadj = $table['border_spacing_H']; $hadj = $table['border_spacing_V']; if ($i == 0) { $yadj += $table['padding']['T'] + $table['border_details']['T']['w'] ; $hadj += $table['padding']['T'] + $table['border_details']['T']['w'] ; } if ($j == 0) { $xadj += $table['padding']['L'] + $table['border_details']['L']['w'] ; $wadj += $table['padding']['L'] + $table['border_details']['L']['w'] ; } if ($i == ($numrows-1) || (isset($cell['rowspan']) && ($i+$cell['rowspan']) == $numrows) || (!isset($cell['rowspan']) && ($i+1) == $numrows)) { $hadj += $table['padding']['B'] + $table['border_details']['B']['w'] ; } if ($j == ($numcols-1) || (isset($cell['colspan']) && ($j+$cell['colspan']) == $numcols) || (!isset($cell['colspan']) && ($j+1) == $numcols)) { $wadj += $table['padding']['R'] + $table['border_details']['R']['w'] ; } $this->SetFColor($color); $this->Rect($x - $xadj, $y - $yadj, $w + $wadj, $h + $hadj, 'F'); } } } } if ($table['empty_cells']!='hide' || !empty($cell['textbuffer']) || (isset($cell['nestedcontent']) && $cell['nestedcontent']) || !$table['borders_separate'] ) { $paintcell = true; } else { $paintcell = false; } $bord = 0; $bord_det = array(); if (!$this->simpleTables){ if ($this->packTableData) { if ($cell['borderbin']) { $c = $this->_unpackCellBorder($cell['borderbin']); $bord = $c['border']; $bord_det = $c['border_details']; } } else if ($cell['border']) { $bord = $cell['border']; $bord_det = $cell['border_details']; } } else if ($this->simpleTables){ if ($table['simple']['border']) { $bord = $table['simple']['border']; $bord_det = $table['simple']['border_details']; } } $fill = 0; if (isset($cell['bgcolor']) && $cell['bgcolor'] && $cell['bgcolor']!='transparent') { $fill = $cell['bgcolor']; $leveladj = 6; } else if (isset($table['bgcolor'][$i]) && $table['bgcolor'][$i] && $table['bgcolor'][$i]!='transparent') { $fill = $table['bgcolor'][$i]; $leveladj = 3; } if ($fill && $paintcell) { $color = $this->ConvertColor($fill); if ($color) { if ($table['borders_separate']) { if ($this->ColActive) { $this->SetFColor($color); $this->Rect($x+ ($table['border_spacing_H']/2), $y+ ($table['border_spacing_V']/2), $w- $table['border_spacing_H'], $h- $table['border_spacing_V'], 'F'); } else { $this->tableBackgrounds[$level*9+$leveladj][] = array('gradient'=>false, 'x'=>($x + ($table['border_spacing_H']/2)), 'y'=>($y + ($table['border_spacing_V']/2)), 'w'=>($w - $table['border_spacing_H']), 'h'=>($h - $table['border_spacing_V']), 'col'=>$color); } } else { if ($this->ColActive) { $this->SetFColor($color); $this->Rect($x, $y, $w, $h, 'F'); } else { $this->tableBackgrounds[$level*9+$leveladj][] = array('gradient'=>false, 'x'=>$x, 'y'=>$y, 'w'=>$w, 'h'=>$h, 'col'=>$color); } } } } if (isset($cell['gradient']) && $cell['gradient'] && $paintcell){ $g = $this->grad->parseBackgroundGradient($cell['gradient']); if ($g) { if ($table['borders_separate']) { $px = $x+ ($table['border_spacing_H']/2); $py = $y+ ($table['border_spacing_V']/2); $pw = $w- $table['border_spacing_H']; $ph = $h- $table['border_spacing_V']; } else { $px = $x; $py = $y; $pw = $w; $ph = $h; } if ($this->ColActive) { $this->grad->Gradient($px, $py, $pw, $ph, $g['type'], $g['stops'], $g['colorspace'], $g['coords'], $g['extend']); } else { $this->tableBackgrounds[$level*9+7][] = array('gradient'=>true, 'x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } if (isset($cell['background-image']) && $paintcell) { if ($cell['background-image']['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $cell['background-image']['gradient'] )) { $g = $this->grad->parseMozGradient( $cell['background-image']['gradient'] ); if ($g) { if ($table['borders_separate']) { $px = $x+ ($table['border_spacing_H']/2); $py = $y+ ($table['border_spacing_V']/2); $pw = $w- $table['border_spacing_H']; $ph = $h- $table['border_spacing_V']; } else { $px = $x; $py = $y; $pw = $w; $ph = $h; } if ($this->ColActive) { $this->grad->Gradient($px, $py, $pw, $ph, $g['type'], $g['stops'], $g['colorspace'], $g['coords'], $g['extend']); } else { $this->tableBackgrounds[$level*9+7][] = array('gradient'=>true, 'x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } else if ($cell['background-image']['image_id']) { $n = count($this->patterns)+1; if ($table['borders_separate']) { $px = $x+ ($table['border_spacing_H']/2); $py = $y+ ($table['border_spacing_V']/2); $pw = $w- $table['border_spacing_H']; $ph = $h- $table['border_spacing_V']; } else { $px = $x; $py = $y; $pw = $w; $ph = $h; } if ($this->ColActive) { list($orig_w, $orig_h, $x_repeat, $y_repeat) = $this->_resizeBackgroundImage($cell['background-image']['orig_w'], $cell['background-image']['orig_h'], $pw, $ph, $cell['background-image']['resize'], $cell['background-image']['x_repeat'], $cell['background-image']['y_repeat']); $this->patterns[$n] = array('x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'pgh'=>$this->h, 'image_id'=>$cell['background-image']['image_id'], 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$cell['background-image']['x_pos'] , 'y_pos'=>$cell['background-image']['y_pos'] , 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat); if ($cell['background-image']['opacity']>0 && $cell['background-image']['opacity']<1) { $opac = $this->SetAlpha($cell['background-image']['opacity'],'Normal',true); } else { $opac = ''; } $this->_out(sprintf('q /Pattern cs /P%d scn %s %.3F %.3F %.3F %.3F re f Q', $n, $opac, $px*_MPDFK, ($this->h-$py)*_MPDFK, $pw*_MPDFK, -$ph*_MPDFK)); } else { $image_id = $cell['background-image']['image_id']; $orig_w = $cell['background-image']['orig_w']; $orig_h = $cell['background-image']['orig_h']; $x_pos = $cell['background-image']['x_pos']; $y_pos = $cell['background-image']['y_pos']; $x_repeat = $cell['background-image']['x_repeat']; $y_repeat = $cell['background-image']['y_repeat']; $resize = $cell['background-image']['resize']; $opacity = $cell['background-image']['opacity']; $itype = $cell['background-image']['itype']; $this->tableBackgrounds[$level*9+8][] = array('x'=>$px, 'y'=>$py, 'w'=>$pw, 'h'=>$ph, 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>'', 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } } } if (isset($cell['colspan']) && $cell['colspan']>1) { $ccolsp = $cell['colspan']; } else { $ccolsp = 1; } if (isset($cell['rowspan']) && $cell['rowspan']>1) { $crowsp = $cell['rowspan']; } else { $crowsp = 1; } if (!$table['borders_separate'] && $this->tabletheadjustfinished && !$this->simpleTables){ if (isset($table['topntail']) && $table['topntail']) { $bord_det['T'] = $this->border_details($table['topntail']); $bord_det['T']['w'] /= $this->shrin_k; $this->setBorder($bord, _BORDER_TOP); } if (isset($table['thead-underline']) && $table['thead-underline']) { $bord_det['T'] = $this->border_details($table['thead-underline']); $bord_det['T']['w'] /= $this->shrin_k; $this->setBorder($bord, _BORDER_TOP); } } if (isset($table['is_thead'][$i]) && $table['is_thead'][$i] && $level==1) { if ($j==0) $tableheaderrowheight += $table['hr'][$i]; $tableheader[$i][0]['trbackground-images'] = (isset($table['trbackground-images'][$i]) ? $table['trbackground-images'][$i] : null); $tableheader[$i][0]['trgradients'] = (isset($table['trgradients'][$i]) ? $table['trgradients'][$i] : null); $tableheader[$i][0]['trbgcolor'] = (isset($table['bgcolor'][$i]) ? $table['bgcolor'][$i] : null); $tableheader[$i][$j]['x'] = $x; $tableheader[$i][$j]['y'] = $y; $tableheader[$i][$j]['h'] = $h; $tableheader[$i][$j]['w'] = $w; if (isset($cell['textbuffer'])) { $tableheader[$i][$j]['textbuffer'] = $cell['textbuffer']; } else { $tableheader[$i][$j]['textbuffer'] = ''; } $tableheader[$i][$j]['a'] = $cell['a']; $tableheader[$i][$j]['R'] = $cell['R']; $tableheader[$i][$j]['va'] = $cell['va']; $tableheader[$i][$j]['mih'] = $cell['mih']; $tableheader[$i][$j]['gradient'] = (isset($cell['gradient']) ? $cell['gradient'] : null); $tableheader[$i][$j]['background-image'] = (isset($cell['background-image']) ? $cell['background-image'] : null); $tableheader[$i][$j]['rowspan'] = (isset($cell['rowspan']) ? $cell['rowspan'] : null); $tableheader[$i][$j]['colspan'] = (isset($cell['colspan']) ? $cell['colspan'] : null); $tableheader[$i][$j]['bgcolor'] = $cell['bgcolor']; if (!$this->simpleTables){ $tableheader[$i][$j]['border'] = $bord; $tableheader[$i][$j]['border_details'] = $bord_det; } else if ($this->simpleTables){ $tableheader[$i][$j]['border'] = $table['simple']['border']; $tableheader[$i][$j]['border_details'] = $table['simple']['border_details']; } $tableheader[$i][$j]['padding'] = $cell['padding']; } if ($bord || $bord_det) { if ($table['borders_separate'] && $paintcell) { $this->_tableRect($x + ($table['border_spacing_H']/2)+($bord_det['L']['w'] /2), $y+ ($table['border_spacing_V']/2)+($bord_det['T']['w'] /2), $w-$table['border_spacing_H']-($bord_det['L']['w'] /2)-($bord_det['R']['w'] /2), $h- $table['border_spacing_V']-($bord_det['T']['w'] /2)-($bord_det['B']['w']/2), $bord, $bord_det, false, $table['borders_separate']); } else if (!$table['borders_separate']) { $this->_tableRect($x, $y, $w, $h, $bord, $bord_det, true, $table['borders_separate']); } } if ($cell['R'] && INTVAL($cell['R']) > 0 && INTVAL($cell['R']) < 90 && isset($cell['va']) && $cell['va']!='B') { $cell['va']='B';} if (!isset($cell['va']) || $cell['va']=='M') $this->y += ($h-$cell['mih'])/2; elseif (isset($cell['va']) && $cell['va']=='B') $this->y += $h-$cell['mih']; $this->divalign=$align; $this->divwidth=$w; if (!empty($cell['textbuffer'])) { if ($level==1) { if (isset($table['is_tfoot'][$i]) && $table['is_tfoot'][$i]) { if (preg_match('/{colsum([0-9]*)[_]*}/', $cell['textbuffer'][0][0], $m)) { $rep = sprintf("%01.".intval($m[1])."f", $this->colsums[$j]); $cell['textbuffer'][0][0] = preg_replace('/{colsum[0-9_]*}/', $rep ,$cell['textbuffer'][0][0]); } } else if (!isset($table['is_thead'][$i])) { $this->colsums[$j] += floatval(preg_replace('/^[^0-9\.\,]*/','',$cell['textbuffer'][0][0])); } } $opy = $this->y; if ($this->iterationCounter) { foreach($cell['textbuffer'] AS $k=>$t) { if (preg_match('/{iteration ([a-zA-Z0-9_]+)}/',$t[0], $m)) { $vname = '__'.$m[1].'_'; if (!isset($this->$vname)) { $this->$vname = 1; } else { $this->$vname++; } $cell['textbuffer'][$k][0] = preg_replace('/{iteration '.$m[1].'}/', $this->$vname, $cell['textbuffer'][$k][0]); } } } if ($cell['R']) { $cellPtSize = $cell['textbuffer'][0][11] / $this->shrin_k; if (!$cellPtSize) { $cellPtSize = $this->default_font_size; } $cellFontHeight = ($cellPtSize/_MPDFK); $opx = $this->x; $angle = INTVAL($cell['R']); if ($angle > 90) { $angle = 90; } else if ($angle > 0 && $angle <45) { $angle = 45; } else if ($angle < 0) { $angle = -90; } $offset = ((sin(deg2rad($angle))) * 0.37 * $cellFontHeight); if (isset($cell['a']) && $cell['a']=='R') { $this->x += ($w) + ($offset) - ($cellFontHeight/3) - ($cell['padding']['R'] + ($table['border_spacing_H']/2)); } else if (!isset($cell['a']) || $cell['a']=='C') { $this->x += ($w/2) + ($offset); } else { $this->x += ($offset) + ($cellFontHeight/3)+($cell['padding']['L'] +($table['border_spacing_H']/2)); } $str = ''; foreach($cell['textbuffer'] AS $t) { $str .= $t[0].' '; } $str = trim($str); if (!isset($cell['va']) || $cell['va']=='M') { $this->y -= ($h-$cell['mih'])/2; if ($angle > 0) { $this->y += (($h-$cell['mih'])/2) + $cell['padding']['T'] + ($cell['mih']-($cell['padding']['T'] + $cell['padding']['B'])); } else if ($angle < 0) { $this->y += (($h-$cell['mih'])/2)+ ($cell['padding']['T'] + ($table['border_spacing_V']/2)); } } elseif (isset($cell['va']) && $cell['va']=='B') { $this->y -= $h-$cell['mih']; if ($angle > 0) { $this->y += $h-($cell['padding']['B'] + ($table['border_spacing_V']/2)); } else if ($angle < 0) { $this->y += $h-$cell['mih'] + ($cell['padding']['T'] + ($table['border_spacing_V']/2)); } } elseif (isset($cell['va']) && $cell['va']=='T') { if ($angle > 0) { $this->y += $cell['mih']-($cell['padding']['B'] + ($table['border_spacing_V']/2)); } else if ($angle < 0) { $this->y += ($cell['padding']['T'] + ($table['border_spacing_V']/2)); } } $this->Rotate($angle,$this->x,$this->y); $s_fs = $this->FontSizePt; $s_f = $this->FontFamily; $s_st = $this->FontStyle; if (!empty($cell['textbuffer'][0][3])) { $cor = $cell['textbuffer'][0][3]; $this->SetTColor($cor); } $s_str = $this->strike; $this->strike = $cell['textbuffer'][0][8]; $this->SetFont($cell['textbuffer'][0][4],$cell['textbuffer'][0][2],$cellPtSize,true,true); $this->Text($this->x,$this->y,$str); $this->Rotate(0); $this->SetFont($s_f,$s_st,$s_fs,true,true); $this->SetTColor(0); $this->strike = $s_str; $this->x = $opx; } else { if (!$this->simpleTables){ if ($bord_det) { $btlw = $bord_det['L']['w']; $btrw = $bord_det['R']['w']; $bttw = $bord_det['T']['w']; } else { $btlw = 0; $btrw = 0; $bttw = 0; } if ($table['borders_separate']) { $xadj = $btlw + $cell['padding']['L'] +($table['border_spacing_H']/2); $wadj = $btlw + $btrw + $cell['padding']['L'] +$cell['padding']['R'] + $table['border_spacing_H']; $yadj = $bttw + $cell['padding']['T'] + ($table['border_spacing_H']/2); } else { $xadj = $btlw/2 + $cell['padding']['L']; $wadj = ($btlw + $btrw)/2 + $cell['padding']['L'] + $cell['padding']['R']; $yadj = $bttw/2 + $cell['padding']['T']; } } else if ($this->simpleTables){ if ($table['borders_separate']) { $xadj = $table['simple']['border_details']['L']['w'] + $cell['padding']['L'] +($table['border_spacing_H']/2); $wadj = $table['simple']['border_details']['L']['w'] + $table['simple']['border_details']['R']['w'] + $cell['padding']['L'] +$cell['padding']['R'] + $table['border_spacing_H']; $yadj = $table['simple']['border_details']['T']['w'] + $cell['padding']['T'] + ($table['border_spacing_H']/2); } else { $xadj = $table['simple']['border_details']['L']['w']/2 + $cell['padding']['L']; $wadj = ($table['simple']['border_details']['L']['w'] + $table['simple']['border_details']['R']['w'])/2 + $cell['padding']['L'] + $cell['padding']['R']; $yadj = $table['simple']['border_details']['T']['w']/2 + $cell['padding']['T']; } } $this->decimal_offset = 0; if(substr($cell['a'],0,1) == 'D') { if ($cell['colspan'] > 1) { $this->divalign = $c['a'] = substr($cell['a'],2,1); } else { $smax = $table['decimal_align'][$j]['maxs0']; $d_content = $table['decimal_align'][$j]['maxs0'] + $table['decimal_align'][$j]['maxs1']; $this->decimal_offset = $smax; $extra = ($w - $d_content - $wadj); if ($extra > 0) { if(substr($cell['a'],2,1) == 'R') { $this->decimal_offset += $extra; } else if(substr($cell['a'],2,1) == 'C') { $this->decimal_offset += ($extra)/2; } } } } $this->divwidth=$w-$wadj; if ($this->divwidth == 0) { $this->divwidth = 0.0001; } $this->x += $xadj; $this->y += $yadj; $this->printbuffer($cell['textbuffer'],'',true); } $this->y = $opy; } if (!$this->ColActive) { if (isset($table['trgradients'][$i]) && ($j==0 || $table['borders_separate'])) { $g = $this->grad->parseBackgroundGradient($table['trgradients'][$i]); if ($g) { $gx = $x0; $gy = $y; $gh = $h; $gw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; if ($table['borders_separate']) { $gw -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['padding']['R'] + $table['border_details']['R']['w'] + $table['border_spacing_H']); $s = ''; $clx = $x+ ($table['border_spacing_H']/2); $cly = $y+ ($table['border_spacing_V']/2); $clw = $w- $table['border_spacing_H']; $clh = $h- $table['border_spacing_V']; $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= ' W n '; $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx + ($table['border_spacing_H']/2), 'y'=>$gy + ($table['border_spacing_V']/2), 'w'=>$gw - $table['border_spacing_V'], 'h'=>$gh - $table['border_spacing_H'], 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>$s); } else { $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx, 'y'=>$gy, 'w'=>$gw, 'h'=>$gh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } if (isset($table['trbackground-images'][$i]) && ($j==0 || $table['borders_separate'])) { if ($table['trbackground-images'][$i]['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $table['trbackground-images'][$i]['gradient'] )) { $g = $this->grad->parseMozGradient( $table['trbackground-images'][$i]['gradient'] ); if ($g) { $gx = $x0; $gy = $y; $gh = $h; $gw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; if ($table['borders_separate']) { $gw -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['padding']['R'] + $table['border_details']['R']['w'] + $table['border_spacing_H']); $s = ''; $clx = $x+ ($table['border_spacing_H']/2); $cly = $y+ ($table['border_spacing_V']/2); $clw = $w- $table['border_spacing_H']; $clh = $h- $table['border_spacing_V']; $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= ' W n '; $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx + ($table['border_spacing_H']/2), 'y'=>$gy + ($table['border_spacing_V']/2), 'w'=>$gw - $table['border_spacing_V'], 'h'=>$gh - $table['border_spacing_H'], 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>$s); } else { $this->tableBackgrounds[$level*9+4][] = array('gradient'=>true, 'x'=>$gx, 'y'=>$gy, 'w'=>$gw, 'h'=>$gh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } } else { $image_id = $table['trbackground-images'][$i]['image_id']; $orig_w = $table['trbackground-images'][$i]['orig_w']; $orig_h = $table['trbackground-images'][$i]['orig_h']; $x_pos = $table['trbackground-images'][$i]['x_pos']; $y_pos = $table['trbackground-images'][$i]['y_pos']; $x_repeat = $table['trbackground-images'][$i]['x_repeat']; $y_repeat = $table['trbackground-images'][$i]['y_repeat']; $resize = $table['trbackground-images'][$i]['resize']; $opacity = $table['trbackground-images'][$i]['opacity']; $itype = $table['trbackground-images'][$i]['itype']; $clippath = ''; $gx = $x0; $gy = $y; $gh = $h; $gw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; if ($table['borders_separate']) { $gw -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['padding']['R'] + $table['border_details']['R']['w'] + $table['border_spacing_H']); $s = ''; $clx = $x + ($table['border_spacing_H']/2); $cly = $y + ($table['border_spacing_V']/2); $clw = $w - $table['border_spacing_H']; $clh = $h - $table['border_spacing_V']; $s = ' q 0 w '; $s .= sprintf('%.3F %.3F m ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly+$clh))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx+$clw)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= sprintf('%.3F %.3F l ', ($clx)*_MPDFK, ($this->h-($cly))*_MPDFK); $s .= ' W n '; $this->tableBackgrounds[$level*9+5][] = array('x'=>$gx + ($table['border_spacing_H']/2), 'y'=>$gy + ($table['border_spacing_V']/2), 'w'=>$gw - $table['border_spacing_V'], 'h'=>$gh - $table['border_spacing_H'], 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>$s, 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } else { $this->tableBackgrounds[$level*9+5][] = array('x'=>$gx, 'y'=>$gy, 'w'=>$gw, 'h'=>$gh, 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>'', 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } } } } if (($table['borders_separate'] || ($this->simpleTables && !$table['simple']['border'])) && $table['border']) { $halfspaceL = $table['padding']['L'] + ($table['border_spacing_H']/2); $halfspaceR = $table['padding']['R'] + ($table['border_spacing_H']/2); $halfspaceT = $table['padding']['T'] + ($table['border_spacing_V']/2); $halfspaceB = $table['padding']['B'] + ($table['border_spacing_V']/2); $tbx = $x; $tby = $y; $tbw = $w; $tbh = $h; $tab_bord = 0; $corner = ''; if ($i == 0) { $tby -= $halfspaceT + ($table['border_details']['T']['w']/2); $tbh += $halfspaceT + ($table['border_details']['T']['w']/2); $this->setBorder($tab_bord , _BORDER_TOP); $corner .= 'T'; } if ($i == ($numrows-1) || (isset($cell['rowspan']) && ($i+$cell['rowspan']) == $numrows)) { $tbh += $halfspaceB + ($table['border_details']['B']['w']/2); $this->setBorder($tab_bord , _BORDER_BOTTOM); $corner .= 'B'; } if ($j == 0) { $tbx -= $halfspaceL + ($table['border_details']['L']['w']/2); $tbw += $halfspaceL + ($table['border_details']['L']['w']/2); $this->setBorder($tab_bord , _BORDER_LEFT); $corner .= 'L'; } if ($j == ($numcols-1) || (isset($cell['colspan']) && ($j+$cell['colspan']) == $numcols)) { $tbw += $halfspaceR + ($table['border_details']['R']['w']/2); $this->setBorder($tab_bord , _BORDER_RIGHT); $corner .= 'R'; } $this->_tableRect($tbx, $tby, $tbw, $tbh, $tab_bord , $table['border_details'], false, $table['borders_separate'], 'table', $corner, $table['border_spacing_V'], $table['border_spacing_H'] ); } unset($cell ); $this->Reset(); } } $newpagestarted = false; $this->tabletheadjustfinished = false; if ($this->ColActive && $i < $numrows-1 && $level==1) { $this->breakpoints[$this->CurrCol][] = $y + $h; } if ($this->ColActive) { if (count($this->cellBorderBuffer)) { $this->printcellbuffer(); } } if ($i == $numrows-1) { $this->y = $y + $h; } if ($this->table_rotate && $level==1) { $this->tbrot_h += $h; } } if ($this->progressBar) { $this->UpdateProgressBar(7,70,' '); } if (count($this->cellBorderBuffer)) { $this->printcellbuffer(); } if ($this->tableClipPath ) { $this->_out("Q"); } $this->tableClipPath = ''; if ($table['borders_separate']) { $this->y += $table['padding']['B'] + $table['border_details']['B']['w'] + $table['border_spacing_V']/2; } else { $this->y += $table['max_cell_border_width']['B']/2; } if ($table['borders_separate'] && $level==1) { $this->tbrot_h += $table['margin']['B'] + $table['padding']['B'] + $table['border_details']['B']['w'] + $table['border_spacing_V']/2; } else if ($level==1) { $this->tbrot_h += $table['margin']['B'] + $table['max_cell_border_width']['B']/2; } $bx = $x0; $by = $y0; if ($table['borders_separate']) { $bx -= ($table['padding']['L'] + $table['border_details']['L']['w'] + $table['border_spacing_H']/2); if ($tablestartpageno != $this->page) { $by += $table['max_cell_border_width']['T']/2; if (empty($tableheader)) { $by -= ($table['border_spacing_V']/2); } } else if ($split && $startrow > 0 && empty($tableheader)) { $by -= ($table['border_spacing_V']/2); } else { $by -= ($table['padding']['T'] + $table['border_details']['T']['w'] + $table['border_spacing_V']/2); } } else if ($tablestartpageno != $this->page && !empty($tableheader)) { $by += $maxbwtop /2; } $by -= $tableheaderadj; $bh = $this->y - $by; if (!$table['borders_separate']) { $bh -= $table['max_cell_border_width']['B']/2; } if ($split) { $bw = 0; $finalSpread = true; for($t=$startcol; $t<$numcols; $t++) { if ($table['colPg'][$t] == $splitpg) { $bw += $table['wc'][$t]; } if ($table['colPg'][$t] > $splitpg) { $finalSpread = false; break; } } if ($startcol==0) { $firstSpread = true; } else { $firstSpread = false; } if ($table['borders_separate']) { $bw += $table['border_spacing_H']; if ($firstSpread) { $bw += $table['padding']['L'] + $table['border_details']['L']['w']; } else { $bx += ($table['padding']['L'] + $table['border_details']['L']['w']); } if ($finalSpread) { $bw += $table['padding']['R'] + $table['border_details']['R']['w']; } } } else { $bw = $table['w'] - ($table['max_cell_border_width']['L']/2) - ($table['max_cell_border_width']['R']/2) - $table['margin']['L'] - $table['margin']['R']; } if (!$this->ColActive) { if (isset($table['bgcolor'][-1])) { $color = $this->ConvertColor($table['bgcolor'][-1]); if ($color) { $this->tableBackgrounds[$level*9][] = array('gradient'=>false, 'x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'col'=>$color); } } if (isset($table['gradient'])) { $g = $this->grad->parseBackgroundGradient($table['gradient']); if ($g) { $this->tableBackgrounds[$level*9+1][] = array('gradient'=>true, 'x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } if (isset($table['background-image'])) { if ($table['background-image']['gradient'] && preg_match('/(-moz-)*(repeating-)*(linear|radial)-gradient/', $table['background-image']['gradient'] )) { $g = $this->grad->parseMozGradient( $table['background-image']['gradient'] ); if ($g) { $this->tableBackgrounds[$level*9+1][] = array('gradient'=>true, 'x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'gradtype'=>$g['type'], 'stops'=>$g['stops'], 'colorspace'=>$g['colorspace'], 'coords'=>$g['coords'], 'extend'=>$g['extend'], 'clippath'=>''); } } else { $image_id = $table['background-image']['image_id']; $orig_w = $table['background-image']['orig_w']; $orig_h = $table['background-image']['orig_h']; $x_pos = $table['background-image']['x_pos']; $y_pos = $table['background-image']['y_pos']; $x_repeat = $table['background-image']['x_repeat']; $y_repeat = $table['background-image']['y_repeat']; $resize = $table['background-image']['resize']; $opacity = $table['background-image']['opacity']; $itype = $table['background-image']['itype']; $this->tableBackgrounds[$level*9+2][] = array('x'=>$bx, 'y'=>$by, 'w'=>$bw, 'h'=>$bh, 'image_id'=>$image_id, 'orig_w'=>$orig_w, 'orig_h'=>$orig_h, 'x_pos'=>$x_pos, 'y_pos'=>$y_pos, 'x_repeat'=>$x_repeat, 'y_repeat'=>$y_repeat, 'clippath'=>'', 'resize'=>$resize, 'opacity'=>$opacity, 'itype'=>$itype); } } } if ($this->tableBackgrounds && $level == 1) { $s = $this->PrintTableBackgrounds(); if ($this->table_rotate && !$this->processingHeader && !$this->processingFooter) { $this->tablebuffer = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', '\\1'."\n".$s."\n", $this->tablebuffer); if ($level == 1) { $this->tablebuffer = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', " ", $this->tablebuffer); } } else if ($this->bufferoutput) { $this->headerbuffer = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', '\\1'."\n".$s."\n", $this->headerbuffer); if ($level == 1) { $this->headerbuffer = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', " ", $this->headerbuffer ); } } else { $this->pages[$this->page] = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', '\\1'."\n".$s."\n", $this->pages[$this->page]); if ($level == 1) { $this->pages[$this->page] = preg_replace('/(___TABLE___BACKGROUNDS'.date('jY').')/', " ", $this->pages[$this->page]); } } $this->tableBackgrounds = array(); } if ($table['margin']['B']) { if (!$this->table_rotate && $level==1) { $this->DivLn($table['margin']['B'],$this->blklvl,true); } else { $this->y += ($table['margin']['B']); } } if ($this->ColActive && $level==1) { $this->breakpoints[$this->CurrCol][] = $this->y; } if ($this->cacheTables) { fclose($fh); } if ($split) { if ($lastCol < $numcols-1) { $splitpg++; $startcol = $lastCol + 1; return array(false, $startrow, $startcol, $splitpg, $returny, $y0); } else { if ($this->cacheTables) { unlink($table['cache']); @unlink($table['cache'].'.bak'); } return array(true,0,0,0); } } if ($this->cacheTables) { unlink($table['cache']); @unlink($table['cache'].'.bak'); } } function _putextgstates() { for ($i = 1; $i <= count($this->extgstates); $i++) { $this->_newobj(); $this->extgstates[$i]['n'] = $this->n; $this->_out('<</Type /ExtGState'); foreach ($this->extgstates[$i]['parms'] as $k=>$v) $this->_out('/'.$k.' '.$v); $this->_out('>>'); $this->_out('endobj'); } } function _putocg() { if ($this->hasOC) { $this->_newobj(); $this->n_ocg_print=$this->n; $this->_out('<</Type /OCG /Name '.$this->_textstring('Print only')); $this->_out('/Usage <</Print <</PrintState /ON>> /View <</ViewState /OFF>>>>>>'); $this->_out('endobj'); $this->_newobj(); $this->n_ocg_view=$this->n; $this->_out('<</Type /OCG /Name '.$this->_textstring('Screen only')); $this->_out('/Usage <</Print <</PrintState /OFF>> /View <</ViewState /ON>>>>>>'); $this->_out('endobj'); $this->_newobj(); $this->n_ocg_hidden=$this->n; $this->_out('<</Type /OCG /Name '.$this->_textstring('Hidden')); $this->_out('/Usage <</Print <</PrintState /OFF>> /View <</ViewState /OFF>>>>>>'); $this->_out('endobj'); } if (count($this->layers)) { ksort($this->layers); foreach($this->layers as $id=>$layer) { $this->_newobj(); $this->layers[$id]['n'] = $this->n; if (isset($this->layerDetails[$id]['name']) && $this->layerDetails[$id]['name']) { $name = $this->layerDetails[$id]['name']; } else { $name = $layer['name']; } $this->_out('<</Type /OCG /Name '.$this->_UTF16BEtextstring($name).'>>'); $this->_out('endobj'); } } } function _putimportedobjects() { if (is_array($this->parsers) && count($this->parsers) > 0) { foreach($this->parsers AS $filename => $p) { $this->current_parser =& $this->parsers[$filename]; if (is_array($this->_obj_stack[$filename])) { while($n = key($this->_obj_stack[$filename])) { $nObj = $this->current_parser->pdf_resolve_object($this->current_parser->c,$this->_obj_stack[$filename][$n][1]); $this->_newobj($this->_obj_stack[$filename][$n][0]); if ($nObj[0] == PDF_TYPE_STREAM) { $this->pdf_write_value($nObj); } else { $this->pdf_write_value($nObj[1]); } $this->_out('endobj'); $this->_obj_stack[$filename][$n] = null; unset($this->_obj_stack[$filename][$n]); reset($this->_obj_stack[$filename]); } } } } } function _putformxobjects() { $filter=($this->compress) ? '/Filter /FlateDecode ' : ''; reset($this->tpls); foreach($this->tpls AS $tplidx => $tpl) { $p=($this->compress) ? gzcompress($tpl['buffer']) : $tpl['buffer']; $this->_newobj(); $this->tpls[$tplidx]['n'] = $this->n; $this->_out('<<'.$filter.'/Type /XObject'); $this->_out('/Subtype /Form'); $this->_out('/FormType 1'); $this->_out(sprintf('/BBox [%.2F %.2F %.2F %.2F]', $tpl['box']['x']*_MPDFK, $tpl['box']['y']*_MPDFK, ($tpl['box']['x'] + $tpl['box']['w'])*_MPDFK, ($tpl['box']['y'] + $tpl['box']['h'])*_MPDFK ) ); if (isset($tpl['box'])) $this->_out(sprintf('/Matrix [1 0 0 1 %.5F %.5F]',-$tpl['box']['x']*_MPDFK, -$tpl['box']['y']*_MPDFK)); $this->_out('/Resources '); if (isset($tpl['resources'])) { $this->current_parser =& $tpl['parser']; $this->pdf_write_value($tpl['resources']); } else { $this->_out('<</ProcSet [/PDF /Text /ImageB /ImageC /ImageI]'); if (isset($this->_res['tpl'][$tplidx]['fonts']) && count($this->_res['tpl'][$tplidx]['fonts'])) { $this->_out('/Font <<'); foreach($this->_res['tpl'][$tplidx]['fonts'] as $font) $this->_out('/F'.$font['i'].' '.$font['n'].' 0 R'); $this->_out('>>'); } if(isset($this->_res['tpl'][$tplidx]['images']) && count($this->_res['tpl'][$tplidx]['images']) || isset($this->_res['tpl'][$tplidx]['tpls']) && count($this->_res['tpl'][$tplidx]['tpls'])) { $this->_out('/XObject <<'); if (isset($this->_res['tpl'][$tplidx]['images']) && count($this->_res['tpl'][$tplidx]['images'])) { foreach($this->_res['tpl'][$tplidx]['images'] as $image) $this->_out('/I'.$image['i'].' '.$image['n'].' 0 R'); } if (isset($this->_res['tpl'][$tplidx]['tpls']) && count($this->_res['tpl'][$tplidx]['tpls'])) { foreach($this->_res['tpl'][$tplidx]['tpls'] as $i => $itpl) $this->_out($this->tplprefix.$i.' '.$itpl['n'].' 0 R'); } $this->_out('>>'); } $this->_out('>>'); } $this->_out('/Length '.strlen($p).' >>'); $this->_putstream($p); $this->_out('endobj'); } } function _putpatterns() { for ($i = 1; $i <= count($this->patterns); $i++) { $x = $this->patterns[$i]['x']; $y = $this->patterns[$i]['y']; $w = $this->patterns[$i]['w']; $h = $this->patterns[$i]['h']; $pgh = $this->patterns[$i]['pgh']; $orig_w = $this->patterns[$i]['orig_w']; $orig_h = $this->patterns[$i]['orig_h']; $image_id = $this->patterns[$i]['image_id']; $itype = $this->patterns[$i]['itype']; $bpa = $this->patterns[$i]['bpa']; if ($this->patterns[$i]['x_repeat']) { $x_repeat = true; } else { $x_repeat = false; } if ($this->patterns[$i]['y_repeat']) { $y_repeat = true; } else { $y_repeat = false; } $x_pos = $this->patterns[$i]['x_pos']; if (stristr($x_pos ,'%') ) { $x_pos += 0; $x_pos /= 100; if (isset($bpa['w']) && $bpa['w']) $x_pos = ($bpa['w'] * $x_pos) - ($orig_w/_MPDFK * $x_pos); else $x_pos = ($w * $x_pos) - ($orig_w/_MPDFK * $x_pos); } $y_pos = $this->patterns[$i]['y_pos']; if (stristr($y_pos ,'%') ) { $y_pos += 0; $y_pos /= 100; if (isset($bpa['h']) && $bpa['h']) $y_pos = ($bpa['h'] * $y_pos) - ($orig_h/_MPDFK * $y_pos); else $y_pos = ($h * $y_pos) - ($orig_h/_MPDFK * $y_pos); } if (isset($bpa['x']) && $bpa['x']) $adj_x = ($x_pos + $bpa['x']) *_MPDFK; else $adj_x = ($x_pos + $x) *_MPDFK; if (isset($bpa['y']) && $bpa['y']) $adj_y = (($pgh - $y_pos - $bpa['y'])*_MPDFK) - $orig_h ; else $adj_y = (($pgh - $y_pos - $y)*_MPDFK) - $orig_h ; $img_obj = false; if ($itype == 'svg' || $itype == 'wmf') { foreach($this->formobjects AS $fo) { if ($fo['i'] == $image_id) { $img_obj = $fo['n']; $fo_w = $fo['w']; $fo_h = -$fo['h']; $wmf_x = $fo['x']; $wmf_y = $fo['y']; break; } } } else { foreach($this->images AS $img) { if ($img['i'] == $image_id) { $img_obj = $img['n']; break; } } } if (!$img_obj ) { echo "Problem: Image object not found for background pattern ".$img['i']; exit; } $this->_newobj(); $this->_out('<</ProcSet [/PDF /Text /ImageB /ImageC /ImageI]'); if ($itype == 'svg' || $itype == 'wmf') { $this->_out('/XObject <</FO'.$image_id.' '.$img_obj.' 0 R >>'); if (count($this->extgstates)) { $this->_out('/ExtGState <<'); foreach($this->extgstates as $k=>$extgstate) if (isset($extgstate['fo']) && $extgstate['fo']) { if (isset($extgstate['trans'])) $this->_out('/'.$extgstate['trans'].' '.$extgstate['n'].' 0 R'); else $this->_out('/GS'.$k.' '.$extgstate['n'].' 0 R'); } $this->_out('>>'); } if (isset($this->gradients) AND (count($this->gradients) > 0)) { $this->_out('/Shading <<'); foreach ($this->gradients as $id => $grad) { if (isset($grad['fo']) && $grad['fo']) { $this->_out('/Sh'.$id.' '.$grad['id'].' 0 R'); } } $this->_out('>>'); } $this->_out('/Font <<'); foreach($this->fonts as $font) { if (!$font['used'] && $font['type']=='TTF') { continue; } if (isset($font['fo']) && $font['fo']) { if ($font['type']=='TTF' && ($font['sip'] || $font['smp'])) { foreach($font['n'] AS $k => $fid) { $this->_out('/F'.$font['subsetfontids'][$k].' '.$font['n'][$k].' 0 R'); } } else { $this->_out('/F'.$font['i'].' '.$font['n'].' 0 R'); } } } $this->_out('>>'); } else { $this->_out('/XObject <</I'.$image_id.' '.$img_obj.' 0 R >>'); } $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $this->patterns[$i]['n'] = $this->n; $this->_out('<< /Type /Pattern /PatternType 1 /PaintType 1 /TilingType 2'); $this->_out('/Resources '. ($this->n-1) .' 0 R'); $this->_out(sprintf('/BBox [0 0 %.3F %.3F]',$orig_w,$orig_h)); if ($x_repeat) { $this->_out(sprintf('/XStep %.3F',$orig_w)); } else { $this->_out(sprintf('/XStep %d',99999)); } if ($y_repeat) { $this->_out(sprintf('/YStep %.3F',$orig_h)); } else { $this->_out(sprintf('/YStep %d',99999)); } if ($itype == 'svg' || $itype == 'wmf') { $this->_out(sprintf('/Matrix [1 0 0 -1 %.3F %.3F]', $adj_x, ($adj_y+$orig_h))); $s = sprintf("q %.3F 0 0 %.3F %.3F %.3F cm /FO%d Do Q",($orig_w/$fo_w), (-$orig_h/$fo_h), -($orig_w/$fo_w)*$wmf_x, ($orig_w/$fo_w)*$wmf_y, $image_id); } else { $this->_out(sprintf('/Matrix [1 0 0 1 %.3F %.3F]',$adj_x,$adj_y)); $s = sprintf("q %.3F 0 0 %.3F 0 0 cm /I%d Do Q",$orig_w,$orig_h,$image_id); } if ($this->compress) { $this->_out('/Filter /FlateDecode'); $s = gzcompress($s); } $this->_out('/Length '.strlen($s).'>>'); $this->_putstream($s); $this->_out('endobj'); } } function _putshaders() { $maxid = count($this->gradients); foreach ($this->gradients as $id => $grad) { if (($grad['type'] == 2 || $grad['type'] == 3) && empty($grad['is_mask'])) { $this->_newobj(); $this->_out('<<'); $this->_out('/FunctionType 3'); $this->_out('/Domain [0 1]'); $fn = array(); $bd = array(); $en = array(); for($i=0; $i<(count($grad['stops'])-1); $i++) { $fn[] = ($this->n+1+$i).' 0 R'; $en[] = '0 1'; if ($i>0) { $bd[] = sprintf('%.3F', $grad['stops'][$i]['offset']); } } $this->_out('/Functions ['.implode(' ',$fn).']'); $this->_out('/Bounds ['.implode(' ',$bd).']'); $this->_out('/Encode ['.implode(' ',$en).']'); $this->_out('>>'); $this->_out('endobj'); $f1 = $this->n; for($i=0; $i<(count($grad['stops'])-1); $i++) { $this->_newobj(); $this->_out('<<'); $this->_out('/FunctionType 2'); $this->_out('/Domain [0 1]'); $this->_out('/C0 ['.$grad['stops'][$i]['col'].']'); $this->_out('/C1 ['.$grad['stops'][$i+1]['col'].']'); $this->_out('/N 1'); $this->_out('>>'); $this->_out('endobj'); } } if ($grad['type'] == 2 || $grad['type'] == 3) { if (isset($grad['trans']) && $grad['trans']) { $this->_newobj(); $this->_out('<<'); $this->_out('/FunctionType 3'); $this->_out('/Domain [0 1]'); $fn = array(); $bd = array(); $en = array(); for($i=0; $i<(count($grad['stops'])-1); $i++) { $fn[] = ($this->n+1+$i).' 0 R'; $en[] = '0 1'; if ($i>0) { $bd[] = sprintf('%.3F', $grad['stops'][$i]['offset']); } } $this->_out('/Functions ['.implode(' ',$fn).']'); $this->_out('/Bounds ['.implode(' ',$bd).']'); $this->_out('/Encode ['.implode(' ',$en).']'); $this->_out('>>'); $this->_out('endobj'); $f2 = $this->n; for($i=0; $i<(count($grad['stops'])-1); $i++) { $this->_newobj(); $this->_out('<<'); $this->_out('/FunctionType 2'); $this->_out('/Domain [0 1]'); $this->_out(sprintf('/C0 [%.3F]', $grad['stops'][$i]['opacity'])); $this->_out(sprintf('/C1 [%.3F]', $grad['stops'][$i+1]['opacity'])); $this->_out('/N 1'); $this->_out('>>'); $this->_out('endobj'); } } } if (empty($grad['is_mask'])) { $this->_newobj(); $this->_out('<<'); $this->_out('/ShadingType '.$grad['type']); if (isset($grad['colorspace'])) { $this->_out('/ColorSpace /Device'.$grad['colorspace']); } else { $this->_out('/ColorSpace /DeviceRGB'); } if ($grad['type'] == 2) { $this->_out(sprintf('/Coords [%.3F %.3F %.3F %.3F]', $grad['coords'][0], $grad['coords'][1], $grad['coords'][2], $grad['coords'][3])); $this->_out('/Function '.$f1.' 0 R'); $this->_out('/Extend ['.$grad['extend'][0].' '.$grad['extend'][1].'] '); $this->_out('>>'); } else if ($grad['type'] == 3) { $ir = 0; if (isset($grad['coords'][5]) && $grad['coords'][5]) { $ir = $grad['coords'][5]; } $this->_out(sprintf('/Coords [%.3F %.3F %.3F %.3F %.3F %.3F]', $grad['coords'][0], $grad['coords'][1], $ir, $grad['coords'][2], $grad['coords'][3], $grad['coords'][4])); $this->_out('/Function '.$f1.' 0 R'); $this->_out('/Extend ['.$grad['extend'][0].' '.$grad['extend'][1].'] '); $this->_out('>>'); } else if ($grad['type']==6) { $this->_out('/BitsPerCoordinate 16'); $this->_out('/BitsPerComponent 8'); if ($grad['colorspace'] == 'CMYK') { $this->_out('/Decode[0 1 0 1 0 1 0 1 0 1 0 1]'); } else if ($grad['colorspace'] == 'Gray') { $this->_out('/Decode[0 1 0 1 0 1]'); } else { $this->_out('/Decode[0 1 0 1 0 1 0 1 0 1]'); } $this->_out('/BitsPerFlag 8'); $this->_out('/Length '.strlen($grad['stream'])); $this->_out('>>'); $this->_putstream($grad['stream']); } $this->_out('endobj'); } $this->gradients[$id]['id'] = $this->n; $this->_newobj(); $out = '<< /Type /Pattern /PatternType 2'; $out .= ' /Shading '.$this->gradients[$id]['id'].' 0 R'; $out .= ' >>'; $out .= "\n".'endobj'; $this->_out($out); $this->gradients[$id]['pattern'] = $this->n; if (isset($grad['trans']) && $grad['trans']) { $transid = $id + $maxid; $this->_newobj(); $this->_out('<<'); $this->_out('/ShadingType '.$grad['type']); $this->_out('/ColorSpace /DeviceGray'); if ($grad['type'] == 2) { $this->_out(sprintf('/Coords [%.3F %.3F %.3F %.3F]', $grad['coords'][0], $grad['coords'][1], $grad['coords'][2], $grad['coords'][3])); $this->_out('/Function '.$f2.' 0 R'); $this->_out('/Extend ['.$grad['extend'][0].' '.$grad['extend'][1].'] '); $this->_out('>>'); } else if ($grad['type'] == 3) { $ir = 0; if (isset($grad['coords'][5]) && $grad['coords'][5]) { $ir = $grad['coords'][5]; } $this->_out(sprintf('/Coords [%.3F %.3F %.3F %.3F %.3F %.3F]', $grad['coords'][0], $grad['coords'][1], $ir, $grad['coords'][2], $grad['coords'][3], $grad['coords'][4])); $this->_out('/Function '.$f2.' 0 R'); $this->_out('/Extend ['.$grad['extend'][0].' '.$grad['extend'][1].'] '); $this->_out('>>'); } else if ($grad['type']==6) { $this->_out('/BitsPerCoordinate 16'); $this->_out('/BitsPerComponent 8'); $this->_out('/Decode[0 1 0 1 0 1]'); $this->_out('/BitsPerFlag 8'); $this->_out('/Length '.strlen($grad['stream_trans'])); $this->_out('>>'); $this->_putstream($grad['stream_trans']); } $this->_out('endobj'); $this->gradients[$transid]['id'] = $this->n; $this->_newobj(); $this->_out('<< /Type /Pattern /PatternType 2'); $this->_out('/Shading '.$this->gradients[$transid]['id'].' 0 R'); $this->_out('>>'); $this->_out('endobj'); $this->gradients[$transid]['pattern'] = $this->n; $this->_newobj(); $str = 'q /a0 gs /Pattern cs /p'.$transid.' scn -'.($this->wPt/2).' -'.($this->hPt/2).' '.(2*$this->wPt).' '.(2*$this->hPt).' re f Q'; $filter=($this->compress) ? '/Filter /FlateDecode ' : ''; $p=($this->compress) ? gzcompress($str) : $str; $this->_out('<< /Type /XObject /Subtype /Form /FormType 1 '.$filter); $this->_out('/Length '.strlen($p)); $this->_out('/BBox [-'.($this->wPt/2).' -'.($this->hPt/2).' '.(2*$this->wPt).' '.(2*$this->hPt).']'); $this->_out('/Group << /Type /Group /S /Transparency /CS /DeviceGray >>'); $this->_out('/Resources <<'); $this->_out('/ExtGState << /a0 << /ca 1 /CA 1 >> >>'); $this->_out('/Pattern << /p'.$transid.' '.$this->gradients[$transid]['pattern'].' 0 R >>'); $this->_out('>>'); $this->_out('>>'); $this->_putstream($p); $this->_out('endobj'); $this->_newobj(); $this->_out('<< /Type /Mask /S /Luminosity /G '.($this->n - 1).' 0 R >>'."\n".'endobj'); $this->_newobj(); $this->_out('<< /Type /ExtGState /SMask '.($this->n - 1).' 0 R /AIS false >>'."\n".'endobj'); if ($grad['fo']) { $this->extgstates[] = array('n' => $this->n, 'trans' => 'TGS'.$id, 'fo'=>true); } else { $this->extgstates[] = array('n' => $this->n, 'trans' => 'TGS'.$id); } } } } function _putspotcolors() { foreach($this->spotColors as $name=>$color) { $this->_newobj(); $this->_out('[/Separation /'.str_replace(' ','#20',$name)); $this->_out('/DeviceCMYK <<'); $this->_out('/Range [0 1 0 1 0 1 0 1] /C0 [0 0 0 0] '); $this->_out(sprintf('/C1 [%.3F %.3F %.3F %.3F] ',$color['c']/100,$color['m']/100,$color['y']/100,$color['k']/100)); $this->_out('/FunctionType 2 /Domain [0 1] /N 1>>]'); $this->_out('endobj'); $this->spotColors[$name]['n']=$this->n; } } function _putresources() { if ($this->hasOC || count($this->layers)) $this->_putocg(); $this->_putextgstates(); $this->_putspotcolors(); if ($this->progressBar) { $this->UpdateProgressBar(2,'40','Compiling Fonts'); } $this->_putfonts(); if ($this->progressBar) { $this->UpdateProgressBar(2,'50','Compiling Images'); } $this->_putimages(); $this->_putformobjects(); if ($this->enableImports) { $this->_putformxobjects(); $this->_putimportedobjects(); } $this->_putshaders(); $this->_putpatterns(); $this->offsets[2]=strlen($this->buffer); $this->_out('2 0 obj'); $this->_out('<</ProcSet [/PDF /Text /ImageB /ImageC /ImageI]'); $this->_out('/Font <<'); foreach($this->fonts as $font) { if (!$font['used'] && $font['type']=='TTF') { continue; } if ($font['type']=='TTF' && ($font['sip'] || $font['smp'])) { foreach($font['n'] AS $k => $fid) { $this->_out('/F'.$font['subsetfontids'][$k].' '.$font['n'][$k].' 0 R'); } } else { $this->_out('/F'.$font['i'].' '.$font['n'].' 0 R'); } } $this->_out('>>'); if (count($this->spotColors)) { $this->_out('/ColorSpace <<'); foreach($this->spotColors as $color) $this->_out('/CS'.$color['i'].' '.$color['n'].' 0 R'); $this->_out('>>'); } if (count($this->extgstates)) { $this->_out('/ExtGState <<'); foreach($this->extgstates as $k=>$extgstate) if (isset($extgstate['trans'])) $this->_out('/'.$extgstate['trans'].' '.$extgstate['n'].' 0 R'); else $this->_out('/GS'.$k.' '.$extgstate['n'].' 0 R'); $this->_out('>>'); } if (isset($this->gradients) AND (count($this->gradients) > 0)) { $this->_out('/Shading <<'); foreach ($this->gradients as $id => $grad) { $this->_out('/Sh'.$id.' '.$grad['id'].' 0 R'); } $this->_out('>>'); } if(count($this->images) || count($this->formobjects) || ($this->enableImports && count($this->tpls))) { $this->_out('/XObject <<'); foreach($this->images as $image) $this->_out('/I'.$image['i'].' '.$image['n'].' 0 R'); foreach($this->formobjects as $formobject) $this->_out('/FO'.$formobject['i'].' '.$formobject['n'].' 0 R'); if ($this->enableImports && count($this->tpls)) { foreach($this->tpls as $tplidx => $tpl) { $this->_out($this->tplprefix.$tplidx.' '.$tpl['n'].' 0 R'); } } $this->_out('>>'); } if (count($this->patterns)) { $this->_out('/Pattern <<'); foreach($this->patterns as $k=>$patterns) $this->_out('/P'.$k.' '.$patterns['n'].' 0 R'); $this->_out('>>'); } if ($this->hasOC || count($this->layers)) { $this->_out('/Properties <<'); if ($this->hasOC) { $this->_out('/OC1 '.$this->n_ocg_print.' 0 R /OC2 '.$this->n_ocg_view.' 0 R /OC3 '.$this->n_ocg_hidden.' 0 R '); } if (count($this->layers)) { foreach($this->layers as $id=>$layer) $this->_out('/ZI'.$id.' '.$layer['n'].' 0 R'); } $this->_out('>>'); } $this->_out('>>'); $this->_out('endobj'); $this->_putbookmarks(); if (isset($this->js) && $this->js) { $this->_putjavascript(); } if ($this->encrypted) { $this->_newobj(); $this->enc_obj_id = $this->n; $this->_out('<<'); $this->_putencryption(); $this->_out('>>'); $this->_out('endobj'); } } function _putjavascript() { $this->_newobj(); $this->n_js = $this->n; $this->_out('<<'); $this->_out('/Names [(EmbeddedJS) '.(1 + $this->n).' 0 R ]'); $this->_out('>>'); $this->_out('endobj'); $this->_newobj(); $this->_out('<<'); $this->_out('/S /JavaScript'); $this->_out('/JS '.$this->_textstring($this->js)); $this->_out('>>'); $this->_out('endobj'); } function _putencryption() { $this->_out('/Filter /Standard'); if ($this->useRC128encryption) { $this->_out('/V 2'); $this->_out('/R 3'); $this->_out('/Length 128'); } else { $this->_out('/V 1'); $this->_out('/R 2'); } $this->_out('/O ('.$this->_escape($this->Ovalue).')'); $this->_out('/U ('.$this->_escape($this->Uvalue).')'); $this->_out('/P '.$this->Pvalue); } function _puttrailer() { $this->_out('/Size '.($this->n+1)); $this->_out('/Root '.$this->n.' 0 R'); $this->_out('/Info '.$this->InfoRoot.' 0 R'); if ($this->encrypted) { $this->_out('/Encrypt '.$this->enc_obj_id.' 0 R'); $this->_out('/ID [<'.$this->uniqid.'> <'.$this->uniqid.'>]'); } else { $uniqid = md5(time() . $this->buffer); $this->_out('/ID [<'.$uniqid.'> <'.$uniqid.'>]'); } } function SetProtection($permissions=array(),$user_pass='',$owner_pass=null, $length=40) { $this->encrypted=false; if (is_string($permissions) && strlen($permissions)>0) { $permissions = array($permissions); } else if (!is_array($permissions)) { return 0; } $this->last_rc4_key=''; $this->padding="\x28\xBF\x4E\x5E\x4E\x75\x8A\x41\x64\x00\x4E\x56\xFF\xFA\x01\x08". "\x2E\x2E\x00\xB6\xD0\x68\x3E\x80\x2F\x0C\xA9\xFE\x64\x53\x69\x7A"; $options = array( 'print' => 4, 'modify' => 8, 'copy' => 16, 'annot-forms' => 32, 'fill-forms' => 256, 'extract' => 512, 'assemble' => 1024, 'print-highres' => 2048 ); $protection = 4294963392; foreach ($permissions as $permission) { if (!isset($options[$permission])) $this->Error('Incorrect permission: '.$permission); if ($options[$permission] > 32) { $this->useRC128encryption = true; } if (isset($options[$permission])) $protection += $options[$permission]; } if ($length==128) { $this->useRC128encryption = true; } if ($owner_pass === null) $owner_pass = uniqid(rand()); $this->encrypted = true; $this->_generateencryptionkey($user_pass, $owner_pass, $protection); } function _objectkey($n) { if ($this->useRC128encryption) $len = 16; else $len = 10; return substr($this->_md5_16($this->encryption_key.pack('VXxx',$n)),0,$len); } function _RC4($key, $text) { if ($this->last_rc4_key != $key) { $k = str_repeat($key, 256/strlen($key)+1); $rc4 = range(0,255); $j = 0; for ($i=0; $i<256; $i++){ $t = $rc4[$i]; $j = ($j + $t + ord($k[$i])) % 256; $rc4[$i] = $rc4[$j]; $rc4[$j] = $t; } $this->last_rc4_key = $key; $this->last_rc4_key_c = $rc4; } else { $rc4 = $this->last_rc4_key_c; } $len = strlen($text); $a = 0; $b = 0; $out = ''; for ($i=0; $i<$len; $i++){ $a = ($a+1)%256; $t= $rc4[$a]; $b = ($b+$t)%256; $rc4[$a] = $rc4[$b]; $rc4[$b] = $t; $k = $rc4[($rc4[$a]+$rc4[$b])%256]; $out.= chr(ord($text[$i]) ^ $k); } return $out; } function _md5_16($string) { return pack('H*',md5($string)); } function _Ovalue($user_pass, $owner_pass) { $tmp = $this->_md5_16($owner_pass); if ($this->useRC128encryption) { for ($i = 0; $i < 50; ++$i) { $tmp = $this->_md5_16($tmp); } } if ($this->useRC128encryption) $keybytelen = (128 / 8); else $keybytelen = (40 / 8); $owner_RC4_key = substr($tmp,0,$keybytelen); $enc = $this->_RC4($owner_RC4_key, $user_pass); if ($this->useRC128encryption) { $len = strlen($owner_RC4_key); for ($i = 1; $i <= 19; ++$i) { $key = ''; for ($j = 0; $j < $len; ++$j) { $key .= chr(ord($owner_RC4_key{$j}) ^ $i); } $enc = $this->_RC4($key, $enc); } } return $enc; } function _Uvalue() { if ($this->useRC128encryption) { $tmp = $this->_md5_16($this->padding.$this->_hexToString($this->uniqid)); $enc = $this->_RC4($this->encryption_key, $tmp); $len = strlen($tmp); for ($i=1; $i<=19; ++$i) { $key = ''; for ($j=0; $j<$len; ++$j) { $key .= chr(ord($this->encryption_key{$j}) ^ $i); } $enc = $this->_RC4($key, $enc); } $enc .= str_repeat("\x00", 16); return substr($enc, 0, 32); } else { return $this->_RC4($this->encryption_key, $this->padding); } } function _generateencryptionkey($user_pass, $owner_pass, $protection) { $user_pass = substr($user_pass.$this->padding,0,32); $owner_pass = substr($owner_pass.$this->padding,0,32); $chars = 'ABCDEF1234567890'; $id = ''; for ($i=0; $i<32; $i++) { $id .= $chars{rand(0, 15)}; } $this->uniqid = md5($id); $this->Ovalue = $this->_Ovalue($user_pass,$owner_pass); if ($this->useRC128encryption) $keybytelen = (128/8); else $keybytelen = (40/8); $prot = sprintf('%032b', $protection); $perms = chr(bindec(substr($prot,24,8))); $perms .= chr(bindec(substr($prot,16,8))); $perms .= chr(bindec(substr($prot,8,8))); $perms .= chr(bindec(substr($prot,0,8))); $tmp = $this->_md5_16($user_pass.$this->Ovalue.$perms.$this->_hexToString($this->uniqid)); if ($this->useRC128encryption) { for ($i=0; $i<50; ++$i) { $tmp = $this->_md5_16(substr($tmp, 0, $keybytelen)); } } $this->encryption_key = substr($tmp,0,$keybytelen); $this->Uvalue = $this->_Uvalue(); $this->Pvalue = $protection; } function _hexToString($hs) { $s = ''; $len = strlen($hs); if (($len % 2) != 0) { $hs .= '0'; ++$len; } for ($i = 0; $i < $len; $i += 2) { $s .= chr(hexdec($hs{$i}.$hs{($i + 1)})); } return $s; } function Bookmark($txt,$level=0,$y=0) { $txt = $this->purify_utf8_text($txt); if ($this->text_input_as_HTML) { $txt = $this->all_entities_to_utf8($txt); } if($y==-1) { if (!$this->ColActive){ $y=$this->y; } else { $y = $this->y0; } } $bmo = array('t'=>$txt,'l'=>$level,'y'=>$y,'p'=>$this->page); if ($this->keep_block_together) { $this->ktBMoutlines[]= $bmo; } else if ($this->table_rotate) { $this->tbrot_BMoutlines[]= $bmo; } else if ($this->kwt) { $this->kwt_BMoutlines[]= $bmo; } else if ($this->ColActive) { $this->col_BMoutlines[]= $bmo; } else { $this->BMoutlines[]= $bmo; } } function _putbookmarks() { $nb=count($this->BMoutlines); if($nb==0) return; $bmo = $this->BMoutlines; $this->BMoutlines = array(); $lastlevel = -1; for($i=0;$i<count($bmo);$i++) { if ($bmo[$i]['l']>0) { while($bmo[$i]['l']-$lastlevel > 1) { $new = $bmo[$i]; $new['t']="[".$new['t']."]"; $new['l']=$lastlevel+1; $lastlevel++; $this->BMoutlines[] = $new; } } $this->BMoutlines[] = $bmo[$i]; $lastlevel = $bmo[$i]['l']; } $nb=count($this->BMoutlines); $lru=array(); $level=0; foreach($this->BMoutlines as $i=>$o) { if($o['l']>0) { $parent=$lru[$o['l']-1]; $this->BMoutlines[$i]['parent']=$parent; $this->BMoutlines[$parent]['last']=$i; if($o['l']>$level) { $this->BMoutlines[$parent]['first']=$i; } } else { $this->BMoutlines[$i]['parent']=$nb; } if($o['l']<=$level and $i>0) { $prev=$lru[$o['l']]; $this->BMoutlines[$prev]['next']=$i; $this->BMoutlines[$i]['prev']=$prev; } $lru[$o['l']]=$i; $level=$o['l']; } $n=$this->n+1; foreach($this->BMoutlines as $i=>$o) { $this->_newobj(); $this->_out('<</Title '.$this->_UTF16BEtextstring($o['t'])); $this->_out('/Parent '.($n+$o['parent']).' 0 R'); if(isset($o['prev'])) $this->_out('/Prev '.($n+$o['prev']).' 0 R'); if(isset($o['next'])) $this->_out('/Next '.($n+$o['next']).' 0 R'); if(isset($o['first'])) $this->_out('/First '.($n+$o['first']).' 0 R'); if(isset($o['last'])) $this->_out('/Last '.($n+$o['last']).' 0 R'); if (isset($this->pageDim[$o['p']]['h'])) { $h=$this->pageDim[$o['p']]['h']; } else { $h = 0; } $this->_out(sprintf('/Dest [%d 0 R /XYZ 0 %.3F null]',1+2*($o['p']),($h-$o['y'])*_MPDFK)); if (isset($this->bookmarkStyles) && isset($this->bookmarkStyles[$o['l']])) { $bms = $this->bookmarkStyles[$o['l']]['style']; $style = 0; if (strpos($bms,'B') !== false) { $style += 2; } if (strpos($bms,'I') !== false) { $style += 1; } $this->_out(sprintf('/F %d', $style)); $col = $this->bookmarkStyles[$o['l']]['color']; if (isset($col) && is_array($col) && count($col)==3) { $this->_out(sprintf('/C [%.3F %.3F %.3F]', ($col[0]/255), ($col[1]/255), ($col[2]/255))); } } $this->_out('/Count 0>>'); $this->_out('endobj'); } $this->_newobj(); $this->OutlineRoot=$this->n; $this->_out('<</Type /BMoutlines /First '.$n.' 0 R'); $this->_out('/Last '.($n+$lru[0]).' 0 R>>'); $this->_out('endobj'); } function startPageNums() { } function TOC($tocfont='', $tocfontsize=0, $tocindent=0, $resetpagenum='', $pagenumstyle='', $suppress='', $toc_orientation='', $TOCusePaging=true, $TOCuseLinking=false, $toc_id=0, $tocoutdent='') { if (!class_exists('tocontents', false)) { include(_MPDF_PATH.'classes/tocontents.php'); } if (empty($this->tocontents)) { $this->tocontents = new tocontents($this); } $this->tocontents->TOC($tocfont, $tocfontsize, $tocindent, $resetpagenum, $pagenumstyle, $suppress, $toc_orientation, $TOCusePaging, $TOCuseLinking, $toc_id, $tocoutdent); } function TOCpagebreakByArray($a) { if (!is_array($a)) { $a = array(); } if (!class_exists('tocontents', false)) { include(_MPDF_PATH.'classes/tocontents.php'); } if (empty($this->tocontents)) { $this->tocontents = new tocontents($this); } $tocoutdent = (isset($a['tocoutdent']) ? $a['tocoutdent'] : (isset($a['outdent']) ? $a['outdent'] : '')); $TOCusePaging = (isset($a['TOCusePaging']) ? $a['TOCusePaging'] : (isset($a['paging']) ? $a['paging'] : true)); $TOCuseLinking = (isset($a['TOCuseLinking']) ? $a['TOCuseLinking'] : (isset($a['links']) ? $a['links'] : '')); $toc_orientation = (isset($a['toc_orientation']) ? $a['toc_orientation'] : (isset($a['toc-orientation']) ? $a['toc-orientation'] : '')); $toc_mgl = (isset($a['toc_mgl']) ? $a['toc_mgl'] : (isset($a['toc-margin-left']) ? $a['toc-margin-left'] : '')); $toc_mgr = (isset($a['toc_mgr']) ? $a['toc_mgr'] : (isset($a['toc-margin-right']) ? $a['toc-margin-right'] : '')); $toc_mgt = (isset($a['toc_mgt']) ? $a['toc_mgt'] : (isset($a['toc-margin-top']) ? $a['toc-margin-top'] : '')); $toc_mgb = (isset($a['toc_mgb']) ? $a['toc_mgb'] : (isset($a['toc-margin-bottom']) ? $a['toc-margin-bottom'] : '')); $toc_mgh = (isset($a['toc_mgh']) ? $a['toc_mgh'] : (isset($a['toc-margin-header']) ? $a['toc-margin-header'] : '')); $toc_mgf = (isset($a['toc_mgf']) ? $a['toc_mgf'] : (isset($a['toc-margin-footer']) ? $a['toc-margin-footer'] : '')); $toc_ohname = (isset($a['toc_ohname']) ? $a['toc_ohname'] : (isset($a['toc-odd-header-name']) ? $a['toc-odd-header-name'] : '')); $toc_ehname = (isset($a['toc_ehname']) ? $a['toc_ehname'] : (isset($a['toc-even-header-name']) ? $a['toc-even-header-name'] : '')); $toc_ofname = (isset($a['toc_ofname']) ? $a['toc_ofname'] : (isset($a['toc-odd-footer-name']) ? $a['toc-odd-footer-name'] : '')); $toc_efname = (isset($a['toc_efname']) ? $a['toc_efname'] : (isset($a['toc-even-footer-name']) ? $a['toc-even-footer-name'] : '')); $toc_ohvalue = (isset($a['toc_ohvalue']) ? $a['toc_ohvalue'] : (isset($a['toc-odd-header-value']) ? $a['toc-odd-header-value'] : 0)); $toc_ehvalue = (isset($a['toc_ehvalue']) ? $a['toc_ehvalue'] : (isset($a['toc-even-header-value']) ? $a['toc-even-header-value'] : 0)); $toc_ofvalue = (isset($a['toc_ofvalue']) ? $a['toc_ofvalue'] : (isset($a['toc-odd-footer-value']) ? $a['toc-odd-footer-value'] : 0)); $toc_efvalue = (isset($a['toc_efvalue']) ? $a['toc_efvalue'] : (isset($a['toc-even-footer-value']) ? $a['toc-even-footer-value'] : 0)); $toc_preHTML = (isset($a['toc_preHTML']) ? $a['toc_preHTML'] : (isset($a['toc-preHTML']) ? $a['toc-preHTML'] : '')); $toc_postHTML = (isset($a['toc_postHTML']) ? $a['toc_postHTML'] : (isset($a['toc-postHTML']) ? $a['toc-postHTML'] : '')); $toc_bookmarkText = (isset($a['toc_bookmarkText']) ? $a['toc_bookmarkText'] : (isset($a['toc-bookmarkText']) ? $a['toc-bookmarkText'] : '')); $resetpagenum = (isset($a['resetpagenum']) ? $a['resetpagenum'] : ''); $pagenumstyle = (isset($a['pagenumstyle']) ? $a['pagenumstyle'] : ''); $suppress = (isset($a['suppress']) ? $a['suppress'] : ''); $orientation = (isset($a['orientation']) ? $a['orientation'] : ''); $mgl = (isset($a['mgl']) ? $a['mgl'] : (isset($a['margin-left']) ? $a['margin-left'] : '')); $mgr = (isset($a['mgr']) ? $a['mgr'] : (isset($a['margin-right']) ? $a['margin-right'] : '')); $mgt = (isset($a['mgt']) ? $a['mgt'] : (isset($a['margin-top']) ? $a['margin-top'] : '')); $mgb = (isset($a['mgb']) ? $a['mgb'] : (isset($a['margin-bottom']) ? $a['margin-bottom'] : '')); $mgh = (isset($a['mgh']) ? $a['mgh'] : (isset($a['margin-header']) ? $a['margin-header'] : '')); $mgf = (isset($a['mgf']) ? $a['mgf'] : (isset($a['margin-footer']) ? $a['margin-footer'] : '')); $ohname = (isset($a['ohname']) ? $a['ohname'] : (isset($a['odd-header-name']) ? $a['odd-header-name'] : '')); $ehname = (isset($a['ehname']) ? $a['ehname'] : (isset($a['even-header-name']) ? $a['even-header-name'] : '')); $ofname = (isset($a['ofname']) ? $a['ofname'] : (isset($a['odd-footer-name']) ? $a['odd-footer-name'] : '')); $efname = (isset($a['efname']) ? $a['efname'] : (isset($a['even-footer-name']) ? $a['even-footer-name'] : '')); $ohvalue = (isset($a['ohvalue']) ? $a['ohvalue'] : (isset($a['odd-header-value']) ? $a['odd-header-value'] : 0)); $ehvalue = (isset($a['ehvalue']) ? $a['ehvalue'] : (isset($a['even-header-value']) ? $a['even-header-value'] : 0)); $ofvalue = (isset($a['ofvalue']) ? $a['ofvalue'] : (isset($a['odd-footer-value']) ? $a['odd-footer-value'] : 0)); $efvalue = (isset($a['efvalue']) ? $a['efvalue'] : (isset($a['even-footer-value']) ? $a['even-footer-value'] : 0)); $toc_id = (isset($a['toc_id']) ? $a['toc_id'] : (isset($a['name']) ? $a['name'] : 0)); $pagesel = (isset($a['pagesel']) ? $a['pagesel'] : (isset($a['pageselector']) ? $a['pageselector'] : '')); $toc_pagesel = (isset($a['toc_pagesel']) ? $a['toc_pagesel'] : (isset($a['toc-pageselector']) ? $a['toc-pageselector'] : '')); $sheetsize = (isset($a['sheetsize']) ? $a['sheetsize'] : (isset($a['sheet-size']) ? $a['sheet-size'] : '')); $toc_sheetsize = (isset($a['toc_sheetsize']) ? $a['toc_sheetsize'] : (isset($a['toc-sheet-size']) ? $a['toc-sheet-size'] : '')); $this->TOCpagebreak($tocfont, $tocfontsize, $tocindent, $TOCusePaging, $TOCuseLinking, $toc_orientation, $toc_mgl, $toc_mgr, $toc_mgt, $toc_mgb, $toc_mgh, $toc_mgf, $toc_ohname, $toc_ehname, $toc_ofname, $toc_efname, $toc_ohvalue, $toc_ehvalue, $toc_ofvalue, $toc_efvalue, $toc_preHTML, $toc_postHTML, $toc_bookmarkText, $resetpagenum, $pagenumstyle, $suppress, $orientation, $mgl, $mgr, $mgt, $mgb, $mgh, $mgf, $ohname, $ehname, $ofname, $efname, $ohvalue, $ehvalue, $ofvalue, $efvalue, $toc_id, $pagesel, $toc_pagesel, $sheetsize, $toc_sheetsize, $tocoutdent); } function TOCpagebreak($tocfont='', $tocfontsize='', $tocindent='', $TOCusePaging=true, $TOCuseLinking='', $toc_orientation='', $toc_mgl='',$toc_mgr='',$toc_mgt='',$toc_mgb='',$toc_mgh='',$toc_mgf='',$toc_ohname='',$toc_ehname='',$toc_ofname='',$toc_efname='',$toc_ohvalue=0,$toc_ehvalue=0,$toc_ofvalue=0, $toc_efvalue=0, $toc_preHTML='', $toc_postHTML='', $toc_bookmarkText='', $resetpagenum='', $pagenumstyle='', $suppress='', $orientation='', $mgl='',$mgr='',$mgt='',$mgb='',$mgh='',$mgf='',$ohname='',$ehname='',$ofname='',$efname='',$ohvalue=0,$ehvalue=0,$ofvalue=0,$efvalue=0, $toc_id=0, $pagesel='', $toc_pagesel='', $sheetsize='', $toc_sheetsize='', $tocoutdent='') { if (!class_exists('tocontents', false)) { include(_MPDF_PATH.'classes/tocontents.php'); } if (empty($this->tocontents)) { $this->tocontents = new tocontents($this); } if($this->state==0) $this->AddPage(); if ($this->y == $this->tMargin && (!$this->mirrorMargins ||($this->mirrorMargins && $this->page % 2==1))) { if ($this->page==1 && count($this->PageNumSubstitutions)==0) { if (!$suppress) { $suppress = 'off'; } if (!$resetpagenum) { $resetpagenum= 1; } } $this->PageNumSubstitutions[] = array('from'=>$this->page, 'reset'=> $resetpagenum, 'type'=>$pagenumstyle, 'suppress'=> $suppress); } else { $this->AddPage($orientation,'NEXT-ODD', $resetpagenum, $pagenumstyle, $suppress,$mgl,$mgr,$mgt,$mgb,$mgh,$mgf,$ohname,$ehname,$ofname,$efname,$ohvalue,$ehvalue,$ofvalue,$efvalue,$pagesel,$sheetsize); } $this->tocontents->TOCpagebreak($tocfont, $tocfontsize, $tocindent, $TOCusePaging, $TOCuseLinking, $toc_orientation, $toc_mgl, $toc_mgr, $toc_mgt, $toc_mgb, $toc_mgh, $toc_mgf, $toc_ohname, $toc_ehname, $toc_ofname, $toc_efname, $toc_ohvalue, $toc_ehvalue, $toc_ofvalue, $toc_efvalue, $toc_preHTML, $toc_postHTML, $toc_bookmarkText, $resetpagenum, $pagenumstyle, $suppress, $orientation, $mgl, $mgr, $mgt, $mgb, $mgh, $mgf, $ohname, $ehname, $ofname, $efname, $ohvalue, $ehvalue, $ofvalue, $efvalue, $toc_id, $pagesel, $toc_pagesel, $sheetsize, $toc_sheetsize, $tocoutdent); } function TOC_Entry($txt, $level=0, $toc_id=0) { $txt = $this->purify_utf8_text($txt); if ($this->text_input_as_HTML) { $txt = $this->all_entities_to_utf8($txt); } if ($this->usingCoreFont) { $txt = mb_convert_encoding($txt,$this->mb_enc,'UTF-8'); } if ($this->ColActive) { $ily = $this->y0; } else { $ily = $this->y; } if (!class_exists('tocontents', false)) { include(_MPDF_PATH.'classes/tocontents.php'); } if (empty($this->tocontents)) { $this->tocontents = new tocontents($this); } $linkn = $this->AddLink(); $uid = '__mpdfinternallink_' . $linkn ; if ($this->keep_block_together) { $this->internallink[$uid] = array("Y"=>$ily,"PAGE"=>$this->page, "kt"=>true ); } else if ($this->table_rotate) { $this->internallink[$uid] = array("Y"=>$ily,"PAGE"=>$this->page, "tbrot"=>true ); } else if ($this->kwt) { $this->internallink[$uid] = array("Y"=>$ily,"PAGE"=>$this->page, "kwt"=>true ); } else if ($this->ColActive) { $this->internallink[$uid] = array("Y"=>$ily,"PAGE"=>$this->page, "col"=>$this->CurrCol ); } else $this->internallink[$uid] = array("Y"=>$ily,"PAGE"=>$this->page ); $this->internallink['#'.$uid] = $linkn; $this->SetLink($linkn,$ily,$this->page); if ($this->biDirectional) { $txt = preg_replace("/([".$this->pregRTLchars."]+)/ue", '$this->ArabJoin(stripslashes(\'\\1\'))', $txt ); } if (strtoupper($toc_id)=='ALL') { $toc_id = '_mpdf_all'; } else if (!$toc_id) { $toc_id = 0; } else { $toc_id = strtolower($toc_id); } $btoc = array('t'=>$txt,'l'=>$level,'p'=>$this->page, 'link'=>$linkn, 'toc_id'=>$toc_id); if ($this->keep_block_together) { $this->_kttoc[]= $btoc; } else if ($this->table_rotate) { $this->tbrot_toc[]= $btoc; } else if ($this->kwt) { $this->kwt_toc[]= $btoc; } else if ($this->ColActive) { $this->col_toc[]= $btoc; } else { $this->tocontents->_toc[]= $btoc; } } function MovePages($target_page, $start_page, $end_page=-1) { if ($end_page<1) { $end_page = $start_page; } $n_toc = $end_page - $start_page + 1; if (count($this->PageNumSubstitutions)) { $tp_present = false; $sp_present = false; $ep_present = false; foreach($this->PageNumSubstitutions AS $k=>$v) { if ($this->PageNumSubstitutions[$k]['from']==$target_page) { $tp_present = true; if ($this->PageNumSubstitutions[$k]['suppress']!='on' && $this->PageNumSubstitutions[$k]['suppress']!=1) { $this->PageNumSubstitutions[$k]['suppress']='off'; } } if ($this->PageNumSubstitutions[$k]['from']==$start_page) { $sp_present = true; if ($this->PageNumSubstitutions[$k]['suppress']!='on' && $this->PageNumSubstitutions[$k]['suppress']!=1) { $this->PageNumSubstitutions[$k]['suppress']='off'; } } if ($this->PageNumSubstitutions[$k]['from']==($end_page+1)) { $ep_present = true; if ($this->PageNumSubstitutions[$k]['suppress']!='on' && $this->PageNumSubstitutions[$k]['suppress']!=1) { $this->PageNumSubstitutions[$k]['suppress']='off'; } } } if (!$tp_present) { list($tp_type, $tp_suppress, $tp_reset) = $this->docPageSettings($target_page); } if (!$sp_present) { list($sp_type, $sp_suppress, $sp_reset) = $this->docPageSettings($start_page); } if (!$ep_present) { list($ep_type, $ep_suppress, $ep_reset) = $this->docPageSettings($start_page-1); } } $last = array(); for($i = $start_page;$i <= $end_page ;$i++) $last[]=$this->pages[$i]; for($i=$start_page - 1;$i>=($target_page);$i--) { $this->pages[$i+$n_toc]=$this->pages[$i]; } for($i = 0;$i < $n_toc;$i++) { $this->pages[$target_page + $i]=$last[$i]; } foreach($this->BMoutlines as $i=>$o) { if($o['p']>=$target_page) { $this->BMoutlines[$i]['p'] += $n_toc; } } if (count($this->PageLinks)) { $newarr = array(); foreach($this->PageLinks as $i=>$o) { foreach($this->PageLinks[$i] as $key => $pl) { if (strpos($pl[4],'@')===0) { $p=substr($pl[4],1); if($p>=$start_page && $p<=$end_page) { $this->PageLinks[$i][$key][4] = '@'.($p + ($target_page - $start_page)); } else if($p>=$target_page && $p<$start_page) { $this->PageLinks[$i][$key][4] = '@'.($p+$n_toc); } } } if($i>=$start_page && $i<=$end_page) { $newarr[($i + ($target_page - $start_page))] = $this->PageLinks[$i]; } else if($i>=$target_page && $i<$start_page) { $newarr[($i + $n_toc)] = $this->PageLinks[$i]; } else { $newarr[$i] = $this->PageLinks[$i]; } } $this->PageLinks = $newarr; } if (count($this->OrientationChanges)) { $newarr = array(); foreach($this->OrientationChanges AS $p=>$v) { if($p>=$start_page && $p<=$end_page) { $newarr[($p + ($target_page - $start_page))] = $this->OrientationChanges[$p]; } else if($p>=$target_page && $p<$start_page) { $newarr[$p+$n_toc] = $this->OrientationChanges[$p]; } else { $newarr[$p] = $this->OrientationChanges[$p]; } } ksort($newarr); $this->OrientationChanges = $newarr; } if (count($this->pageDim)) { $newarr = array(); foreach($this->pageDim AS $p=>$v) { if($p>=$start_page && $p<=$end_page) { $newarr[($p + ($target_page - $start_page))] = $this->pageDim[$p]; } else if($p>=$target_page && $p<$start_page) { $newarr[$p+$n_toc] = $this->pageDim[$p]; } else { $newarr[$p] = $this->pageDim[$p]; } } ksort($newarr); $this->pageDim = $newarr; } if (count($this->saveHTMLHeader)) { $newarr = array(); foreach($this->saveHTMLHeader AS $p=>$v) { if($p>=$start_page && $p<=$end_page) { $newarr[($p + ($target_page - $start_page))] = $this->saveHTMLHeader[$p]; } else if($p>=$target_page && $p<$start_page) { $newarr[$p+$n_toc] = $this->saveHTMLHeader[$p]; } else { $newarr[$p] = $this->saveHTMLHeader[$p]; } } ksort($newarr); $this->saveHTMLHeader = $newarr; } if (count($this->saveHTMLFooter)) { $newarr = array(); foreach($this->saveHTMLFooter AS $p=>$v) { if($p>=$start_page && $p<=$end_page) { $newarr[($p + ($target_page - $start_page))] = $this->saveHTMLFooter[$p]; } else if($p>=$target_page && $p<$start_page) { $newarr[$p+$n_toc] = $this->saveHTMLFooter[$p]; } else { $newarr[$p] = $this->saveHTMLFooter[$p]; } } ksort($newarr); $this->saveHTMLFooter = $newarr; } if (count($this->internallink)) { foreach($this->internallink as $key=>$o) { if($o['PAGE']>=$start_page && $o['PAGE']<=$end_page) { $this->internallink[$key]['PAGE'] += ($target_page - $start_page); } else if($o['PAGE']>=$target_page && $o['PAGE']<$start_page) { $this->internallink[$key]['PAGE'] += $n_toc; } } } if (count($this->links)) { foreach($this->links as $key=>$o) { if($o[0]>=$start_page && $o[0]<=$end_page) { $this->links[$key][0] += ($target_page - $start_page); } if($o[0]>=$target_page && $o[0]<$start_page) { $this->links[$key][0] += $n_toc; } } } if (count($this->form->forms)) { foreach($this->form->forms as $key=>$f) { if($f['page']>=$start_page && $f['page']<=$end_page) { $this->form->forms[$key]['page'] += ($target_page - $start_page); } if($f['page']>=$target_page && $f['page']<$start_page) { $this->form->forms[$key]['page'] += $n_toc; } } } if (count($this->PageAnnots)) { $newarr = array(); foreach($this->PageAnnots as $p=>$anno) { if($p>=$start_page && $p<=$end_page) { $np = $p + ($target_page - $start_page); foreach($anno as $o) { $newarr[$np][] = $o; } } else if($p>=$target_page && $p<$start_page) { $np = $p + $n_toc; foreach($anno as $o) { $newarr[$np][] = $o; } } else { $newarr[$p] = $this->PageAnnots[$p]; } } $this->PageAnnots = $newarr; unset($newarr); } if (count($this->PageNumSubstitutions)) { $newarr = array(); foreach($this->PageNumSubstitutions AS $k=>$v) { if($this->PageNumSubstitutions[$k]['from']>=$start_page && $this->PageNumSubstitutions[$k]['from']<=$end_page) { $this->PageNumSubstitutions[$k]['from'] += ($target_page - $start_page); $newarr[$this->PageNumSubstitutions[$k]['from']] = $this->PageNumSubstitutions[$k]; } else if($this->PageNumSubstitutions[$k]['from']>=$target_page && $this->PageNumSubstitutions[$k]['from']<$start_page) { $this->PageNumSubstitutions[$k]['from'] += $n_toc; $newarr[$this->PageNumSubstitutions[$k]['from']] = $this->PageNumSubstitutions[$k]; } else { $newarr[$this->PageNumSubstitutions[$k]['from']] = $this->PageNumSubstitutions[$k]; } } if (!$sp_present) { $newarr[$target_page] = array('from'=>$target_page, 'suppress'=>$sp_suppress, 'reset'=>$sp_reset, 'type'=>$sp_type); } if (!$tp_present) { $newarr[($target_page + $n_toc)] = array('from'=>($target_page+$n_toc), 'suppress'=>$tp_suppress, 'reset'=>$tp_reset, 'type'=>$tp_type); } if (!$ep_present && $end_page>count($this->pages)) { $newarr[($end_page+1)] = array('from'=>($end_page+1), 'suppress'=>$ep_suppress, 'reset'=>$ep_reset, 'type'=>$ep_type); } ksort($newarr); $this->PageNumSubstitutions = array(); foreach($newarr as $v) { $this->PageNumSubstitutions[] = $v; } } } function DeletePages($start_page, $end_page=-1) { if ($end_page<1) { $end_page = $start_page; } $n_tod = $end_page - $start_page + 1; $last_page = count($this->pages); $n_atend = $last_page - $end_page + 1; for($i=0;$i<$n_atend;$i++) { $this->pages[$start_page+$i]=$this->pages[$end_page+1+$i]; } for($i = 0;$i < $n_tod ;$i++) unset($this->pages[$last_page-$i]); foreach($this->BMoutlines as $i=>$o) { if($o['p']>=$end_page) { $this->BMoutlines[$i]['p'] -= $n_tod; } else if($p<$start_page) { unset($this->BMoutlines[$i]); } } if (count($this->PageLinks)) { $newarr = array(); foreach($this->PageLinks as $i=>$o) { foreach($this->PageLinks[$i] as $key => $pl) { if (strpos($pl[4],'@')===0) { $p=substr($pl[4],1); if($p>$end_page) { $this->PageLinks[$i][$key][4] = '@'.($p - $n_tod); } else if($p<$start_page) { unset($this->PageLinks[$i][$key]); } } } if($i>$end_page) { $newarr[($i - $n_tod)] = $this->PageLinks[$i]; } else if($p<$start_page) { $newarr[$i] = $this->PageLinks[$i]; } } $this->PageLinks = $newarr; } if (count($this->OrientationChanges)) { $newarr = array(); foreach($this->OrientationChanges AS $p=>$v) { if($p>$end_page) { $newarr[($p - $t_tod)] = $this->OrientationChanges[$p]; } else if($p<$start_page) { $newarr[$p] = $this->OrientationChanges[$p]; } } ksort($newarr); $this->OrientationChanges = $newarr; } if (count($this->pageDim)) { $newarr = array(); foreach($this->pageDim AS $p=>$v) { if($p>$end_page) { $newarr[($p - $n_tod)] = $this->pageDim[$p]; } else if($p<$start_page) { $newarr[$p] = $this->pageDim[$p]; } } ksort($newarr); $this->pageDim = $newarr; } if (count($this->saveHTMLHeader)) { foreach($this->saveHTMLHeader AS $p=>$v) { if($p>end_page) { $newarr[($p - $n_tod)] = $this->saveHTMLHeader[$p]; } else if($p<$start_page) { $newarr[$p] = $this->saveHTMLHeader[$p]; } } ksort($newarr); $this->saveHTMLHeader = $newarr; } if (count($this->saveHTMLFooter)) { $newarr = array(); foreach($this->saveHTMLFooter AS $p=>$v) { if($p>$end_page) { $newarr[($p - $n_tod)] = $this->saveHTMLFooter[$p]; } else if($p<$start_page) { $newarr[$p] = $this->saveHTMLFooter[$p]; } } ksort($newarr); $this->saveHTMLFooter = $newarr; } foreach($this->internallink as $key=>$o) { if($o['PAGE']>$end_page) { $this->internallink[$key]['PAGE'] -= $n_tod; } else if($o['PAGE']<$start_page) { unset($this->internallink[$key]); } } foreach($this->links as $key=>$o) { if($o[0]>$end_page) { $this->links[$key][0] -= $n_tod; } else if($o[0]<$start_page) { unset($this->links[$key]); } } foreach($this->form->forms as $key=>$f) { if($f['page']>$end_page) { $this->form->forms[$key]['page'] -= $n_tod; } else if($f['page']<$start_page) { unset($this->form->forms[$key]); } } if (count($this->PageAnnots)) { $newarr = array(); foreach($this->PageAnnots as $p=>$anno) { if($p>$end_page) { foreach($anno as $o) { $newarr[($p - $n_tod)][] = $o; } } else if($p<$start_page) { $newarr[$p] = $this->PageAnnots[$p]; } } ksort($newarr); $this->PageAnnots = $newarr; } foreach($this->PageNumSubstitutions AS $k=>$v) { if($this->PageNumSubstitutions[$k]['from']>$end_page) { $this->PageNumSubstitutions[$k]['from'] -= $n_tod; } else if($this->PageNumSubstitutions[$k]['from']<$start_page) { unset($this->PageNumSubstitutions[$k]); } } unset($newarr); $this->page = count($this->pages); } function Reference($txt) { $this->IndexEntry($txt); } function IndexEntry($txt, $xref='') { if ($xref) { $this->IndexEntrySee($txt,$xref); return; } $txt = strip_tags($txt); $txt = $this->purify_utf8_text($txt); if ($this->text_input_as_HTML) { $txt = $this->all_entities_to_utf8($txt); } if ($this->usingCoreFont) { $txt = mb_convert_encoding($txt,$this->mb_enc,'UTF-8'); } $Present=0; $size=sizeof($this->Reference); if ($this->directionality == 'rtl') { $txt = str_replace(':',' - ',$txt); } else { $txt = str_replace(':',', ',$txt); } for ($i=0;$i<$size;$i++){ if ($this->keep_block_together) { if (isset($this->ktReference[$i]['t']) && $this->ktReference[$i]['t']==$txt){ $Present=1; if (!in_array($this->page,$this->ktReference[$i]['p'])) { $this->ktReference[$i]['op'] = $this->page; } } } else if ($this->table_rotate) { if (isset($this->tbrot_Reference[$i]['t']) && $this->tbrot_Reference[$i]['t']==$txt){ $Present=1; if (!in_array($this->page,$this->tbrot_Reference[$i]['p'])) { $this->tbrot_Reference[$i]['op'] = $this->page; } } } else if ($this->kwt) { if (isset($this->kwt_Reference[$i]['t']) && $this->kwt_Reference[$i]['t']==$txt){ $Present=1; if (!in_array($this->page,$this->kwt_Reference[$i]['p'])) { $this->kwt_Reference[$i]['op'] = $this->page; } } } else if ($this->ColActive) { if (isset($this->col_Reference[$i]['t']) && $this->col_Reference[$i]['t']==$txt){ $Present=1; if (!in_array($this->page,$this->col_Reference[$i]['p'])) { $this->col_Reference[$i]['op'] = $this->page; } } } else { if (isset($this->Reference[$i]['t']) && $this->Reference[$i]['t']==$txt){ $Present=1; if (!in_array($this->page,$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $this->page; } } } } if ($Present==0) { $opr = array('t'=>$txt, 'op'=>$this->page); if ($this->keep_block_together) { $this->ktReference[]= $opr; } else if ($this->table_rotate) { $this->tbrot_Reference[]= $opr; } else if ($this->kwt) { $this->kwt_Reference[]= $opr; } else if ($this->ColActive) { $this->col_Reference[]= $opr; } else { $this->Reference[]=array('t'=>$txt,'p'=>array($this->page)); } } } function ReferenceSee($txta,$txtb) { $this->IndexEntrySee($txta,$txtb); } function IndexEntrySee($txta,$txtb) { $txta = strip_tags($txta); $txtb = strip_tags($txtb); $txta = $this->purify_utf8_text($txta); $txtb = $this->purify_utf8_text($txtb); if ($this->text_input_as_HTML) { $txta = $this->all_entities_to_utf8($txta); $txtb = $this->all_entities_to_utf8($txtb); } if ($this->usingCoreFont) { $txta = mb_convert_encoding($txta,$this->mb_enc,'UTF-8'); $txtb = mb_convert_encoding($txtb,$this->mb_enc,'UTF-8'); } if ($this->directionality == 'rtl') { $txta = str_replace(':',' - ',$txta); $txtb = str_replace(':',' - ',$txtb); } else { $txta = str_replace(':',', ',$txta); $txtb = str_replace(':',', ',$txtb); } $this->Reference[]=array('t'=>$txta.' - see '.$txtb,'p'=>array()); } function CreateReference($NbCol=1, $reffontsize='', $linespacing='', $offset=3, $usedivletters=1, $divlettfontsize='', $gap=5, $reffont='',$divlettfont='', $useLinking=false) { $this->CreateIndex($NbCol, $reffontsize, $linespacing, $offset, $usedivletters, $divlettfontsize, $gap, $reffont, $divlettfont, $useLinking); } function CreateIndex($NbCol=1, $reffontsize='', $linespacing='', $offset=3, $usedivletters=1, $divlettfontsize='', $gap=5, $reffont='',$divlettfont='', $useLinking=false) { if (!$reffontsize) { $reffontsize = $this->default_font_size; } if (!$divlettfontsize) { $divlettfontsize = ($this->default_font_size * 1.8); } if (!$reffont) { $reffont = $this->default_font; } if (!$divlettfont) { $divlettfont = $reffont; } if (!$linespacing) { $linespacing= $this->default_lineheight_correction; } if ($this->ColActive) { $this->SetColumns(0); } $size=sizeof($this->Reference); if ($size == 0) { return false; } if ($NbCol<2) { $NbCol = 1; $colWidth = $this->pgwidth; } else { $this->SetColumns($NbCol,'',$gap); $colWidth = $this->ColWidth; } if ($this->directionality == 'rtl') { $align = 'R'; } else { $align = 'L'; } $lett = ''; if (!function_exists('cmp')) { function cmp ($a, $b) { return strnatcmp(strtolower($a['t']), strtolower($b['t'])); } } usort($this->Reference, 'cmp'); $size=sizeof($this->Reference); $this->breakpoints[$this->CurrCol][] = $this->y; $divlettjuststarted = false; $this->OpenTag('DIV',array('STYLE'=>'line-height: '.$linespacing.'; font-family: '.$reffont.'; font-size: '.$reffontsize.'pt; ')); $last_lett = ''; for ($i=0;$i<$size;$i++){ if ($this->Reference[$i]['t']) { if ($usedivletters) { $lett = mb_strtoupper(mb_substr($this->Reference[$i]['t'],0,1,$this->mb_enc ),$this->mb_enc ); if ($lett != $last_lett) { $save_bp = $this->breakpoints[$this->CurrCol]; $divlettjuststarted = true; if ($i>0) { $this->OpenTag('DIV',array('STYLE'=>'line-height: '.$linespacing.'; font-family: '.$divlettfont.'; font-size: '.$divlettfontsize.'pt; font-weight: bold; page-break-after: avoid; margin-top: 0.5em; margin-collapse: collapse; ')); } else { $this->OpenTag('DIV',array('STYLE'=>'line-height: '.$linespacing.'; font-family: '.$divlettfont.'; font-size: '.$divlettfontsize.'pt; font-weight: bold; page-break-after: avoid; ')); } $this->_saveTextBuffer($lett); $this->CloseTag('DIV'); } } $this->OpenTag('DIV',array('STYLE'=>'text-indent: -'.$offset.'mm; line-height: '.$linespacing.'; font-family: '.$reffont.'; font-size: '.$reffontsize.'pt; ')); if ($this->biDirectional) { $this->Reference[$i]['t'] = preg_replace("/([".$this->pregRTLchars."]+)/ue", '$this->ArabJoin(stripslashes(\'\\1\'))', $this->Reference[$i]['t'] ); } if (isset($this->CurrentFont['indic']) && $this->CurrentFont['indic']) $this->ConvertIndic($this->Reference[$i]['t']); $this->_saveTextBuffer($this->Reference[$i]['t']); $ppp = $this->Reference[$i]['p']; if (count($ppp)) { sort($ppp); $newarr = array(); $range_start = $ppp[0]; $range_end = 0; if (!$this->usingCoreFont) { $spacer = "\xc2\xa0 "; } else { $spacer = chr(160).' '; } $this->_saveTextBuffer($spacer); if ($this->directionality == 'rtl') { $sep = '.'; $joiner = '-'; } else { $sep = ', '; $joiner = '-'; } for ($zi=1;$zi<count($ppp);$zi++) { if ($this->directionality == 'rtl') { if ($zi<count($ppp)-1) { $txt = $sep . $this->docPageNum($ppp[$zi]); if ($useLinking) { $href = '@'.$ppp[$zi]; } else { $href = ''; } $this->_saveTextBuffer($txt, $href); } } else if ($ppp[$zi] == ($ppp[($zi-1)]+1)) { $range_end = $ppp[$zi]; } else { if ($range_end) { if ($range_end == $range_start+1) { if ($useLinking) { $href = '@'.$range_start; } else { $href = ''; } $txt = $this->docPageNum($range_start) . $sep; $this->_saveTextBuffer($txt, $href); if ($useLinking) { $href = '@'.$ppp[$zi-1]; } else { $href = ''; } $txt = $this->docPageNum($ppp[$zi-1]) . $sep; $this->_saveTextBuffer($txt, $href); } else { if ($useLinking) { $href = '@'.$range_start; } else { $href = ''; } } } else { if ($useLinking) { $href = '@'.$ppp[$zi-1]; } else { $href = ''; } $txt = $this->docPageNum($ppp[$zi-1]) . $sep; $this->_saveTextBuffer($txt, $href); } $range_start = $ppp[$zi]; $range_end = 0; } } if ($range_end) { if ($range_end == $range_start+1) { if ($useLinking) { $href = '@'.$range_start; } else { $href = ''; } $txt = $this->docPageNum($range_start) . $sep; $this->_saveTextBuffer($txt, $href); if ($useLinking) { $href = '@'.$range_end; } else { $href = ''; } $txt = $this->docPageNum($range_end); $this->_saveTextBuffer($txt, $href); } else { if ($useLinking) { $href = '@'.$range_start; } else { $href = ''; } $txt = $this->docPageNum($range_start) . $joiner; $this->_saveTextBuffer($txt, $href); if ($useLinking) { $href = '@'.$range_end; } else { $href = ''; } $txt = $this->docPageNum($range_end); $this->_saveTextBuffer($txt, $href); } } else { if ($useLinking) { $href = '@'.$ppp[(count($ppp)-1)]; } else { $href = ''; } $txt = $this->docPageNum($ppp[(count($ppp)-1)]); $this->_saveTextBuffer($txt, $href); } } } $this->CloseTag('DIV'); if ($divlettjuststarted) { $this->breakpoints[$this->CurrCol] = $save_bp; } $divlettjuststarted = false; $this->breakpoints[$this->CurrCol][] = $this->y; $last_lett = $lett; } $this->CloseTag('DIV'); $this->breakpoints[$this->CurrCol][] = $this->y; if ($this->ColActive) { $this->SetColumns(0); } } function AcceptPageBreak() { if (count($this->cellBorderBuffer)) { $this->printcellbuffer(); } if ($this->ColActive==1) { if($this->CurrCol<$this->NbCol-1) { $this->CurrCol++; $this->SetCol($this->CurrCol); $this->y=$this->y0; $this->ChangeColumn=1; if ($this->directionality == 'rtl') { $this->ChangeColumn = -($this->ChangeColumn); } return false; } else { if (count($this->columnbuffer)) { $this->printcolumnbuffer(); } $this->SetCol(0); $this->y0 = $this->tMargin; $this->ChangeColumn= -($this->NbCol-1); if ($this->directionality == 'rtl') { $this->ChangeColumn = -($this->ChangeColumn); } return true; } } else if ($this->table_rotate) { if ($this->tablebuffer) { $this->printtablebuffer(); } return true; } else { $this->ChangeColumn=0; return $this->autoPageBreak; } return $this->autoPageBreak; } function SetColumns($NbCol,$vAlign='',$gap=5) { if ($NbCol<2) { if ($this->ColActive) { $this->ColActive=0; if (count($this->columnbuffer)) { $this->printcolumnbuffer(); } $this->NbCol=1; $this->ResetMargins(); $this->pgwidth = $this->w - $this->lMargin - $this->rMargin; $this->divwidth = 0; $this->Ln(); } $this->ColActive=0; $this->columnbuffer = array(); $this->ColDetails = array(); $this->columnLinks = array(); $this->columnAnnots = array(); $this->columnForms = array(); $this->col_Reference = array(); $this->col_BMoutlines = array(); $this->col_toc = array(); $this->breakpoints = array(); } else { if ($this->ColActive) { $this->ColActive=0; if (count($this->columnbuffer)) { $this->printcolumnbuffer(); } $this->ResetMargins(); } if (isset($this->y) && $this->y>$this->tMargin) $this->Ln(); $this->NbCol=$NbCol; $this->ColGap = $gap; $this->divwidth = 0; $this->ColActive=1; $this->ColumnAdjust = true; $this->columnbuffer = array(); $this->ColDetails = array(); $this->columnLinks = array(); $this->columnAnnots = array(); $this->columnForms = array(); $this->col_Reference = array(); $this->col_BMoutlines = array(); $this->col_toc = array(); $this->breakpoints = array(); if ((strtoupper($vAlign) == 'J') || (strtoupper($vAlign) == 'JUSTIFY')) { $vAlign = 'J'; } else { $vAlign = ''; } $this->colvAlign = $vAlign; $absL = $this->DeflMargin-($gap/2); $absR = $this->DefrMargin-($gap/2); $PageWidth = $this->w-$absL-$absR; $ColWidth = (($PageWidth - ($gap * ($NbCol)))/$NbCol); $this->ColWidth = $ColWidth; if ($this->directionality == 'rtl') { for ($i=0;$i<$this->NbCol;$i++) { $this->ColL[$i] = $absL + ($gap/2) + (($NbCol - ($i+1))*($PageWidth/$NbCol)) ; $this->ColR[$i] = $this->ColL[$i] + $ColWidth; } } else { for ($i=0;$i<$this->NbCol;$i++) { $this->ColL[$i] = $absL + ($gap/2) + ($i* ($PageWidth/$NbCol) ); $this->ColR[$i] = $this->ColL[$i] + $ColWidth; } } $this->pgwidth = $ColWidth; $this->SetCol(0); $this->y0=$this->y; } $this->x = $this->lMargin; } function SetCol($CurrCol) { $this->CurrCol=$CurrCol; $x = $this->ColL[$CurrCol]; $xR = $this->ColR[$CurrCol]; if (($this->mirrorMargins) && (($this->page)%2==0)) { $x += $this->MarginCorrection ; $xR += $this->MarginCorrection ; } $this->SetMargins($x,($this->w - $xR),$this->tMargin); } function AddColumn() { $this->NewColumn(); $this->ColumnAdjust = false; } function NewColumn() { if ($this->ColActive==1) { if($this->CurrCol<$this->NbCol-1) { $this->CurrCol++; $this->SetCol($this->CurrCol); $this->y = $this->y0; $this->ChangeColumn=1; if ($this->directionality == 'rtl') { $this->ChangeColumn = -($this->ChangeColumn); } } else { if (count($this->columnbuffer)) { $this->printcolumnbuffer(); } $this->AddPage($this->CurOrientation); $this->SetCol(0); $this->y0 = $this->tMargin; $this->ChangeColumn= -($this->NbCol-1); if ($this->directionality == 'rtl') { $this->ChangeColumn = -($this->ChangeColumn); } } $this->x = $this->lMargin; } else { $this->AddPage($this->CurOrientation); } } function printcolumnbuffer() { if (!$this->ColActive && $this->ColumnAdjust && !$this->keepColumns) { $this->ColDetails[0]['add_y'] = 0; $last_col = 0; for($i=1;$i<$this->NbCol;$i++) { if (isset($this->ColDetails[$i]['bottom_margin']) && $this->ColDetails[$i]['bottom_margin']) { $this->ColDetails[$i]['add_y'] = ($this->ColDetails[$i-1]['bottom_margin'] - $this->y0) + $this->ColDetails[$i-1]['add_y']; $last_col = $i; } } foreach($this->columnbuffer AS $key=>$s) { $t = $s['s']; if ($t == 'ACROFORM') { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; $this->columnbuffer[$key]['s'] = ''; } else if (preg_match('/BT \d+\.\d\d+ (\d+\.\d\d+) Td/',$t)) { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; } else if (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) \d+\.\d\d+ [\-]{0,1}\d+\.\d\d+ re/',$t)) { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; } else if (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) m/',$t)) { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; } else if (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) l/',$t)) { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; } else if (preg_match('/q \d+\.\d\d+ 0 0 \d+\.\d\d+ \d+\.\d\d+ (\d+\.\d\d+) cm \/(I|FO)\d+ Do Q/',$t)) { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; } else if (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) \d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ c/',$t)) { $this->columnbuffer[$key]['rel_y'] = $s['y'] + $this->ColDetails[$s['col']]['add_y'] - $this->y0; } } foreach($this->internallink AS $key => $f) { if (is_array($f) && isset($f['col'])) { $this->internallink[$key]['rel_y'] = $f['Y'] + $this->ColDetails[$f['col']]['add_y'] - $this->y0; } } $breaks = array(); foreach($this->breakpoints AS $c => $bpa) { foreach($bpa AS $rely) { $breaks[] = $rely + $this->ColDetails[$c]['add_y'] - $this->y0; } } if (isset($this->ColDetails[$last_col]['bottom_margin'])) { $lcbm = $this->ColDetails[$last_col]['bottom_margin']; } else { $lcbm = 0; } $sum_h = $this->ColDetails[$last_col]['add_y'] + $lcbm - $this->y0; $target_h = ($sum_h / $this->NbCol); $cbr = array(); for($i=1;$i<$this->NbCol;$i++) { $th = ($sum_h * $i / $this->NbCol); foreach($breaks AS $bk=>$val) { if ($val > $th) { if (($val-$th) < ($th-$breaks[$bk-1])) { $cbr[$i-1] = $val; } else { $cbr[$i-1] = $breaks[$bk-1]; } break; } } } $cbr[($this->NbCol-1)] = $sum_h; $last_new_col = 0; $yadj = 0; $xadj = 0; $last_col_bottom = 0; $lowest_bottom_y = 0; $block_bottom = 0; $newcolumn = 0; foreach($this->columnbuffer AS $key=>$s) { if (isset($s['rel_y'])) { if ($s['rel_y'] >= $cbr[$newcolumn]) { $newcolumn++; } else { $newcolumn = $last_new_col ; } $block_bottom = max($block_bottom,($s['rel_y']+$s['h'])); if ($this->directionality == 'rtl') { $xadj = -(($newcolumn - $s['col']) * ($this->ColWidth + $this->ColGap)); } else { $xadj = ($newcolumn - $s['col']) * ($this->ColWidth + $this->ColGap); } if ($last_new_col != $newcolumn) { $last_col_bottom = $this->columnbuffer[$key]['rel_y']; $block_bottom = 0; } $yadj = ($s['rel_y'] - $s['y']) - ($last_col_bottom)+$this->y0; $t = $s['s']; $t = preg_replace('/BT (\d+\.\d\d+) (\d+\.\d\d+) Td/e',"\$this->columnAdjustAdd('Td',_MPDFK,$xadj,$yadj,'\\1','\\2')",$t); $t = preg_replace('/(\d+\.\d\d+) (\d+\.\d\d+) (\d+\.\d\d+) ([\-]{0,1}\d+\.\d\d+) re/e',"\$this->columnAdjustAdd('re',_MPDFK,$xadj,$yadj,'\\1','\\2','\\3','\\4')",$t); $t = preg_replace('/(\d+\.\d\d+) (\d+\.\d\d+) l/e',"\$this->columnAdjustAdd('l',_MPDFK,$xadj,$yadj,'\\1','\\2')",$t); $t = preg_replace('/q (\d+\.\d\d+) 0 0 (\d+\.\d\d+) (\d+\.\d\d+) (\d+\.\d\d+) cm \/(I|FO)/e',"\$this->columnAdjustAdd('img',_MPDFK,$xadj,$yadj,'\\1','\\2','\\3','\\4','\\5')",$t); $t = preg_replace('/(\d+\.\d\d+) (\d+\.\d\d+) m/e',"\$this->columnAdjustAdd('draw',_MPDFK,$xadj,$yadj,'\\1','\\2')",$t); $t = preg_replace('/(\d+\.\d\d+) (\d+\.\d\d+) (\d+\.\d\d+) (\d+\.\d\d+) (\d+\.\d\d+) (\d+\.\d\d+) c/e',"\$this->columnAdjustAdd('bezier',_MPDFK,$xadj,$yadj,'\\1','\\2','\\3','\\4','\\5','\\6')",$t); $this->columnbuffer[$key]['s'] = $t; $this->columnbuffer[$key]['newcol'] = $newcolumn; $this->columnbuffer[$key]['newy'] = $s['y'] + $yadj; $last_new_col = $newcolumn; $clb = $s['y'] + $yadj + $s['h'] ; if ((isset($this->ColDetails[$newcolumn]['max_bottom']) && $clb > $this->ColDetails[$newcolumn]['max_bottom']) || (!isset($this->ColDetails[$newcolumn]['max_bottom']) && $clb)) { $this->ColDetails[$newcolumn]['max_bottom'] = $clb; } if ($clb > $lowest_bottom_y) { $lowest_bottom_y = $clb; } if (isset($this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->PageLinks[$this->page][$ref][0] += ($xadj*_MPDFK); $this->PageLinks[$this->page][$ref][1] -= ($yadj*_MPDFK); unset($this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } if (isset($this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->form->forms[$ref]['x'] += ($xadj); $this->form->forms[$ref]['y'] += ($yadj); unset($this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } if (isset($this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; if ($this->PageAnnots[$this->page][$ref]['x'] < 0) { $this->PageAnnots[$this->page][$ref]['x'] -= ($xadj); } else { $this->PageAnnots[$this->page][$ref]['x'] += ($xadj); } $this->PageAnnots[$this->page][$ref]['y'] += ($yadj); unset($this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } } } foreach($this->col_BMoutlines AS $v) { $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$this->y0,'p'=>$v['p']); } foreach($this->col_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($v['op'],$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $v['op']; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($v['op'])); } } foreach($this->col_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$v['p'],'link'=>$v['link'],'toc_id'=>$v['toc_id']); $this->links[$v['link']][1] = $this->y0; } if ($this->colvAlign == 'J') { foreach($this->columnbuffer AS $key=>$s) { if (isset($s['rel_y'])) { if (isset($this->ColDetails[$s['newcol']]['max_bottom']) && $this->ColDetails[$s['newcol']]['max_bottom'] && $this->ColDetails[$s['newcol']]['max_bottom']!=$this->y0) { $ratio = ($lowest_bottom_y - ($this->y0)) / ($this->ColDetails[$s['newcol']]['max_bottom'] - ($this->y0)); } else { $ratio = 1; } if (($ratio > 1) && ($ratio <= $this->max_colH_correction)) { $yadj = ($s['newy'] - $this->y0) * ($ratio - 1); if (isset($this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->PageLinks[$this->page][$ref][1] -= ($yadj*_MPDFK); $this->PageLinks[$this->page][$ref][3] *= $ratio; unset($this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } if (isset($this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->form->forms[$ref]['x'] += ($xadj); $this->form->forms[$ref]['y'] += ($yadj); unset($this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } if (isset($this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->PageAnnots[$this->page][$ref]['y'] += ($yadj); unset($this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } } } } foreach($this->internallink AS $key => $f) { if (is_array($f) && isset($f['col'])) { $last_col_bottom = 0; for ($nbc=0; $nbc<$this->NbCol; $nbc++) { if ($f['rel_y'] >= $cbr[$nbc]) { $last_col_bottom = $cbr[$nbc]; } } $yadj = ($f['rel_y'] - $f['Y']) - $last_col_bottom + $this->y0; $f['Y'] += $yadj; unset($f['col']); unset($f['rel_y']); $this->internallink[$key] = $f; } } $last_col = -1; $trans_on = false; foreach($this->columnbuffer AS $key=>$s) { if (isset($s['rel_y'])) { if (isset($this->ColDetails[$s['newcol']]['max_bottom']) && $this->ColDetails[$s['newcol']]['max_bottom'] && $this->ColDetails[$s['newcol']]['max_bottom']!=$this->y0) { $ratio = ($lowest_bottom_y - ($this->y0)) / ($this->ColDetails[$s['newcol']]['max_bottom'] - ($this->y0)); } else { $ratio = 1; } if (($ratio > 1) && ($ratio <= $this->max_colH_correction)) { $this->pages[$this->page] .= $this->StartTransform(true)."\n"; $this->pages[$this->page] .= $this->transformScale(100, $ratio*100, $x='', $this->y0, true)."\n"; $trans_on = true; } } $this->pages[$this->page] .= $s['s']."\n"; if (isset($s['rel_y']) && ($ratio > 1) && ($ratio <= $this->max_colH_correction)) { $this->pages[$this->page] .= $this->StopTransform(true)."\n"; $trans_on = false; } } if ($trans_on) { $this->pages[$this->page] .= $this->StopTransform(true)."\n"; } } else { foreach($this->columnbuffer AS $s) { $this->pages[$this->page] .= $s['s']."\n"; } } if ($lowest_bottom_y > 0) { $this->y = $lowest_bottom_y ; } } else if ($this->colvAlign == 'J' && $this->ColumnAdjust && !$this->keepColumns) { $lowest_bottom_y = 0; foreach($this->columnbuffer AS $key=>$s) { $t = $s['s']; if ($t == 'ACROFORM' || (preg_match('/BT \d+\.\d\d+ (\d+\.\d\d+) Td/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) \d+\.\d\d+ [\-]{0,1}\d+\.\d\d+ re/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) l/',$t)) || (preg_match('/q \d+\.\d\d+ 0 0 \d+\.\d\d+ \d+\.\d\d+ (\d+\.\d\d+) cm \/(I|FO)\d+ Do Q/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) m/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) \d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ c/',$t)) ) { $clb = $s['y'] + $s['h']; if ((isset($this->ColDetails[$s['col']]['max_bottom']) && $clb > $this->ColDetails[$s['col']]['max_bottom']) || !isset($this->ColDetails[$s['col']]['max_bottom'])) { $this->ColDetails[$s['col']]['max_bottom'] = $clb; } if ($clb > $lowest_bottom_y) { $lowest_bottom_y = $clb; } $this->columnbuffer[$key]['rel_y'] = $s['y']; if ($t == 'ACROFORM') { $this->columnbuffer[$key]['s'] = ''; } } } foreach($this->columnbuffer AS $key=>$s) { if (isset($this->ColDetails[$s['col']]['max_bottom']) && $this->ColDetails[$s['col']]['max_bottom']) { $ratio = ($lowest_bottom_y - ($this->y0)) / ($this->ColDetails[$s['col']]['max_bottom'] - ($this->y0)); } else { $ratio = 1; } if (($ratio > 1) && ($ratio <= $this->max_colH_correction)) { $yadj = ($s['y'] - $this->y0) * ($ratio - 1); if (isset($s['rel_y'])) { if (isset($this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->PageLinks[$this->page][$ref][1] -= ($yadj*_MPDFK); $this->PageLinks[$this->page][$ref][3] *= $ratio; unset($this->columnLinks[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } if (isset($this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->form->forms[$ref]['x'] += ($xadj); $this->form->forms[$ref]['y'] += ($yadj); unset($this->columnForms[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } if (isset($this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])])) { $ref = $this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]; $this->PageAnnots[$this->page][$ref]['y'] += ($yadj); unset($this->columnAnnots[$s['col']][INTVAL($s['x'])][INTVAL($s['y'])]); } } } } foreach($this->col_BMoutlines AS $v) { $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$this->y0,'p'=>$v['p']); } foreach($this->col_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($v['op'],$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $v['op']; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($v['op'])); } } foreach($this->col_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$v['p'],'link'=>$v['link'],'toc_id'=>$v['toc_id']); $this->links[$v['link']][1] = $this->y0; } $trans_on = false; foreach($this->columnbuffer AS $key=>$s) { if (isset($s['rel_y'])) { if ($this->ColDetails[$s['col']]['max_bottom']) { $ratio = ($lowest_bottom_y - ($this->y0)) / ($this->ColDetails[$s['col']]['max_bottom'] - ($this->y0)); } else { $ratio = 1; } if (($ratio > 1) && ($ratio <= $this->max_colH_correction)) { $this->pages[$this->page] .= $this->StartTransform(true)."\n"; $this->pages[$this->page] .= $this->transformScale(100, $ratio*100, $x='', $this->y0, true)."\n"; $trans_on = true; } } $this->pages[$this->page] .= $s['s']."\n"; if (isset($s['rel_y']) && ($ratio > 1) && ($ratio <= $this->max_colH_correction)) { $this->pages[$this->page] .= $this->StopTransform(true)."\n"; $trans_on = false; } } if ($trans_on) { $this->pages[$this->page] .= $this->StopTransform(true)."\n"; } if ($lowest_bottom_y > 0) { $this->y = $lowest_bottom_y ; } } else { $lowest_bottom_y = 0; if (!$this->ColActive && (!$this->ColumnAdjust || $this->keepColumns)) { foreach($this->columnbuffer AS $key=>$s) { $t = $s['s']; if ($t == 'ACROFORM' || (preg_match('/BT \d+\.\d\d+ (\d+\.\d\d+) Td/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) \d+\.\d\d+ [\-]{0,1}\d+\.\d\d+ re/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) l/',$t)) || (preg_match('/q \d+\.\d\d+ 0 0 \d+\.\d\d+ \d+\.\d\d+ (\d+\.\d\d+) cm \/(I|FO)\d+ Do Q/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) m/',$t)) || (preg_match('/\d+\.\d\d+ (\d+\.\d\d+) \d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ \d+\.\d\d+ c/',$t)) ) { $clb = $s['y'] + $s['h']; if ($clb > $this->ColDetails[$s['col']]['max_bottom']) { $this->ColDetails[$s['col']]['max_bottom'] = $clb; } if ($clb > $lowest_bottom_y) { $lowest_bottom_y = $clb; } } } } foreach($this->columnbuffer AS $key=>$s) { if ($s['s'] != 'ACROFORM') $this->pages[$this->page] .= $s['s']."\n"; } if ($lowest_bottom_y > 0) { $this->y = $lowest_bottom_y ; } foreach($this->col_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($v['op'],$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $v['op']; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($v['op'])); } } foreach($this->col_BMoutlines AS $v) { $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$v['p']); } foreach($this->col_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$v['p'],'link'=>$v['link'],'toc_id'=>$v['toc_id']); } } foreach($this->internallink AS $key => $f) { if (isset($this->internallink[$key]['col'])) unset($this->internallink[$key]['col']); if (isset($this->internallink[$key]['rel_y'])) unset($this->internallink[$key]['rel_y']); } $this->columnbuffer = array(); $this->ColDetails = array(); $this->columnLinks = array(); $this->columnAnnots = array(); $this->columnForms = array(); $this->col_Reference = array(); $this->col_BMoutlines = array(); $this->col_toc = array(); $this->breakpoints = array(); } function printcellbuffer() { if (count($this->cellBorderBuffer )) { sort($this->cellBorderBuffer); foreach($this->cellBorderBuffer AS $cbb) { $cba = unpack("A16dom/nbord/A1side/ns/dbw/a6ca/A10style/dx/dy/dw/dh/dmbl/dmbr/dmrt/dmrb/dmtl/dmtr/dmlt/dmlb/dcpd/dover/", $cbb); $side = $cba['side']; $details = array(); $details[$side]['dom'] = (float) $cba['dom']; $details[$side]['s'] = $cba['s']; $details[$side]['w'] = $cba['bw']; $details[$side]['c'] = $cba['ca']; $details[$side]['style'] = trim($cba['style']); $details['mbw']['BL'] = $cba['mbl']; $details['mbw']['BR'] = $cba['mbr']; $details['mbw']['RT'] = $cba['mrt']; $details['mbw']['RB'] = $cba['mrb']; $details['mbw']['TL'] = $cba['mtl']; $details['mbw']['TR'] = $cba['mtr']; $details['mbw']['LT'] = $cba['mlt']; $details['mbw']['LB'] = $cba['mlb']; $details['cellposdom'] = $cba['cpd']; $details['p'] = $side; if ($cba['over']==1) { $details[$side]['overlay'] = true; } else { $details[$side]['overlay'] = false; } $this->_tableRect($cba['x'],$cba['y'],$cba['w'],$cba['h'],$cba['bord'],$details, false, false); } $this->cellBorderBuffer = array(); } } function printtablebuffer() { if (!$this->table_rotate) { $this->pages[$this->page] .= $this->tablebuffer; foreach($this->tbrot_Links AS $p => $l) { foreach($l AS $v) { $this->PageLinks[$p][] = $v; } } $this->tbrot_Links = array(); foreach($this->tbrot_Annots AS $p => $l) { foreach($l AS $v) { $this->PageAnnots[$p][] = $v; } } $this->tbrot_Annots = array(); foreach($this->tbrot_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($v['op'],$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $v['op']; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($v['op'])); } } $this->tbrot_Reference = array(); foreach($this->tbrot_BMoutlines AS $v) { $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$v['p']); } $this->tbrot_BMoutlines = array(); foreach($this->tbrot_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$v['p'],'link'=>$v['link'],'toc_id'=>$v['toc_id']); } $this->tbrot_toc = array(); return; } $lm = $this->lMargin + $this->blk[$this->blklvl]['outer_left_margin'] + $this->blk[$this->blklvl]['border_left']['w'] + $this->blk[$this->blklvl]['padding_left']; $pw = $this->blk[$this->blklvl]['inner_width']; $this->pages[$this->page] .= $this->StartTransform(true)."\n"; if ($this->table_rotate > 1) { if ($this->tbrot_align == 'L') { $xadj = $this->tbrot_h ; } else if ($this->tbrot_align == 'R') { $xadj = $lm-$this->tbrot_x0+($pw) ; } else { $xadj = $lm-$this->tbrot_x0+(($pw + $this->tbrot_h)/2) ; } $yadj = 0; } else { if ($this->tbrot_align == 'L') { $xadj = 0 ; } else if ($this->tbrot_align == 'R') { $xadj = $lm-$this->tbrot_x0+($pw - $this->tbrot_h) ; } else { $xadj = $lm-$this->tbrot_x0+(($pw - $this->tbrot_h)/2) ; } $yadj = $this->tbrot_w; } $this->pages[$this->page] .= $this->transformTranslate($xadj, $yadj , true)."\n"; $this->pages[$this->page] .= $this->transformRotate($this->table_rotate, $this->tbrot_x0 , $this->tbrot_y0 , true)."\n"; $this->pages[$this->page] .= $this->tablebuffer; foreach($this->tbrot_Links AS $p => $l) { foreach($l AS $v) { $w = $v[2]/_MPDFK; $h = $v[3]/_MPDFK; $ax = ($v[0]/_MPDFK) - $this->tbrot_x0; $ay = (($this->hPt-$v[1])/_MPDFK) - $this->tbrot_y0; if ($this->table_rotate > 1) { $bx = $this->tbrot_x0+$xadj-$ay-$h; $by = $this->tbrot_y0+$yadj+$ax; } else { $bx = $this->tbrot_x0+$xadj+$ay; $by = $this->tbrot_y0+$yadj-$ax-$w; } $v[0] = $bx*_MPDFK; $v[1] = ($this->h-$by)*_MPDFK; $v[2] = $h*_MPDFK; $v[3] = $w*_MPDFK; $this->PageLinks[$p][] = $v; } } $this->tbrot_Links = array(); foreach($this->internallink AS $key => $f) { if (is_array($f) && isset($f['tbrot'])) { $f['Y'] = $this->tbrot_y0; $f['PAGE'] = $this->page; unset($f['tbrot']); $this->internallink[$key] = $f; } } foreach($this->tbrot_Annots AS $p => $l) { foreach($l AS $v) { $ax = abs($v['x']) - $this->tbrot_x0; $ay = $v['y'] - $this->tbrot_y0; if ($this->table_rotate > 1) { $bx = $this->tbrot_x0+$xadj-$ay; $by = $this->tbrot_y0+$yadj+$ax; } else { $bx = $this->tbrot_x0+$xadj+$ay; $by = $this->tbrot_y0+$yadj-$ax; } if ($v['x'] < 0) { $v['x'] = -$bx; } else { $v['x'] = $bx; } $v['y'] = ($by); $this->PageAnnots[$p][] = $v; } } $this->tbrot_Annots = array(); foreach($this->tbrot_BMoutlines AS $v) { $v['y'] = $this->tbrot_y0; $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$this->page); } foreach($this->tbrot_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($this->page,$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $this->page; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($this->page)); } } foreach($this->tbrot_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$this->page,'link'=>$v['link'],'toc_id'=>$v['toc_id']); $this->links[$v['link']][1] = $this->tbrot_y0; } $this->tbrot_Reference = array(); $this->tbrot_BMoutlines = array(); $this->tbrot_toc = array(); $this->pages[$this->page] .= $this->StopTransform(true)."\n"; $this->y = $this->tbrot_y0 + $this->tbrot_w; $this->x = $this->lMargin; $this->tablebuffer = ''; } function printkwtbuffer() { if (!$this->kwt_moved) { foreach($this->kwt_buffer AS $s) { $this->pages[$this->page] .= $s['s']."\n"; } foreach($this->kwt_Links AS $p => $l) { foreach($l AS $v) { $this->PageLinks[$p][] = $v; } } $this->kwt_Links = array(); foreach($this->kwt_Annots AS $p => $l) { foreach($l AS $v) { $this->PageAnnots[$p][] = $v; } } $this->kwt_Annots = array(); foreach($this->kwt_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($v['op'],$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $v['op']; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($v['op'])); } } $this->kwt_Reference = array(); foreach($this->kwt_BMoutlines AS $v) { $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$v['p']); } $this->kwt_BMoutlines = array(); foreach($this->kwt_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$v['p'],'link'=>$v['link'],'toc_id'=>$v['toc_id']); } $this->kwt_toc = array(); return; } $this->pages[$this->page] .= $this->StartTransform(true)."\n"; $xadj = $this->lMargin - $this->kwt_x0 ; $yadj = $this->tMargin - $this->kwt_y0 ; $this->pages[$this->page] .= $this->transformTranslate($xadj, $yadj , true)."\n"; foreach($this->kwt_buffer AS $s) { $this->pages[$this->page] .= $s['s']."\n"; } foreach($this->kwt_Links AS $p => $l) { foreach($l AS $v) { $bx = $this->kwt_x0+$xadj; $by = $this->kwt_y0+$yadj; $v[0] = $bx*_MPDFK; $v[1] = ($this->h-$by)*_MPDFK; $this->PageLinks[$p][] = $v; } } foreach($this->internallink AS $key => $f) { if (is_array($f) && isset($f['kwt'])) { $f['Y'] += $yadj; $f['PAGE'] = $this->page; unset($f['kwt']); $this->internallink[$key] = $f; } } foreach($this->kwt_Annots AS $p => $l) { foreach($l AS $v) { $bx = $this->kwt_x0+$xadj; $by = $this->kwt_y0+$yadj; if ($v['x'] < 0) { $v['x'] = -$bx; } else { $v['x'] = $bx; } $v['y'] = $by; $this->PageAnnots[$p][] = $v; } } foreach($this->kwt_BMoutlines AS $v) { if ($v['y'] != 0) { $v['y'] += $yadj; } $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$this->page); } foreach($this->kwt_Reference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($this->page,$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $this->page; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($this->page)); } } foreach($this->kwt_toc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$this->page,'link'=>$v['link'],'toc_id'=>$v['toc_id']); $this->links[$v['link']][0] = $this->page; $this->links[$v['link']][1] += $yadj; } $this->kwt_Links = array(); $this->kwt_Annots = array(); $this->kwt_Reference = array(); $this->kwt_BMoutlines = array(); $this->kwt_toc = array(); $this->pages[$this->page] .= $this->StopTransform(true)."\n"; $this->kwt_buffer = array(); $this->y += $this->kwt_height; } function printfloatbuffer() { if (count($this->floatbuffer)) { $this->objectbuffer = $this->floatbuffer; $this->printobjectbuffer(false); $this->objectbuffer = array(); $this->floatbuffer = array(); $this->floatmargins = array(); } } function printdivbuffer() { $p1 = $this->blk[$this->blklvl]['startpage']; $p2 = $this->page; $bottom[$p1] = $this->ktBlock[$p1]['bottom_margin']; $bottom[$p2] = $this->y; $top[$p1] = $this->kt_y00; $top2 = $this->h; foreach($this->divbuffer AS $key=>$s) { if ($s['page'] == $p2) { $top2 = MIN($s['y'], $top2); } } $top[$p2] = $top2; $height[$p1] = ($bottom[$p1] - $top[$p1]); $height[$p2] = ($bottom[$p2] - $top[$p2]); $xadj[$p1] = $this->MarginCorrection; $yadj[$p1] = -($top[$p1] - $top[$p2]); $xadj[$p2] = 0; $yadj[$p2] = $height[$p1]; if ($this->ColActive || !$this->keep_block_together || $this->blk[$this->blklvl]['startpage'] == $this->page || ($this->page - $this->blk[$this->blklvl]['startpage']) > 1 || ($height[$p1]+$height[$p2]) > $this->h) { foreach($this->divbuffer AS $s) { $this->pages[$s['page']] .= $s['s']."\n"; } foreach($this->ktLinks AS $p => $l) { foreach($l AS $v) { $this->PageLinks[$p][] = $v; } } foreach($this->ktForms AS $key => $f) { $this->form->forms[$f['n']] = $f; } foreach($this->ktAnnots AS $p => $l) { foreach($l AS $v) { $this->PageAnnots[$p][] = $v; } } foreach($this->ktReference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($p2,$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $p2; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($p2)); } } foreach($this->ktBMoutlines AS $v) { $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$v['p']); } foreach($this->_kttoc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$v['p'],'link'=>$v['link'],'toc_id'=>$v['toc_id']); } $this->divbuffer = array(); $this->ktLinks = array(); $this->ktAnnots = array(); $this->ktForms = array(); $this->ktBlock = array(); $this->ktReference = array(); $this->ktBMoutlines = array(); $this->_kttoc = array(); $this->keep_block_together = 0; return; } else { $np = ''; $lastpage = -1; foreach($this->divbuffer AS $key=>$s) { $t = $s['s']; $p = $s['page']; if ($p != $lastpage) { $q = ''; if ($lastpage != -1) { $q = ' Q'."\n"; } $t = $q . $this->StartTransform(true)."\n" . $this->transformTranslate($xadj[$p], $yadj[$p] , true)."\n" . $t; $lastpage = $p; } $np .= $t."\n"; } if ($lastpage != -1) { $np .= ' Q'."\n"; } $this->pages[$this->page] .= $np; foreach($this->ktLinks AS $p => $l) { foreach($l AS $v) { $v[0] += ($xadj[$p]*_MPDFK); $v[1] -= ($yadj[$p]*_MPDFK); $this->PageLinks[$p2][] = $v; } } foreach($this->ktForms AS $key => $f) { $p = $f['page']; $f['x'] += ($xadj[$p]); $f['y'] += ($yadj[$p]); $f['page'] = $p2; $this->form->forms[$f['n']] = $f; } foreach($this->internallink AS $key => $f) { if (is_array($f) && isset($f['kt'])) { $f['Y'] += ($yadj[$f['PAGE']]); $f['PAGE'] = $p2; unset($f['kt']); $this->internallink[$key] = $f; } } foreach($this->ktAnnots AS $p => $l) { foreach($l AS $v) { if ($v['x']>0) { $v['x'] += $xadj[$p]; } else if ($v['x']<0) { $v['x'] -= $xadj[$p]; } $v['y'] += $yadj[$p]; $this->PageAnnots[$p2][] = $v; } } foreach($this->ktBMoutlines AS $v) { if ($v['y'] != 0) { $v['y'] += ($yadj[$v['p']]); } $this->BMoutlines[]=array('t'=>$v['t'],'l'=>$v['l'],'y'=>$v['y'],'p'=>$p2); } foreach($this->ktReference AS $v) { $Present=0; for ($i=0;$i<count($this->Reference);$i++){ if ($this->Reference[$i]['t']==$v['t']){ $Present=1; if (!in_array($p2,$this->Reference[$i]['p'])) { $this->Reference[$i]['p'][] = $p2; } } } if ($Present==0) { $this->Reference[]=array('t'=>$v['t'],'p'=>array($p2)); } } foreach($this->_kttoc AS $v) { $this->tocontents->_toc[]=array('t'=>$v['t'],'l'=>$v['l'],'p'=>$p2,'link'=>$v['link'],'toc_id'=>$v['toc_id']); $this->links[$v['link']][0] = $p2; $this->links[$v['link']][1] += $yadj[$v['p']]; } $this->y = $top[$p2] + $height[$p1] + $height[$p2]; $this->x = $this->lMargin; $this->divbuffer = array(); $this->ktLinks = array(); $this->ktAnnots = array(); $this->ktForms = array(); $this->ktBlock = array(); $this->ktReference = array(); $this->ktBMoutlines = array(); $this->_kttoc = array(); $this->keep_block_together = 0; } } function Circle($x,$y,$r,$style='S') { $this->Ellipse($x,$y,$r,$r,$style); } function Ellipse($x,$y,$rx,$ry,$style='S') { if($style=='F') { $op='f'; } elseif($style=='FD' or $style=='DF') { $op='B'; } else { $op='S'; } $lx=4/3*(M_SQRT2-1)*$rx; $ly=4/3*(M_SQRT2-1)*$ry; $h=$this->h; $this->_out(sprintf('%.3F %.3F m %.3F %.3F %.3F %.3F %.3F %.3F c', ($x+$rx)*_MPDFK,($h-$y)*_MPDFK, ($x+$rx)*_MPDFK,($h-($y-$ly))*_MPDFK, ($x+$lx)*_MPDFK,($h-($y-$ry))*_MPDFK, $x*_MPDFK,($h-($y-$ry))*_MPDFK)); $this->_out(sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c', ($x-$lx)*_MPDFK,($h-($y-$ry))*_MPDFK, ($x-$rx)*_MPDFK,($h-($y-$ly))*_MPDFK, ($x-$rx)*_MPDFK,($h-$y)*_MPDFK)); $this->_out(sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c', ($x-$rx)*_MPDFK,($h-($y+$ly))*_MPDFK, ($x-$lx)*_MPDFK,($h-($y+$ry))*_MPDFK, $x*_MPDFK,($h-($y+$ry))*_MPDFK)); $this->_out(sprintf('%.3F %.3F %.3F %.3F %.3F %.3F c %s', ($x+$lx)*_MPDFK,($h-($y+$ry))*_MPDFK, ($x+$rx)*_MPDFK,($h-($y+$ly))*_MPDFK, ($x+$rx)*_MPDFK,($h-$y)*_MPDFK, $op)); } function AutosizeText($text,$w,$font,$style,$szfont=72) { $text = $this->purify_utf8_text($text); if ($this->text_input_as_HTML) { $text = $this->all_entities_to_utf8($text); } if ($this->usingCoreFont) { $text = mb_convert_encoding($text,$this->mb_enc,'UTF-8'); } $text = ' '.$text.' '; $width = $this->ConvertSize($w); $loop = 0; while ( $loop == 0 ) { $this->SetFont($font,$style,$szfont); $sz = $this->GetStringWidth( $text ); if ( $sz > $w ) { $szfont --; } else { $loop ++; } } $this->SetFont($font,$style,$szfont); $this->Cell($w, 0, $text, 0, 0, "C"); } function reverse_letters($str) { $str = strtr($str, '{}[]()', '}{][)('); return $this->mb_strrev($str, $this->mb_enc); } function magic_reverse_dir(&$chunk, $join=true, $dir) { if ($this->usingCoreFont) { return 0; } if ($this->biDirectional) { $pregRTLchars = $this->pregRTLchars; if ($this->CurrentFont['unAGlyphs']) { $pregRTLchars .= "\x{F500}-\x{F7FF}"; } if ($join) { $chunk = preg_replace("/([".$pregRTLchars."]+)/ue", '$this->ArabJoin(stripslashes(\'\\1\'))', $chunk ); } $contains_rtl = false; $all_rtl = true; $initSpace = false; $endSpace = false; $nonDirchars = "\x{A0}\"\'\(\)\{\}\[\].,:\\/-="; $bdo=array(); preg_match_all('/([\x{202A}\x{202B}])(.*?)([\x{202C}])/u',$chunk,$m); if (count($m[0])) { for($i=0;$i<count($m[0]);$i++) { if ($m[1][$i]=="\xe2\x80\xab") { $mark = code2utf(0xf800+$i); $bdo[$i] = $this->reverse_letters($m[2][$i]); } else if ($m[1][$i]=="\xe2\x80\xaa") { $mark = code2utf(0xf880+$i); $bdo[$i] = $m[2][$i]; } $chunk = preg_replace('/'.preg_quote($m[0][$i],'/').'/u',$mark,$chunk); } $pregRTLchars .= "\x{F800}-\x{F87F}"; } if (preg_match("/[".$pregRTLchars."]/u",$chunk)) { if (preg_match("/^[ ]/",$chunk)) { $initSpace = true; $chunk = preg_replace("/^[ ]/",'',$chunk); } if (preg_match("/[ ]$/",$chunk)) { $endSpace = true; $chunk = preg_replace("/[ ]$/",'',$chunk); } if (preg_match("/[^".$pregRTLchars.$nonDirchars." ]/u",$chunk)) { $all_rtl = false; if ($dir == 'rtl') { $chunk = preg_replace("/([^".$pregRTLchars.$nonDirchars."][".$nonDirchars."]*) ([".$nonDirchars."]*[^".$pregRTLchars.$nonDirchars."])/u","\\1\x07\\2",$chunk); } $chunk = preg_replace("/([".$pregRTLchars."][".$nonDirchars."]*) ([".$nonDirchars."]*[".$pregRTLchars."])/u","\\1\x07\\2",$chunk); $bits = explode(' ',$chunk); foreach($bits AS $bitkey=>$bit) { $bit = preg_replace("/\x07/"," ",$bit); if (preg_match("/^[".$pregRTLchars.$nonDirchars." ]*$/u",$bit)) { $bits[$bitkey] = $this->reverse_letters($bit); } else if (preg_match("/[".$pregRTLchars."]/u",$bit)) { if ($dir == 'rtl') { $bit = preg_replace("/([^".$pregRTLchars.$nonDirchars." ])([".$nonDirchars."]*[".$pregRTLchars."])/u","\\1\x07\\2",$bit ); $bit = preg_replace("/([".$pregRTLchars."][".$nonDirchars."]*)([^".$pregRTLchars.$nonDirchars." ])/u","\\1\x07\\2",$bit ); } else { $bit = preg_replace("/([^".$pregRTLchars." ][".$nonDirchars."]*)([".$pregRTLchars." ])/u","\\1\x07\\2",$bit ); $bit = preg_replace("/([".$pregRTLchars." ])([".$nonDirchars."]*[^".$pregRTLchars." ])/u","\\1\x07\\2",$bit ); } $sbits = explode("\x07",$bit ); foreach($sbits AS $sbitkey=>$sbit) { $sbit = preg_replace("/\x07/","",$sbit); if (preg_match("/^[".$pregRTLchars.$nonDirchars." ]*$/u",$sbit)) { $sbits[$sbitkey] = $this->reverse_letters($sbit); } else if (preg_match("/[".$pregRTLchars."]/u",$sbit) && $dir=='rtl') { $sbits[$sbitkey] = $this->reverse_letters($sbit); } else { $sbit = preg_replace("/([\x{0660}-\x{066C}0-9]+[\x{0660}-\x{066C}0-9\.,:\/]*[\x{0660}-\x{066C}0-9]+)/ue", '$this->reverse_letters(\'\\1\')', $sbit ); $sbits[$sbitkey] = $sbit; } } if ($dir == 'rtl') { $sbits = array_reverse($sbits,false); } $bits[$bitkey] = implode('',$sbits); } else if (preg_match("/[".$pregRTLchars."]/u",$bit) && $dir=='rtl') { $bits[$bitkey] = $this->reverse_letters($bit); } else { $bit = preg_replace("/([\x{0660}-\x{066C}0-9]+[\x{0660}-\x{066C}0-9\.,:\/]*[\x{0660}-\x{066C}0-9]+)/ue", '$this->reverse_letters(\'\\1\')', $bit ); $bits[$bitkey] = $bit; } } if ($dir == 'rtl') { $bits = array_reverse($bits,false); } $chunk = implode(' ',$bits); } else { $chunk = $this->reverse_letters($chunk); } $contains_rtl = true; $chunk = preg_replace("/([\x{0660}-\x{066C}0-9]+[\x{0660}-\x{066C}0-9\.,:\/]*[\x{0660}-\x{066C}0-9]+)/ue", '$this->reverse_letters(\'\\1\')', $chunk ); if ($dir == 'rtl') { if ($endSpace) { $chunk = ' '.$chunk; } if ($initSpace) { $chunk .= ' '; } } else { if ($initSpace) { $chunk = ' '.$chunk; } if ($endSpace) { $chunk .= ' '; } } } else { $all_rtl = false; } if (count($bdo)) { for($i=0;$i<count($bdo);$i++) { $chunk = preg_replace('/[\x{'.dechex(intval(0xf800+$i)).'}\x{'.dechex(intval(0xf880+$i)).'}]/u',$bdo[$i],$chunk); } } if ($all_rtl) { return 2; } else if ($contains_rtl) { return 1; } else { return 0; } } return 0; } function SetSubstitutions() { $subsarray = array(); @include(_MPDF_PATH.'includes/subs_win-1252.php'); $this->substitute = array(); foreach($subsarray AS $key => $val) { $this->substitute[code2utf($key)] = $val; } } function SubstituteChars($html) { if (count($this->substitute)) { $a=preg_split('/(<.*?>)/ms',$html,-1,PREG_SPLIT_DELIM_CAPTURE); $html = ''; foreach($a as $i => $e) { if($i%2==0) { $e = strtr($e, $this->substitute); } $html .= $e; } } return $html; } function SubstituteCharsSIP(&$writehtml_a, &$writehtml_i, &$writehtml_e) { if (preg_match("/^(.*?)([\x{20000}-\x{2FFFF}]+)(.*)/u", $writehtml_e, $m)) { if (isset($this->CurrentFont['sipext']) && $this->CurrentFont['sipext']) { $font = $this->CurrentFont['sipext']; if (!in_array($font, $this->available_unifonts)) { return 0; } $writehtml_a[$writehtml_i] = $writehtml_e = $m[1]; array_splice($writehtml_a, $writehtml_i+1, 0, array('span style="font-family: '.$font.'"', $m[2], '/span', $m[3])); $this->subPos = $writehtml_i; return 4; } } return 0; } function SubstituteCharsNonCore(&$writehtml_a, &$writehtml_i, &$writehtml_e) { if (mb_convert_encoding(mb_convert_encoding($writehtml_e, $this->mb_enc, "UTF-8"), "UTF-8", $this->mb_enc) == $writehtml_e) { return 0; } $cw = &$this->CurrentFont['cw']; $unicode = $this->UTF8StringToArray($writehtml_e, false); $start = -1; $end = 0; $flag = 0; $ftype = ''; $u = array(); if (!$this->subArrMB) { include(_MPDF_PATH.'includes/subs_core.php'); $this->subArrMB['a'] = $aarr; $this->subArrMB['s'] = $sarr; $this->subArrMB['z'] = $zarr; } foreach($unicode AS $c => $char) { if (($char> 127 || ($flag==1 && $char==32)) && $char != 173 && (!isset($this->subArrMB['a'][$char]) || ($flag==1 && $char==32)) && ($char<1536 || ($char>1791 && $char < 2304) || $char>3455)) { if ($flag==0) { $start=$c; } $flag=1; $u[] = $char; } else if ($flag>0) { $end=$c-1; break; } } if ($flag>0 && !$end) { $end=count($unicode)-1; } if ($start==-1) { return 0; } if (!is_array($this->backupSubsFont)) { $this->backupSubsFont = array("$this->backupSubsFont"); } foreach($this->backupSubsFont AS $bsfctr=>$bsf) { if ($this->fonttrans[$bsf] == 'chelvetica' || $this->fonttrans[$bsf] == 'ctimes' || $this->fonttrans[$bsf] == 'ccourier') { continue; } $font = $bsf; unset($cw); $cw = ''; if (isset($this->fonts[$font])) { $cw = &$this->fonts[$font]['cw']; } else if (file_exists(_MPDF_TTFONTDATAPATH.$font.'.cw.dat')) { $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); } else { $prevFontFamily = $this->FontFamily; $prevFontStyle = $this->currentfontstyle; $prevFontSizePt = $this->FontSizePt; $this->SetFont($bsf, '', '', false); $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); $this->SetFont($prevFontFamily, $prevFontStyle, $prevFontSizePt, false); } if (!$cw) { continue; } $l = 0; foreach($u AS $char) { if ($char == 173 || $this->_charDefined($cw,$char) || ($char>1536 && $char<1791) || ($char>2304 && $char<3455 )) { $l++; } else { if ($l==0 && $bsfctr == (count($this->backupSubsFont)-1)) { $cont = mb_substr($writehtml_e, $start+1); $writehtml_e = mb_substr($writehtml_e, 0, $start+1, 'UTF-8'); array_splice($writehtml_a, $writehtml_i+1, 0, array('', $cont)); $this->subPos = $writehtml_i+1; return 2; } else { break; } } } if ($l > 0) { $patt = mb_substr($writehtml_e, $start, $l, 'UTF-8'); if (preg_match("/(.*?)(".preg_quote($patt,'/').")(.*)/u", $writehtml_e, $m)) { $writehtml_e = $m[1]; array_splice($writehtml_a, $writehtml_i+1, 0, array('span style="font-family: '.$font.'"', $m[2], '/span', $m[3])); $this->subPos = $writehtml_i+3; return 4; } } } unset($cw); return 0; } function SubstituteCharsMB(&$writehtml_a, &$writehtml_i, &$writehtml_e) { $cw = &$this->CurrentFont['cw']; $unicode = $this->UTF8StringToArray($writehtml_e, false); $start = -1; $end = 0; $flag = 0; $ftype = ''; $u = array(); foreach($unicode AS $c => $char) { if (($flag == 0 || $flag==2) && (!$this->_charDefined($cw,$char) || ($flag==2 && $char==32)) && $this->checkSIP && $char > 131071) { if (in_array($this->FontFamily ,$this->available_CJK_fonts)) { return 0; } if ($flag==0) { $start=$c; } $flag=2; $u[] = $char; } else if (($flag == 0 || $flag==1) && $char != 173 && (!$this->_charDefined($cw,$char) || ($flag==1 && $char==32)) && ($char<1536 || ($char>1791 && $char < 2304) || $char>3455)) { if ($flag==0) { $start=$c; } $flag=1; $u[] = $char; } else if ($flag>0) { $end=$c-1; break; } } if ($flag>0 && !$end) { $end=count($unicode)-1; } if ($start==-1) { return 0; } if ($flag == 2) { if (isset($this->CurrentFont['sipext']) && $this->CurrentFont['sipext']) { $font = $this->CurrentFont['sipext']; unset($cw); $cw = ''; if (isset($this->fonts[$font])) { $cw = &$this->fonts[$font]['cw']; } else if (file_exists(_MPDF_TTFONTDATAPATH.$font.'.cw.dat')) { $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); } else { $prevFontFamily = $this->FontFamily; $prevFontStyle = $this->currentfontstyle; $prevFontSizePt = $this->FontSizePt; $this->SetFont($font, '', '', false); $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); $this->SetFont($prevFontFamily, $prevFontStyle, $prevFontSizePt, false); } if (!$cw) { return 0; } $l = 0; foreach($u AS $char) { if ($this->_charDefined($cw,$char) || $char > 131071) { $l++; } else { break; } } if ($l > 0) { $patt = mb_substr($writehtml_e, $start, $l); if (preg_match("/(.*?)(".preg_quote($patt,'/').")(.*)/u", $writehtml_e, $m)) { $writehtml_e = $m[1]; array_splice($writehtml_a, $writehtml_i+1, 0, array('span style="font-family: '.$font.'"', $m[2], '/span', $m[3])); $this->subPos = $writehtml_i+3; return 4; } } } if (isset($this->backupSIPFont) && $this->backupSIPFont) { if ($this->currentfontfamily != $this->backupSIPFont) { $font = $this->backupSIPFont; } else { unset($cw); return 0; } unset($cw); $cw = ''; if (isset($this->fonts[$font])) { $cw = &$this->fonts[$font]['cw']; } else if (file_exists(_MPDF_TTFONTDATAPATH.$font.'.cw.dat')) { $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); } else { $prevFontFamily = $this->FontFamily; $prevFontStyle = $this->currentfontstyle; $prevFontSizePt = $this->FontSizePt; $this->SetFont($this->backupSIPFont, '', '', false); $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); $this->SetFont($prevFontFamily, $prevFontStyle, $prevFontSizePt, false); } if (!$cw) { return 0; } $l = 0; foreach($u AS $char) { if ($this->_charDefined($cw,$char) || $char > 131071) { $l++; } else { break; } } if ($l > 0) { $patt = mb_substr($writehtml_e, $start, $l); if (preg_match("/(.*?)(".preg_quote($patt,'/').")(.*)/u", $writehtml_e, $m)) { $writehtml_e = $m[1]; array_splice($writehtml_a, $writehtml_i+1, 0, array('span style="font-family: '.$font.'"', $m[2], '/span', $m[3])); $this->subPos = $writehtml_i+3; return 4; } } } return 0; } if (!$this->PDFA && !$this->PDFX) { $repl = array(); if (!$this->subArrMB) { include(_MPDF_PATH.'includes/subs_core.php'); $this->subArrMB['a'] = $aarr; $this->subArrMB['s'] = $sarr; $this->subArrMB['z'] = $zarr; } if (isset($this->subArrMB['a'][$u[0]])) { $font = 'tta'; $ftype = 'C'; foreach($u AS $char) { if ($this->subArrMB['a'][$char]) { $repl[] = $this->subArrMB['a'][$char]; } else { break; } } } else if (isset($this->subArrMB['z'][$u[0]])) { $font = 'ttz'; $ftype = 'C'; foreach($u AS $char) { if ($this->subArrMB['z'][$char]) { $repl[] = $this->subArrMB['z'][$char]; } else { break; } } } else if (isset($this->subArrMB['s'][$u[0]])) { $font = 'tts'; $ftype = 'C'; foreach($u AS $char) { if ($this->subArrMB['s'][$char]) { $repl[] = $this->subArrMB['s'][$char]; } else { break; } } } if ($ftype=='C') { $patt = mb_substr($writehtml_e, $start, count($repl)); if (preg_match("/(.*?)(".preg_quote($patt,'/').")(.*)/u", $writehtml_e, $m)) { $writehtml_e = $m[1]; array_splice($writehtml_a, $writehtml_i+1, 0, array($font, implode('|', $repl), '/'.$font, $m[3])); $this->subPos = $writehtml_i+3; return 4; } return 0; } } if (!is_array($this->backupSubsFont)) { $this->backupSubsFont = array("$this->backupSubsFont"); } foreach($this->backupSubsFont AS $bsfctr=>$bsf) { if ($this->currentfontfamily != $bsf) { $font = $bsf; } else { continue; } unset($cw); $cw = ''; if (isset($this->fonts[$font])) { $cw = &$this->fonts[$font]['cw']; } else if (file_exists(_MPDF_TTFONTDATAPATH.$font.'.cw.dat')) { $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); } else { $prevFontFamily = $this->FontFamily; $prevFontStyle = $this->currentfontstyle; $prevFontSizePt = $this->FontSizePt; $this->SetFont($bsf, '', '', false); $cw = @file_get_contents(_MPDF_TTFONTDATAPATH.$font.'.cw.dat'); $this->SetFont($prevFontFamily, $prevFontStyle, $prevFontSizePt, false); } if (!$cw) { continue; } $l = 0; foreach($u AS $char) { if ($char == 173 || $this->_charDefined($cw,$char) || ($char>1536 && $char<1791) || ($char>2304 && $char<3455 )) { $l++; } else { if ($l==0 && $bsfctr == (count($this->backupSubsFont)-1)) { $cont = mb_substr($writehtml_e, $start+1); $writehtml_e = mb_substr($writehtml_e, 0, $start+1); array_splice($writehtml_a, $writehtml_i+1, 0, array('', $cont)); $this->subPos = $writehtml_i+1; return 2; } else { break; } } } if ($l > 0) { $patt = mb_substr($writehtml_e, $start, $l); if (preg_match("/(.*?)(".preg_quote($patt,'/').")(.*)/u", $writehtml_e, $m)) { $writehtml_e = $m[1]; array_splice($writehtml_a, $writehtml_i+1, 0, array('span style="font-family: '.$font.'"', $m[2], '/span', $m[3])); $this->subPos = $writehtml_i+3; return 4; } } } unset($cw); return 0; } function setHiEntitySubstitutions() { $entarr = array ( 'nbsp' => '160', 'iexcl' => '161', 'cent' => '162', 'pound' => '163', 'curren' => '164', 'yen' => '165', 'brvbar' => '166', 'sect' => '167', 'uml' => '168', 'copy' => '169', 'ordf' => '170', 'laquo' => '171', 'not' => '172', 'shy' => '173', 'reg' => '174', 'macr' => '175', 'deg' => '176', 'plusmn' => '177', 'sup2' => '178', 'sup3' => '179', 'acute' => '180', 'micro' => '181', 'para' => '182', 'middot' => '183', 'cedil' => '184', 'sup1' => '185', 'ordm' => '186', 'raquo' => '187', 'frac14' => '188', 'frac12' => '189', 'frac34' => '190', 'iquest' => '191', 'Agrave' => '192', 'Aacute' => '193', 'Acirc' => '194', 'Atilde' => '195', 'Auml' => '196', 'Aring' => '197', 'AElig' => '198', 'Ccedil' => '199', 'Egrave' => '200', 'Eacute' => '201', 'Ecirc' => '202', 'Euml' => '203', 'Igrave' => '204', 'Iacute' => '205', 'Icirc' => '206', 'Iuml' => '207', 'ETH' => '208', 'Ntilde' => '209', 'Ograve' => '210', 'Oacute' => '211', 'Ocirc' => '212', 'Otilde' => '213', 'Ouml' => '214', 'times' => '215', 'Oslash' => '216', 'Ugrave' => '217', 'Uacute' => '218', 'Ucirc' => '219', 'Uuml' => '220', 'Yacute' => '221', 'THORN' => '222', 'szlig' => '223', 'agrave' => '224', 'aacute' => '225', 'acirc' => '226', 'atilde' => '227', 'auml' => '228', 'aring' => '229', 'aelig' => '230', 'ccedil' => '231', 'egrave' => '232', 'eacute' => '233', 'ecirc' => '234', 'euml' => '235', 'igrave' => '236', 'iacute' => '237', 'icirc' => '238', 'iuml' => '239', 'eth' => '240', 'ntilde' => '241', 'ograve' => '242', 'oacute' => '243', 'ocirc' => '244', 'otilde' => '245', 'ouml' => '246', 'divide' => '247', 'oslash' => '248', 'ugrave' => '249', 'uacute' => '250', 'ucirc' => '251', 'uuml' => '252', 'yacute' => '253', 'thorn' => '254', 'yuml' => '255', 'OElig' => '338', 'oelig' => '339', 'Scaron' => '352', 'scaron' => '353', 'Yuml' => '376', 'fnof' => '402', 'circ' => '710', 'tilde' => '732', 'Alpha' => '913', 'Beta' => '914', 'Gamma' => '915', 'Delta' => '916', 'Epsilon' => '917', 'Zeta' => '918', 'Eta' => '919', 'Theta' => '920', 'Iota' => '921', 'Kappa' => '922', 'Lambda' => '923', 'Mu' => '924', 'Nu' => '925', 'Xi' => '926', 'Omicron' => '927', 'Pi' => '928', 'Rho' => '929', 'Sigma' => '931', 'Tau' => '932', 'Upsilon' => '933', 'Phi' => '934', 'Chi' => '935', 'Psi' => '936', 'Omega' => '937', 'alpha' => '945', 'beta' => '946', 'gamma' => '947', 'delta' => '948', 'epsilon' => '949', 'zeta' => '950', 'eta' => '951', 'theta' => '952', 'iota' => '953', 'kappa' => '954', 'lambda' => '955', 'mu' => '956', 'nu' => '957', 'xi' => '958', 'omicron' => '959', 'pi' => '960', 'rho' => '961', 'sigmaf' => '962', 'sigma' => '963', 'tau' => '964', 'upsilon' => '965', 'phi' => '966', 'chi' => '967', 'psi' => '968', 'omega' => '969', 'thetasym' => '977', 'upsih' => '978', 'piv' => '982', 'ensp' => '8194', 'emsp' => '8195', 'thinsp' => '8201', 'zwnj' => '8204', 'zwj' => '8205', 'lrm' => '8206', 'rlm' => '8207', 'ndash' => '8211', 'mdash' => '8212', 'lsquo' => '8216', 'rsquo' => '8217', 'sbquo' => '8218', 'ldquo' => '8220', 'rdquo' => '8221', 'bdquo' => '8222', 'dagger' => '8224', 'Dagger' => '8225', 'bull' => '8226', 'hellip' => '8230', 'permil' => '8240', 'prime' => '8242', 'Prime' => '8243', 'lsaquo' => '8249', 'rsaquo' => '8250', 'oline' => '8254', 'frasl' => '8260', 'euro' => '8364', 'image' => '8465', 'weierp' => '8472', 'real' => '8476', 'trade' => '8482', 'alefsym' => '8501', 'larr' => '8592', 'uarr' => '8593', 'rarr' => '8594', 'darr' => '8595', 'harr' => '8596', 'crarr' => '8629', 'lArr' => '8656', 'uArr' => '8657', 'rArr' => '8658', 'dArr' => '8659', 'hArr' => '8660', 'forall' => '8704', 'part' => '8706', 'exist' => '8707', 'empty' => '8709', 'nabla' => '8711', 'isin' => '8712', 'notin' => '8713', 'ni' => '8715', 'prod' => '8719', 'sum' => '8721', 'minus' => '8722', 'lowast' => '8727', 'radic' => '8730', 'prop' => '8733', 'infin' => '8734', 'ang' => '8736', 'and' => '8743', 'or' => '8744', 'cap' => '8745', 'cup' => '8746', 'int' => '8747', 'there4' => '8756', 'sim' => '8764', 'cong' => '8773', 'asymp' => '8776', 'ne' => '8800', 'equiv' => '8801', 'le' => '8804', 'ge' => '8805', 'sub' => '8834', 'sup' => '8835', 'nsub' => '8836', 'sube' => '8838', 'supe' => '8839', 'oplus' => '8853', 'otimes' => '8855', 'perp' => '8869', 'sdot' => '8901', 'lceil' => '8968', 'rceil' => '8969', 'lfloor' => '8970', 'rfloor' => '8971', 'lang' => '9001', 'rang' => '9002', 'loz' => '9674', 'spades' => '9824', 'clubs' => '9827', 'hearts' => '9829', 'diams' => '9830', ); foreach($entarr AS $key => $val) { $this->entsearch[] = '&'.$key.';'; $this->entsubstitute[] = code2utf($val); } } function SubstituteHiEntities($html) { if (count($this->entsearch)) { $html = str_replace($this->entsearch,$this->entsubstitute,$html); } return $html; } function is_utf8(&$string) { if ($string === mb_convert_encoding(mb_convert_encoding($string, "UTF-32", "UTF-8"), "UTF-8", "UTF-32")) { return true; } else { if ($this->ignore_invalid_utf8) { $string = mb_convert_encoding(mb_convert_encoding($string, "UTF-32", "UTF-8"), "UTF-8", "UTF-32") ; return true; } else { return false; } } } function purify_utf8($html,$lo=true) { if (!$this->is_utf8($html)) { echo "<p><b>HTML contains invalid UTF-8 character(s)</b></p>"; while (mb_convert_encoding(mb_convert_encoding($html, "UTF-32", "UTF-8"), "UTF-8", "UTF-32") != $html) { $a = iconv('UTF-8', 'UTF-8', $html); echo ($a); $pos = $start = strlen($a); $err = ''; while ( ord(substr($html,$pos,1)) > 128 ) { $err .= '[[#'.ord(substr($html,$pos,1)).']]'; $pos++; } echo '<span style="color:red; font-weight:bold">'.$err.'</span>'; $html = substr($html, $pos); } echo $html; $this->Error(""); } $html = preg_replace("/\r/", "", $html ); $html = $this->SubstituteHiEntities($html); $html = strcode2utf($html,$lo); return ($html); } function purify_utf8_text($txt) { if (!$this->is_utf8($txt)) { $this->Error("Text contains invalid UTF-8 character(s)"); } $txt = preg_replace("/\r/", "", $txt ); return ($txt); } function all_entities_to_utf8($txt) { $txt = $this->SubstituteHiEntities($txt); $txt = strcode2utf($txt); $txt = $this->lesser_entity_decode($txt); return ($txt); } function WriteBarcode($code, $showtext=1, $x='', $y='', $size=1, $border=0, $paddingL=1, $paddingR=1, $paddingT=2, $paddingB=2, $height=1, $bgcol=false, $col=false, $btype='ISBN', $supplement='0', $supplement_code='', $k=1) { if (empty($code)) { return; } $codestr = $code; $code = preg_replace('/\-/','',$code); if (!class_exists('PDFBarcode', false)) { include(_MPDF_PATH.'classes/barcode.php'); } $this->barcode = new PDFBarcode(); if ($btype == 'ISSN' || $btype == 'ISBN') { $arrcode = $this->barcode->getBarcodeArray($code, 'EAN13'); } else { $arrcode = $this->barcode->getBarcodeArray($code, $btype); } if ($arrcode === false) { $this->Error('Error in barcode string: '.$codestr); } if((($btype=='EAN13' || $btype=='ISBN' || $btype=='ISSN') && strlen($code) == 12) || ($btype=='UPCA' && strlen($code) == 11) || ($btype=='UPCE' && strlen($code) == 11) || ($btype=='EAN8' && strlen($code) == 7)) { $code .= $arrcode['checkdigit']; if (stristr($codestr,'-')) { $codestr .= '-' . $arrcode['checkdigit']; } else { $codestr .= $arrcode['checkdigit']; } } if ($btype == 'ISBN') { $codestr = 'ISBN '.$codestr; } if ($btype == 'ISSN') { $codestr = 'ISSN '.$codestr; } if (empty($x)) { $x = $this->x; } if (empty($y)) { $y = $this->y; } $prevDrawColor = $this->DrawColor; $prevTextColor = $this->TextColor; $prevFillColor = $this->FillColor; $lw = $this->LineWidth; $this->SetLineWidth(0.01); $size /= $k; $xres = $arrcode['nom-X'] * $size; $llm = $arrcode['lightmL'] * $arrcode['nom-X'] * $size; $rlm = $arrcode['lightmR'] * $arrcode['nom-X'] * $size; $bcw = ($arrcode["maxw"] * $xres); $fbw = $bcw + $llm + $rlm; $ow = $fbw + $paddingL + $paddingR; $fbwi = $fbw - 2; $num_height = 3 * $size; $fbh = $arrcode['nom-H'] * $size * $height; $bch = $fbh - (1.5 * $size); if (($btype=='EAN13' && $showtext) || $btype == 'ISSN' || $btype == 'ISBN') { $tisbnm = 1.5 * $size; $codestr_fontsize = 2.1 * $size; $paddingT += $codestr_fontsize + $tisbnm ; } $oh = $fbh + $paddingT + $paddingB; $xpos = $x; $ypos = $y; if ($col) { $this->SetDColor($col); $this->SetTColor($col); } else { $this->SetDColor($this->ConvertColor(0)); $this->SetTColor($this->ConvertColor(0)); } if ($bgcol) { $this->SetFColor($bgcol); } else { $this->SetFColor($this->ConvertColor(255)); } if (!$bgcol && !$col) { if ($border) { $fillb = 'DF'; } else { $fillb = 'F'; } $this->Rect($xpos, $ypos, $ow, $oh, $fillb); } $xpos = $x + $paddingL + $llm ; $ypos = $y + $paddingT; if ($col) { $this->SetFColor($col); } else { $this->SetFColor($this->ConvertColor(0)); } if ($arrcode !== false) { foreach ($arrcode["bcode"] AS $v) { $bw = ($v["w"] * $xres); if ($v["t"]) { $this->Rect($xpos, $ypos, $bw, $bch, 'F'); } $xpos += $bw; } } $prevFontFamily = $this->FontFamily; $prevFontStyle = $this->FontStyle; $prevFontSizePt = $this->FontSizePt; if (($btype=='EAN13' && $showtext) || $btype=='ISBN' || $btype=='ISSN') { if ($this->onlyCoreFonts) { $this->SetFont('chelvetica'); } else { $this->SetFont('sans'); } if ($bgcol) { $this->SetFColor($bgcol); } else { $this->SetFColor($this->ConvertColor(255)); } $this->x = $x + $paddingL + 1; $loop = 0; while ( $loop == 0 ) { $this->SetFontSize($codestr_fontsize*1.4*_MPDFK, false); $sz = $this->GetStringWidth( $codestr ); if ($sz > $fbwi) $codestr_fontsize -= 0.1; else $loop ++; } $this->SetFont('','',$codestr_fontsize*1.4*_MPDFK, true, true); if ($fbwi > $sz) { $xtra = $fbwi - $sz; $charspacing = $xtra / (strlen($codestr)-1); if ($charspacing) { $this->_out(sprintf('BT %.3F Tc ET',$charspacing*_MPDFK)); } } $this->y = $y + $paddingT - ($codestr_fontsize ) - $tisbnm ; $this->Cell($fbw , $codestr_fontsize, $codestr); if ($charspacing) { $this->_out('BT 0 Tc ET'); } } if ($this->onlyCoreFonts) { $this->SetFont('mono'); } else { if (in_array('ocrb',$this->available_unifonts)) { $this->SetFont('ocrb'); } else { $this->SetFont('mono'); } } if (isset($this->CurrentFont['desc']['CapHeight'])) { $fh = (1000/$this->CurrentFont['desc']['CapHeight']); } else if (isset($this->CurrentFont['desc']['Ascent'])) { $fh = (1000/$this->CurrentFont['desc']['Ascent']); } else { $fh = 1.2; } $charRO = ''; if ($btype=='EAN13' || $btype=='ISBN' || $btype=='ISSN') { $outerfontsize = 3; $outerp = $xres * 4; $innerp = $xres * 2.5; $textw = ($bcw*0.5) - $outerp - $innerp; $chars = 6; $charLO = substr($code,0,1); $charLI = substr($code,1,6); $charRI = substr($code,7,6); if (!$supplement) $charRO = '>'; } else if ($btype=='UPCA') { $outerfontsize = 2.3; $outerp = $xres * 10; $innerp = $xres * 2.5; $textw = ($bcw*0.5) - $outerp - $innerp; $chars = 5; $charLO = substr($code,0,1); $charLI = substr($code,1,5); $charRI = substr($code,6,5); $charRO = substr($code,11,1); } else if ($btype=='UPCE') { $outerfontsize = 2.3; $outerp = $xres * 4; $innerp = 0; $textw = ($bcw*0.5) - $outerp - $innerp; $chars = 3; $upce_code = $arrcode['code']; $charLO = substr($code,0,1); $charLI = substr($upce_code,0,3); $charRI = substr($upce_code,3,3); $charRO = substr($code,11,1); } else if ($btype=='EAN8') { $outerfontsize = 3; $outerp = $xres * 4; $innerp = $xres * 2.5; $textw = ($bcw*0.5) - $outerp - $innerp; $chars = 4; $charLO = '<'; $charLI = substr($code,0,4); $charRI = substr($code,4,4); if (!$supplement) $charRO = '>'; } $this->SetFontSize(($outerfontsize/3)*3*$fh*$size*_MPDFK); if (!$this->usingCoreFont) { $cw = $this->_getCharWidth($this->CurrentFont['cw'],32)*3*$fh*$size/1000; } else { $cw = $this->_getCharWidth($this->CurrentFont['cw'],48)*3*$fh*$size/1000; } $y_text = $y + $paddingT + $bch - ($num_height/2); $y_text_outer = $y + $paddingT + $bch - ($num_height*($outerfontsize/3)/2); $this->x = $x + $paddingL - ($cw*($outerfontsize/3)*0.1); $this->y = $y_text_outer; $this->Cell($cw, $num_height, $charLO ); $xtra = $textw - ($cw*$chars); $charspacing = $xtra / ($chars-1); if ($charspacing) { $this->_out(sprintf('BT %.3F Tc ET',$charspacing*_MPDFK)); } if ($bgcol) { $this->SetFColor($bgcol); } else { $this->SetFColor($this->ConvertColor(255)); } $this->SetFontSize(3*$fh*$size*_MPDFK); $this->x = $x + $paddingL + $llm + $outerp; $this->y = $y_text; $this->Cell($textw, $num_height, $charLI , 0, 0, '', 1); $this->x = $x + $paddingL + $llm + ($bcw*0.5) + $innerp; $this->y = $y_text; $this->Cell($textw, $num_height, $charRI , 0, 0, '', 1); if ($charspacing) { $this->_out('BT 0 Tc ET'); } $this->SetFontSize(($outerfontsize/3)*3*$fh*$size*_MPDFK); $this->x = $x + $paddingL + $llm + $bcw + $rlm - ($cw*($outerfontsize/3)*0.9); $this->y = $y_text_outer; $this->Cell($cw*($outerfontsize/3), $num_height, $charRO , 0, 0, 'R'); if ($supplement) { $supparrcode = $this->barcode->getBarcodeArray($supplement_code, 'EAN'.$supplement); if ($supparrcode === false) { $this->Error('Error in barcode string (supplement): '.$codestr.' '.$supplement_code); } if(strlen($supplement_code) != $supplement) { $this->Error('Barcode supplement incorrect: '.$supplement_code); } $llm = $fbw - (($arrcode['lightmR'] - $supparrcode['sepM']) * $arrcode['nom-X'] * $size); $rlm = $arrcode['lightmR'] * $arrcode['nom-X'] * $size; $bcw = ($supparrcode["maxw"] * $xres); $fbw = $bcw + $llm + $rlm; $ow = $fbw + $paddingL + $paddingR; $bch = $fbh - (1.5 * $size) - ($num_height + 0.5); $xpos = $x + $paddingL + $llm ; $ypos = $y + $paddingT + $num_height + 0.5; if ($col) { $this->SetFColor($col); } else { $this->SetFColor($this->ConvertColor(0)); } if ($supparrcode !== false) { foreach ($supparrcode["bcode"] AS $v) { $bw = ($v["w"] * $xres); if ($v["t"]) { $this->Rect($xpos, $ypos, $bw, $bch, 'F'); } $xpos += $bw; } } if ($bgcol) { $this->SetFColor($bgcol); } else { $this->SetFColor($this->ConvertColor(255)); } $this->SetFontSize(3*$fh*$size*_MPDFK); $this->x = $x + $paddingL + $llm; $this->y = $y + $paddingT; $this->Cell($bcw, $num_height, $supplement_code, 0, 0, 'C'); $this->SetFontSize(($outerfontsize/3)*3*$fh*$size*_MPDFK); $this->x = $x + $paddingL + $llm + $bcw + $rlm - ($cw*0.9); $this->y = $y + $paddingT; $this->Cell($cw*($outerfontsize/3), $num_height, '>', 0, 0, 'R'); } $this->SetFont($prevFontFamily, $prevFontStyle, $prevFontSizePt); $this->DrawColor = $prevDrawColor; $this->TextColor = $prevTextColor; $this->FillColor = $prevFillColor; $this->SetLineWidth($lw); $this->SetY($y); } function WriteBarcode2($code, $x='', $y='', $size=1, $height=1, $bgcol=false, $col=false, $btype='IMB', $print_ratio='', $k=1) { if (empty($code)) { return; } if (!class_exists('PDFBarcode', false)) { include(_MPDF_PATH.'classes/barcode.php'); } $this->barcode = new PDFBarcode(); $arrcode = $this->barcode->getBarcodeArray($code, $btype, $print_ratio); if ($arrcode === false) { $this->Error('Error in barcode string: '.$code); } if (empty($x)) { $x = $this->x; } if (empty($y)) { $y = $this->y; } $prevDrawColor = $this->DrawColor; $prevTextColor = $this->TextColor; $prevFillColor = $this->FillColor; $lw = $this->LineWidth; $this->SetLineWidth(0.01); $size /= $k; $xres = $arrcode['nom-X'] * $size; if ($btype == 'IMB' || $btype == 'RM4SCC' || $btype == 'KIX' || $btype == 'POSTNET' || $btype == 'PLANET') { $llm = $arrcode['quietL'] / $k; $rlm = $arrcode['quietR'] / $k; $tlm = $blm = $arrcode['quietTB'] / $k; $height=1; } else if (in_array($btype, array('C128A','C128B','C128C','EAN128A','EAN128B','EAN128C','C39','C39+','C39E','C39E+','S25','S25+','I25','I25+','I25B','I25B+','C93','MSI','MSI+','CODABAR','CODE11'))) { $llm = $arrcode['lightmL'] * $xres; $rlm = $arrcode['lightmR'] * $xres; $tlm = $blm = $arrcode['lightTB'] * $xres * $height; } $bcw = ($arrcode["maxw"] * $xres); $fbw = $bcw + $llm + $rlm; $bch = ($arrcode["nom-H"] * $size * $height); $fbh = $bch + $tlm + $blm; $xpos = $x; $ypos = $y; if ($col) { $this->SetDColor($col); $this->SetTColor($col); } else { $this->SetDColor($this->ConvertColor(0)); $this->SetTColor($this->ConvertColor(0)); } if ($bgcol) { $this->SetFColor($bgcol); } else { $this->SetFColor($this->ConvertColor(255)); } if ($col) { $this->SetFColor($col); } else { $this->SetFColor($this->ConvertColor(0)); } $xpos = $x + $llm ; if ($arrcode !== false) { foreach ($arrcode["bcode"] AS $v) { $bw = ($v["w"] * $xres); if ($v["t"]) { $ypos = $y + $tlm + ($bch * $v['p'] / $arrcode['maxh']); $this->Rect($xpos, $ypos, $bw, ($v['h'] * $bch / $arrcode['maxh']), 'F'); } $xpos += $bw; } } if ($btype == 'I25B' || $btype == 'I25B+') { $this->Rect($x, $y, $fbw, ($arrcode['lightTB'] * $xres * $height), 'F'); $this->Rect($x, $y+$tlm+$bch, $fbw, ($arrcode['lightTB'] * $xres * $height), 'F'); } $this->SetFont($prevFontFamily, $prevFontStyle, $prevFontSizePt); $this->DrawColor = $prevDrawColor; $this->TextColor = $prevTextColor; $this->FillColor = $prevFillColor; $this->SetLineWidth($lw); $this->SetY($y); } function StartTransform($returnstring=false) { if ($returnstring) { return('q'); } else { $this->_out('q'); } } function StopTransform($returnstring=false) { if ($returnstring) { return('Q'); } else { $this->_out('Q'); } } function transformScale($s_x, $s_y, $x='', $y='', $returnstring=false) { if ($x === '') { $x=$this->x; } if ($y === '') { $y=$this->y; } if (($s_x == 0) OR ($s_y == 0)) { $this->Error('Please do not use values equal to zero for scaling'); } $y = ($this->h - $y) * _MPDFK; $x *= _MPDFK; $s_x /= 100; $s_y /= 100; $tm[0] = $s_x; $tm[1] = 0; $tm[2] = 0; $tm[3] = $s_y; $tm[4] = $x * (1 - $s_x); $tm[5] = $y * (1 - $s_y); if ($returnstring) { return($this->_transform($tm, true)); } else { $this->_transform($tm); } } function transformTranslate($t_x, $t_y, $returnstring=false) { $tm[0] = 1; $tm[1] = 0; $tm[2] = 0; $tm[3] = 1; $tm[4] = $t_x * _MPDFK; $tm[5] = -$t_y * _MPDFK; if ($returnstring) { return($this->_transform($tm, true)); } else { $this->_transform($tm); } } function transformRotate($angle, $x='', $y='', $returnstring=false) { if ($x === '') { $x=$this->x; } if ($y === '') { $y=$this->y; } $angle = -$angle; $y = ($this->h - $y) * _MPDFK; $x *= _MPDFK; $tm[0] = cos(deg2rad($angle)); $tm[1] = sin(deg2rad($angle)); $tm[2] = -$tm[1]; $tm[3] = $tm[0]; $tm[4] = $x + $tm[1] * $y - $tm[0] * $x; $tm[5] = $y - $tm[0] * $y - $tm[1] * $x; if ($returnstring) { return($this->_transform($tm, true)); } else { $this->_transform($tm); } } function _transform($tm, $returnstring=false) { if ($returnstring) { return(sprintf('%.4F %.4F %.4F %.4F %.4F %.4F cm', $tm[0], $tm[1], $tm[2], $tm[3], $tm[4], $tm[5])); } else { $this->_out(sprintf('%.4F %.4F %.4F %.4F %.4F %.4F cm', $tm[0], $tm[1], $tm[2], $tm[3], $tm[4], $tm[5])); } } function ConvertIndic(&$str) { if (preg_match('/^ind_([a-z]{2})_/',$this->currentfontfamily, $m)) { if (!class_exists('indic', false)) { include(_MPDF_PATH.'classes/indic.php'); } if (empty($this->indic)) { $this->indic = new indic($this); } $earr = $this->UTF8StringToArray($str, false); $str = $this->indic->substituteIndic($earr, $m[1], $this->currentfontfamily); } } function AutoFont($html) { if ($this->onlyCoreFonts) { return $html; } $this->useLang = true; if ($this->autoFontGroupSize == 1) { $extra = $this->pregASCIIchars1; } else if ($this->autoFontGroupSize == 3) { $extra = $this->pregASCIIchars3; } else { $extra = $this->pregASCIIchars2; } $n = ''; $a=preg_split('/<(.*?)>/ms',$html,-1,PREG_SPLIT_DELIM_CAPTURE); foreach($a as $i => $e) { if($i%2==0) { $e = strcode2utf($e); $e = $this->lesser_entity_decode($e); if ($this->autoFontGroups & AUTOFONT_CJK) { $e = preg_replace("/([".$this->pregCJKchars.$extra."]*[".$this->pregCJKchars."][".$this->pregCJKchars.$extra."]*)/ue", '$this->replaceCJK(stripslashes(\'\\1\'))', $e); } if ($this->autoFontGroups & AUTOFONT_RTL) { $e = preg_replace("/([".$this->pregHEBchars .$extra."]*[".$this->pregHEBchars ."][".$this->pregHEBchars .$extra."]*)/u", "\xef\xbf\xb0span lang=\"he\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregARABICchars .$extra."]*[".$this->pregARABICchars ."][".$this->pregARABICchars .$extra."]*)/ue", '$this->replaceArabic(stripslashes(\'\\1\'))', $e); } if ($this->autoFontGroups & AUTOFONT_INDIC) { $e = preg_replace("/([".$this->pregBNchars .$this->pregINDextra."]*[".$this->pregBNchars ."][".$this->pregBNchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"bn\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregHIchars .$this->pregINDextra."]*[".$this->pregHIchars ."][".$this->pregHIchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"hi\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregGUchars .$this->pregINDextra."]*[".$this->pregGUchars ."][".$this->pregGUchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"gu\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregMLchars .$this->pregINDextra."]*[".$this->pregMLchars ."][".$this->pregMLchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"ml\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregKNchars .$this->pregINDextra."]*[".$this->pregKNchars ."][".$this->pregKNchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"kn\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregORchars .$this->pregINDextra."]*[".$this->pregORchars ."][".$this->pregORchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"or\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregPAchars .$this->pregINDextra."]*[".$this->pregPAchars ."][".$this->pregPAchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"pa\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregTAchars .$this->pregINDextra."]*[".$this->pregTAchars ."][".$this->pregTAchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"ta\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregTEchars .$this->pregINDextra."]*[".$this->pregTEchars ."][".$this->pregTEchars .$this->pregINDextra."]*)/u", "\xef\xbf\xb0span lang=\"te\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); } if ($this->autoFontGroups & AUTOFONT_THAIVIET) { $e = preg_replace("/([\x{0E00}-\x{0E7F}".$extra."]*[\x{0E00}-\x{0E7F}][\x{0E00}-\x{0E7F}".$extra."]*)/u", "\xef\xbf\xb0span lang=\"th\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); $e = preg_replace("/([".$this->pregVIETchars .$this->pregVIETPluschars ."]*[".$this->pregVIETchars ."][".$this->pregVIETchars .$this->pregVIETPluschars ."]*)/u", "\xef\xbf\xb0span lang=\"vi\"\xef\xbf\xb1\\1\xef\xbf\xb0/span\xef\xbf\xb1", $e); } $e = preg_replace('/[&]/','&amp;',$e); $e = preg_replace('/[<]/','&lt;',$e); $e = preg_replace('/[>]/','&gt;',$e); $e = preg_replace("/(\xef\xbf\xb0span lang=\"([a-z\-A-Z]{2,5})\"\xef\xbf\xb1)\s+/",' \\1',$e); $e = preg_replace("/[ ]+(\xef\xbf\xb0\/span\xef\xbf\xb1)/",'\\1 ',$e); $e = preg_replace("/\xef\xbf\xb0span lang=\"([a-z\-A-Z]{2,5})\"\xef\xbf\xb1/","\xef\xbf\xb0span lang=\"\\1\" class=\"lang_\\1\"\xef\xbf\xb1",$e); $e = preg_replace("/\xef\xbf\xb0/",'<',$e); $e = preg_replace("/\xef\xbf\xb1/",'>',$e); $a[$i] = $e; } else { $a[$i] = '<'.$e.'>'; } } $n = implode('',$a); return $n; } function replaceCJK($str) { if (preg_match("/[".$this->pregUHCchars."]/u", $str)) { return "\xef\xbf\xb0span lang=\"ko\"\xef\xbf\xb1" . $str ."\xef\xbf\xb0/span\xef\xbf\xb1"; } else if (preg_match("/[".$this->pregSJISchars."]/u", $str)) { return "\xef\xbf\xb0span lang=\"ja\"\xef\xbf\xb1" . $str ."\xef\xbf\xb0/span\xef\xbf\xb1"; } else if (preg_match("/[\x{20000}-\x{2FFFF}]/u", $str)) { return "\xef\xbf\xb0span lang=\"zh-HK\"\xef\xbf\xb1" . $str ."\xef\xbf\xb0/span\xef\xbf\xb1"; } else{ return "\xef\xbf\xb0span lang=\"zh-CN\"\xef\xbf\xb1" . $str ."\xef\xbf\xb0/span\xef\xbf\xb1"; } return $str; } function replaceArabic($str) { $persian = "\x{067E}\x{0686}\x{0698}\x{06AF}"; $urdu = "\x{0679}\x{0688}\x{0691}\x{06BA}\x{06BE}\x{06C1}\x{06D2}"; $pashto = "\x{067C}\x{0681}\x{0685}\x{0689}\x{0693}\x{0696}\x{069A}\x{06BC}\x{06D0}"; $sindhi = "\x{067A}\x{067B}\x{067D}\x{067F}\x{0680}\x{0684}\x{068D}\x{068A}\x{068F}\x{068C}\x{0687}\x{0683}\x{0699}\x{06AA}\x{06A6}\x{06BB}\x{06B1}\x{06B3}"; if (preg_match("/[".$this->pregNonARABICchars ."]/u", $str) ) { if (preg_match("/[".$sindhi ."]/u", $str) ) { return "\xef\xbf\xb0span lang=\"sd\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } else if (preg_match("/[".$urdu ."]/u", $str) ) { return "\xef\xbf\xb0span lang=\"ur\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } else if (preg_match("/[".$pashto ."]/u", $str) ) { return "\xef\xbf\xb0span lang=\"ps\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } else if (preg_match("/[".$persian ."]/u", $str) ) { return "\xef\xbf\xb0span lang=\"fa\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } else { return "\xef\xbf\xb0span lang=\"ar\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } } if (preg_match("/[".$persian ."]/u", $str) ) { return "\xef\xbf\xb0span lang=\"fa\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } else { return "\xef\xbf\xb0span lang=\"ar\"\xef\xbf\xb1".$str."\xef\xbf\xb0/span\xef\xbf\xb1"; } return $str; } function InitArabic() { $this->arabPrevLink = ""; $this->arabPrevLink .= "\xd8\x8c\xd8\x9b\xd8\x9f\xd8\xa6\xd8\xa8"; $this->arabPrevLink .= "\xd8\xaa\xd8\xab\xd8\xac\xd8\xad\xd8\xae"; $this->arabPrevLink .= "\xd8\xb3\xd8\xb4\xd8\xb5\xd8\xb6\xd8\xb7\xd8\xb8\xd8\xb9\xd8\xba"; $this->arabPrevLink .= "\xd9\x80\xd9\x81\xd9\x82\xd9\x83\xd9\x84\xd9\x85\xd9\x86\xd9\x87\xd9\x89\xd9\x8a"; $this->arabPrevLink .= "\xd9\xb8\xd9\xb9\xd9\xba\xd9\xbb\xd9\xbc\xd9\xbd\xd9\xbe\xd9\xbf"; $this->arabPrevLink .= "\xda\x80\xda\x81\xda\x82\xda\x83\xda\x84\xda\x85\xda\x86\xda\x87"; $this->arabPrevLink .= "\xda\x9a\xda\x9b\xda\x9c\xda\x9d\xda\x9e\xda\x9f"; $this->arabPrevLink .= "\xda\xa0\xda\xa1\xda\xa2\xda\xa3\xda\xa4\xda\xa5\xda\xa6\xda\xa7\xda\xa8"; $this->arabPrevLink .= "\xda\xa9\xda\xaa\xda\xab\xda\xac\xda\xad\xda\xae\xda\xaf"; $this->arabPrevLink .= "\xda\xb0\xda\xb1\xda\xb2\xda\xb3\xda\xb4\xda\xb5\xda\xb6\xda\xb7\xda\xb8\xda\xb9"; $this->arabPrevLink .= "\xda\xba\xda\xbb\xda\xbc\xda\xbe\xda\xbf"; $this->arabPrevLink .= "\xdb\x81\xdb\x8c\xdb\x8e\xdb\x90\xdb\x91"; $this->arabNextLink = ""; $this->arabNextLink .= "\xd8\xa2\xd8\xa3\xd8\xa4\xd8\xa5\xd8\xa6\xd8\xa7\xd8\xa8\xd8\xa9"; $this->arabNextLink .= "\xd8\xaa\xd8\xab\xd8\xac\xd8\xad\xd8\xae\xd8\xaf"; $this->arabNextLink .= "\xd8\xb0\xd8\xb1\xd8\xb2\xd8\xb3\xd8\xb4\xd8\xb5\xd8\xb6\xd8\xb7\xd8\xb8\xd8\xb9\xd8\xba"; $this->arabNextLink .= "\xd9\x80\xd9\x81\xd9\x82\xd9\x83\xd9\x84\xd9\x85\xd9\x86\xd9\x87\xd9\x88\xd9\x89\xd9\x8a"; $this->arabNextLink .= "\xd9\xb1\xd9\xb2\xd9\xb5\xd9\xb6\xd9\xb7\xd9\xb8\xd9\xb9"; $this->arabNextLink .= "\xd9\xba\xd9\xbb\xd9\xbc\xd9\xbd\xd9\xbe\xd9\xbf"; $this->arabNextLink .= "\xda\x80\xda\x81\xda\x82\xda\x83\xda\x84\xda\x85\xda\x86\xda\x87\xda\x88\xda\x89"; $this->arabNextLink .= "\xda\x8a\xda\x8b\xda\x8c\xda\x8d\xda\x8e\xda\x8f"; $this->arabNextLink .= "\xda\x90\xda\x91\xda\x92\xda\x93\xda\x94\xda\x95\xda\x96\xda\x97\xda\x98\xda\x99"; $this->arabNextLink .= "\xda\x9a\xda\x9b\xda\x9c\xda\x9d\xda\x9e\xda\x9f"; $this->arabNextLink .= "\xda\xa0\xda\xa1\xda\xa2\xda\xa3\xda\xa4\xda\xa5\xda\xa6\xda\xa7\xda\xa8\xda\xa9"; $this->arabNextLink .= "\xda\xaa\xda\xab\xda\xac\xda\xad\xda\xae\xda\xaf"; $this->arabNextLink .= "\xda\xb0\xda\xb1\xda\xb2\xda\xb3\xda\xb4\xda\xb5\xda\xb6\xda\xb7\xda\xb8\xda\xb9"; $this->arabNextLink .= "\xda\xba\xda\xbb\xda\xbc\xda\xbe\xda\xbf"; $this->arabNextLink .= "\xdb\x80\xdb\x81\xdb\x82\xdb\x83\xdb\x84\xdb\x85\xdb\x86\xdb\x87\xdb\x88\xdb\x89"; $this->arabNextLink .= "\xdb\x8a\xdb\x8b\xdb\x8c\xdb\x8d\xdb\x8e\xdb\x8f"; $this->arabNextLink .= "\xdb\x90\xdb\x91\xdb\x92\xdb\x93"; $this->arabVowels = "\xd9\x8b\xd9\x8c\xd9\x8d\xd9\x8e\xd9\x8f\xd9\x90\xd9\x91\xd9\x92"; $this->arabVowels .= "\xd9\xb0\xd9\x93"; $this->arabGlyphs = array( "\xd8\x8c"=>array("\xd8\x8c", "\xd8\x8c", "\xd8\x8c", "\xd8\x8c"), "\xd8\x9b"=>array("\xd8\x9b", "\xd8\x9b", "\xd8\x9b", "\xd8\x9b"), "\xd8\x9f"=>array("\xd8\x9f", "\xd8\x9f", "\xd8\x9f", "\xd8\x9f"), "\xd8\xa1"=>array("\xd8\xa1", "\xd8\xa1", "\xd8\xa1", "\xd8\xa1"), "\xd8\xa2"=>array("\xd8\xa2", "\xef\xba\x82", "\xd8\xa2", "\xef\xba\x82"), "\xd8\xa3"=>array("\xd8\xa3", "\xef\xba\x84", "\xd8\xa3", "\xef\xba\x84"), "\xd8\xa4"=>array("\xd8\xa4", "\xef\xba\x86", "\xd8\xa4", "\xef\xba\x86"), "\xd8\xa5"=>array("\xd8\xa5", "\xef\xba\x88", "\xd8\xa5", "\xef\xba\x88"), "\xd8\xa6"=>array("\xd8\xa6", "\xef\xba\x8a", "\xef\xba\x8b", "\xef\xba\x8c"), "\xd8\xa7"=>array("\xd8\xa7", "\xef\xba\x8e", "\xd8\xa7", "\xef\xba\x8e"), "\xd8\xa8"=>array("\xd8\xa8", "\xef\xba\x90", "\xef\xba\x91", "\xef\xba\x92"), "\xd8\xa9"=>array("\xd8\xa9", "\xef\xba\x94", "\xd8\xa9", "\xef\xba\x94"), "\xd8\xaa"=>array("\xd8\xaa", "\xef\xba\x96", "\xef\xba\x97", "\xef\xba\x98"), "\xd8\xab"=>array("\xd8\xab", "\xef\xba\x9a", "\xef\xba\x9b", "\xef\xba\x9c"), "\xd8\xac"=>array("\xd8\xac", "\xef\xba\x9e", "\xef\xba\x9f", "\xef\xba\xa0"), "\xd8\xad"=>array("\xd8\xad", "\xef\xba\xa2", "\xef\xba\xa3", "\xef\xba\xa4"), "\xd8\xae"=>array("\xd8\xae", "\xef\xba\xa6", "\xef\xba\xa7", "\xef\xba\xa8"), "\xd8\xaf"=>array("\xd8\xaf", "\xef\xba\xaa", "\xd8\xaf", "\xef\xba\xaa"), "\xd8\xb0"=>array("\xd8\xb0", "\xef\xba\xac", "\xd8\xb0", "\xef\xba\xac"), "\xd8\xb1"=>array("\xd8\xb1", "\xef\xba\xae", "\xd8\xb1", "\xef\xba\xae"), "\xd8\xb2"=>array("\xd8\xb2", "\xef\xba\xb0", "\xd8\xb2", "\xef\xba\xb0"), "\xd8\xb3"=>array("\xd8\xb3", "\xef\xba\xb2", "\xef\xba\xb3", "\xef\xba\xb4"), "\xd8\xb4"=>array("\xd8\xb4", "\xef\xba\xb6", "\xef\xba\xb7", "\xef\xba\xb8"), "\xd8\xb5"=>array("\xd8\xb5", "\xef\xba\xba", "\xef\xba\xbb", "\xef\xba\xbc"), "\xd8\xb6"=>array("\xd8\xb6", "\xef\xba\xbe", "\xef\xba\xbf", "\xef\xbb\x80"), "\xd8\xb7"=>array("\xd8\xb7", "\xef\xbb\x82", "\xef\xbb\x83", "\xef\xbb\x84"), "\xd8\xb8"=>array("\xd8\xb8", "\xef\xbb\x86", "\xef\xbb\x87", "\xef\xbb\x88"), "\xd8\xb9"=>array("\xd8\xb9", "\xef\xbb\x8a", "\xef\xbb\x8b", "\xef\xbb\x8c"), "\xd8\xba"=>array("\xd8\xba", "\xef\xbb\x8e", "\xef\xbb\x8f", "\xef\xbb\x90"), "\xd9\x80"=>array("\xd9\x80", "\xd9\x80", "\xd9\x80", "\xd9\x80"), "\xd9\x81"=>array("\xd9\x81", "\xef\xbb\x92", "\xef\xbb\x93", "\xef\xbb\x94"), "\xd9\x82"=>array("\xd9\x82", "\xef\xbb\x96", "\xef\xbb\x97", "\xef\xbb\x98"), "\xd9\x83"=>array("\xd9\x83", "\xef\xbb\x9a", "\xef\xbb\x9b", "\xef\xbb\x9c"), "\xd9\x84"=>array("\xd9\x84", "\xef\xbb\x9e", "\xef\xbb\x9f", "\xef\xbb\xa0"), "\xd9\x85"=>array("\xd9\x85", "\xef\xbb\xa2", "\xef\xbb\xa3", "\xef\xbb\xa4"), "\xd9\x86"=>array("\xd9\x86", "\xef\xbb\xa6", "\xef\xbb\xa7", "\xef\xbb\xa8"), "\xd9\x87"=>array("\xd9\x87", "\xef\xbb\xaa", "\xef\xbb\xab", "\xef\xbb\xac"), "\xd9\x88"=>array("\xd9\x88", "\xef\xbb\xae", "\xd9\x88", "\xef\xbb\xae"), "\xd9\x89"=>array("\xd9\x89", "\xef\xbb\xb0", "\xd9\x89", "\xef\xbb\xb0"), "\xd9\x89"=>array("\xd9\x89", "\xef\xbb\xb0", "\xef\xaf\xa8", "\xef\xaf\xa9"), "\xd9\x8a"=>array("\xd9\x8a", "\xef\xbb\xb2", "\xef\xbb\xb3", "\xef\xbb\xb4"), "\xd9\x8b"=>array("\xd9\x8b", "\xd9\x8b", "\xd9\x8b", "\xd9\x8b"), "\xd9\x8c"=>array("\xd9\x8c", "\xd9\x8c", "\xd9\x8c", "\xd9\x8c"), "\xd9\x8d"=>array("\xd9\x8d", "\xd9\x8d", "\xd9\x8d", "\xd9\x8d"), "\xd9\x8e"=>array("\xd9\x8e", "\xd9\x8e", "\xd9\x8e", "\xd9\x8e"), "\xd9\x8f"=>array("\xd9\x8f", "\xd9\x8f", "\xd9\x8f", "\xd9\x8f"), "\xd9\x90"=>array("\xd9\x90", "\xd9\x90", "\xd9\x90", "\xd9\x90"), "\xd9\x91"=>array("\xd9\x91", "\xd9\x91", "\xd9\x91", "\xd9\x91"), "\xd9\x92"=>array("\xd9\x92", "\xd9\x92", "\xd9\x92", "\xd9\x92"), "\xd9\xb1"=>array("\xd9\xb1", "\xef\xad\x91", "\xd9\xb1", "\xef\xad\x91"), "\xd9\xb2"=>array("\xd9\xb2", "\xef\x95\xb2", "\xd9\xb2", "\xef\x95\xb2"), "\xd9\xb5"=>array("\xd9\xb5", "\xef\x95\xb5", "\xd9\xb5", "\xef\x95\xb5"), "\xd9\xb8"=>array("\xd9\xb8", "\xef\x95\xb8", "\xef\xba\x8b", "\xef\xba\x8c"), "\xd9\xb9"=>array("\xd9\xb9", "\xef\xad\xa7", "\xef\xad\xa8", "\xef\xad\xa9"), "\xd9\xba"=>array("\xd9\xba", "\xef\xad\x9f", "\xef\xad\xa0", "\xef\xad\xa1"), "\xd9\xbb"=>array("\xd9\xbb", "\xef\xad\x93", "\xef\xad\x94", "\xef\xad\x95"), "\xd9\xbc"=>array("\xd9\xbc", "\xef\x95\xbc", "\xef\x99\xbc", "\xef\x9d\xbc"), "\xd9\xbd"=>array("\xd9\xbd", "\xef\x95\xbd", "\xef\x99\xbd", "\xef\x9d\xbd"), "\xd9\xbe"=>array("\xd9\xbe", "\xef\xad\x97", "\xef\xad\x98", "\xef\xad\x99"), "\xd9\xbf"=>array("\xd9\xbf", "\xef\xad\xa3", "\xef\xad\xa4", "\xef\xad\xa5"), "\xda\x80"=>array("\xda\x80", "\xef\xad\x9b", "\xef\xad\x9c", "\xef\xad\x9d"), "\xda\x81"=>array("\xda\x81", "\xef\x96\x81", "\xef\x9a\x81", "\xef\x9e\x81"), "\xda\x82"=>array("\xda\x82", "\xef\x96\x82", "\xef\x9a\x82", "\xef\x9e\x82"), "\xda\x83"=>array("\xda\x83", "\xef\xad\xb7", "\xef\xad\xb8", "\xef\xad\xb9"), "\xda\x84"=>array("\xda\x84", "\xef\xad\xb3", "\xef\xad\xb4", "\xef\xad\xb5"), "\xda\x85"=>array("\xda\x85", "\xef\x96\x85", "\xef\x9a\x85", "\xef\x9e\x85"), "\xda\x86"=>array("\xda\x86", "\xef\xad\xbb", "\xef\xad\xbc", "\xef\xad\xbd"), "\xda\x87"=>array("\xda\x87", "\xef\xad\xbf", "\xef\xae\x80", "\xef\xae\x81"), "\xda\x88"=>array("\xda\x88", "\xef\xae\x89", "\xda\x88", "\xda\x88"), "\xda\x89"=>array("\xda\x89", "\xef\x96\x89", "\xda\x89", "\xda\x89"), "\xda\x91"=>array("\xda\x91", "\xef\xae\x8d", "\xda\x91", "\xef\xae\x8d"), "\xda\x93"=>array("\xda\x93", "\xef\x96\x93", "\xda\x93", "\xda\x93"), "\xda\x96"=>array("\xda\x96", "\xef\x96\x96", "\xda\x96", "\xda\x96"), "\xda\x98"=>array("\xda\x98", "\xef\xae\x8b", "\xda\x98", "\xef\xae\x8b"), "\xda\x9a"=>array("\xda\x9a", "\xef\x96\x9a", "\xef\x9a\x9a", "\xef\x9e\x9a"), "\xda\x9b"=>array("\xda\x9b", "\xef\x96\x9b", "\xef\x9a\x9b", "\xef\x9e\x9b"), "\xda\x9c"=>array("\xda\x9c", "\xef\x96\x9c", "\xef\x9a\x9c", "\xef\x9e\x9c"), "\xda\x9d"=>array("\xda\x9d", "\xef\x96\x9d", "\xef\x9a\x9d", "\xef\x9e\x9d"), "\xda\x9e"=>array("\xda\x9e", "\xef\x96\x9e", "\xef\x9a\x9e", "\xef\x9e\x9e"), "\xda\xa0"=>array("\xda\xa0", "\xef\x96\xa0", "\xef\x9a\xa0", "\xef\x9e\xa0"), "\xda\xa1"=>array("\xda\xa1", "\xef\x96\xa1", "\xef\x9a\xa1", "\xef\x9e\xa1"), "\xda\xa2"=>array("\xda\xa2", "\xef\x96\xa2", "\xef\x9a\xa2", "\xef\x9e\xa2"), "\xda\xa3"=>array("\xda\xa3", "\xef\x96\xa3", "\xef\x9a\xa3", "\xef\x9e\xa3"), "\xda\xa4"=>array("\xda\xa4", "\xef\xad\xab", "\xef\xad\xac", "\xef\xad\xad"), "\xda\xa5"=>array("\xda\xa5", "\xef\x96\xa5", "\xef\x9a\xa5", "\xef\x9e\xa5"), "\xda\xa6"=>array("\xda\xa6", "\xef\xad\xaf", "\xef\xad\xb0", "\xef\xad\xb1"), "\xda\xa9"=>array("\xda\xa9", "\xef\xae\x8f", "\xef\xae\x90", "\xef\xae\x91"), "\xda\xaa"=>array("\xda\xaa", "\xef\x96\xaa", "\xef\x9a\xaa", "\xef\x9e\xaa"), "\xda\xab"=>array("\xda\xab", "\xef\x96\xab", "\xef\x9a\xab", "\xef\x9e\xab"), "\xda\xac"=>array("\xda\xac", "\xef\x96\xac", "\xef\x9a\xac", "\xef\x9e\xac"), "\xda\xad"=>array("\xda\xad", "\xef\xaf\x94", "\xef\xaf\x95", "\xef\xaf\x96"), "\xda\xae"=>array("\xda\xae", "\xef\x96\xae", "\xef\x9a\xae", "\xef\x9e\xae"), "\xda\xaf"=>array("\xda\xaf", "\xef\xae\x93", "\xef\xae\x94", "\xef\xae\x95"), "\xda\xb0"=>array("\xda\xb0", "\xef\x96\xb0", "\xef\x9a\xb0", "\xef\x9e\xb0"), "\xda\xb1"=>array("\xda\xb1", "\xef\xae\x9b", "\xef\xae\x9c", "\xef\xae\x9d"), "\xda\xb2"=>array("\xda\xb2", "\xef\x96\xb2", "\xef\x9a\xb2", "\xef\x9e\xb2"), "\xda\xb3"=>array("\xda\xb3", "\xef\xae\x97", "\xef\xae\x98", "\xef\xae\x99"), "\xda\xb4"=>array("\xda\xb4", "\xef\x96\xb4", "\xef\x9a\xb4", "\xef\x9e\xb4"), "\xda\xb5"=>array("\xda\xb5", "\xef\x96\xb5", "\xef\x9a\xb5", "\xef\x9e\xb5"), "\xda\xb6"=>array("\xda\xb6", "\xef\x96\xb6", "\xef\x9a\xb6", "\xef\x9e\xb6"), "\xda\xb7"=>array("\xda\xb7", "\xef\x96\xb7", "\xef\x9a\xb7", "\xef\x9e\xb7"), "\xda\xb8"=>array("\xda\xb8", "\xef\x96\xb8", "\xef\x9a\xb8", "\xef\x9e\xb8"), "\xda\xb9"=>array("\xda\xb9", "\xef\x96\xb9", "\xef\x9a\xb9", "\xef\x9e\xb9"), "\xda\xba"=>array("\xda\xba", "\xef\xae\x9f", "\xda\xba", "\xda\xba"), "\xda\xbb"=>array("\xda\xbb", "\xef\xae\xa1", "\xef\xae\xa2", "\xef\xae\xa3"), "\xda\xbc"=>array("\xda\xbc", "\xef\x96\xbc", "\xef\x9a\xbc", "\xef\x9e\xbc"), "\xda\xbe"=>array("\xda\xbe", "\xef\xae\xab", "\xef\xae\xac", "\xef\xae\xad"), "\xda\xbf"=>array("\xda\xbf", "\xef\x96\xbf", "\xef\x9a\xbf", "\xef\x9e\xbf"), "\xdb\x80"=>array("\xdb\x80", "\xef\xae\xa5", "\xdb\x80", "\xef\xae\xa5"), "\xdb\x81"=>array("\xdb\x81", "\xef\xae\xa7", "\xef\xae\xa8", "\xef\xae\xa9"), "\xdb\x8c"=>array("\xdb\x8c", "\xef\xaf\xbd", "\xef\xaf\xbe", "\xef\xaf\xbf"), "\xdb\x8d"=>array("\xdb\x8d", "\xef\x97\x8d", "\xdb\x8d", "\xef\x97\x8d"), "\xdb\x8e"=>array("\xdb\x8e", "\xef\x97\x8e", "\xef\x9b\x8e", "\xef\x9f\x8e"), "\xdb\x90"=>array("\xdb\x90", "\xef\xaf\xa5", "\xef\xaf\xa6", "\xef\xaf\xa7"), "\xdb\x91"=>array("\xdb\x91", "\xef\x97\x91", "\xef\xad\x98", "\xef\xad\x99"), "\xdb\x92"=>array("\xdb\x92", "\xef\xae\xaf", "\xdb\x92", "\xef\xae\xaf"), "\xdb\x93"=>array("\xdb\x93", "\xef\xae\xb1", "\xdb\x93", "\xef\xae\xb1"), ); $this->arabLigGlyphs = "\xd9\x84\xd8\xa2\xd9\x84\xd8\xa3\xd9\x84\xd8\xa5\xd9\x84\xd8\xa7"; $this->arabLigHex = 'FEF5FEF6FEF5FEF6FEF7FEF8FEF7FEF8FEF9FEFAFEF9FEFAFEFBFEFCFEFBFEFC'; } function ArabJoin($str) { if (!$this->arabGlyphs) { $this->InitArabic(); } $crntChar = null; $prevChar = null; $nextChar = null; $output = array(); $chars = preg_split('//u', $str); $max = count($chars); for ($i = $max - 1; $i >= 0; $i--) { $crntChar = $chars[$i]; if ($i > 0){ $prevChar = $chars[$i - 1]; } else{ $prevChar = NULL; } if ($prevChar && mb_strpos($this->arabVowels, $prevChar, 0, 'utf-8') !== false) { $prevChar = $chars[$i - 2]; if ($prevChar && mb_strpos($this->arabVowels, $prevChar, 0, 'utf-8') !== false) { $prevChar = $chars[$i - 3]; } } if ($crntChar && mb_strpos($this->arabVowels, $crntChar, 0, 'utf-8') !== false) { if ($chars[$i + 1] && (mb_strpos($this->arabNextLink, $chars[$i + 1], 0, 'utf-8') !== false) && $prevChar && (mb_strpos($this->arabPrevLink, $prevChar, 0, 'utf-8') !== false)) { $output[] = $this->get_arab_glyphs($crntChar, 1); } else { $output[] = $this->get_arab_glyphs($crntChar, 0); } continue; } if (isset($chars[$i + 1]) && in_array($chars[$i + 1], array("\xd8\xa2","\xd8\xa3","\xd8\xa5","\xd8\xa7")) && $crntChar == "\xd9\x84"){ continue; } if (ord($crntChar) < 128) { $output[] = $crntChar; $nextChar = $crntChar; continue; } $form = 0; if ($prevChar == "\xd9\x84" && ($crntChar == "\xd8\xa2" || $crntChar == "\xd8\xa3" || $crntChar == "\xd8\xa5" || $crntChar == "\xd8\xa7")) { if ($chars[$i - 2] && mb_strpos($this->arabPrevLink, $chars[$i - 2], 0, 'utf-8') !== false) { $form++; } $pos = mb_strpos($this->arabLigGlyphs, ($prevChar . $crntChar), 0, 'utf-8'); $pos = $pos*8 + $form*4; $pres = (mb_substr($this->arabLigHex, $pos, 4, 'utf-8')); if (!$this->_charDefined($this->CurrentFont['cw'], hexdec($pres)) && $this->_charDefined($this->CurrentFont['cw'], hexdec('FEFB'))) { if ($pres=='FEF5') { $output[] = strcode2utf('&#xFEFB;&#x0653;'); } else if ($pres=='FEF6') { $output[] = strcode2utf('&#xFEFC;&#x0653;'); } else if ($pres=='FEF7') { $output[] = strcode2utf('&#xFEFB;&#x0654;'); } else if ($pres=='FEF8') { $output[] = strcode2utf('&#xFEFC;&#x0654;'); } else if ($pres=='FEF9') { $output[] = strcode2utf('&#xFEFB;&#x0655;'); } else if ($pres=='FEFA') { $output[] = strcode2utf('&#xFEFC;&#x0655;'); } } else { $output[] = strcode2utf('&#x' . $pres . ';'); } $nextChar = $prevChar; continue; } if ($prevChar && mb_strpos($this->arabPrevLink, $prevChar, 0, 'utf-8') !== false) { $form++; } if ($nextChar && mb_strpos($this->arabNextLink, $nextChar, 0, 'utf-8') !== false) { $form += 2; } $output[] = $this->get_arab_glyphs($crntChar, $form) ; $nextChar = $crntChar; } $ra = array_reverse($output); $s = implode($ra); return $s; } function get_arab_glyphs($char, $type) { if ($type>0 && isset($this->arabGlyphs[$char])) { if (preg_match("/[\x{FB50}-\x{FEFF}]/u",$this->arabGlyphs[$char][$type])) { $unicode = $this->UTF8StringToArray($this->arabGlyphs[$char][$type], false); if ($this->_charDefined($this->CurrentFont['cw'],$unicode[0])) { return $this->arabGlyphs[$char][$type]; } else if (isset($this->CurrentFont['unAGlyphs'])) { $uni = $this->UTF8StringToArray($char, false); $pua = $uni[0] - 1536 + 62464 + 256*$type ; if ($this->_charDefined($this->CurrentFont['cw'], $pua)) { return strcode2utf('&#x' . dechex($pua) . ';'); } else return $char; } else return $char; } if (preg_match("/[\x{F500}-\x{F7FF}]/u",$this->arabGlyphs[$char][$type]) && isset($this->CurrentFont['unAGlyphs'])) { $unicode = $this->UTF8StringToArray($this->arabGlyphs[$char][$type], false); if ($this->_charDefined($this->CurrentFont['cw'],$unicode[0])) { return $this->arabGlyphs[$char][$type]; } else return $char; } return $this->arabGlyphs[$char][$type]; } else return $char; } function _cmpdom($a, $b) { return ($a["dom"] < $b["dom"]) ? -1 : 1; } function mb_strrev($str, $enc = 'utf-8'){ $ch = array(); $ch = preg_split('//u',$str); $revch = array_reverse($ch); return implode('',$revch); } function columnAdjustAdd($type,$k,$xadj,$yadj,$a,$b,$c=0,$d=0,$e=0,$f=0) { if ($type == 'Td') { $a += ($xadj * $k); $b -= ($yadj * $k); return 'BT '.sprintf('%.3F %.3F',$a,$b).' Td'; } else if ($type == 're') { $a += ($xadj * $k); $b -= ($yadj * $k); return sprintf('%.3F %.3F %.3F %.3F',$a,$b,$c,$d).' re'; } else if ($type == 'l') { $a += ($xadj * $k); $b -= ($yadj * $k); return sprintf('%.3F %.3F l',$a,$b); } else if ($type == 'img') { $c += ($xadj * $k); $d -= ($yadj * $k); return sprintf('q %.3F 0 0 %.3F %.3F %.3F',$a,$b,$c,$d).' cm /'.$e; } else if ($type == 'draw') { $a += ($xadj * $k); $b -= ($yadj * $k); return sprintf('%.3F %.3F m',$a,$b); } else if ($type == 'bezier') { $a += ($xadj * $k); $b -= ($yadj * $k); $c += ($xadj * $k); $d -= ($yadj * $k); $e += ($xadj * $k); $f -= ($yadj * $k); return sprintf('%.3F %.3F %.3F %.3F %.3F %.3F',$a,$b,$c,$d,$e,$f).' c'; } } function ConvertColor($color="#000000"){ $color = trim(strtolower($color)); $c = false; if ($color=='transparent') { return false; } else if ($color=='inherit') { return false; } else if (isset($this->SVGcolors[$color])) $color = $this->SVGcolors[$color]; if (preg_match('/^[\d]+$/',$color)) { $c = (array(1,$color)); } else if ($color[0] == '#') { $cor = preg_replace('/\s+.*/','',$color); if (strlen($cor) == 4) { $cor = "#" . $cor[1] . $cor[1] . $cor[2] . $cor[2] . $cor[3] . $cor[3]; } $r = hexdec(substr($cor, 1, 2)); $g = hexdec(substr($cor, 3, 2)); $b = hexdec(substr($cor, 5, 2)); $c = array(3,$r,$g,$b); } else if (preg_match('/(rgba|rgb|device-cmyka|cmyka|device-cmyk|cmyk|hsla|hsl|spot)\((.*?)\)/',$color,$m)) { $type= $m[1]; $cores = explode(",", $m[2]); $ncores = count($cores); if (stristr($cores[0],'%') ) { $cores[0] += 0; if ($type=='rgb' || $type=='rgba') { $cores[0] = intval($cores[0]*255/100); } } if ($ncores>1 && stristr($cores[1],'%') ) { $cores[1] += 0; if ($type=='rgb' || $type=='rgba') { $cores[1] = intval($cores[1]*255/100); } if ($type=='hsl' || $type=='hsla') { $cores[1] = $cores[1]/100; } } if ($ncores>2 && stristr($cores[2],'%') ) { $cores[2] += 0; if ($type=='rgb' || $type=='rgba') { $cores[2] = intval($cores[2]*255/100); } if ($type=='hsl' || $type=='hsla') { $cores[2] = $cores[2]/100; } } if ($ncores>3 && stristr($cores[3],'%') ) { $cores[3] += 0; } if ($type=='rgb') { $c = array(3,$cores[0],$cores[1],$cores[2]); } else if ($type=='rgba') { $c = array(5,$cores[0],$cores[1],$cores[2],$cores[3]*100); } else if ($type=='cmyk' || $type=='device-cmyk') { $c = array(4,$cores[0],$cores[1],$cores[2],$cores[3]); } else if ($type=='cmyka' || $type=='device-cmyka') { $c = array(6,$cores[0],$cores[1],$cores[2],$cores[3],$cores[4]*100); } else if ($type=='hsl' || $type=='hsla') { $conv = $this->hsl2rgb($cores[0]/360,$cores[1],$cores[2]); if ($type=='hsl') { $c = array(3,$conv[0],$conv[1],$conv[2]); } else if ($type=='hsla') { $c = array(5,$conv[0],$conv[1],$conv[2],$cores[3]*100); } } else if ($type=='spot') { $name = strtoupper(trim($cores[0])); if(!isset($this->spotColors[$name])) { if (isset($cores[5])) { $this->AddSpotColor($cores[0],$cores[2],$cores[3],$cores[4],$cores[5]); } else { $this->Error('Undefined spot color: '.$name); } } $c = array(2,$this->spotColors[$name]['i'],$cores[1]); } } if ($this->PDFA || $this->PDFX || $this->restrictColorSpace) { if ($c[0]==1) { } else if ($c[0]==2) { if (!isset($this->spotColorIDs[$c[1]])) { die('Error: Spot colour has not been defined - '.$this->spotColorIDs[$c[1]]); } if ($this->PDFA) { if ($this->PDFA && !$this->PDFAauto) { $this->PDFAXwarnings[] = "Spot color specified '".$this->spotColorIDs[$c[1]]."' (converted to process color)"; } if ($this->restrictColorSpace!=3) { $sp = $this->spotColors[$this->spotColorIDs[$c[1]]]; $c = $this->cmyk2rgb(array(4,$sp['c'],$sp['m'],$sp['y'],$sp['k'])); } } else if ($this->restrictColorSpace==1) { $sp = $this->spotColors[$this->spotColorIDs[$c[1]]]; $c = $this->cmyk2gray(array(4,$sp['c'],$sp['m'],$sp['y'],$sp['k'])); } } else if ($c[0]==3) { if ($this->PDFX || ($this->PDFA && $this->restrictColorSpace==3)) { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "RGB color specified '".$color."' (converted to CMYK)"; } $c = $this->rgb2cmyk($c); } else if ($this->restrictColorSpace==1) { $c = $this->rgb2gray($c); } else if ($this->restrictColorSpace==3) { $c = $this->rgb2cmyk($c); } } else if ($c[0]==4) { if ($this->PDFA && $this->restrictColorSpace!=3) { if ($this->PDFA && !$this->PDFAauto) { $this->PDFAXwarnings[] = "CMYK color specified '".$color."' (converted to RGB)"; } $c = $this->cmyk2rgb($c); } else if ($this->restrictColorSpace==1) { $c = $this->cmyk2gray($c); } else if ($this->restrictColorSpace==2) { $c = $this->cmyk2rgb($c); } } else if ($c[0]==5) { if ($this->PDFX || ($this->PDFA && $this->restrictColorSpace==3)) { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "RGB color with transparency specified '".$color."' (converted to CMYK without transparency)"; } $c = $this->rgb2cmyk($c); $c = array(4, $c[1], $c[2], $c[3], $c[4]); } else if ($this->PDFA && $this->restrictColorSpace!=3) { if (!$this->PDFAauto) { $this->PDFAXwarnings[] = "RGB color with transparency specified '".$color."' (converted to RGB without transparency)"; } $c = $this->rgb2cmyk($c); $c = array(4, $c[1], $c[2], $c[3], $c[4]); } else if ($this->restrictColorSpace==1) { $c = $this->rgb2gray($c); } else if ($this->restrictColorSpace==3) { $c = $this->rgb2cmyk($c); } } else if ($c[0]==6) { if ($this->PDFA && $this->restrictColorSpace!=3) { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "CMYK color with transparency specified '".$color."' (converted to RGB without transparency)"; } $c = $this->cmyk2rgb($c); $c = array(3, $c[1], $c[2], $c[3]); } else if ($this->PDFX || ($this->PDFA && $this->restrictColorSpace==3)) { if (($this->PDFA && !$this->PDFAauto) || ($this->PDFX && !$this->PDFXauto)) { $this->PDFAXwarnings[] = "CMYK color with transparency specified '".$color."' (converted to CMYK without transparency)"; } $c = $this->cmyk2rgb($c); $c = array(3, $c[1], $c[2], $c[3]); } else if ($this->restrictColorSpace==1) { $c = $this->cmyk2gray($c); } else if ($this->restrictColorSpace==2) { $c = $this->cmyk2rgb($c); } } } if (is_array($c)) { $c = array_pad($c, 6, 0); $cstr = pack("a1ccccc", $c[0], ($c[1] & 0xFF), ($c[2] & 0xFF), ($c[3] & 0xFF), ($c[4] & 0xFF), ($c[5] & 0xFF) ); } return $cstr; } function rgb2gray($c) { if (isset($c[4])) { return array(1,(($c[1] * .21) + ($c[2] * .71) + ($c[3] * .07)), ord(1), $c[4]); } else { return array(1,(($c[1] * .21) + ($c[2] * .71) + ($c[3] * .07))); } } function cmyk2gray($c) { $rgb = $this->cmyk2rgb($c); return $this->rgb2gray($rgb); } function rgb2cmyk($c) { $cyan = 1 - ($c[1] / 255); $magenta = 1 - ($c[2] / 255); $yellow = 1 - ($c[3] / 255); $min = min($cyan, $magenta, $yellow); if ($min == 1) { if ($c[0]==5) { return array (6,100,100,100,100, $c[4]); } else { return array (4,100,100,100,100); } } $K = $min; $black = 1 - $K; if ($c[0]==5) { return array (6,($cyan-$K)*100/$black, ($magenta-$K)*100/$black, ($yellow-$K)*100/$black, $K*100, $c[4]); } else { return array (4,($cyan-$K)*100/$black, ($magenta-$K)*100/$black, ($yellow-$K)*100/$black, $K*100); } } function cmyk2rgb($c) { $rgb = array(); $colors = 255 - ($c[4]*2.55); $rgb[0] = intval($colors * (255 - ($c[1]*2.55))/255); $rgb[1] = intval($colors * (255 - ($c[2]*2.55))/255); $rgb[2] = intval($colors * (255 - ($c[3]*2.55))/255); if ($c[0]==6) { return array (5,$rgb[0],$rgb[1],$rgb[2], $c[5]); } else { return array (3,$rgb[0],$rgb[1],$rgb[2]); } } function rgb2hsl($var_r, $var_g, $var_b) { $var_min = min($var_r,$var_g,$var_b); $var_max = max($var_r,$var_g,$var_b); $del_max = $var_max - $var_min; $l = ($var_max + $var_min) / 2; if ($del_max == 0) { $h = 0; $s = 0; } else { if ($l < 0.5) { $s = $del_max / ($var_max + $var_min); } else { $s = $del_max / (2 - $var_max - $var_min); } $del_r = ((($var_max - $var_r) / 6) + ($del_max / 2)) / $del_max; $del_g = ((($var_max - $var_g) / 6) + ($del_max / 2)) / $del_max; $del_b = ((($var_max - $var_b) / 6) + ($del_max / 2)) / $del_max; if ($var_r == $var_max) { $h = $del_b - $del_g; } elseif ($var_g == $var_max) { $h = (1 / 3) + $del_r - $del_b; } elseif ($var_b == $var_max) { $h = (2 / 3) + $del_g - $del_r; }; if ($h < 0) { $h += 1; } if ($h > 1) { $h -= 1; } } return array($h,$s,$l); } function hsl2rgb($h2,$s2,$l2) { if ($s2 == 0) { $r = $l2 * 255; $g = $l2 * 255; $b = $l2 * 255; } else { if ($l2 < 0.5) { $var_2 = $l2 * (1 + $s2); } else { $var_2 = ($l2 + $s2) - ($s2 * $l2); } $var_1 = 2 * $l2 - $var_2; $r = round(255 * $this->hue_2_rgb($var_1,$var_2,$h2 + (1 / 3))); $g = round(255 * $this->hue_2_rgb($var_1,$var_2,$h2)); $b = round(255 * $this->hue_2_rgb($var_1,$var_2,$h2 - (1 / 3))); } return array($r,$g,$b); } function hue_2_rgb($v1,$v2,$vh) { if ($vh < 0) { $vh += 1; }; if ($vh > 1) { $vh -= 1; }; if ((6 * $vh) < 1) { return ($v1 + ($v2 - $v1) * 6 * $vh); }; if ((2 * $vh) < 1) { return ($v2); }; if ((3 * $vh) < 2) { return ($v1 + ($v2 - $v1) * ((2 / 3 - $vh) * 6)); }; return ($v1); } function _invertColor($cor) { if ($cor[0]==3 || $cor[0]==5) { return array(3, (255-$cor[1]), (255-$cor[2]), (255-$cor[3])); } else if ($cor[0]==4 || $cor[0]==6) { return array(4, (100-$cor[1]), (100-$cor[2]), (100-$cor[3]), (100-$cor[4])); } else if ($cor[0]==1) { return array(1, (255-$cor[1])); } die('Error in _invertColor - trying to invert non-RGB color'); } function _colAtoString($cor) { $s = ''; if ($cor{0}==1) $s = 'rgb('.ord($cor{1}).','.ord($cor{1}).','.ord($cor{1}).')'; else if ($cor{0}==2) $s = 'spot('.ord($cor{1}).','.ord($cor{2}).')'; else if ($cor{0}==3) $s = 'rgb('.ord($cor{1}).','.ord($cor{2}).','.ord($cor{3}).')'; else if ($cor{0}==4) $s = 'cmyk('.ord($cor{1}).','.ord($cor{2}).','.ord($cor{3}).','.ord($cor{4}).')'; else if ($cor{0}==5) $s = 'rgba('.ord($cor{1}).','.ord($cor{2}).','.ord($cor{3}).','.sprintf('%0.2F',ord($cor{4})/100).')'; else if ($cor{0}==6) $s = 'cmyka('.ord($cor{1}).','.ord($cor{2}).','.ord($cor{3}).','.ord($cor{4}).','.sprintf('%0.2F',ord($cor{5})/100).')'; return $s; } function ConvertSize($size=5,$maxsize=0,$fontsize=false,$usefontsize=true){ $size = trim(strtolower($size)); if ( $size == 'thin' ) $size = 1*(25.4/$this->dpi); elseif ( stristr($size,'px') ) $size *= (25.4/$this->dpi); elseif ( stristr($size,'cm') ) $size *= 10; elseif ( stristr($size,'mm') ) $size += 0; elseif ( stristr($size,'pt') ) $size *= 25.4/72; elseif ( stristr($size,'rem') ) { $size += 0; $size *= ($this->default_font_size / _MPDFK); } elseif ( stristr($size,'em') ) { $size += 0; if ($fontsize) { $size *= $fontsize; } else { $size *= $maxsize; } } elseif ( stristr($size,'%') ) { $size += 0; if ($fontsize && $usefontsize) { $size *= $fontsize/100; } else { $size *= $maxsize/100; } } elseif ( stristr($size,'in') ) $size *= 25.4; elseif ( stristr($size,'pc') ) $size *= 38.1/9; elseif ( stristr($size,'ex') ) { $size += 0; if ($fontsize) { $size *= $fontsize/2; } else { $size *= $maxsize/2; } } elseif ( $size == 'medium' ) $size = 3*(25.4/$this->dpi); elseif ( $size == 'thick' ) $size = 5*(25.4/$this->dpi); elseif ($size == 'xx-small') { if ($fontsize) { $size *= $fontsize*0.7; } else { $size *= $maxsize*0.7; } } elseif ($size == 'x-small') { if ($fontsize) { $size *= $fontsize*0.77; } else { $size *= $maxsize*0.77; } } elseif ($size == 'small') { if ($fontsize) { $size *= $fontsize*0.86; } else { $size *= $maxsize*0.86; } } elseif ($size == 'medium') { if ($fontsize) { $size *= $fontsize; } else { $size *= $maxsize; } } elseif ($size == 'large') { if ($fontsize) { $size *= $fontsize*1.2; } else { $size *= $maxsize*1.2; } } elseif ($size == 'x-large') { if ($fontsize) { $size *= $fontsize*1.5; } else { $size *= $maxsize*1.5; } } elseif ($size == 'xx-large') { if ($fontsize) { $size *= $fontsize*2; } else { $size *= $maxsize*2; } } else $size *= (25.4/$this->dpi); return $size; } function lesser_entity_decode($html) { $html = str_replace("&lt;","<",$html); $html = str_replace("&gt;",">",$html); $html = str_replace("&apos;","'",$html); $html = str_replace("&quot;",'"',$html); $html = str_replace("&amp;","&",$html); return $html; } function AdjustHTML($html, $tabSpaces=8) { if (PHP_VERSION_ID < 50307) { if (strlen($html) > 100000) { if (PHP_VERSION_ID < 50200) $this->Error("The HTML code is more than 100,000 characters. You should use WriteHTML() with smaller string lengths."); else ini_set("pcre.backtrack_limit","1000000"); } } preg_match_all("/(<annotation.*?>)/si", $html, $m); if (count($m[1])) { for($i=0;$i<count($m[1]);$i++) { $sub = preg_replace("/\n/si", "\xbb\xa4\xac", $m[1][$i]); $html = preg_replace('/'.preg_quote($m[1][$i], '/').'/si', $sub, $html); } } preg_match_all("/(<svg.*?<\/svg>)/si", $html, $svgi); if (count($svgi[0])) { for($i=0;$i<count($svgi[0]);$i++) { $file = _MPDF_TEMP_PATH.'_tempSVG'.RAND(1,10000).'_'.$i.'.svg'; file_put_contents($file, $svgi[0][$i]); $html = str_replace($svgi[0][$i], '<img src="'.$file.'" />', $html); } } $html = preg_replace('/<script.*?<\/script>/is','',$html); $html = preg_replace('/<!--mpdf/i','',$html); $html = preg_replace('/mpdf-->/i','',$html); $html = preg_replace('/<!--.*?-->/s','',$html); $html = preg_replace('/\f/','',$html); $html = preg_replace('/\r/','',$html); $html = preg_replace('/<(br|hr)\/>/i',"<\\1 />",$html); $html = preg_replace('/<thead>\s*<\/thead>/i','',$html); $html = preg_replace('/<tfoot>\s*<\/tfoot>/i','',$html); $html = preg_replace('/<table[^>]*>\s*<\/table>/i','',$html); $html = preg_replace('/<tr>\s*<\/tr>/i','',$html); $html = preg_replace("/[ \n\r]+<\/t(d|h)/",'</t\\1',$html); $html = preg_replace("/[ ]*<dottab\s*[\/]*>[ ]*/",'<dottab />',$html); $html = str_replace('</tts><tts>','|',$html); $html = str_replace('</ttz><ttz>','|',$html); $html = str_replace('</tta><tta>','|',$html); $html = preg_replace('/<br \/>\s*/is',"<br />",$html); $html = preg_replace('/<wbr[ \/]*>\s*/is',"&#173;",$html); if (preg_match('/<pre/',$html)) { $html_a = preg_split('/(\<\/?pre[^\>]*\>)/', $html, -1, 2); $h = array(); $c=0; foreach($html_a AS $s) { if ($c>1 && preg_match('/^<\/pre/i',$s)) { $c--; $s=preg_replace('/<\/pre/i','</innerpre',$s); } else if ($c>0 && preg_match('/^<pre/i',$s)) { $c++; $s=preg_replace('/<pre/i','<innerpre',$s); } else if (preg_match('/^<pre/i',$s)) { $c++; } else if (preg_match('/^<\/pre/i',$s)) { $c--; } array_push($h, $s); } $html = implode("", $h); } $thereispre = preg_match_all('#<pre(.*?)>(.*?)</pre>#si',$html,$temp); $thereistextarea = preg_match_all('#<textarea(.*?)>(.*?)</textarea>#si',$html,$temp2); $html = preg_replace('/[\n]/',' ',$html); $html = preg_replace('/[\t]/',' ',$html); $html = preg_replace('/<([^!\/a-zA-Z])/i','&lt;\\1',$html); $html = preg_replace("/[ ]+/",' ',$html); $html = preg_replace('/\/li>\s+<\/(u|o)l/i','/li></\\1l',$html); $html = preg_replace('/\/(u|o)l>\s+<\/li/i','/\\1l></li',$html); $html = preg_replace('/\/li>\s+<\/(u|o)l/i','/li></\\1l',$html); $html = preg_replace('/\/li>\s+<li/i','/li><li',$html); $html = preg_replace('/<(u|o)l([^>]*)>[ ]+/i','<\\1l\\2>',$html); $html = preg_replace('/[ ]+<(u|o)l/i','<\\1l',$html); $iterator = 0; while($thereispre) { $temp[2][$iterator] = preg_replace("/^([^\n\t]*?)\t/me", "stripslashes('\\1') . str_repeat(' ',  ( $tabSpaces - (mb_strlen(stripslashes('\\1')) % $tabSpaces))  )",$temp[2][$iterator]); $temp[2][$iterator] = preg_replace('/\t/',str_repeat(" ",$tabSpaces),$temp[2][$iterator]); $temp[2][$iterator] = preg_replace('/\n/',"<br />",$temp[2][$iterator]); $temp[2][$iterator] = str_replace('\\',"\\\\",$temp[2][$iterator]); $html = preg_replace('#<pre(.*?)>(.*?)</pre>#si','<erp'.$temp[1][$iterator].'>'.$temp[2][$iterator].'</erp>',$html,1); $thereispre--; $iterator++; } $iterator = 0; while($thereistextarea) { $temp2[2][$iterator] = preg_replace('/\t/',str_repeat(" ",$tabSpaces),$temp2[2][$iterator]); $temp2[2][$iterator] = str_replace('\\',"\\\\",$temp2[2][$iterator]); $html = preg_replace('#<textarea(.*?)>(.*?)</textarea>#si','<aeratxet'.$temp2[1][$iterator].'>'.trim($temp2[2][$iterator]) .'</aeratxet>',$html,1); $thereistextarea--; $iterator++; } $html = str_replace("<erp","<pre",$html); $html = str_replace("</erp>","</pre>",$html); $html = str_replace("<aeratxet","<textarea",$html); $html = str_replace("</aeratxet>","</textarea>",$html); $html = str_replace("</innerpre","</pre",$html); $html = str_replace("<innerpre","<pre",$html); $html = preg_replace('/<textarea([^>]*)><\/textarea>/si','<textarea\\1> </textarea>',$html); $html = preg_replace('/(<table[^>]*>)\s*(<caption)(.*?<\/caption>)(.*?<\/table>)/si','\\2 position="top"\\3\\1\\4\\2 position="bottom"\\3',$html); $html = preg_replace('/<(h[1-6])([^>]*)(>(?:(?!h[1-6]).)*?<\/\\1>\s*<table)/si','<\\1\\2 keep-with-table="1"\\3',$html); $html = preg_replace("/\xbb\xa4\xac/", "\n", $html); return $html; } function dec2other($num, $cp) { $nstr = (string) $num; $rnum = ''; for ($i=0;$i<strlen($nstr);$i++) { if ($this->_charDefined($this->CurrentFont['cw'],$cp+intval($nstr[$i]))) { $rnum .= code2utf($cp+intval($nstr[$i])); } else { $rnum .= $nstr[$i]; } } return $rnum; } function dec2alpha($valor,$toupper="true"){ if (($valor < 1) || ($valor > 18278)) return "?"; $c1 = $c2 = $c3 = ''; if ($valor > 702) { $c1 = 65 + floor(($valor-703)/676); $c2 = 65 + floor((($valor-703)%676)/26); $c3 = 65 + floor((($valor-703)%676)%26); } elseif ($valor > 26) { $c1 = (64 + (int)(($valor-1) / 26)); $c2 = (64 + (int)($valor % 26)); if ($c2 == 64) $c2 += 26; } else { $c1 = (64 + $valor); } $alpha = chr($c1); if ($c2 != '') $alpha .= chr($c2); if ($c3 != '') $alpha .= chr($c3); if (!$toupper) $alpha = strtolower($alpha); return $alpha; } function dec2roman($valor,$toupper=true){ $r1=$r2=$r3=$r4=''; if (($valor >= 5000) || ($valor < 1)) return "?"; $aux = (int)($valor/1000); if ($aux!==0) { $valor %= 1000; while($aux!==0) { $r1 .= "M"; $aux--; } } $aux = (int)($valor/100); if ($aux!==0) { $valor %= 100; switch($aux){ case 3: $r2="C"; case 2: $r2.="C"; case 1: $r2.="C"; break; case 9: $r2="CM"; break; case 8: $r2="C"; case 7: $r2.="C"; case 6: $r2.="C"; case 5: $r2="D".$r2; break; case 4: $r2="CD"; break; default: break; } } $aux = (int)($valor/10); if ($aux!==0) { $valor %= 10; switch($aux){ case 3: $r3="X"; case 2: $r3.="X"; case 1: $r3.="X"; break; case 9: $r3="XC"; break; case 8: $r3="X"; case 7: $r3.="X"; case 6: $r3.="X"; case 5: $r3="L".$r3; break; case 4: $r3="XL"; break; default: break; } } switch($valor){ case 3: $r4="I"; case 2: $r4.="I"; case 1: $r4.="I"; break; case 9: $r4="IX"; break; case 8: $r4="I"; case 7: $r4.="I"; case 6: $r4.="I"; case 5: $r4="V".$r4; break; case 4: $r4="IV"; break; default: break; } $roman = $r1.$r2.$r3.$r4; if (!$toupper) $roman = strtolower($roman); return $roman; } function SetImportUse() { $this->enableImports = true; ini_set('auto_detect_line_endings',1); require_once(_MPDF_PATH."mpdfi/pdf_context.php"); require_once(_MPDF_PATH."mpdfi/pdf_parser.php"); require_once(_MPDF_PATH."mpdfi/fpdi_pdf_parser.php"); } function hex2str($hex) { return pack("H*", str_replace(array("\r","\n"," "),"", $hex)); } function str2hex($str) { return current(unpack("H*",$str)); } function pdf_write_value(&$value) { switch ($value[0]) { case PDF_TYPE_NUMERIC : case PDF_TYPE_TOKEN : $this->_out($value[1]." ", false); break; case PDF_TYPE_ARRAY : $this->_out("[",false); for ($i = 0; $i < count($value[1]); $i++) { $this->pdf_write_value($value[1][$i]); } $this->_out("]"); break; case PDF_TYPE_DICTIONARY : $this->_out("<<",false); reset ($value[1]); while (list($k, $v) = each($value[1])) { $this->_out($k . " ",false); $this->pdf_write_value($v); } $this->_out(">>"); break; case PDF_TYPE_OBJREF : $cpfn =& $this->current_parser->filename; if (!isset($this->_don_obj_stack[$cpfn][$value[1]])) { $this->_newobj(false,true); $this->_obj_stack[$cpfn][$value[1]] = array($this->n, $value); $this->_don_obj_stack[$cpfn][$value[1]] = array($this->n, $value); } $objid = $this->_don_obj_stack[$cpfn][$value[1]][0]; $this->_out("{$objid} 0 R"); break; case PDF_TYPE_STRING : if ($this->encrypted) { $value[1] = $this->_RC4($this->_objectkey($this->_current_obj_id), $value[1]); $value[1] = $this->_escape($value[1]); } $this->_out('('.$value[1].')'); break; case PDF_TYPE_STREAM : $this->pdf_write_value($value[1]); if ($this->encrypted) { $value[2][1] = $this->_RC4($this->_objectkey($this->_current_obj_id), $value[2][1]); } $this->_out("stream"); $this->_out($value[2][1]); $this->_out("endstream"); break; case PDF_TYPE_HEX : if ($this->encrypted) { $value[1] = $this->hex2str($value[1]); $value[1] = $this->_RC4($this->_objectkey($this->_current_obj_id), $value[1]); $value[1] = $this->str2hex($value[1]); } $this->_out("<".$value[1].">"); break; case PDF_TYPE_NULL : $this->_out("null"); break; } } function OverWrite($file_in, $search, $replacement, $dest="D", $file_out="mpdf" ) { $pdf = file_get_contents($file_in); if (!is_array($search)) { $x = $search; $search = array($x); } if (!is_array($replacement)) { $x = $replacement; $search = array($x); } if (!$this->onlyCoreFonts && !$this->usingCoreFont) { foreach($search AS $k=>$val) { $search[$k] = $this->UTF8ToUTF16BE($search[$k] , false); $search[$k] = $this->_escape($search[$k]); $replacement[$k] = $this->UTF8ToUTF16BE($replacement[$k], false); $replacement[$k] = $this->_escape($replacement[$k]); } } else { foreach($replacement AS $k=>$val) { $replacement[$k] = mb_convert_encoding($replacement[$k],$this->mb_enc,'utf-8'); $replacement[$k] = $this->_escape($replacement[$k]); } } $xref = array(); preg_match("/xref\n0 (\d+)\n(.*?)\ntrailer/s",$pdf,$m); $xref_objid = $m[1]; preg_match_all('/(\d{10}) (\d{5}) (f|n)/',$m[2],$x); for($i=0; $i<count($x[0]); $i++) { $xref[] = array(intval($x[1][$i]), $x[2][$i], $x[3][$i]); } $changes = array(); preg_match("/<<\s*\/Type\s*\/Pages\s*\/Kids\s*\[(.*?)\]\s*\/Count/s",$pdf,$m); preg_match_all("/(\d+) 0 R /s",$m[1],$o); $objlist = $o[1]; foreach($objlist AS $obj) { if ($this->compress) { preg_match("/".($obj+1)." 0 obj\n<<\s*\/Filter\s*\/FlateDecode\s*\/Length (\d+)>>\nstream\n(.*?)\nendstream\n/s",$pdf,$m); } else { preg_match("/".($obj+1)." 0 obj\n<<\s*\/Length (\d+)>>\nstream\n(.*?)\nendstream\n/s",$pdf,$m); } $s = $m[2]; if (!$s) { continue; } $oldlen = $m[1]; if ($this->encrypted) { $s = $this->_RC4($this->_objectkey($obj+1), $s); } if ($this->compress) { $s = gzuncompress($s); } foreach($search AS $k=>$val) { $s = str_replace($search[$k],$replacement[$k],$s); } if ($this->compress) { $s = gzcompress($s); } if ($this->encrypted) { $s = $this->_RC4($this->_objectkey($obj+1), $s); } $newlen = strlen($s); $changes[($xref[$obj+1][0])] = ($newlen - $oldlen) + (strlen($newlen) - strlen($oldlen )); if ($this->compress) { $newstr = ($obj+1) . " 0 obj\n<</Filter /FlateDecode /Length ".$newlen.">>\nstream\n".$s."\nendstream\n"; } else { $newstr = ($obj+1) . " 0 obj\n<</Length ".$newlen.">>\nstream\n".$s."\nendstream\n"; } $pdf = str_replace($m[0],$newstr,$pdf); } krsort($changes); $newxref = "xref\n0 ".$xref_objid."\n"; foreach($xref AS $v) { foreach($changes AS $ck => $cv) { if ($v[0] > $ck) { $v[0] += $cv; } } $newxref .= sprintf('%010d',$v[0]) . ' ' . $v[1] . ' ' .$v[2] . " \n"; } $newxref .= "trailer"; $pdf = preg_replace("/xref\n0 \d+\n.*?\ntrailer/s",$newxref,$pdf); preg_match("/startxref\n(\d+)\n%%EOF/s", $pdf, $m); $startxref = $m[1]; $startxref += array_sum($changes); $pdf = preg_replace("/startxref\n(\d+)\n%%EOF/s","startxref\n".$startxref."\n%%EOF",$pdf); switch($dest) { case 'I': if(isset($_SERVER['SERVER_NAME'])) { Header('Content-Type: application/pdf'); Header('Content-Length: '.strlen($pdf)); Header('Content-disposition: inline; filename='.$file_out); } echo $pdf; break; case 'F': if (!$file_out) { $file_out = 'mpdf.pdf'; } $f=fopen($file_out,'wb'); if(!$f) die('Unable to create output file: '.$file_out); fwrite($f,$pdf,strlen($pdf)); fclose($f); break; case 'S': return $pdf; case 'D': default: if(isset($_SERVER['HTTP_USER_AGENT']) and strpos($_SERVER['HTTP_USER_AGENT'],'MSIE')) Header('Content-Type: application/force-download'); else Header('Content-Type: application/octet-stream'); Header('Content-Length: '.strlen($pdf)); Header('Content-disposition: attachment; filename='.$file_out); echo $pdf; break; } } function GetTemplateSize($tplidx, $_w=0, $_h=0) { if (!$this->tpls[$tplidx]) return false; $w = $this->tpls[$tplidx]['box']['w']; $h = $this->tpls[$tplidx]['box']['h']; if ($_w == 0 and $_h == 0) { $_w = $w; $_h = $h; } if($_w==0) $_w=$_h*$w/$h; if($_h==0) $_h=$_w*$h/$w; return array("w" => $_w, "h" => $_h); } function Thumbnail($file, $npr=3, $spacing=10) { $w = (($this->pgwidth + $spacing)/$npr) - $spacing; $oldlinewidth = $this->LineWidth; $this->SetLineWidth(0.02); $this->SetDColor($this->ConvertColor(0)); $h = 0; $maxh = 0; $x = $_x = $this->lMargin; $_y = $this->tMargin; if ($this->y==0) { $y = $_y; } else { $y = $this->y; } $pagecount = $this->SetSourceFile($file); for ($n = 1; $n <= $pagecount; $n++) { $tplidx = $this->ImportPage($n); $size = $this->useTemplate($tplidx, $x, $y, $w); $this->Rect($x, $y, $size['w'], $size['h']); $h = max($h, $size['h']); $maxh = max($h, $maxh); if ($n % $npr == 0) { if (($y + $h + $spacing + $maxh)>$this->PageBreakTrigger && $n != $pagecount) { $this->AddPage(); $x = $_x; $y = $_y; } else { $y += $h+$spacing ; $x = $_x; $h = 0; } } else { $x += $w+$spacing ; } } $this->SetLineWidth($oldlinewidth); } function SetSourceFile($filename) { $this->current_filename = $filename; $fn =& $this->current_filename; if (!isset($this->parsers[$fn])) $this->parsers[$fn] = new fpdi_pdf_parser($fn,$this); if (!$this->parsers[$fn]->success) { $this->Error($this->parsers[$fn]->errormsg); return false; } $this->current_parser =& $this->parsers[$fn]; return $this->parsers[$fn]->getPageCount(); } function ImportPage($pageno=1, $crop_x=null, $crop_y=null, $crop_w=0, $crop_h=0, $boxName='/CropBox') { $fn =& $this->current_filename; $parser =& $this->parsers[$fn]; $parser->setPageno($pageno); $this->tpl++; $this->tpls[$this->tpl] = array(); $tpl =& $this->tpls[$this->tpl]; $tpl['parser'] =& $parser; $tpl['resources'] = $parser->getPageResources(); $tpl['buffer'] = $parser->getContent(); if (!in_array($boxName, $parser->availableBoxes)) return $this->Error(sprintf("Unknown box: %s", $boxName)); $pageboxes = $parser->getPageBoxes($pageno); if (!isset($pageboxes[$boxName]) && ($boxName == "/BleedBox" || $boxName == "/TrimBox" || $boxName == "/ArtBox")) $boxName = "/CropBox"; if (!isset($pageboxes[$boxName]) && $boxName == "/CropBox") $boxName = "/MediaBox"; if (!isset($pageboxes[$boxName])) return false; $box = $pageboxes[$boxName]; $tpl['box'] = $box; $this->tpls[$this->tpl] = array_merge($this->tpls[$this->tpl],$box); $tpl['x'] = 0; $tpl['y'] = 0; $tpl['w'] = $tpl['box']['w'] ; $tpl['h'] = $tpl['box']['h'] ; if ($crop_w) { $tpl['box']['w'] = $crop_w; } if ($crop_h) { $tpl['box']['h'] = $crop_h; } if (isset($crop_x)) { $tpl['box']['x'] = $crop_x; } if (isset($crop_y)) {$tpl['box']['y'] = $tpl['h'] - $crop_y - $crop_h ; } $page =& $parser->pages[$parser->pageno]; $rotation = $parser->getPageRotation($pageno); if (isset($rotation[1]) && ($angle = $rotation[1] % 360) != 0 && $tpl['box']['w'] == $tpl['w']) { $steps = $angle / 90; $_w = $tpl['w']; $_h = $tpl['h']; $tpl['w'] = $steps % 2 == 0 ? $_w : $_h; $tpl['h'] = $steps % 2 == 0 ? $_h : $_w; if ($steps % 2 != 0) { $x = $y = ($steps == 1 || $steps == -3) ? $tpl['h'] : $tpl['w']; } else { $x = $tpl['w']; $y = $tpl['h']; } $cx=($x/2+$tpl['box']['x'])*_MPDFK; $cy=($y/2+$tpl['box']['y'])*_MPDFK; $angle*=-1; $angle*=M_PI/180; $c=cos($angle); $s=sin($angle); $tpl['box']['w'] = $tpl['w'] ; $tpl['box']['h'] = $tpl['h'] ; $tpl['buffer'] = sprintf('q %.5F %.5F %.5F %.5F %.2F %.2F cm 1 0 0 1 %.2F %.2F cm %s Q',$c,$s,-$s,$c,$cx,$cy,-$cx,-$cy, $tpl['buffer']); } return $this->tpl; } function UseTemplate($tplidx, $_x=null, $_y=null, $_w=0, $_h=0) { if (!isset($this->tpls[$tplidx])) $this->Error("Template does not exist!"); if($this->state==0) { $this->AddPage(); } $out = 'q 0 J 1 w 0 j 0 G'."\n"; $x = $this->tpls[$tplidx]['x']; $y = $this->tpls[$tplidx]['y']; $w = $this->tpls[$tplidx]['w']; $h = $this->tpls[$tplidx]['h']; if ($_x == null) { $_x = $x; } if ($_y == null) { $_y = $y; } if ($_x === -1) { $_x = $this->x; } if ($_y === -1) { $_y = $this->y; } $wh = $this->getTemplateSize($tplidx,$_w,$_h); $_w = $wh['w']; $_h = $wh['h']; $out .= sprintf("q %.4F 0 0 %.4F %.2F %.2F cm", ($_w/$this->tpls[$tplidx]['box']['w']), ($_h/$this->tpls[$tplidx]['box']['h']), $_x*_MPDFK, ($this->h-($_y+$_h))*_MPDFK)."\n"; $out .= $this->tplprefix.$tplidx." Do Q\n"; $s = array("w" => $_w, "h" => $_h); $out .= "Q\n"; $this->pages[$this->page] = $out . $this->pages[$this->page]; return $s; } function SetPageTemplate($tplidx='') { if (!isset($this->tpls[$tplidx])) { $this->pageTemplate = ''; return false; } $this->pageTemplate = $tplidx; } function SetDocTemplate($file='', $continue=0) { $this->docTemplate = $file; $this->docTemplateContinue = $continue; } function _set_object_javascript ($string) { $this->_newobj(); $this->_out('<<'); $this->_out('/S /JavaScript '); $this->_out('/JS '.$this->_textstring($string)); $this->_out('>>'); $this->_out('endobj'); } function SetJS($script) { $this->js = $script; } } ?>